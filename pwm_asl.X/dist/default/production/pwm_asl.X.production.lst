

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jun 23 16:32:43 2024

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    57                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    58  0000                     
    59                           ; Version 1.45
    60                           ; Generated 16/11/2017 GMT
    61                           ; 
    62                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC18F4620 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     
    94                           	psect	idataCOMRAM
    95  002D0E                     __pidataCOMRAM:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _LCD_INIT_STRING
    99  002D0E  28                 	db	40
   100  002D0F  0C                 	db	12
   101  002D10  01                 	db	1
   102  002D11  06                 	db	6
   103                           
   104                           	psect	mediumconst
   105  00FEEA                     __pmediumconst:
   106                           	opt stack 0
   107  00FEEA  00                 	db	0
   108  00FEEB                     __powers_:
   109                           	opt stack 0
   110  00FEEB  0000               	dw	0
   111  00FEED  3F80               	dw	16256
   112  00FEEF  0000               	dw	0
   113  00FEF1  4120               	dw	16672
   114  00FEF3  0000               	dw	0
   115  00FEF5  42C8               	dw	17096
   116  00FEF7  0000               	dw	0
   117  00FEF9  447A               	dw	17530
   118  00FEFB  4000               	dw	16384
   119  00FEFD  461C               	dw	17948
   120  00FEFF  5000               	dw	20480
   121  00FF01  47C3               	dw	18371
   122  00FF03  2400               	dw	9216
   123  00FF05  4974               	dw	18804
   124  00FF07  9680               	dw	38528
   125  00FF09  4B18               	dw	19224
   126  00FF0B  BC20               	dw	48160
   127  00FF0D  4CBE               	dw	19646
   128  00FF0F  6B28               	dw	27432
   129  00FF11  4E6E               	dw	20078
   130  00FF13  02F9               	dw	761
   131  00FF15  5015               	dw	20501
   132  00FF17  78EC               	dw	30956
   133  00FF19  60AD               	dw	24749
   134  00FF1B  F2CA               	dw	62154
   135  00FF1D  7149               	dw	29001
   136  00FF1F                     __end_of__powers_:
   137                           	opt stack 0
   138  00FF1F                     __npowers_:
   139                           	opt stack 0
   140  00FF1F  0000               	dw	0
   141  00FF21  3F80               	dw	16256
   142  00FF23  CCCD               	dw	52429
   143  00FF25  3DCC               	dw	15820
   144  00FF27  D70A               	dw	55050
   145  00FF29  3C23               	dw	15395
   146  00FF2B  126F               	dw	4719
   147  00FF2D  3A83               	dw	14979
   148  00FF2F  B717               	dw	46871
   149  00FF31  38D1               	dw	14545
   150  00FF33  C5AC               	dw	50604
   151  00FF35  3727               	dw	14119
   152  00FF37  37BD               	dw	14269
   153  00FF39  3586               	dw	13702
   154  00FF3B  BF95               	dw	49045
   155  00FF3D  33D6               	dw	13270
   156  00FF3F  CC77               	dw	52343
   157  00FF41  322B               	dw	12843
   158  00FF43  705F               	dw	28767
   159  00FF45  3089               	dw	12425
   160  00FF47  E6FF               	dw	59135
   161  00FF49  2EDB               	dw	11995
   162  00FF4B  E508               	dw	58632
   163  00FF4D  1E3C               	dw	7740
   164  00FF4F  4260               	dw	16992
   165  00FF51  0DA2               	dw	3490
   166  00FF53                     __end_of__npowers_:
   167                           	opt stack 0
   168  00FF53                     _dpowers:
   169                           	opt stack 0
   170  00FF53  0001               	dw	1
   171  00FF55  0000               	dw	0
   172  00FF57  000A               	dw	10
   173  00FF59  0000               	dw	0
   174  00FF5B  0064               	dw	100
   175  00FF5D  0000               	dw	0
   176  00FF5F  03E8               	dw	1000
   177  00FF61  0000               	dw	0
   178  00FF63  2710               	dw	10000
   179  00FF65  0000               	dw	0
   180  00FF67  86A0               	dw	34464
   181  00FF69  0001               	dw	1
   182  00FF6B  4240               	dw	16960
   183  00FF6D  000F               	dw	15
   184  00FF6F  9680               	dw	38528
   185  00FF71  0098               	dw	152
   186  00FF73  E100               	dw	57600
   187  00FF75  05F5               	dw	1525
   188  00FF77  CA00               	dw	51712
   189  00FF79  3B9A               	dw	15258
   190  00FF7B                     __end_of_dpowers:
   191                           	opt stack 0
   192  0000                     _TXREG	set	4013
   193  0000                     _PIR1bits	set	3998
   194  0000                     _RCREG	set	4014
   195  0000                     _RCSTAbits	set	4011
   196  0000                     _RCSTA	set	4011
   197  0000                     _TXSTAbits	set	4012
   198  0000                     _SPBRGH	set	4016
   199  0000                     _SPBRG	set	4015
   200  0000                     _TXSTA	set	4012
   201  0000                     _BAUDCONbits	set	4024
   202  0000                     _CCP1CONbits	set	4029
   203  0000                     _CCPR1L	set	4030
   204  0000                     _TRISCbits	set	3988
   205  0000                     _CCP1CON	set	4029
   206  0000                     _T2CONbits	set	4042
   207  0000                     _T2CON	set	4042
   208  0000                     _PR2	set	4043
   209  0000                     _ADRESL	set	4035
   210  0000                     _ADRESH	set	4036
   211  0000                     _ADCON2	set	4032
   212  0000                     _ADCON0bits	set	4034
   213  0000                     _PORTEbits	set	3972
   214  0000                     _PORTCbits	set	3970
   215  0000                     _PORTBbits	set	3969
   216  0000                     _PIE2bits	set	4000
   217  0000                     _IPR2	set	4002
   218  0000                     _PIR2	set	4001
   219  0000                     _PIE2	set	4000
   220  0000                     _IPR1	set	3999
   221  0000                     _PIR1	set	3998
   222  0000                     _PIE1	set	3997
   223  0000                     _INTCON2bits	set	4081
   224  0000                     _T3CONbits	set	4017
   225  0000                     _T3CON	set	4017
   226  0000                     _PIR2bits	set	4001
   227  0000                     _INTCON3bits	set	4080
   228  0000                     _INTCONbits	set	4082
   229  0000                     _RCONbits	set	4048
   230  0000                     _INTCON	set	4082
   231  0000                     _TRISE	set	3990
   232  0000                     _TRISD	set	3989
   233  0000                     _TRISA	set	3986
   234  0000                     _TRISC	set	3988
   235  0000                     _TRISB	set	3987
   236  0000                     _ADCON1	set	4033
   237  0000                     _ADCON0	set	4034
   238  0000                     _INTCON2	set	4081
   239  00FF7B                     STR_1:
   240  00FF7B  4F                 	db	79	;'O'
   241  00FF7C  46                 	db	70	;'F'
   242  00FF7D  46                 	db	70	;'F'
   243  00FF7E  20                 	db	32
   244  00FF7F  20                 	db	32
   245  00FF80  20                 	db	32
   246  00FF81  20                 	db	32
   247  00FF82  20                 	db	32
   248  00FF83  20                 	db	32
   249  00FF84  20                 	db	32
   250  00FF85  20                 	db	32
   251  00FF86  20                 	db	32
   252  00FF87  20                 	db	32
   253  00FF88  20                 	db	32
   254  00FF89  20                 	db	32
   255  00FF8A  20                 	db	32
   256  00FF8B  20                 	db	32
   257  00FF8C  20                 	db	32
   258  00FF8D  20                 	db	32
   259  00FF8E  20                 	db	32
   260  00FF8F  00                 	db	0
   261  00FF90                     STR_2:
   262  00FF90  43                 	db	67	;'C'
   263  00FF91  6F                 	db	111	;'o'
   264  00FF92  6F                 	db	111	;'o'
   265  00FF93  6C                 	db	108	;'l'
   266  00FF94  20                 	db	32
   267  00FF95  20                 	db	32
   268  00FF96  20                 	db	32
   269  00FF97  20                 	db	32
   270  00FF98  20                 	db	32
   271  00FF99  20                 	db	32
   272  00FF9A  20                 	db	32
   273  00FF9B  20                 	db	32
   274  00FF9C  20                 	db	32
   275  00FF9D  20                 	db	32
   276  00FF9E  20                 	db	32
   277  00FF9F  20                 	db	32
   278  00FFA0  20                 	db	32
   279  00FFA1  20                 	db	32
   280  00FFA2  20                 	db	32
   281  00FFA3  20                 	db	32
   282  00FFA4  00                 	db	0
   283  00FFA5                     STR_3:
   284  00FFA5  48                 	db	72	;'H'
   285  00FFA6  65                 	db	101	;'e'
   286  00FFA7  61                 	db	97	;'a'
   287  00FFA8  74                 	db	116	;'t'
   288  00FFA9  20                 	db	32
   289  00FFAA  20                 	db	32
   290  00FFAB  20                 	db	32
   291  00FFAC  20                 	db	32
   292  00FFAD  20                 	db	32
   293  00FFAE  20                 	db	32
   294  00FFAF  20                 	db	32
   295  00FFB0  20                 	db	32
   296  00FFB1  20                 	db	32
   297  00FFB2  20                 	db	32
   298  00FFB3  20                 	db	32
   299  00FFB4  20                 	db	32
   300  00FFB5  20                 	db	32
   301  00FFB6  20                 	db	32
   302  00FFB7  20                 	db	32
   303  00FFB8  20                 	db	32
   304  00FFB9  00                 	db	0
   305  00FFBA                     STR_4:
   306  00FFBA  41                 	db	65	;'A'
   307  00FFBB  75                 	db	117	;'u'
   308  00FFBC  74                 	db	116	;'t'
   309  00FFBD  6F                 	db	111	;'o'
   310  00FFBE  20                 	db	32
   311  00FFBF  43                 	db	67	;'C'
   312  00FFC0  6F                 	db	111	;'o'
   313  00FFC1  6F                 	db	111	;'o'
   314  00FFC2  6C                 	db	108	;'l'
   315  00FFC3  20                 	db	32
   316  00FFC4  20                 	db	32
   317  00FFC5  20                 	db	32
   318  00FFC6  20                 	db	32
   319  00FFC7  20                 	db	32
   320  00FFC8  20                 	db	32
   321  00FFC9  20                 	db	32
   322  00FFCA  20                 	db	32
   323  00FFCB  20                 	db	32
   324  00FFCC  00                 	db	0
   325  00FFCD                     STR_7:
   326  00FFCD  53                 	db	83	;'S'
   327  00FFCE  50                 	db	80	;'P'
   328  00FFCF  3A                 	db	58	;':'
   329  00FFD0  20                 	db	32
   330  00FFD1  25                 	db	37
   331  00FFD2  34                 	db	52	;'4'
   332  00FFD3  2E                 	db	46
   333  00FFD4  31                 	db	49	;'1'
   334  00FFD5  66                 	db	102	;'f'
   335  00FFD6  43                 	db	67	;'C'
   336  00FFD7  20                 	db	32
   337  00FFD8  00                 	db	0
   338  00FFD9                     STR_9:
   339  00FFD9  48                 	db	72	;'H'
   340  00FFDA  43                 	db	67	;'C'
   341  00FFDB  3A                 	db	58	;':'
   342  00FFDC  20                 	db	32
   343  00FFDD  25                 	db	37
   344  00FFDE  34                 	db	52	;'4'
   345  00FFDF  2E                 	db	46
   346  00FFE0  31                 	db	49	;'1'
   347  00FFE1  66                 	db	102	;'f'
   348  00FFE2  25                 	db	37
   349  00FFE3  25                 	db	37
   350  00FFE4  00                 	db	0
   351  00FFE5                     STR_5:
   352  00FFE5  52                 	db	82	;'R'
   353  00FFE6  54                 	db	84	;'T'
   354  00FFE7  3A                 	db	58	;':'
   355  00FFE8  20                 	db	32
   356  00FFE9  25                 	db	37
   357  00FFEA  34                 	db	52	;'4'
   358  00FFEB  2E                 	db	46
   359  00FFEC  31                 	db	49	;'1'
   360  00FFED  66                 	db	102	;'f'
   361  00FFEE  43                 	db	67	;'C'
   362  00FFEF  00                 	db	0
   363  00FFF0                     STR_8:
   364  00FFF0  48                 	db	72	;'H'
   365  00FFF1  53                 	db	83	;'S'
   366  00FFF2  3A                 	db	58	;':'
   367  00FFF3  20                 	db	32
   368  00FFF4  25                 	db	37
   369  00FFF5  64                 	db	100	;'d'
   370  00FFF6  00                 	db	0
   371  00FFF7                     STR_10:
   372  00FFF7  4D                 	db	77	;'M'
   373  00FFF8  44                 	db	68	;'D'
   374  00FFF9  3A                 	db	58	;':'
   375  00FFFA  00                 	db	0
   376  00FFFB                     STR_6:
   377  00FFFB  48                 	db	72	;'H'
   378  00FFFC  20                 	db	32
   379  00FFFD  43                 	db	67	;'C'
   380  00FFFE  00                 	db	0
   381                           
   382                           ; #config settings
   383  00FFFF  00                 	db	0	; dummy byte at the end
   384  0000                     
   385                           	psect	cinit
   386  002A18                     __pcinit:
   387                           	opt stack 0
   388  002A18                     start_initialization:
   389                           	opt stack 0
   390  002A18                     __initialization:
   391                           	opt stack 0
   392                           
   393                           ; Initialize objects allocated to COMRAM (4 bytes)
   394                           ; load TBLPTR registers with __pidataCOMRAM
   395  002A18  0E0E               	movlw	low __pidataCOMRAM
   396  002A1A  6EF6               	movwf	tblptrl,c
   397  002A1C  0E2D               	movlw	high __pidataCOMRAM
   398  002A1E  6EF7               	movwf	tblptrh,c
   399  002A20  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   400  002A22  6EF8               	movwf	tblptru,c
   401  002A24  EE00  F060         	lfsr	0,__pdataCOMRAM
   402  002A28  EE10 F004          	lfsr	1,4
   403  002A2C                     copy_data0:
   404  002A2C  0009               	tblrd		*+
   405  002A2E  CFF5 FFEE          	movff	tablat,postinc0
   406  002A32  50E5               	movf	postdec1,w,c
   407  002A34  50E1               	movf	fsr1l,w,c
   408  002A36  E1FA               	bnz	copy_data0
   409                           
   410                           ; Clear objects allocated to BANK1 (12 bytes)
   411  002A38  EE01  F0A1         	lfsr	0,__pbssBANK1
   412  002A3C  0E0C               	movlw	12
   413  002A3E                     clear_0:
   414  002A3E  6AEE               	clrf	postinc0,c
   415  002A40  06E8               	decf	wreg,f,c
   416  002A42  E1FD               	bnz	clear_0
   417                           
   418                           ; Clear objects allocated to BANK0 (32 bytes)
   419  002A44  EE00  F0D3         	lfsr	0,__pbssBANK0
   420  002A48  0E20               	movlw	32
   421  002A4A                     clear_1:
   422  002A4A  6AEE               	clrf	postinc0,c
   423  002A4C  06E8               	decf	wreg,f,c
   424  002A4E  E1FD               	bnz	clear_1
   425                           
   426                           ; Clear objects allocated to COMRAM (22 bytes)
   427  002A50  EE00  F04A         	lfsr	0,__pbssCOMRAM
   428  002A54  0E16               	movlw	22
   429  002A56                     clear_2:
   430  002A56  6AEE               	clrf	postinc0,c
   431  002A58  06E8               	decf	wreg,f,c
   432  002A5A  E1FD               	bnz	clear_2
   433  002A5C                     end_of_initialization:
   434                           	opt stack 0
   435  002A5C                     __end_of__initialization:
   436                           	opt stack 0
   437  002A5C  9064               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   438  002A5E  9264               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   439  002A60  0E00               	movlw	low (__Lmediumconst shr (0+16))
   440  002A62  6EF8               	movwf	tblptru,c
   441  002A64  0100               	movlb	0
   442  002A66  EF36  F012         	goto	_main	;jump to C main() function
   443                           tblptru	equ	0xFF8
   444                           tblptrh	equ	0xFF7
   445                           tblptrl	equ	0xFF6
   446                           tablat	equ	0xFF5
   447                           postinc0	equ	0xFEE
   448                           wreg	equ	0xFE8
   449                           postdec1	equ	0xFE5
   450                           fsr1l	equ	0xFE1
   451                           
   452                           	psect	bssCOMRAM
   453  00004A                     __pbssCOMRAM:
   454                           	opt stack 0
   455  00004A                     _AN:
   456                           	opt stack 0
   457  00004A                     	ds	12
   458  000056                     _ft:
   459                           	opt stack 0
   460  000056                     	ds	2
   461  000058                     _RPS:
   462                           	opt stack 0
   463  000058                     	ds	2
   464  00005A                     _RPS_count:
   465                           	opt stack 0
   466  00005A                     	ds	2
   467  00005C                     _raw_val:
   468                           	opt stack 0
   469  00005C                     	ds	2
   470  00005E                     _mode:
   471                           	opt stack 0
   472  00005E                     	ds	1
   473  00005F                     _HS:
   474                           	opt stack 0
   475  00005F                     	ds	1
   476                           tblptru	equ	0xFF8
   477                           tblptrh	equ	0xFF7
   478                           tblptrl	equ	0xFF6
   479                           tablat	equ	0xFF5
   480                           postinc0	equ	0xFEE
   481                           wreg	equ	0xFE8
   482                           postdec1	equ	0xFE5
   483                           fsr1l	equ	0xFE1
   484                           
   485                           	psect	dataCOMRAM
   486  000060                     __pdataCOMRAM:
   487                           	opt stack 0
   488  000060                     _LCD_INIT_STRING:
   489                           	opt stack 0
   490  000060                     	ds	4
   491                           tblptru	equ	0xFF8
   492                           tblptrh	equ	0xFF7
   493                           tblptrl	equ	0xFF6
   494                           tablat	equ	0xFF5
   495                           postinc0	equ	0xFEE
   496                           wreg	equ	0xFE8
   497                           postdec1	equ	0xFE5
   498                           fsr1l	equ	0xFE1
   499                           
   500                           	psect	bssBANK0
   501  0000D3                     __pbssBANK0:
   502                           	opt stack 0
   503  0000D3                     _Buffer:
   504                           	opt stack 0
   505  0000D3                     	ds	32
   506                           tblptru	equ	0xFF8
   507                           tblptrh	equ	0xFF7
   508                           tblptrl	equ	0xFF6
   509                           tablat	equ	0xFF5
   510                           postinc0	equ	0xFEE
   511                           wreg	equ	0xFE8
   512                           postdec1	equ	0xFE5
   513                           fsr1l	equ	0xFE1
   514                           
   515                           	psect	bssBANK1
   516  0001A1                     __pbssBANK1:
   517                           	opt stack 0
   518  0001A1                     _sp:
   519                           	opt stack 0
   520  0001A1                     	ds	4
   521  0001A5                     _temp:
   522                           	opt stack 0
   523  0001A5                     	ds	4
   524  0001A9                     _HC:
   525                           	opt stack 0
   526  0001A9                     	ds	4
   527                           tblptru	equ	0xFF8
   528                           tblptrh	equ	0xFF7
   529                           tblptrl	equ	0xFF6
   530                           tablat	equ	0xFF5
   531                           postinc0	equ	0xFEE
   532                           wreg	equ	0xFE8
   533                           postdec1	equ	0xFE5
   534                           fsr1l	equ	0xFE1
   535                           
   536                           	psect	cstackBANK1
   537  000100                     __pcstackBANK1:
   538                           	opt stack 0
   539  000100                     _sprintf$1935:
   540                           	opt stack 0
   541                           
   542                           ; 4 bytes @ 0x0
   543  000100                     	ds	4
   544  000104                     sprintf@cp:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0x4
   548  000104                     	ds	2
   549  000106                     sprintf@ap:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x6
   553  000106                     	ds	2
   554  000108                     sprintf@len:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x8
   558  000108                     	ds	2
   559  00010A                     sprintf@flag:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0xA
   563  00010A                     	ds	2
   564  00010C                     sprintf@tmpval:
   565                           	opt stack 0
   566                           
   567                           ; 4 bytes @ 0xC
   568  00010C                     	ds	4
   569  000110                     sprintf@val:
   570                           	opt stack 0
   571                           
   572                           ; 4 bytes @ 0x10
   573  000110                     	ds	4
   574  000114                     sprintf@exp:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x14
   578  000114                     	ds	2
   579  000116                     sprintf@width:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x16
   583  000116                     	ds	2
   584  000118                     sprintf@fval:
   585                           	opt stack 0
   586                           
   587                           ; 4 bytes @ 0x18
   588  000118                     	ds	4
   589  00011C                     sprintf@prec:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x1C
   593  00011C                     	ds	2
   594  00011E                     sprintf@c:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0x1E
   598  00011E                     	ds	1
   599  00011F                     display@LCDP:
   600                           	opt stack 0
   601                           
   602                           ; 64 bytes @ 0x1F
   603  00011F                     	ds	64
   604  00015F                     display@LCD:
   605                           	opt stack 0
   606                           
   607                           ; 64 bytes @ 0x5F
   608  00015F                     	ds	64
   609  00019F                     display@C:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0x9F
   613  00019F                     	ds	1
   614  0001A0                     display@H:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0xA0
   618  0001A0                     	ds	1
   619                           tblptru	equ	0xFF8
   620                           tblptrh	equ	0xFF7
   621                           tblptrl	equ	0xFF6
   622                           tablat	equ	0xFF5
   623                           postinc0	equ	0xFEE
   624                           wreg	equ	0xFE8
   625                           postdec1	equ	0xFE5
   626                           fsr1l	equ	0xFE1
   627                           
   628                           	psect	cstackBANK0
   629  000080                     __pcstackBANK0:
   630                           	opt stack 0
   631  000080                     ?_read_adc_voltage:
   632                           	opt stack 0
   633  000080                     ?___flmul:
   634                           	opt stack 0
   635  000080                     ___flmul@b:
   636                           	opt stack 0
   637                           
   638                           ; 4 bytes @ 0x0
   639  000080                     	ds	4
   640  000084                     read_adc_voltage@voltage:
   641                           	opt stack 0
   642  000084                     ___flmul@a:
   643                           	opt stack 0
   644                           
   645                           ; 4 bytes @ 0x4
   646  000084                     	ds	4
   647  000088                     ??___flmul:
   648  000088                     read_adc_voltage@channel:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x8
   652  000088                     	ds	1
   653  000089                     read_adc_voltage@raw_value:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x9
   657  000089                     	ds	3
   658  00008C                     ___flmul@sign:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0xC
   662  00008C                     	ds	1
   663  00008D                     ___flmul@aexp:
   664                           	opt stack 0
   665                           
   666                           ; 1 bytes @ 0xD
   667  00008D                     	ds	1
   668  00008E                     ___flmul@grs:
   669                           	opt stack 0
   670                           
   671                           ; 4 bytes @ 0xE
   672  00008E                     	ds	4
   673  000092                     ___flmul@bexp:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0x12
   677  000092                     	ds	1
   678  000093                     ___flmul@prod:
   679                           	opt stack 0
   680                           
   681                           ; 4 bytes @ 0x13
   682  000093                     	ds	4
   683  000097                     ___flmul@temp:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x17
   687  000097                     	ds	2
   688  000099                     ?_fround:
   689                           	opt stack 0
   690  000099                     ?_scale:
   691                           	opt stack 0
   692                           
   693                           ; 4 bytes @ 0x19
   694  000099                     	ds	4
   695  00009D                     _fround$1933:
   696                           	opt stack 0
   697  00009D                     _scale$1934:
   698                           	opt stack 0
   699                           
   700                           ; 4 bytes @ 0x1D
   701  00009D                     	ds	4
   702  0000A1                     scale@scl:
   703                           	opt stack 0
   704  0000A1                     _fround$1932:
   705                           	opt stack 0
   706                           
   707                           ; 4 bytes @ 0x21
   708  0000A1                     	ds	1
   709  0000A2                     ?___fltol:
   710                           	opt stack 0
   711  0000A2                     ___fltol@f1:
   712                           	opt stack 0
   713                           
   714                           ; 4 bytes @ 0x22
   715  0000A2                     	ds	3
   716  0000A5                     fround@prec:
   717                           	opt stack 0
   718                           
   719                           ; 1 bytes @ 0x25
   720  0000A5                     	ds	1
   721  0000A6                     ??___fltol:
   722  0000A6                     ?___fladd:
   723                           	opt stack 0
   724  0000A6                     ___fladd@b:
   725                           	opt stack 0
   726                           
   727                           ; 4 bytes @ 0x26
   728  0000A6                     	ds	4
   729  0000AA                     ___fladd@a:
   730                           	opt stack 0
   731                           
   732                           ; 4 bytes @ 0x2A
   733  0000AA                     	ds	4
   734  0000AE                     ??___fladd:
   735                           
   736                           ; 1 bytes @ 0x2E
   737  0000AE                     	ds	8
   738  0000B6                     ___fladd@signs:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x36
   742  0000B6                     	ds	1
   743  0000B7                     ___fladd@aexp:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x37
   747  0000B7                     	ds	1
   748  0000B8                     ___fladd@bexp:
   749                           	opt stack 0
   750                           
   751                           ; 1 bytes @ 0x38
   752  0000B8                     	ds	1
   753  0000B9                     ___fladd@grs:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x39
   757  0000B9                     	ds	1
   758  0000BA                     ?___flsub:
   759                           	opt stack 0
   760  0000BA                     ___flsub@b:
   761                           	opt stack 0
   762                           
   763                           ; 4 bytes @ 0x3A
   764  0000BA                     	ds	4
   765  0000BE                     ___flsub@a:
   766                           	opt stack 0
   767                           
   768                           ; 4 bytes @ 0x3E
   769  0000BE                     	ds	4
   770  0000C2                     ?_sprintf:
   771                           	opt stack 0
   772  0000C2                     sprintf@sp:
   773                           	opt stack 0
   774                           
   775                           ; 2 bytes @ 0x42
   776  0000C2                     	ds	2
   777  0000C4                     sprintf@f:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x44
   781  0000C4                     	ds	6
   782  0000CA                     ??_sprintf:
   783                           
   784                           ; 1 bytes @ 0x4A
   785  0000CA                     	ds	4
   786  0000CE                     main@voltage:
   787                           	opt stack 0
   788                           
   789                           ; 4 bytes @ 0x4E
   790  0000CE                     	ds	4
   791  0000D2                     main@channel:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x52
   795  0000D2                     	ds	1
   796                           tblptru	equ	0xFF8
   797                           tblptrh	equ	0xFF7
   798                           tblptrl	equ	0xFF6
   799                           tablat	equ	0xFF5
   800                           postinc0	equ	0xFEE
   801                           wreg	equ	0xFE8
   802                           postdec1	equ	0xFE5
   803                           fsr1l	equ	0xFE1
   804                           
   805                           	psect	cstackCOMRAM
   806  000001                     __pcstackCOMRAM:
   807                           	opt stack 0
   808  000001                     ?i2___awmod:
   809                           	opt stack 0
   810  000001                     i2___awmod@dividend:
   811                           	opt stack 0
   812                           
   813                           ; 2 bytes @ 0x0
   814  000001                     	ds	2
   815  000003                     i2___awmod@divisor:
   816                           	opt stack 0
   817                           
   818                           ; 2 bytes @ 0x2
   819  000003                     	ds	2
   820  000005                     i2___awmod@counter:
   821                           	opt stack 0
   822                           
   823                           ; 1 bytes @ 0x4
   824  000005                     	ds	1
   825  000006                     i2___awmod@sign:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x5
   829  000006                     	ds	1
   830  000007                     ??_highIsr:
   831                           
   832                           ; 1 bytes @ 0x6
   833  000007                     	ds	20
   834  00001B                     ??_isdigit:
   835  00001B                     ??_delay_cycles:
   836  00001B                     ?_read_adc_raw_no_lib:
   837                           	opt stack 0
   838  00001B                     ?___wmul:
   839                           	opt stack 0
   840  00001B                     ?___awmod:
   841                           	opt stack 0
   842  00001B                     ?__tdiv_to_l_:
   843                           	opt stack 0
   844  00001B                     ?__div_to_l_:
   845                           	opt stack 0
   846  00001B                     ?___flneg:
   847                           	opt stack 0
   848  00001B                     ?___lldiv:
   849                           	opt stack 0
   850  00001B                     delay_ms@n:
   851                           	opt stack 0
   852  00001B                     set_pwm1_raw@raw_value:
   853                           	opt stack 0
   854  00001B                     ___wmul@multiplier:
   855                           	opt stack 0
   856  00001B                     ___awmod@dividend:
   857                           	opt stack 0
   858  00001B                     __div_to_l_@f1:
   859                           	opt stack 0
   860  00001B                     ___flge@ff1:
   861                           	opt stack 0
   862  00001B                     ___flneg@f1:
   863                           	opt stack 0
   864  00001B                     __tdiv_to_l_@f1:
   865                           	opt stack 0
   866  00001B                     ___lldiv@dividend:
   867                           	opt stack 0
   868                           
   869                           ; 4 bytes @ 0x1A
   870  00001B                     	ds	1
   871  00001C                     _isdigit$1559:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x1B
   875  00001C                     	ds	1
   876  00001D                     ??_set_pwm1_raw:
   877  00001D                     ??_read_adc_raw_no_lib:
   878  00001D                     isdigit@c:
   879                           	opt stack 0
   880  00001D                     delay_ms@x:
   881                           	opt stack 0
   882  00001D                     ___wmul@multiplicand:
   883                           	opt stack 0
   884  00001D                     ___awmod@divisor:
   885                           	opt stack 0
   886                           
   887                           ; 2 bytes @ 0x1C
   888  00001D                     	ds	1
   889  00001E                     delay_cycles@n:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x1D
   893  00001E                     	ds	1
   894  00001F                     read_adc_raw_no_lib@channel:
   895                           	opt stack 0
   896  00001F                     ___awmod@counter:
   897                           	opt stack 0
   898  00001F                     delay_cycles@x:
   899                           	opt stack 0
   900  00001F                     ___wmul@product:
   901                           	opt stack 0
   902  00001F                     __div_to_l_@f2:
   903                           	opt stack 0
   904  00001F                     ___flge@ff2:
   905                           	opt stack 0
   906  00001F                     __tdiv_to_l_@f2:
   907                           	opt stack 0
   908  00001F                     ___lldiv@divisor:
   909                           	opt stack 0
   910                           
   911                           ; 4 bytes @ 0x1E
   912  00001F                     	ds	1
   913  000020                     ___awmod@sign:
   914                           	opt stack 0
   915  000020                     read_adc_raw_no_lib@raw_value:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x1F
   919  000020                     	ds	1
   920  000021                     ??_lcd_send_nibble:
   921  000021                     ?___awdiv:
   922                           	opt stack 0
   923  000021                     ?___xxtofl:
   924                           	opt stack 0
   925  000021                     ___awdiv@dividend:
   926                           	opt stack 0
   927  000021                     ___xxtofl@val:
   928                           	opt stack 0
   929                           
   930                           ; 4 bytes @ 0x20
   931  000021                     	ds	1
   932  000022                     lcd_send_nibble@n:
   933                           	opt stack 0
   934                           
   935                           ; 1 bytes @ 0x21
   936  000022                     	ds	1
   937  000023                     ??__tdiv_to_l_:
   938  000023                     ??___flge:
   939  000023                     lcd_send_byte@n:
   940                           	opt stack 0
   941  000023                     ___awdiv@divisor:
   942                           	opt stack 0
   943  000023                     __div_to_l_@quot:
   944                           	opt stack 0
   945  000023                     ___lldiv@quotient:
   946                           	opt stack 0
   947                           
   948                           ; 4 bytes @ 0x22
   949  000023                     	ds	1
   950  000024                     lcd_send_byte@cm_data:
   951                           	opt stack 0
   952                           
   953                           ; 1 bytes @ 0x23
   954  000024                     	ds	1
   955  000025                     ??___xxtofl:
   956  000025                     lcd_init@i:
   957                           	opt stack 0
   958  000025                     lcd_gotoxy@y:
   959                           	opt stack 0
   960  000025                     ___awdiv@counter:
   961                           	opt stack 0
   962                           
   963                           ; 1 bytes @ 0x24
   964  000025                     	ds	1
   965  000026                     lcd_gotoxy@x:
   966                           	opt stack 0
   967  000026                     ___awdiv@sign:
   968                           	opt stack 0
   969  000026                     __tdiv_to_l_@quot:
   970                           	opt stack 0
   971                           
   972                           ; 4 bytes @ 0x25
   973  000026                     	ds	1
   974  000027                     lcd_gotoxy@address:
   975                           	opt stack 0
   976  000027                     __div_to_l_@cntr:
   977                           	opt stack 0
   978  000027                     ___lldiv@counter:
   979                           	opt stack 0
   980  000027                     ___awdiv@quotient:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x26
   984  000027                     	ds	1
   985  000028                     ?___llmod:
   986                           	opt stack 0
   987  000028                     lcd_putc@c:
   988                           	opt stack 0
   989  000028                     __div_to_l_@exp1:
   990                           	opt stack 0
   991  000028                     ___llmod@dividend:
   992                           	opt stack 0
   993                           
   994                           ; 4 bytes @ 0x27
   995  000028                     	ds	1
   996  000029                     ___xxtofl@sign:
   997                           	opt stack 0
   998  000029                     lcd_puts@s:
   999                           	opt stack 0
  1000                           
  1001                           ; 2 bytes @ 0x28
  1002  000029                     	ds	1
  1003  00002A                     __tdiv_to_l_@cntr:
  1004                           	opt stack 0
  1005  00002A                     ___xxtofl@exp:
  1006                           	opt stack 0
  1007                           
  1008                           ; 1 bytes @ 0x29
  1009  00002A                     	ds	1
  1010  00002B                     __tdiv_to_l_@exp1:
  1011                           	opt stack 0
  1012  00002B                     ___xxtofl@arg:
  1013                           	opt stack 0
  1014                           
  1015                           ; 4 bytes @ 0x2A
  1016  00002B                     	ds	1
  1017  00002C                     ___llmod@divisor:
  1018                           	opt stack 0
  1019                           
  1020                           ; 4 bytes @ 0x2B
  1021  00002C                     	ds	3
  1022  00002F                     ?___fldiv:
  1023                           	opt stack 0
  1024  00002F                     ___fldiv@b:
  1025                           	opt stack 0
  1026                           
  1027                           ; 4 bytes @ 0x2E
  1028  00002F                     	ds	1
  1029  000030                     ___llmod@counter:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0x2F
  1033  000030                     	ds	3
  1034  000033                     ___fldiv@a:
  1035                           	opt stack 0
  1036                           
  1037                           ; 4 bytes @ 0x32
  1038  000033                     	ds	4
  1039  000037                     ??___fldiv:
  1040                           
  1041                           ; 1 bytes @ 0x36
  1042  000037                     	ds	4
  1043  00003B                     ___fldiv@sign:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0x3A
  1047  00003B                     	ds	1
  1048  00003C                     ___fldiv@rem:
  1049                           	opt stack 0
  1050                           
  1051                           ; 4 bytes @ 0x3B
  1052  00003C                     	ds	4
  1053  000040                     ___fldiv@new_exp:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x3F
  1057  000040                     	ds	2
  1058  000042                     ___fldiv@grs:
  1059                           	opt stack 0
  1060                           
  1061                           ; 4 bytes @ 0x41
  1062  000042                     	ds	4
  1063  000046                     ___fldiv@bexp:
  1064                           	opt stack 0
  1065                           
  1066                           ; 1 bytes @ 0x45
  1067  000046                     	ds	1
  1068  000047                     ___fldiv@aexp:
  1069                           	opt stack 0
  1070                           
  1071                           ; 1 bytes @ 0x46
  1072  000047                     	ds	1
  1073  000048                     ___fltol@sign1:
  1074                           	opt stack 0
  1075                           
  1076                           ; 1 bytes @ 0x47
  1077  000048                     	ds	1
  1078  000049                     ___fltol@exp1:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x48
  1082  000049                     	ds	1
  1083  00004A                     tblptru	equ	0xFF8
  1084                           tblptrh	equ	0xFF7
  1085                           tblptrl	equ	0xFF6
  1086                           tablat	equ	0xFF5
  1087                           postinc0	equ	0xFEE
  1088                           wreg	equ	0xFE8
  1089                           postdec1	equ	0xFE5
  1090                           fsr1l	equ	0xFE1
  1091                           
  1092                           ; 1 bytes @ 0x49
  1093 ;;
  1094 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1095 ;;
  1096 ;; *************** function _main *****************
  1097 ;; Defined at:
  1098 ;;		line 274 in file "pwm_asl.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;		None
  1101 ;; Auto vars:     Size  Location     Type
  1102 ;;  voltage         4   78[BANK0 ] float 
  1103 ;;  channel         1   82[BANK0 ] unsigned char 
  1104 ;; Return value:  Size  Location     Type
  1105 ;;                  1    wreg      void 
  1106 ;; Registers used:
  1107 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1108 ;; Tracked objects:
  1109 ;;		On entry : 0/0
  1110 ;;		On exit  : 0/0
  1111 ;;		Unchanged: 0/0
  1112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1114 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1116 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1117 ;;Total ram usage:        5 bytes
  1118 ;; Hardware stack levels required when called:    9
  1119 ;; This function calls:
  1120 ;;		___flmul
  1121 ;;		_delay_ms
  1122 ;;		_display
  1123 ;;		_initInterrupts
  1124 ;;		_init_adc_no_lib
  1125 ;;		_init_pwm1
  1126 ;;		_lcd_init
  1127 ;;		_lcd_putc
  1128 ;;		_operation
  1129 ;;		_read_adc_voltage
  1130 ;;		_setupPorts
  1131 ;; This function is called by:
  1132 ;;		Startup code after reset
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136                           	psect	text0
  1137  00246C                     __ptext0:
  1138                           	opt stack 0
  1139  00246C                     _main:
  1140                           	opt stack 22
  1141                           
  1142                           ;pwm_asl.c: 275: unsigned char channel;
  1143                           ;pwm_asl.c: 276: float voltage;
  1144                           ;pwm_asl.c: 277: setupPorts();
  1145                           
  1146                           ;incstack = 0
  1147  00246C  EC57  F016         	call	_setupPorts	;wreg free
  1148                           
  1149                           ;pwm_asl.c: 278: initInterrupts();
  1150  002470  EC9E  F015         	call	_initInterrupts	;wreg free
  1151                           
  1152                           ;pwm_asl.c: 279: lcd_init();
  1153  002474  EC85  F014         	call	_lcd_init	;wreg free
  1154                           
  1155                           ;pwm_asl.c: 280: init_adc_no_lib();
  1156  002478  EC81  F016         	call	_init_adc_no_lib	;wreg free
  1157                           
  1158                           ;pwm_asl.c: 281: init_pwm1();
  1159  00247C  EC75  F016         	call	_init_pwm1	;wreg free
  1160                           
  1161                           ;pwm_asl.c: 282: lcd_putc('\f');
  1162  002480  0E0C               	movlw	12
  1163  002482  ECE1  F014         	call	_lcd_putc
  1164                           
  1165                           ;pwm_asl.c: 283: mode = OFF;
  1166  002486  0E00               	movlw	0
  1167  002488  6E5E               	movwf	_mode,c
  1168                           
  1169                           ;pwm_asl.c: 284: HS = HS_0;
  1170  00248A  0E00               	movlw	0
  1171  00248C  6E5F               	movwf	_HS,c
  1172  00248E                     l139:
  1173  00248E  0004               	clrwdt		;# 
  1174                           
  1175                           ;pwm_asl.c: 287: delay_ms(200);
  1176  002490  0E00               	movlw	0
  1177  002492  6E1C               	movwf	delay_ms@n+1,c
  1178  002494  0EC8               	movlw	200
  1179  002496  6E1B               	movwf	delay_ms@n,c
  1180  002498  EC33  F016         	call	_delay_ms	;wreg free
  1181                           
  1182                           ;pwm_asl.c: 288: for (channel = 0; channel < 3; channel++) {
  1183  00249C  0E00               	movlw	0
  1184  00249E  0100               	movlb	0	; () banked
  1185  0024A0  6FD2               	movwf	main@channel& (0+255),b
  1186  0024A2                     l5783:
  1187                           
  1188                           ; BSR set to: 0
  1189  0024A2  0E02               	movlw	2
  1190  0024A4  65D2               	cpfsgt	main@channel& (0+255),b
  1191  0024A6  D001               	goto	l140
  1192  0024A8  D01E               	goto	u6720
  1193  0024AA                     l140:
  1194                           
  1195                           ; BSR set to: 0
  1196                           ;pwm_asl.c: 289: voltage = read_adc_voltage((unsigned char) channel);
  1197                           
  1198                           ; BSR set to: 0
  1199  0024AA  51D2               	movf	main@channel& (0+255),w,b
  1200  0024AC  EC1C  F013         	call	_read_adc_voltage
  1201  0024B0  C080  F0CE         	movff	?_read_adc_voltage,main@voltage
  1202  0024B4  C081  F0CF         	movff	?_read_adc_voltage+1,main@voltage+1
  1203  0024B8  C082  F0D0         	movff	?_read_adc_voltage+2,main@voltage+2
  1204  0024BC  C083  F0D1         	movff	?_read_adc_voltage+3,main@voltage+3
  1205                           
  1206                           ;pwm_asl.c: 290: AN[channel] = voltage;
  1207  0024C0  0100               	movlb	0	; () banked
  1208  0024C2  51D2               	movf	main@channel& (0+255),w,b
  1209  0024C4  0D04               	mullw	4
  1210  0024C6  0E4A               	movlw	low _AN
  1211  0024C8  24F3               	addwf	prodl,w,c
  1212  0024CA  6ED9               	movwf	fsr2l,c
  1213  0024CC  0E00               	movlw	high _AN
  1214  0024CE  20F4               	addwfc	prodh,w,c
  1215  0024D0  6EDA               	movwf	fsr2h,c
  1216  0024D2  C0CE  FFDE         	movff	main@voltage,postinc2
  1217  0024D6  C0CF  FFDE         	movff	main@voltage+1,postinc2
  1218  0024DA  C0D0  FFDE         	movff	main@voltage+2,postinc2
  1219  0024DE  C0D1  FFDE         	movff	main@voltage+3,postinc2
  1220                           
  1221                           ; BSR set to: 0
  1222  0024E2  2BD2               	incf	main@channel& (0+255),f,b
  1223  0024E4  D7DE               	goto	l5783
  1224  0024E6                     u6720:
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;pwm_asl.c: 291: }
  1228                           ;pwm_asl.c: 292: sp=AN[0]*20;
  1229                           
  1230                           ; BSR set to: 0
  1231  0024E6  C04A  F080         	movff	_AN,___flmul@b
  1232  0024EA  C04B  F081         	movff	_AN+1,___flmul@b+1
  1233  0024EE  C04C  F082         	movff	_AN+2,___flmul@b+2
  1234  0024F2  C04D  F083         	movff	_AN+3,___flmul@b+3
  1235  0024F6  0E00               	movlw	0
  1236  0024F8  6F84               	movwf	___flmul@a& (0+255),b
  1237  0024FA  0E00               	movlw	0
  1238  0024FC  6F85               	movwf	(___flmul@a+1)& (0+255),b
  1239  0024FE  0EA0               	movlw	160
  1240  002500  6F86               	movwf	(___flmul@a+2)& (0+255),b
  1241  002502  0E41               	movlw	65
  1242  002504  6F87               	movwf	(___flmul@a+3)& (0+255),b
  1243  002506  ECD8  F007         	call	___flmul	;wreg free
  1244  00250A  C080  F1A1         	movff	?___flmul,_sp
  1245  00250E  C081  F1A2         	movff	?___flmul+1,_sp+1
  1246  002512  C082  F1A3         	movff	?___flmul+2,_sp+2
  1247  002516  C083  F1A4         	movff	?___flmul+3,_sp+3
  1248                           
  1249                           ;pwm_asl.c: 293: temp=AN[2]*100.0;
  1250  00251A  C052  F080         	movff	_AN+8,___flmul@b
  1251  00251E  C053  F081         	movff	_AN+9,___flmul@b+1
  1252  002522  C054  F082         	movff	_AN+10,___flmul@b+2
  1253  002526  C055  F083         	movff	_AN+11,___flmul@b+3
  1254  00252A  0E00               	movlw	0
  1255  00252C  0100               	movlb	0	; () banked
  1256  00252E  6F84               	movwf	___flmul@a& (0+255),b
  1257  002530  0E00               	movlw	0
  1258  002532  6F85               	movwf	(___flmul@a+1)& (0+255),b
  1259  002534  0EC8               	movlw	200
  1260  002536  6F86               	movwf	(___flmul@a+2)& (0+255),b
  1261  002538  0E42               	movlw	66
  1262  00253A  6F87               	movwf	(___flmul@a+3)& (0+255),b
  1263  00253C  ECD8  F007         	call	___flmul	;wreg free
  1264  002540  C080  F1A5         	movff	?___flmul,_temp
  1265  002544  C081  F1A6         	movff	?___flmul+1,_temp+1
  1266  002548  C082  F1A7         	movff	?___flmul+2,_temp+2
  1267  00254C  C083  F1A8         	movff	?___flmul+3,_temp+3
  1268                           
  1269                           ;pwm_asl.c: 294: operation();
  1270  002550  EC96  F010         	call	_operation	;wreg free
  1271                           
  1272                           ;pwm_asl.c: 295: display();
  1273  002554  ECC5  F00D         	call	_display	;wreg free
  1274  002558  D79A               	goto	l139
  1275  00255A                     __end_of_main:
  1276                           	opt stack 0
  1277                           tblptru	equ	0xFF8
  1278                           tblptrh	equ	0xFF7
  1279                           tblptrl	equ	0xFF6
  1280                           tablat	equ	0xFF5
  1281                           prodh	equ	0xFF4
  1282                           prodl	equ	0xFF3
  1283                           postinc0	equ	0xFEE
  1284                           wreg	equ	0xFE8
  1285                           postdec1	equ	0xFE5
  1286                           fsr1l	equ	0xFE1
  1287                           postinc2	equ	0xFDE
  1288                           fsr2h	equ	0xFDA
  1289                           fsr2l	equ	0xFD9
  1290                           
  1291 ;; *************** function _setupPorts *****************
  1292 ;; Defined at:
  1293 ;;		line 104 in file "pwm_asl.c"
  1294 ;; Parameters:    Size  Location     Type
  1295 ;;		None
  1296 ;; Auto vars:     Size  Location     Type
  1297 ;;		None
  1298 ;; Return value:  Size  Location     Type
  1299 ;;                  1    wreg      void 
  1300 ;; Registers used:
  1301 ;;		wreg, status,2
  1302 ;; Tracked objects:
  1303 ;;		On entry : 0/0
  1304 ;;		On exit  : 0/0
  1305 ;;		Unchanged: 0/0
  1306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1311 ;;Total ram usage:        0 bytes
  1312 ;; Hardware stack levels used:    1
  1313 ;; Hardware stack levels required when called:    2
  1314 ;; This function calls:
  1315 ;;		Nothing
  1316 ;; This function is called by:
  1317 ;;		_main
  1318 ;; This function uses a non-reentrant model
  1319 ;;
  1320                           
  1321                           	psect	text1
  1322  002CAE                     __ptext1:
  1323                           	opt stack 0
  1324  002CAE                     _setupPorts:
  1325                           	opt stack 28
  1326                           
  1327                           ;pwm_asl.c: 105: INTCON2 =0 ;
  1328                           
  1329                           ;incstack = 0
  1330  002CAE  0E00               	movlw	0
  1331  002CB0  6EF1               	movwf	intcon2,c	;volatile
  1332                           
  1333                           ;pwm_asl.c: 106: ADCON0 = 0;
  1334  002CB2  0E00               	movlw	0
  1335  002CB4  6EC2               	movwf	4034,c	;volatile
  1336                           
  1337                           ;pwm_asl.c: 107: ADCON1 = 0b00001100;
  1338  002CB6  0E0C               	movlw	12
  1339  002CB8  6EC1               	movwf	4033,c	;volatile
  1340                           
  1341                           ;pwm_asl.c: 108: TRISB = 0xFF;
  1342  002CBA  6893               	setf	3987,c	;volatile
  1343                           
  1344                           ;pwm_asl.c: 109: TRISC = 0x80;
  1345  002CBC  0E80               	movlw	128
  1346  002CBE  6E94               	movwf	3988,c	;volatile
  1347                           
  1348                           ;pwm_asl.c: 110: TRISA = 0xFF;
  1349  002CC0  6892               	setf	3986,c	;volatile
  1350                           
  1351                           ;pwm_asl.c: 111: TRISD = 0x00;
  1352  002CC2  0E00               	movlw	0
  1353  002CC4  6E95               	movwf	3989,c	;volatile
  1354                           
  1355                           ;pwm_asl.c: 112: TRISE = 0x00;
  1356  002CC6  0E00               	movlw	0
  1357  002CC8  6E96               	movwf	3990,c	;volatile
  1358  002CCA  0012               	return		;funcret
  1359  002CCC                     __end_of_setupPorts:
  1360                           	opt stack 0
  1361                           tblptru	equ	0xFF8
  1362                           tblptrh	equ	0xFF7
  1363                           tblptrl	equ	0xFF6
  1364                           tablat	equ	0xFF5
  1365                           prodh	equ	0xFF4
  1366                           prodl	equ	0xFF3
  1367                           intcon2	equ	0xFF1
  1368                           postinc0	equ	0xFEE
  1369                           wreg	equ	0xFE8
  1370                           postdec1	equ	0xFE5
  1371                           fsr1l	equ	0xFE1
  1372                           postinc2	equ	0xFDE
  1373                           fsr2h	equ	0xFDA
  1374                           fsr2l	equ	0xFD9
  1375                           
  1376 ;; *************** function _read_adc_voltage *****************
  1377 ;; Defined at:
  1378 ;;		line 48 in file "my_adc.c"
  1379 ;; Parameters:    Size  Location     Type
  1380 ;;  channel         1    wreg     unsigned char 
  1381 ;; Auto vars:     Size  Location     Type
  1382 ;;  channel         1    8[BANK0 ] unsigned char 
  1383 ;;  voltage         4    4[BANK0 ] float 
  1384 ;;  raw_value       2    9[BANK0 ] int 
  1385 ;; Return value:  Size  Location     Type
  1386 ;;                  4    0[BANK0 ] float 
  1387 ;; Registers used:
  1388 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1389 ;; Tracked objects:
  1390 ;;		On entry : 0/0
  1391 ;;		On exit  : 0/0
  1392 ;;		Unchanged: 0/0
  1393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1394 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1395 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1397 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1398 ;;Total ram usage:       11 bytes
  1399 ;; Hardware stack levels used:    1
  1400 ;; Hardware stack levels required when called:    3
  1401 ;; This function calls:
  1402 ;;		___fldiv
  1403 ;;		___wmul
  1404 ;;		___xxtofl
  1405 ;;		_read_adc_raw_no_lib
  1406 ;; This function is called by:
  1407 ;;		_main
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410                           
  1411                           	psect	text2
  1412  002638                     __ptext2:
  1413                           	opt stack 0
  1414  002638                     _read_adc_voltage:
  1415                           	opt stack 27
  1416                           
  1417                           ;incstack = 0
  1418                           ;read_adc_voltage@channel stored from wreg
  1419  002638  0100               	movlb	0	; () banked
  1420  00263A  6F88               	movwf	read_adc_voltage@channel& (0+255),b
  1421                           
  1422                           ;my_adc.c: 49: int raw_value;
  1423                           ;my_adc.c: 50: float voltage;
  1424                           ;my_adc.c: 51: raw_value = read_adc_raw_no_lib(channel);
  1425  00263C  0100               	movlb	0	; () banked
  1426  00263E  5188               	movf	read_adc_voltage@channel& (0+255),w,b
  1427  002640  ECBE  F015         	call	_read_adc_raw_no_lib
  1428  002644  C01B  F089         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  1429  002648  C01C  F08A         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  1430                           
  1431                           ;my_adc.c: 52: voltage = (raw_value * 5) / 1023.0;
  1432  00264C  C089  F01B         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  1433  002650  C08A  F01C         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  1434  002654  0E00               	movlw	0
  1435  002656  6E1E               	movwf	___wmul@multiplicand+1,c
  1436  002658  0E05               	movlw	5
  1437  00265A  6E1D               	movwf	___wmul@multiplicand,c
  1438  00265C  EC20  F016         	call	___wmul	;wreg free
  1439  002660  C01B  F021         	movff	?___wmul,___xxtofl@val
  1440  002664  C01C  F022         	movff	?___wmul+1,___xxtofl@val+1
  1441  002668  0E00               	movlw	0
  1442  00266A  BE22               	btfsc	___xxtofl@val+1,7,c
  1443  00266C  0EFF               	movlw	-1
  1444  00266E  6E23               	movwf	___xxtofl@val+2,c
  1445  002670  6E24               	movwf	___xxtofl@val+3,c
  1446  002672  0E01               	movlw	1
  1447  002674  ECC1  F00E         	call	___xxtofl
  1448  002678  C021  F02F         	movff	?___xxtofl,___fldiv@b
  1449  00267C  C022  F030         	movff	?___xxtofl+1,___fldiv@b+1
  1450  002680  C023  F031         	movff	?___xxtofl+2,___fldiv@b+2
  1451  002684  C024  F032         	movff	?___xxtofl+3,___fldiv@b+3
  1452  002688  0E00               	movlw	0
  1453  00268A  6E33               	movwf	___fldiv@a,c
  1454  00268C  0EC0               	movlw	192
  1455  00268E  6E34               	movwf	___fldiv@a+1,c
  1456  002690  0E7F               	movlw	127
  1457  002692  6E35               	movwf	___fldiv@a+2,c
  1458  002694  0E44               	movlw	68
  1459  002696  6E36               	movwf	___fldiv@a+3,c
  1460  002698  EC20  F00B         	call	___fldiv	;wreg free
  1461  00269C  C02F  F084         	movff	?___fldiv,read_adc_voltage@voltage
  1462  0026A0  C030  F085         	movff	?___fldiv+1,read_adc_voltage@voltage+1
  1463  0026A4  C031  F086         	movff	?___fldiv+2,read_adc_voltage@voltage+2
  1464  0026A8  C032  F087         	movff	?___fldiv+3,read_adc_voltage@voltage+3
  1465                           
  1466                           ;my_adc.c: 53: return voltage;
  1467  0026AC  C084  F080         	movff	read_adc_voltage@voltage,?_read_adc_voltage
  1468  0026B0  C085  F081         	movff	read_adc_voltage@voltage+1,?_read_adc_voltage+1
  1469  0026B4  C086  F082         	movff	read_adc_voltage@voltage+2,?_read_adc_voltage+2
  1470  0026B8  C087  F083         	movff	read_adc_voltage@voltage+3,?_read_adc_voltage+3
  1471  0026BC  0012               	return	
  1472  0026BE                     __end_of_read_adc_voltage:
  1473                           	opt stack 0
  1474                           tblptru	equ	0xFF8
  1475                           tblptrh	equ	0xFF7
  1476                           tblptrl	equ	0xFF6
  1477                           tablat	equ	0xFF5
  1478                           prodh	equ	0xFF4
  1479                           prodl	equ	0xFF3
  1480                           intcon2	equ	0xFF1
  1481                           postinc0	equ	0xFEE
  1482                           wreg	equ	0xFE8
  1483                           postdec1	equ	0xFE5
  1484                           fsr1l	equ	0xFE1
  1485                           postinc2	equ	0xFDE
  1486                           fsr2h	equ	0xFDA
  1487                           fsr2l	equ	0xFD9
  1488                           
  1489 ;; *************** function _operation *****************
  1490 ;; Defined at:
  1491 ;;		line 167 in file "pwm_asl.c"
  1492 ;; Parameters:    Size  Location     Type
  1493 ;;		None
  1494 ;; Auto vars:     Size  Location     Type
  1495 ;;		None
  1496 ;; Return value:  Size  Location     Type
  1497 ;;                  1    wreg      void 
  1498 ;; Registers used:
  1499 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1500 ;; Tracked objects:
  1501 ;;		On entry : 0/0
  1502 ;;		On exit  : 0/0
  1503 ;;		Unchanged: 0/0
  1504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1509 ;;Total ram usage:        0 bytes
  1510 ;; Hardware stack levels used:    1
  1511 ;; Hardware stack levels required when called:    3
  1512 ;; This function calls:
  1513 ;;		___fldiv
  1514 ;;		___flmul
  1515 ;;		_delay_ms
  1516 ;;		_read_adc_raw_no_lib
  1517 ;;		_set_pwm1_raw
  1518 ;; This function is called by:
  1519 ;;		_main
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text3
  1524  00212C                     __ptext3:
  1525                           	opt stack 0
  1526  00212C                     _operation:
  1527                           	opt stack 27
  1528                           
  1529                           ;pwm_asl.c: 168: switch(mode) {
  1530                           
  1531                           ;incstack = 0
  1532  00212C  D085               	goto	l117
  1533  00212E                     l118:
  1534                           
  1535                           ;pwm_asl.c: 170: if(PORTBbits.RB3==0){
  1536  00212E  B681               	btfsc	3969,3,c	;volatile
  1537  002130  0012               	return	
  1538                           
  1539                           ;pwm_asl.c: 171: delay_ms(250);
  1540  002132  0E00               	movlw	0
  1541  002134  6E1C               	movwf	delay_ms@n+1,c
  1542  002136  0EFA               	movlw	250
  1543  002138  6E1B               	movwf	delay_ms@n,c
  1544  00213A  EC33  F016         	call	_delay_ms	;wreg free
  1545                           
  1546                           ;pwm_asl.c: 172: if(PORTBbits.RB3==0)
  1547  00213E  B681               	btfsc	3969,3,c	;volatile
  1548  002140  0012               	return	
  1549                           
  1550                           ;pwm_asl.c: 173: {
  1551                           ;pwm_asl.c: 174: set_pwm1_raw(0);
  1552  002142  0E00               	movlw	0
  1553  002144  6E1C               	movwf	set_pwm1_raw@raw_value+1,c
  1554  002146  0E00               	movlw	0
  1555  002148  6E1B               	movwf	set_pwm1_raw@raw_value,c
  1556  00214A  ECDB  F015         	call	_set_pwm1_raw	;wreg free
  1557                           
  1558                           ;pwm_asl.c: 175: PORTCbits.RC2=0;
  1559  00214E  9482               	bcf	3970,2,c	;volatile
  1560                           
  1561                           ;pwm_asl.c: 176: HC=0;
  1562  002150  0E00               	movlw	0
  1563  002152  0101               	movlb	1	; () banked
  1564  002154  6FA9               	movwf	_HC& (0+255),b
  1565  002156  0E00               	movlw	0
  1566  002158  6FAA               	movwf	(_HC+1)& (0+255),b
  1567  00215A  0E00               	movlw	0
  1568  00215C  6FAB               	movwf	(_HC+2)& (0+255),b
  1569  00215E  0E00               	movlw	0
  1570  002160  6FAC               	movwf	(_HC+3)& (0+255),b
  1571                           
  1572                           ; BSR set to: 1
  1573                           ;pwm_asl.c: 177: PIE2bits.CCP2IE = 0;
  1574  002162  90A0               	bcf	4000,0,c	;volatile
  1575                           
  1576                           ; BSR set to: 1
  1577                           ;pwm_asl.c: 178: }
  1578                           ;pwm_asl.c: 179: }
  1579                           ;pwm_asl.c: 180: break;
  1580                           
  1581                           ; BSR set to: 1
  1582  002164  0012               	return	
  1583  002166                     
  1584                           ;pwm_asl.c: 183: HC =(AN[1]/5.0)*100.0;
  1585                           
  1586                           ; BSR set to: 1
  1587  002166  0E00               	movlw	0
  1588  002168  6E33               	movwf	___fldiv@a,c
  1589  00216A  0E00               	movlw	0
  1590  00216C  6E34               	movwf	___fldiv@a+1,c
  1591  00216E  0EA0               	movlw	160
  1592  002170  6E35               	movwf	___fldiv@a+2,c
  1593  002172  0E40               	movlw	64
  1594  002174  6E36               	movwf	___fldiv@a+3,c
  1595  002176  C04E  F02F         	movff	_AN+4,___fldiv@b
  1596  00217A  C04F  F030         	movff	_AN+5,___fldiv@b+1
  1597  00217E  C050  F031         	movff	_AN+6,___fldiv@b+2
  1598  002182  C051  F032         	movff	_AN+7,___fldiv@b+3
  1599  002186  EC20  F00B         	call	___fldiv	;wreg free
  1600  00218A  C02F  F080         	movff	?___fldiv,___flmul@b
  1601  00218E  C030  F081         	movff	?___fldiv+1,___flmul@b+1
  1602  002192  C031  F082         	movff	?___fldiv+2,___flmul@b+2
  1603  002196  C032  F083         	movff	?___fldiv+3,___flmul@b+3
  1604  00219A  0E00               	movlw	0
  1605  00219C  0100               	movlb	0	; () banked
  1606  00219E  6F84               	movwf	___flmul@a& (0+255),b
  1607  0021A0  0E00               	movlw	0
  1608  0021A2  6F85               	movwf	(___flmul@a+1)& (0+255),b
  1609  0021A4  0EC8               	movlw	200
  1610  0021A6  6F86               	movwf	(___flmul@a+2)& (0+255),b
  1611  0021A8  0E42               	movlw	66
  1612  0021AA  6F87               	movwf	(___flmul@a+3)& (0+255),b
  1613  0021AC  ECD8  F007         	call	___flmul	;wreg free
  1614  0021B0  C080  F1A9         	movff	?___flmul,_HC
  1615  0021B4  C081  F1AA         	movff	?___flmul+1,_HC+1
  1616  0021B8  C082  F1AB         	movff	?___flmul+2,_HC+2
  1617  0021BC  C083  F1AC         	movff	?___flmul+3,_HC+3
  1618                           
  1619                           ;pwm_asl.c: 184: raw_val = read_adc_raw_no_lib(1);
  1620  0021C0  0E01               	movlw	1
  1621  0021C2  ECBE  F015         	call	_read_adc_raw_no_lib
  1622  0021C6  C01B  F05C         	movff	?_read_adc_raw_no_lib,_raw_val
  1623  0021CA  C01C  F05D         	movff	?_read_adc_raw_no_lib+1,_raw_val+1
  1624                           
  1625                           ;pwm_asl.c: 185: set_pwm1_raw(raw_val);
  1626  0021CE  C05C  F01B         	movff	_raw_val,set_pwm1_raw@raw_value
  1627  0021D2  C05D  F01C         	movff	_raw_val+1,set_pwm1_raw@raw_value+1
  1628  0021D6  ECDB  F015         	call	_set_pwm1_raw	;wreg free
  1629                           
  1630                           ;pwm_asl.c: 186: break;
  1631  0021DA  0012               	return	
  1632  0021DC                     
  1633                           ;pwm_asl.c: 189: HC =(AN[1]/5.0)*100.0;
  1634  0021DC  0E00               	movlw	0
  1635  0021DE  6E33               	movwf	___fldiv@a,c
  1636  0021E0  0E00               	movlw	0
  1637  0021E2  6E34               	movwf	___fldiv@a+1,c
  1638  0021E4  0EA0               	movlw	160
  1639  0021E6  6E35               	movwf	___fldiv@a+2,c
  1640  0021E8  0E40               	movlw	64
  1641  0021EA  6E36               	movwf	___fldiv@a+3,c
  1642  0021EC  C04E  F02F         	movff	_AN+4,___fldiv@b
  1643  0021F0  C04F  F030         	movff	_AN+5,___fldiv@b+1
  1644  0021F4  C050  F031         	movff	_AN+6,___fldiv@b+2
  1645  0021F8  C051  F032         	movff	_AN+7,___fldiv@b+3
  1646  0021FC  EC20  F00B         	call	___fldiv	;wreg free
  1647  002200  C02F  F080         	movff	?___fldiv,___flmul@b
  1648  002204  C030  F081         	movff	?___fldiv+1,___flmul@b+1
  1649  002208  C031  F082         	movff	?___fldiv+2,___flmul@b+2
  1650  00220C  C032  F083         	movff	?___fldiv+3,___flmul@b+3
  1651  002210  0E00               	movlw	0
  1652  002212  0100               	movlb	0	; () banked
  1653  002214  6F84               	movwf	___flmul@a& (0+255),b
  1654  002216  0E00               	movlw	0
  1655  002218  6F85               	movwf	(___flmul@a+1)& (0+255),b
  1656  00221A  0EC8               	movlw	200
  1657  00221C  6F86               	movwf	(___flmul@a+2)& (0+255),b
  1658  00221E  0E42               	movlw	66
  1659  002220  6F87               	movwf	(___flmul@a+3)& (0+255),b
  1660  002222  ECD8  F007         	call	___flmul	;wreg free
  1661  002226  C080  F1A9         	movff	?___flmul,_HC
  1662  00222A  C081  F1AA         	movff	?___flmul+1,_HC+1
  1663  00222E  C082  F1AB         	movff	?___flmul+2,_HC+2
  1664  002232  C083  F1AC         	movff	?___flmul+3,_HC+3
  1665                           
  1666                           ;pwm_asl.c: 206: }
  1667                           
  1668                           ;pwm_asl.c: 205: break;
  1669                           
  1670                           ;pwm_asl.c: 193: case AUTO_COOL:
  1671                           
  1672                           ;pwm_asl.c: 191: break;
  1673  002236  0012               	return	
  1674  002238                     l117:
  1675  002238  505E               	movf	_mode,w,c
  1676                           
  1677                           ; Switch size 1, requested type "space"
  1678                           ; Number of cases is 4, Range of values is 0 to 3
  1679                           ; switch strategies available:
  1680                           ; Name         Instructions Cycles
  1681                           ; simple_byte           13     7 (average)
  1682                           ;	Chosen strategy is simple_byte
  1683  00223A  0A00               	xorlw	0	; case 0
  1684  00223C  B4D8               	btfsc	status,2,c
  1685  00223E  D777               	goto	l118
  1686  002240  0A01               	xorlw	1	; case 1
  1687  002242  B4D8               	btfsc	status,2,c
  1688  002244  D790               	goto	l122
  1689  002246  0A03               	xorlw	3	; case 2
  1690  002248  B4D8               	btfsc	status,2,c
  1691  00224A  D7C8               	goto	l123
  1692  00224C  0A01               	xorlw	1	; case 3
  1693  00224E  0012               	return	
  1694  002250                     __end_of_operation:
  1695                           	opt stack 0
  1696                           tblptru	equ	0xFF8
  1697                           tblptrh	equ	0xFF7
  1698                           tblptrl	equ	0xFF6
  1699                           tablat	equ	0xFF5
  1700                           prodh	equ	0xFF4
  1701                           prodl	equ	0xFF3
  1702                           intcon2	equ	0xFF1
  1703                           postinc0	equ	0xFEE
  1704                           wreg	equ	0xFE8
  1705                           postdec1	equ	0xFE5
  1706                           fsr1l	equ	0xFE1
  1707                           postinc2	equ	0xFDE
  1708                           fsr2h	equ	0xFDA
  1709                           fsr2l	equ	0xFD9
  1710                           status	equ	0xFD8
  1711                           
  1712 ;; *************** function _set_pwm1_raw *****************
  1713 ;; Defined at:
  1714 ;;		line 17 in file "my_pwm.c"
  1715 ;; Parameters:    Size  Location     Type
  1716 ;;  raw_value       2   26[COMRAM] unsigned int 
  1717 ;; Auto vars:     Size  Location     Type
  1718 ;;		None
  1719 ;; Return value:  Size  Location     Type
  1720 ;;                  1    wreg      void 
  1721 ;; Registers used:
  1722 ;;		wreg, status,2, status,0
  1723 ;; Tracked objects:
  1724 ;;		On entry : 0/0
  1725 ;;		On exit  : 0/0
  1726 ;;		Unchanged: 0/0
  1727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1728 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1730 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1731 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1732 ;;Total ram usage:        4 bytes
  1733 ;; Hardware stack levels used:    1
  1734 ;; Hardware stack levels required when called:    2
  1735 ;; This function calls:
  1736 ;;		Nothing
  1737 ;; This function is called by:
  1738 ;;		_operation
  1739 ;;		_set_pwm1_percent
  1740 ;;		_set_pwm1_voltage
  1741 ;;		_set_pwm1_general
  1742 ;; This function uses a non-reentrant model
  1743 ;;
  1744                           
  1745                           	psect	text4
  1746  002BB6                     __ptext4:
  1747                           	opt stack 0
  1748  002BB6                     _set_pwm1_raw:
  1749                           	opt stack 27
  1750                           
  1751                           ;my_pwm.c: 19: CCPR1L = (raw_value >> 2) & 0x00FF;
  1752                           
  1753                           ;incstack = 0
  1754  002BB6  C01B  F01D         	movff	set_pwm1_raw@raw_value,??_set_pwm1_raw
  1755  002BBA  C01C  F01E         	movff	set_pwm1_raw@raw_value+1,??_set_pwm1_raw+1
  1756  002BBE  90D8               	bcf	status,0,c
  1757  002BC0  321E               	rrcf	??_set_pwm1_raw+1,f,c
  1758  002BC2  321D               	rrcf	??_set_pwm1_raw,f,c
  1759  002BC4  90D8               	bcf	status,0,c
  1760  002BC6  321E               	rrcf	??_set_pwm1_raw+1,f,c
  1761  002BC8  321D               	rrcf	??_set_pwm1_raw,f,c
  1762  002BCA  501D               	movf	??_set_pwm1_raw,w,c
  1763  002BCC  6EBE               	movwf	4030,c	;volatile
  1764                           
  1765                           ;my_pwm.c: 20: CCP1CONbits.DC1B = raw_value & 0x0003;
  1766  002BCE  C01B  F01D         	movff	set_pwm1_raw@raw_value,??_set_pwm1_raw
  1767  002BD2  0E03               	movlw	3
  1768  002BD4  161D               	andwf	??_set_pwm1_raw,f,c
  1769  002BD6  3A1D               	swapf	??_set_pwm1_raw,f,c
  1770  002BD8  50BD               	movf	4029,w,c	;volatile
  1771  002BDA  181D               	xorwf	??_set_pwm1_raw,w,c
  1772  002BDC  0BCF               	andlw	-49
  1773  002BDE  181D               	xorwf	??_set_pwm1_raw,w,c
  1774  002BE0  6EBD               	movwf	4029,c	;volatile
  1775  002BE2  0012               	return		;funcret
  1776  002BE4                     __end_of_set_pwm1_raw:
  1777                           	opt stack 0
  1778                           tblptru	equ	0xFF8
  1779                           tblptrh	equ	0xFF7
  1780                           tblptrl	equ	0xFF6
  1781                           tablat	equ	0xFF5
  1782                           prodh	equ	0xFF4
  1783                           prodl	equ	0xFF3
  1784                           intcon2	equ	0xFF1
  1785                           postinc0	equ	0xFEE
  1786                           wreg	equ	0xFE8
  1787                           postdec1	equ	0xFE5
  1788                           fsr1l	equ	0xFE1
  1789                           postinc2	equ	0xFDE
  1790                           fsr2h	equ	0xFDA
  1791                           fsr2l	equ	0xFD9
  1792                           status	equ	0xFD8
  1793                           
  1794 ;; *************** function _read_adc_raw_no_lib *****************
  1795 ;; Defined at:
  1796 ;;		line 32 in file "my_adc.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;  channel         1    wreg     unsigned char 
  1799 ;; Auto vars:     Size  Location     Type
  1800 ;;  channel         1   30[COMRAM] unsigned char 
  1801 ;;  raw_value       2   31[COMRAM] int 
  1802 ;; Return value:  Size  Location     Type
  1803 ;;                  2   26[COMRAM] int 
  1804 ;; Registers used:
  1805 ;;		wreg, status,2, status,0
  1806 ;; Tracked objects:
  1807 ;;		On entry : 0/0
  1808 ;;		On exit  : 0/0
  1809 ;;		Unchanged: 0/0
  1810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1811 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1812 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1813 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1814 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1815 ;;Total ram usage:        7 bytes
  1816 ;; Hardware stack levels used:    1
  1817 ;; Hardware stack levels required when called:    2
  1818 ;; This function calls:
  1819 ;;		Nothing
  1820 ;; This function is called by:
  1821 ;;		_operation
  1822 ;;		_read_adc_voltage
  1823 ;; This function uses a non-reentrant model
  1824 ;;
  1825                           
  1826                           	psect	text5
  1827  002B7C                     __ptext5:
  1828                           	opt stack 0
  1829  002B7C                     _read_adc_raw_no_lib:
  1830                           	opt stack 27
  1831                           
  1832                           ;incstack = 0
  1833                           ;read_adc_raw_no_lib@channel stored from wreg
  1834  002B7C  6E1F               	movwf	read_adc_raw_no_lib@channel,c
  1835                           
  1836                           ;my_adc.c: 33: int raw_value;
  1837                           ;my_adc.c: 34: ADCON0bits.CHS = channel;
  1838  002B7E  C01F  F01D         	movff	read_adc_raw_no_lib@channel,??_read_adc_raw_no_lib
  1839  002B82  461D               	rlncf	??_read_adc_raw_no_lib,f,c
  1840  002B84  461D               	rlncf	??_read_adc_raw_no_lib,f,c
  1841  002B86  50C2               	movf	4034,w,c	;volatile
  1842  002B88  181D               	xorwf	??_read_adc_raw_no_lib,w,c
  1843  002B8A  0BC3               	andlw	-61
  1844  002B8C  181D               	xorwf	??_read_adc_raw_no_lib,w,c
  1845  002B8E  6EC2               	movwf	4034,c	;volatile
  1846                           
  1847                           ;my_adc.c: 37: ADCON0bits.GO = 1;
  1848  002B90  82C2               	bsf	4034,1,c	;volatile
  1849  002B92  B2C2               	btfsc	4034,1,c	;volatile
  1850  002B94  D7FE               	goto	l226
  1851                           
  1852                           ;my_adc.c: 41: raw_value = ADRESH << 8 | ADRESL;
  1853  002B96  50C3               	movf	4035,w,c	;volatile
  1854  002B98  CFC4 F01D          	movff	4036,??_read_adc_raw_no_lib	;volatile
  1855  002B9C  6A1E               	clrf	(??_read_adc_raw_no_lib+1)& (0+255),c
  1856  002B9E  C01D  F01E         	movff	??_read_adc_raw_no_lib,??_read_adc_raw_no_lib+1
  1857  002BA2  6A1D               	clrf	??_read_adc_raw_no_lib,c
  1858  002BA4  101D               	iorwf	??_read_adc_raw_no_lib,w,c
  1859  002BA6  6E20               	movwf	read_adc_raw_no_lib@raw_value,c
  1860  002BA8  501E               	movf	??_read_adc_raw_no_lib+1,w,c
  1861  002BAA  6E21               	movwf	read_adc_raw_no_lib@raw_value+1,c
  1862                           
  1863                           ;my_adc.c: 45: return raw_value;
  1864  002BAC  C020  F01B         	movff	read_adc_raw_no_lib@raw_value,?_read_adc_raw_no_lib
  1865  002BB0  C021  F01C         	movff	read_adc_raw_no_lib@raw_value+1,?_read_adc_raw_no_lib+1
  1866  002BB4  0012               	return	
  1867  002BB6                     __end_of_read_adc_raw_no_lib:
  1868                           	opt stack 0
  1869                           tblptru	equ	0xFF8
  1870                           tblptrh	equ	0xFF7
  1871                           tblptrl	equ	0xFF6
  1872                           tablat	equ	0xFF5
  1873                           prodh	equ	0xFF4
  1874                           prodl	equ	0xFF3
  1875                           intcon2	equ	0xFF1
  1876                           postinc0	equ	0xFEE
  1877                           wreg	equ	0xFE8
  1878                           postdec1	equ	0xFE5
  1879                           fsr1l	equ	0xFE1
  1880                           postinc2	equ	0xFDE
  1881                           fsr2h	equ	0xFDA
  1882                           fsr2l	equ	0xFD9
  1883                           status	equ	0xFD8
  1884                           
  1885 ;; *************** function ___fldiv *****************
  1886 ;; Defined at:
  1887 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcdiv.c"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;  b               4   46[COMRAM] int 
  1890 ;;  a               4   50[COMRAM] int 
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;  grs             4   65[COMRAM] unsigned long 
  1893 ;;  rem             4   59[COMRAM] unsigned long 
  1894 ;;  new_exp         2   63[COMRAM] int 
  1895 ;;  aexp            1   70[COMRAM] unsigned char 
  1896 ;;  bexp            1   69[COMRAM] unsigned char 
  1897 ;;  sign            1   58[COMRAM] unsigned char 
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  4   46[COMRAM] unsigned char 
  1900 ;; Registers used:
  1901 ;;		wreg, status,2, status,0
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1907 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1908 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1909 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1910 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1911 ;;Total ram usage:       25 bytes
  1912 ;; Hardware stack levels used:    1
  1913 ;; Hardware stack levels required when called:    2
  1914 ;; This function calls:
  1915 ;;		Nothing
  1916 ;; This function is called by:
  1917 ;;		_operation
  1918 ;;		_read_adc_voltage
  1919 ;;		_set_pwm1_percent
  1920 ;;		_set_pwm1_voltage
  1921 ;;		_set_pwm1_general
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text6
  1926  001640                     __ptext6:
  1927                           	opt stack 0
  1928  001640                     ___fldiv:
  1929                           	opt stack 27
  1930                           
  1931                           ;incstack = 0
  1932  001640  5032               	movf	___fldiv@b+3,w,c
  1933  001642  0B80               	andlw	128
  1934  001644  6E3B               	movwf	___fldiv@sign,c
  1935  001646  5032               	movf	___fldiv@b+3,w,c
  1936  001648  2432               	addwf	___fldiv@b+3,w,c
  1937  00164A  6E46               	movwf	___fldiv@bexp,c
  1938  00164C  BE31               	btfsc	___fldiv@b+2,7,c
  1939  00164E  8046               	bsf	___fldiv@bexp,0,c
  1940  001650  5046               	movf	___fldiv@bexp,w,c
  1941  001652  B4D8               	btfsc	status,2,c
  1942  001654  D00D               	goto	l967
  1943  001656  2846               	incf	___fldiv@bexp,w,c
  1944  001658  A4D8               	btfss	status,2,c
  1945  00165A  D008               	goto	l968
  1946  00165C  0E00               	movlw	0
  1947  00165E  6E2F               	movwf	___fldiv@b,c
  1948  001660  0E00               	movlw	0
  1949  001662  6E30               	movwf	___fldiv@b+1,c
  1950  001664  0E00               	movlw	0
  1951  001666  6E31               	movwf	___fldiv@b+2,c
  1952  001668  0E00               	movlw	0
  1953  00166A  6E32               	movwf	___fldiv@b+3,c
  1954  00166C                     l968:
  1955  00166C  8E31               	bsf	___fldiv@b+2,7,c
  1956  00166E  D006               	goto	L1
  1957  001670                     l967:
  1958  001670  0E00               	movlw	0
  1959  001672  6E2F               	movwf	___fldiv@b,c
  1960  001674  0E00               	movlw	0
  1961  001676  6E30               	movwf	___fldiv@b+1,c
  1962  001678  0E00               	movlw	0
  1963  00167A  6E31               	movwf	___fldiv@b+2,c
  1964  00167C                     L1:
  1965  00167C  0E00               	movlw	0
  1966  00167E  6E32               	movwf	___fldiv@b+3,c
  1967  001680  5036               	movf	___fldiv@a+3,w,c
  1968  001682  0B80               	andlw	128
  1969  001684  1A3B               	xorwf	___fldiv@sign,f,c
  1970  001686  5036               	movf	___fldiv@a+3,w,c
  1971  001688  2436               	addwf	___fldiv@a+3,w,c
  1972  00168A  6E47               	movwf	___fldiv@aexp,c
  1973  00168C  BE35               	btfsc	___fldiv@a+2,7,c
  1974  00168E  8047               	bsf	___fldiv@aexp,0,c
  1975  001690  5047               	movf	___fldiv@aexp,w,c
  1976  001692  B4D8               	btfsc	status,2,c
  1977  001694  D00D               	goto	l971
  1978  001696  2847               	incf	___fldiv@aexp,w,c
  1979  001698  A4D8               	btfss	status,2,c
  1980  00169A  D008               	goto	l972
  1981  00169C  0E00               	movlw	0
  1982  00169E  6E33               	movwf	___fldiv@a,c
  1983  0016A0  0E00               	movlw	0
  1984  0016A2  6E34               	movwf	___fldiv@a+1,c
  1985  0016A4  0E00               	movlw	0
  1986  0016A6  6E35               	movwf	___fldiv@a+2,c
  1987  0016A8  0E00               	movlw	0
  1988  0016AA  6E36               	movwf	___fldiv@a+3,c
  1989  0016AC                     l972:
  1990  0016AC  8E35               	bsf	___fldiv@a+2,7,c
  1991  0016AE  D006               	goto	L2
  1992  0016B0                     l971:
  1993  0016B0  0E00               	movlw	0
  1994  0016B2  6E33               	movwf	___fldiv@a,c
  1995  0016B4  0E00               	movlw	0
  1996  0016B6  6E34               	movwf	___fldiv@a+1,c
  1997  0016B8  0E00               	movlw	0
  1998  0016BA  6E35               	movwf	___fldiv@a+2,c
  1999  0016BC                     L2:
  2000  0016BC  0E00               	movlw	0
  2001  0016BE  6E36               	movwf	___fldiv@a+3,c
  2002  0016C0  5033               	movf	___fldiv@a,w,c
  2003  0016C2  1034               	iorwf	___fldiv@a+1,w,c
  2004  0016C4  1035               	iorwf	___fldiv@a+2,w,c
  2005  0016C6  1036               	iorwf	___fldiv@a+3,w,c
  2006  0016C8  A4D8               	btfss	status,2,c
  2007  0016CA  D015               	goto	l974
  2008  0016CC  0E00               	movlw	0
  2009  0016CE  6E2F               	movwf	___fldiv@b,c
  2010  0016D0  0E00               	movlw	0
  2011  0016D2  6E30               	movwf	___fldiv@b+1,c
  2012  0016D4  0E00               	movlw	0
  2013  0016D6  6E31               	movwf	___fldiv@b+2,c
  2014  0016D8  0E00               	movlw	0
  2015  0016DA  6E32               	movwf	___fldiv@b+3,c
  2016  0016DC  0E80               	movlw	128
  2017  0016DE  1231               	iorwf	___fldiv@b+2,f,c
  2018  0016E0  0E7F               	movlw	127
  2019  0016E2  1232               	iorwf	___fldiv@b+3,f,c
  2020  0016E4  C02F  F02F         	movff	___fldiv@b,?___fldiv
  2021  0016E8  C030  F030         	movff	___fldiv@b+1,?___fldiv+1
  2022  0016EC  C031  F031         	movff	___fldiv@b+2,?___fldiv+2
  2023  0016F0  C032  F032         	movff	___fldiv@b+3,?___fldiv+3
  2024  0016F4  0012               	return	
  2025  0016F6                     l974:
  2026  0016F6  5046               	movf	___fldiv@bexp,w,c
  2027  0016F8  A4D8               	btfss	status,2,c
  2028  0016FA  D011               	goto	l976
  2029  0016FC  0E00               	movlw	0
  2030  0016FE  6E2F               	movwf	___fldiv@b,c
  2031  001700  0E00               	movlw	0
  2032  001702  6E30               	movwf	___fldiv@b+1,c
  2033  001704  0E00               	movlw	0
  2034  001706  6E31               	movwf	___fldiv@b+2,c
  2035  001708  0E00               	movlw	0
  2036  00170A  6E32               	movwf	___fldiv@b+3,c
  2037  00170C  C02F  F02F         	movff	___fldiv@b,?___fldiv
  2038  001710  C030  F030         	movff	___fldiv@b+1,?___fldiv+1
  2039  001714  C031  F031         	movff	___fldiv@b+2,?___fldiv+2
  2040  001718  C032  F032         	movff	___fldiv@b+3,?___fldiv+3
  2041  00171C  0012               	return	
  2042  00171E                     l976:
  2043  00171E  5047               	movf	___fldiv@aexp,w,c
  2044  001720  6E37               	movwf	??___fldiv& (0+255),c
  2045  001722  6A38               	clrf	(??___fldiv+1)& (0+255),c
  2046  001724  1E37               	comf	??___fldiv,f,c
  2047  001726  1E38               	comf	??___fldiv+1,f,c
  2048  001728  4A37               	infsnz	??___fldiv,f,c
  2049  00172A  2A38               	incf	??___fldiv+1,f,c
  2050  00172C  5046               	movf	___fldiv@bexp,w,c
  2051  00172E  6E39               	movwf	(??___fldiv+2)& (0+255),c
  2052  001730  6A3A               	clrf	(??___fldiv+3)& (0+255),c
  2053  001732  5037               	movf	??___fldiv,w,c
  2054  001734  2639               	addwf	??___fldiv+2,f,c
  2055  001736  5038               	movf	??___fldiv+1,w,c
  2056  001738  223A               	addwfc	??___fldiv+3,f,c
  2057  00173A  0E7F               	movlw	127
  2058  00173C  2439               	addwf	??___fldiv+2,w,c
  2059  00173E  6E40               	movwf	___fldiv@new_exp,c
  2060  001740  0E00               	movlw	0
  2061  001742  203A               	addwfc	??___fldiv+3,w,c
  2062  001744  6E41               	movwf	___fldiv@new_exp+1,c
  2063  001746  C02F  F03C         	movff	___fldiv@b,___fldiv@rem
  2064  00174A  C030  F03D         	movff	___fldiv@b+1,___fldiv@rem+1
  2065  00174E  C031  F03E         	movff	___fldiv@b+2,___fldiv@rem+2
  2066  001752  C032  F03F         	movff	___fldiv@b+3,___fldiv@rem+3
  2067  001756  0E00               	movlw	0
  2068  001758  6E2F               	movwf	___fldiv@b,c
  2069  00175A  0E00               	movlw	0
  2070  00175C  6E30               	movwf	___fldiv@b+1,c
  2071  00175E  0E00               	movlw	0
  2072  001760  6E31               	movwf	___fldiv@b+2,c
  2073  001762  0E00               	movlw	0
  2074  001764  6E32               	movwf	___fldiv@b+3,c
  2075  001766  0E00               	movlw	0
  2076  001768  6E42               	movwf	___fldiv@grs,c
  2077  00176A  0E00               	movlw	0
  2078  00176C  6E43               	movwf	___fldiv@grs+1,c
  2079  00176E  0E00               	movlw	0
  2080  001770  6E44               	movwf	___fldiv@grs+2,c
  2081  001772  0E00               	movlw	0
  2082  001774  6E45               	movwf	___fldiv@grs+3,c
  2083  001776  0E00               	movlw	0
  2084  001778  6E47               	movwf	___fldiv@aexp,c
  2085  00177A  D028               	goto	l977
  2086  00177C  5047               	movf	___fldiv@aexp,w,c
  2087  00177E  B4D8               	btfsc	status,2,c
  2088  001780  D011               	goto	l979
  2089  001782  90D8               	bcf	status,0,c
  2090  001784  363C               	rlcf	___fldiv@rem,f,c
  2091  001786  363D               	rlcf	___fldiv@rem+1,f,c
  2092  001788  363E               	rlcf	___fldiv@rem+2,f,c
  2093  00178A  363F               	rlcf	___fldiv@rem+3,f,c
  2094  00178C  90D8               	bcf	status,0,c
  2095  00178E  362F               	rlcf	___fldiv@b,f,c
  2096  001790  3630               	rlcf	___fldiv@b+1,f,c
  2097  001792  3631               	rlcf	___fldiv@b+2,f,c
  2098  001794  3632               	rlcf	___fldiv@b+3,f,c
  2099  001796  BE45               	btfsc	___fldiv@grs+3,7,c
  2100  001798  802F               	bsf	___fldiv@b,0,c
  2101  00179A  90D8               	bcf	status,0,c
  2102  00179C  3642               	rlcf	___fldiv@grs,f,c
  2103  00179E  3643               	rlcf	___fldiv@grs+1,f,c
  2104  0017A0  3644               	rlcf	___fldiv@grs+2,f,c
  2105  0017A2  3645               	rlcf	___fldiv@grs+3,f,c
  2106  0017A4                     l979:
  2107  0017A4  5033               	movf	___fldiv@a,w,c
  2108  0017A6  5C3C               	subwf	___fldiv@rem,w,c
  2109  0017A8  5034               	movf	___fldiv@a+1,w,c
  2110  0017AA  583D               	subwfb	___fldiv@rem+1,w,c
  2111  0017AC  5035               	movf	___fldiv@a+2,w,c
  2112  0017AE  583E               	subwfb	___fldiv@rem+2,w,c
  2113  0017B0  5036               	movf	___fldiv@a+3,w,c
  2114  0017B2  583F               	subwfb	___fldiv@rem+3,w,c
  2115  0017B4  A0D8               	btfss	status,0,c
  2116  0017B6  D009               	goto	l981
  2117  0017B8  8C45               	bsf	___fldiv@grs+3,6,c
  2118  0017BA  5033               	movf	___fldiv@a,w,c
  2119  0017BC  5E3C               	subwf	___fldiv@rem,f,c
  2120  0017BE  5034               	movf	___fldiv@a+1,w,c
  2121  0017C0  5A3D               	subwfb	___fldiv@rem+1,f,c
  2122  0017C2  5035               	movf	___fldiv@a+2,w,c
  2123  0017C4  5A3E               	subwfb	___fldiv@rem+2,f,c
  2124  0017C6  5036               	movf	___fldiv@a+3,w,c
  2125  0017C8  5A3F               	subwfb	___fldiv@rem+3,f,c
  2126  0017CA                     l981:
  2127  0017CA  2A47               	incf	___fldiv@aexp,f,c
  2128  0017CC                     l977:
  2129  0017CC  0E19               	movlw	25
  2130  0017CE  6447               	cpfsgt	___fldiv@aexp,c
  2131  0017D0  D7D5               	goto	l978
  2132  0017D2  503C               	movf	___fldiv@rem,w,c
  2133  0017D4  103D               	iorwf	___fldiv@rem+1,w,c
  2134  0017D6  103E               	iorwf	___fldiv@rem+2,w,c
  2135  0017D8  103F               	iorwf	___fldiv@rem+3,w,c
  2136  0017DA  B4D8               	btfsc	status,2,c
  2137  0017DC  D011               	goto	l984
  2138  0017DE  8042               	bsf	___fldiv@grs,0,c
  2139  0017E0  D00F               	goto	l984
  2140  0017E2  90D8               	bcf	status,0,c
  2141  0017E4  362F               	rlcf	___fldiv@b,f,c
  2142  0017E6  3630               	rlcf	___fldiv@b+1,f,c
  2143  0017E8  3631               	rlcf	___fldiv@b+2,f,c
  2144  0017EA  3632               	rlcf	___fldiv@b+3,f,c
  2145  0017EC  BE45               	btfsc	___fldiv@grs+3,7,c
  2146  0017EE  802F               	bsf	___fldiv@b,0,c
  2147  0017F0  90D8               	bcf	status,0,c
  2148  0017F2  3642               	rlcf	___fldiv@grs,f,c
  2149  0017F4  3643               	rlcf	___fldiv@grs+1,f,c
  2150  0017F6  3644               	rlcf	___fldiv@grs+2,f,c
  2151  0017F8  3645               	rlcf	___fldiv@grs+3,f,c
  2152  0017FA  0640               	decf	___fldiv@new_exp,f,c
  2153  0017FC  A0D8               	btfss	status,0,c
  2154  0017FE  0641               	decf	___fldiv@new_exp+1,f,c
  2155  001800                     l984:
  2156  001800  AE31               	btfss	___fldiv@b+2,7,c
  2157  001802  D7EF               	goto	l985
  2158  001804  0E00               	movlw	0
  2159  001806  6E47               	movwf	___fldiv@aexp,c
  2160  001808  AE45               	btfss	___fldiv@grs+3,7,c
  2161  00180A  D016               	goto	l991
  2162  00180C  0EFF               	movlw	255
  2163  00180E  1442               	andwf	___fldiv@grs,w,c
  2164  001810  6E37               	movwf	??___fldiv& (0+255),c
  2165  001812  0EFF               	movlw	255
  2166  001814  1443               	andwf	___fldiv@grs+1,w,c
  2167  001816  6E38               	movwf	(??___fldiv+1)& (0+255),c
  2168  001818  0EFF               	movlw	255
  2169  00181A  1444               	andwf	___fldiv@grs+2,w,c
  2170  00181C  6E39               	movwf	(??___fldiv+2)& (0+255),c
  2171  00181E  0E7F               	movlw	127
  2172  001820  1445               	andwf	___fldiv@grs+3,w,c
  2173  001822  6E3A               	movwf	(??___fldiv+3)& (0+255),c
  2174  001824  5037               	movf	??___fldiv,w,c
  2175  001826  1038               	iorwf	??___fldiv+1,w,c
  2176  001828  1039               	iorwf	??___fldiv+2,w,c
  2177  00182A  103A               	iorwf	??___fldiv+3,w,c
  2178  00182C  A4D8               	btfss	status,2,c
  2179  00182E  D002               	goto	u6630
  2180  001830  A02F               	btfss	___fldiv@b,0,c
  2181  001832  D002               	goto	l991
  2182  001834                     u6630:
  2183  001834  0E01               	movlw	1
  2184  001836  6E47               	movwf	___fldiv@aexp,c
  2185  001838                     l991:
  2186  001838  5047               	movf	___fldiv@aexp,w,c
  2187  00183A  B4D8               	btfsc	status,2,c
  2188  00183C  D01F               	goto	l993
  2189  00183E  0E01               	movlw	1
  2190  001840  262F               	addwf	___fldiv@b,f,c
  2191  001842  0E00               	movlw	0
  2192  001844  2230               	addwfc	___fldiv@b+1,f,c
  2193  001846  2231               	addwfc	___fldiv@b+2,f,c
  2194  001848  2232               	addwfc	___fldiv@b+3,f,c
  2195  00184A  A032               	btfss	___fldiv@b+3,0,c
  2196  00184C  D017               	goto	l993
  2197  00184E  C02F  F037         	movff	___fldiv@b,??___fldiv
  2198  001852  C030  F038         	movff	___fldiv@b+1,??___fldiv+1
  2199  001856  C031  F039         	movff	___fldiv@b+2,??___fldiv+2
  2200  00185A  C032  F03A         	movff	___fldiv@b+3,??___fldiv+3
  2201  00185E  343A               	rlcf	??___fldiv+3,w,c
  2202  001860  323A               	rrcf	??___fldiv+3,f,c
  2203  001862  3239               	rrcf	??___fldiv+2,f,c
  2204  001864  3238               	rrcf	??___fldiv+1,f,c
  2205  001866  3237               	rrcf	??___fldiv,f,c
  2206  001868  C037  F02F         	movff	??___fldiv,___fldiv@b
  2207  00186C  C038  F030         	movff	??___fldiv+1,___fldiv@b+1
  2208  001870  C039  F031         	movff	??___fldiv+2,___fldiv@b+2
  2209  001874  C03A  F032         	movff	??___fldiv+3,___fldiv@b+3
  2210  001878  4A40               	infsnz	___fldiv@new_exp,f,c
  2211  00187A  2A41               	incf	___fldiv@new_exp+1,f,c
  2212  00187C                     l993:
  2213  00187C  BE41               	btfsc	___fldiv@new_exp+1,7,c
  2214  00187E  D010               	goto	l994
  2215  001880  5041               	movf	___fldiv@new_exp+1,w,c
  2216  001882  E103               	bnz	u6660
  2217  001884  2840               	incf	___fldiv@new_exp,w,c
  2218  001886  A0D8               	btfss	status,0,c
  2219  001888  D00B               	goto	l994
  2220  00188A                     u6660:
  2221  00188A  0E00               	movlw	0
  2222  00188C  6E41               	movwf	___fldiv@new_exp+1,c
  2223  00188E  6840               	setf	___fldiv@new_exp,c
  2224  001890  0E00               	movlw	0
  2225  001892  6E2F               	movwf	___fldiv@b,c
  2226  001894  0E00               	movlw	0
  2227  001896  6E30               	movwf	___fldiv@b+1,c
  2228  001898  0E00               	movlw	0
  2229  00189A  6E31               	movwf	___fldiv@b+2,c
  2230  00189C  0E00               	movlw	0
  2231  00189E  6E32               	movwf	___fldiv@b+3,c
  2232  0018A0                     l994:
  2233  0018A0  BE41               	btfsc	___fldiv@new_exp+1,7,c
  2234  0018A2  D005               	goto	u6670
  2235  0018A4  5041               	movf	___fldiv@new_exp+1,w,c
  2236  0018A6  E111               	bnz	l5639
  2237  0018A8  0440               	decf	___fldiv@new_exp,w,c
  2238  0018AA  B0D8               	btfsc	status,0,c
  2239  0018AC  D00E               	goto	l995
  2240  0018AE                     u6670:
  2241  0018AE  0E00               	movlw	0
  2242  0018B0  6E41               	movwf	___fldiv@new_exp+1,c
  2243  0018B2  0E00               	movlw	0
  2244  0018B4  6E40               	movwf	___fldiv@new_exp,c
  2245  0018B6  0E00               	movlw	0
  2246  0018B8  6E2F               	movwf	___fldiv@b,c
  2247  0018BA  0E00               	movlw	0
  2248  0018BC  6E30               	movwf	___fldiv@b+1,c
  2249  0018BE  0E00               	movlw	0
  2250  0018C0  6E31               	movwf	___fldiv@b+2,c
  2251  0018C2  0E00               	movlw	0
  2252  0018C4  6E32               	movwf	___fldiv@b+3,c
  2253  0018C6  0E00               	movlw	0
  2254  0018C8  6E3B               	movwf	___fldiv@sign,c
  2255  0018CA                     l995:
  2256  0018CA                     l5639:
  2257  0018CA  C040  F046         	movff	___fldiv@new_exp,___fldiv@bexp
  2258  0018CE  A046               	btfss	___fldiv@bexp,0,c
  2259  0018D0  D002               	goto	l996
  2260  0018D2  8E31               	bsf	___fldiv@b+2,7,c
  2261  0018D4  D001               	goto	l997
  2262  0018D6                     l996:
  2263  0018D6  9E31               	bcf	___fldiv@b+2,7,c
  2264  0018D8                     l997:
  2265  0018D8  90D8               	bcf	status,0,c
  2266  0018DA  3046               	rrcf	___fldiv@bexp,w,c
  2267  0018DC  6E32               	movwf	___fldiv@b+3,c
  2268  0018DE  503B               	movf	___fldiv@sign,w,c
  2269  0018E0  1232               	iorwf	___fldiv@b+3,f,c
  2270  0018E2  C02F  F02F         	movff	___fldiv@b,?___fldiv
  2271  0018E6  C030  F030         	movff	___fldiv@b+1,?___fldiv+1
  2272  0018EA  C031  F031         	movff	___fldiv@b+2,?___fldiv+2
  2273  0018EE  C032  F032         	movff	___fldiv@b+3,?___fldiv+3
  2274  0018F2  0012               	return	
  2275  0018F4                     __end_of___fldiv:
  2276                           	opt stack 0
  2277                           tblptru	equ	0xFF8
  2278                           tblptrh	equ	0xFF7
  2279                           tblptrl	equ	0xFF6
  2280                           tablat	equ	0xFF5
  2281                           prodh	equ	0xFF4
  2282                           prodl	equ	0xFF3
  2283                           intcon2	equ	0xFF1
  2284                           postinc0	equ	0xFEE
  2285                           wreg	equ	0xFE8
  2286                           postdec1	equ	0xFE5
  2287                           fsr1l	equ	0xFE1
  2288                           postinc2	equ	0xFDE
  2289                           fsr2h	equ	0xFDA
  2290                           fsr2l	equ	0xFD9
  2291                           status	equ	0xFD8
  2292                           
  2293 ;; *************** function _lcd_init *****************
  2294 ;; Defined at:
  2295 ;;		line 56 in file "lcd_x8.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;		None
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;  i               1   36[COMRAM] unsigned char 
  2300 ;; Return value:  Size  Location     Type
  2301 ;;                  1    wreg      void 
  2302 ;; Registers used:
  2303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2310 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2312 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2313 ;;Total ram usage:        1 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    5
  2316 ;; This function calls:
  2317 ;;		_delay_ms
  2318 ;;		_lcd_send_byte
  2319 ;;		_lcd_send_nibble
  2320 ;; This function is called by:
  2321 ;;		_main
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           	psect	text7
  2326  00290A                     __ptext7:
  2327                           	opt stack 0
  2328  00290A                     _lcd_init:
  2329                           	opt stack 25
  2330                           
  2331                           ;lcd_x8.c: 58: unsigned char i;
  2332                           ;lcd_x8.c: 61: PORTEbits.RE2 = 0;
  2333                           
  2334                           ;incstack = 0
  2335  00290A  9484               	bcf	3972,2,c	;volatile
  2336                           
  2337                           ;lcd_x8.c: 63: PORTEbits.RE1 = 0;
  2338  00290C  9284               	bcf	3972,1,c	;volatile
  2339                           
  2340                           ;lcd_x8.c: 65: delay_ms(25);
  2341  00290E  0E00               	movlw	0
  2342  002910  6E1C               	movwf	delay_ms@n+1,c
  2343  002912  0E19               	movlw	25
  2344  002914  6E1B               	movwf	delay_ms@n,c
  2345  002916  EC33  F016         	call	_delay_ms	;wreg free
  2346                           
  2347                           ;lcd_x8.c: 66: for (i = 1; i <= 3; ++i) {
  2348  00291A  0E01               	movlw	1
  2349  00291C  6E25               	movwf	lcd_init@i,c
  2350  00291E                     l4243:
  2351  00291E  0E03               	movlw	3
  2352  002920  6425               	cpfsgt	lcd_init@i,c
  2353  002922  D001               	goto	l175
  2354  002924  D00B               	goto	u4480
  2355  002926                     l175:
  2356                           
  2357                           ;lcd_x8.c: 67: lcd_send_nibble(3);
  2358  002926  0E03               	movlw	3
  2359  002928  EC46  F016         	call	_lcd_send_nibble
  2360                           
  2361                           ;lcd_x8.c: 69: delay_ms(6);
  2362  00292C  0E00               	movlw	0
  2363  00292E  6E1C               	movwf	delay_ms@n+1,c
  2364  002930  0E06               	movlw	6
  2365  002932  6E1B               	movwf	delay_ms@n,c
  2366  002934  EC33  F016         	call	_delay_ms	;wreg free
  2367  002938  2A25               	incf	lcd_init@i,f,c
  2368  00293A  D7F1               	goto	l4243
  2369  00293C                     u4480:
  2370                           
  2371                           ;lcd_x8.c: 70: }
  2372                           ;lcd_x8.c: 72: lcd_send_nibble(2);
  2373  00293C  0E02               	movlw	2
  2374  00293E  EC46  F016         	call	_lcd_send_nibble
  2375                           
  2376                           ;lcd_x8.c: 74: for (i = 0; i <= 3; ++i)
  2377  002942  0E00               	movlw	0
  2378  002944  6E25               	movwf	lcd_init@i,c
  2379  002946                     l4257:
  2380  002946  0E03               	movlw	3
  2381  002948  6425               	cpfsgt	lcd_init@i,c
  2382  00294A  D001               	goto	l177
  2383  00294C  0012               	return	
  2384  00294E                     l177:
  2385                           
  2386                           ;lcd_x8.c: 75: lcd_send_byte(0, LCD_INIT_STRING[i]);
  2387  00294E  5025               	movf	lcd_init@i,w,c
  2388  002950  0D01               	mullw	1
  2389  002952  0E60               	movlw	low _LCD_INIT_STRING
  2390  002954  24F3               	addwf	prodl,w,c
  2391  002956  6ED9               	movwf	fsr2l,c
  2392  002958  0E00               	movlw	high _LCD_INIT_STRING
  2393  00295A  20F4               	addwfc	prodh,w,c
  2394  00295C  6EDA               	movwf	fsr2h,c
  2395  00295E  50DF               	movf	indf2,w,c
  2396  002960  6E23               	movwf	lcd_send_byte@n,c
  2397  002962  0E00               	movlw	0
  2398  002964  EC59  F015         	call	_lcd_send_byte
  2399  002968  2A25               	incf	lcd_init@i,f,c
  2400  00296A  D7ED               	goto	l4257
  2401  00296C                     __end_of_lcd_init:
  2402                           	opt stack 0
  2403                           tblptru	equ	0xFF8
  2404                           tblptrh	equ	0xFF7
  2405                           tblptrl	equ	0xFF6
  2406                           tablat	equ	0xFF5
  2407                           prodh	equ	0xFF4
  2408                           prodl	equ	0xFF3
  2409                           intcon2	equ	0xFF1
  2410                           postinc0	equ	0xFEE
  2411                           wreg	equ	0xFE8
  2412                           postdec1	equ	0xFE5
  2413                           fsr1l	equ	0xFE1
  2414                           indf2	equ	0xFDF
  2415                           postinc2	equ	0xFDE
  2416                           fsr2h	equ	0xFDA
  2417                           fsr2l	equ	0xFD9
  2418                           status	equ	0xFD8
  2419                           
  2420 ;; *************** function _init_pwm1 *****************
  2421 ;; Defined at:
  2422 ;;		line 5 in file "my_pwm.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;		None
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;		None
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  1    wreg      void 
  2429 ;; Registers used:
  2430 ;;		wreg, status,2
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2440 ;;Total ram usage:        0 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; Hardware stack levels required when called:    2
  2443 ;; This function calls:
  2444 ;;		Nothing
  2445 ;; This function is called by:
  2446 ;;		_main
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           	psect	text8
  2451  002CEA                     __ptext8:
  2452                           	opt stack 0
  2453  002CEA                     _init_pwm1:
  2454                           	opt stack 28
  2455                           
  2456                           ;my_pwm.c: 9: PR2 = 255;
  2457                           
  2458                           ;incstack = 0
  2459  002CEA  68CB               	setf	4043,c	;volatile
  2460                           
  2461                           ;my_pwm.c: 10: T2CON = 0;
  2462  002CEC  0E00               	movlw	0
  2463  002CEE  6ECA               	movwf	4042,c	;volatile
  2464                           
  2465                           ;my_pwm.c: 11: T2CONbits.T2CKPS = 0b10;
  2466  002CF0  50CA               	movf	4042,w,c	;volatile
  2467  002CF2  0BFC               	andlw	-4
  2468  002CF4  0902               	iorlw	2
  2469  002CF6  6ECA               	movwf	4042,c	;volatile
  2470                           
  2471                           ;my_pwm.c: 12: CCP1CON = 0x0C;
  2472  002CF8  0E0C               	movlw	12
  2473  002CFA  6EBD               	movwf	4029,c	;volatile
  2474                           
  2475                           ;my_pwm.c: 14: T2CONbits.TMR2ON = 1;
  2476  002CFC  84CA               	bsf	4042,2,c	;volatile
  2477                           
  2478                           ;my_pwm.c: 15: TRISCbits.RC2 =0;
  2479  002CFE  9494               	bcf	3988,2,c	;volatile
  2480  002D00  0012               	return		;funcret
  2481  002D02                     __end_of_init_pwm1:
  2482                           	opt stack 0
  2483                           tblptru	equ	0xFF8
  2484                           tblptrh	equ	0xFF7
  2485                           tblptrl	equ	0xFF6
  2486                           tablat	equ	0xFF5
  2487                           prodh	equ	0xFF4
  2488                           prodl	equ	0xFF3
  2489                           intcon2	equ	0xFF1
  2490                           postinc0	equ	0xFEE
  2491                           wreg	equ	0xFE8
  2492                           postdec1	equ	0xFE5
  2493                           fsr1l	equ	0xFE1
  2494                           indf2	equ	0xFDF
  2495                           postinc2	equ	0xFDE
  2496                           fsr2h	equ	0xFDA
  2497                           fsr2l	equ	0xFD9
  2498                           status	equ	0xFD8
  2499                           
  2500 ;; *************** function _init_adc_no_lib *****************
  2501 ;; Defined at:
  2502 ;;		line 11 in file "my_adc.c"
  2503 ;; Parameters:    Size  Location     Type
  2504 ;;		None
  2505 ;; Auto vars:     Size  Location     Type
  2506 ;;		None
  2507 ;; Return value:  Size  Location     Type
  2508 ;;                  1    wreg      void 
  2509 ;; Registers used:
  2510 ;;		wreg, status,2
  2511 ;; Tracked objects:
  2512 ;;		On entry : 0/0
  2513 ;;		On exit  : 0/0
  2514 ;;		Unchanged: 0/0
  2515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2520 ;;Total ram usage:        0 bytes
  2521 ;; Hardware stack levels used:    1
  2522 ;; Hardware stack levels required when called:    2
  2523 ;; This function calls:
  2524 ;;		Nothing
  2525 ;; This function is called by:
  2526 ;;		_main
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           	psect	text9
  2531  002D02                     __ptext9:
  2532                           	opt stack 0
  2533  002D02                     _init_adc_no_lib:
  2534                           	opt stack 28
  2535                           
  2536                           ;my_adc.c: 14: ADCON0 = 0;
  2537                           
  2538                           ;incstack = 0
  2539  002D02  0E00               	movlw	0
  2540  002D04  6EC2               	movwf	4034,c	;volatile
  2541                           
  2542                           ;my_adc.c: 15: ADCON0bits.ADON = 1;
  2543  002D06  80C2               	bsf	4034,0,c	;volatile
  2544                           
  2545                           ;my_adc.c: 18: ADCON2 = 0b10001001;
  2546  002D08  0E89               	movlw	137
  2547  002D0A  6EC0               	movwf	4032,c	;volatile
  2548  002D0C  0012               	return		;funcret
  2549  002D0E                     __end_of_init_adc_no_lib:
  2550                           	opt stack 0
  2551                           tblptru	equ	0xFF8
  2552                           tblptrh	equ	0xFF7
  2553                           tblptrl	equ	0xFF6
  2554                           tablat	equ	0xFF5
  2555                           prodh	equ	0xFF4
  2556                           prodl	equ	0xFF3
  2557                           intcon2	equ	0xFF1
  2558                           postinc0	equ	0xFEE
  2559                           wreg	equ	0xFE8
  2560                           postdec1	equ	0xFE5
  2561                           fsr1l	equ	0xFE1
  2562                           indf2	equ	0xFDF
  2563                           postinc2	equ	0xFDE
  2564                           fsr2h	equ	0xFDA
  2565                           fsr2l	equ	0xFD9
  2566                           status	equ	0xFD8
  2567                           
  2568 ;; *************** function _initInterrupts *****************
  2569 ;; Defined at:
  2570 ;;		line 115 in file "pwm_asl.c"
  2571 ;; Parameters:    Size  Location     Type
  2572 ;;		None
  2573 ;; Auto vars:     Size  Location     Type
  2574 ;;		None
  2575 ;; Return value:  Size  Location     Type
  2576 ;;                  1    wreg      void 
  2577 ;; Registers used:
  2578 ;;		wreg, status,2
  2579 ;; Tracked objects:
  2580 ;;		On entry : 0/0
  2581 ;;		On exit  : 0/0
  2582 ;;		Unchanged: 0/0
  2583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2588 ;;Total ram usage:        0 bytes
  2589 ;; Hardware stack levels used:    1
  2590 ;; Hardware stack levels required when called:    2
  2591 ;; This function calls:
  2592 ;;		Nothing
  2593 ;; This function is called by:
  2594 ;;		_main
  2595 ;; This function uses a non-reentrant model
  2596 ;;
  2597                           
  2598                           	psect	text10
  2599  002B3C                     __ptext10:
  2600                           	opt stack 0
  2601  002B3C                     _initInterrupts:
  2602                           	opt stack 28
  2603                           
  2604                           ;pwm_asl.c: 116: INTCON = 0;
  2605                           
  2606                           ;incstack = 0
  2607  002B3C  0E00               	movlw	0
  2608  002B3E  6EF2               	movwf	intcon,c	;volatile
  2609                           
  2610                           ;pwm_asl.c: 117: RCONbits.IPEN = 0;
  2611  002B40  9ED0               	bcf	4048,7,c	;volatile
  2612                           
  2613                           ;pwm_asl.c: 120: INTCONbits.INT0IF = 0;
  2614  002B42  92F2               	bcf	intcon,1,c	;volatile
  2615                           
  2616                           ;pwm_asl.c: 121: INTCON3bits.INT2IF = 0;
  2617  002B44  92F0               	bcf	intcon3,1,c	;volatile
  2618                           
  2619                           ;pwm_asl.c: 122: PIR2bits.TMR3IF = 0;
  2620  002B46  92A1               	bcf	4001,1,c	;volatile
  2621                           
  2622                           ;pwm_asl.c: 125: INTCONbits.INT0IE = 1;
  2623  002B48  88F2               	bsf	intcon,4,c	;volatile
  2624                           
  2625                           ;pwm_asl.c: 126: INTCON3bits.INT2IE = 1;
  2626  002B4A  88F0               	bsf	intcon3,4,c	;volatile
  2627                           
  2628                           ;pwm_asl.c: 127: T3CON = 0;
  2629  002B4C  0E00               	movlw	0
  2630  002B4E  6EB1               	movwf	4017,c	;volatile
  2631                           
  2632                           ;pwm_asl.c: 128: T3CONbits.TMR3ON = 1;
  2633  002B50  80B1               	bsf	4017,0,c	;volatile
  2634                           
  2635                           ;pwm_asl.c: 129: INTCON2 = 0;
  2636  002B52  0E00               	movlw	0
  2637  002B54  6EF1               	movwf	intcon2,c	;volatile
  2638                           
  2639                           ;pwm_asl.c: 130: INTCON2bits.INTEDG2 = 1;
  2640  002B56  88F1               	bsf	intcon2,4,c	;volatile
  2641                           
  2642                           ;pwm_asl.c: 131: INTCON2bits.INTEDG0= 1;
  2643  002B58  8CF1               	bsf	intcon2,6,c	;volatile
  2644                           
  2645                           ;pwm_asl.c: 132: PIE1 = 0;
  2646  002B5A  0E00               	movlw	0
  2647  002B5C  6E9D               	movwf	3997,c	;volatile
  2648                           
  2649                           ;pwm_asl.c: 133: PIR1 = 0;
  2650  002B5E  0E00               	movlw	0
  2651  002B60  6E9E               	movwf	3998,c	;volatile
  2652                           
  2653                           ;pwm_asl.c: 134: IPR1 = 0;
  2654  002B62  0E00               	movlw	0
  2655  002B64  6E9F               	movwf	3999,c	;volatile
  2656                           
  2657                           ;pwm_asl.c: 135: PIE2 = 0;
  2658  002B66  0E00               	movlw	0
  2659  002B68  6EA0               	movwf	4000,c	;volatile
  2660                           
  2661                           ;pwm_asl.c: 136: PIE2 = 0;
  2662  002B6A  0E00               	movlw	0
  2663  002B6C  6EA0               	movwf	4000,c	;volatile
  2664                           
  2665                           ;pwm_asl.c: 137: PIR2 = 0;
  2666  002B6E  0E00               	movlw	0
  2667  002B70  6EA1               	movwf	4001,c	;volatile
  2668                           
  2669                           ;pwm_asl.c: 138: IPR2 = 0;
  2670  002B72  0E00               	movlw	0
  2671  002B74  6EA2               	movwf	4002,c	;volatile
  2672                           
  2673                           ;pwm_asl.c: 139: PIE2bits.CCP2IE = 1;
  2674  002B76  80A0               	bsf	4000,0,c	;volatile
  2675                           
  2676                           ;pwm_asl.c: 140: INTCONbits.GIE = 1;
  2677  002B78  8EF2               	bsf	intcon,7,c	;volatile
  2678  002B7A  0012               	return		;funcret
  2679  002B7C                     __end_of_initInterrupts:
  2680                           	opt stack 0
  2681                           tblptru	equ	0xFF8
  2682                           tblptrh	equ	0xFF7
  2683                           tblptrl	equ	0xFF6
  2684                           tablat	equ	0xFF5
  2685                           prodh	equ	0xFF4
  2686                           prodl	equ	0xFF3
  2687                           intcon	equ	0xFF2
  2688                           intcon2	equ	0xFF1
  2689                           intcon3	equ	0xFF0
  2690                           postinc0	equ	0xFEE
  2691                           wreg	equ	0xFE8
  2692                           postdec1	equ	0xFE5
  2693                           fsr1l	equ	0xFE1
  2694                           indf2	equ	0xFDF
  2695                           postinc2	equ	0xFDE
  2696                           fsr2h	equ	0xFDA
  2697                           fsr2l	equ	0xFD9
  2698                           status	equ	0xFD8
  2699                           
  2700 ;; *************** function _display *****************
  2701 ;; Defined at:
  2702 ;;		line 209 in file "pwm_asl.c"
  2703 ;; Parameters:    Size  Location     Type
  2704 ;;		None
  2705 ;; Auto vars:     Size  Location     Type
  2706 ;;  LCD            64   95[BANK1 ] unsigned char [64]
  2707 ;;  LCDP           64   31[BANK1 ] unsigned char [64]
  2708 ;;  H               1  160[BANK1 ] unsigned char 
  2709 ;;  C               1  159[BANK1 ] unsigned char 
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  1    wreg      void 
  2712 ;; Registers used:
  2713 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2714 ;; Tracked objects:
  2715 ;;		On entry : 0/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2720 ;;      Locals:         0       0     130       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2722 ;;      Totals:         0       0     130       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2723 ;;Total ram usage:      130 bytes
  2724 ;; Hardware stack levels used:    1
  2725 ;; Hardware stack levels required when called:    8
  2726 ;; This function calls:
  2727 ;;		_lcd_gotoxy
  2728 ;;		_lcd_putc
  2729 ;;		_lcd_puts
  2730 ;;		_sprintf
  2731 ;; This function is called by:
  2732 ;;		_main
  2733 ;; This function uses a non-reentrant model
  2734 ;;
  2735                           
  2736                           	psect	text11
  2737  001B8A                     __ptext11:
  2738                           	opt stack 0
  2739  001B8A                     _display:
  2740                           	opt stack 22
  2741                           
  2742                           ;pwm_asl.c: 210: char LCD[64];
  2743                           ;pwm_asl.c: 211: char LCDP[64];
  2744                           ;pwm_asl.c: 212: unsigned char C, H;
  2745                           ;pwm_asl.c: 213: switch(mode) {
  2746                           
  2747                           ;incstack = 0
  2748  001B8A  D03C               	goto	l128
  2749  001B8C                     
  2750                           ;pwm_asl.c: 215: sprintf(LCDP, "OFF                 ");
  2751  001B8C  0E1F               	movlw	low display@LCDP
  2752  001B8E  0100               	movlb	0	; () banked
  2753  001B90  6FC2               	movwf	sprintf@sp& (0+255),b
  2754  001B92  0E01               	movlw	high display@LCDP
  2755  001B94  6FC3               	movwf	(sprintf@sp+1)& (0+255),b
  2756  001B96  0E7B               	movlw	low STR_1
  2757  001B98  6FC4               	movwf	sprintf@f& (0+255),b
  2758  001B9A  0EFF               	movlw	high STR_1
  2759  001B9C  6FC5               	movwf	(sprintf@f+1)& (0+255),b
  2760  001B9E  EC09  F000         	call	_sprintf	;wreg free
  2761  001BA2                     l5685:
  2762                           
  2763                           ;pwm_asl.c: 216: H = 'N';
  2764  001BA2  0E4E               	movlw	78
  2765  001BA4  D02C               	goto	L5
  2766  001BA6                     
  2767                           ;pwm_asl.c: 221: sprintf(LCDP, "Cool                ");
  2768                           
  2769                           ; BSR set to: 1
  2770  001BA6  0E1F               	movlw	low display@LCDP
  2771  001BA8  0100               	movlb	0	; () banked
  2772  001BAA  6FC2               	movwf	sprintf@sp& (0+255),b
  2773  001BAC  0E01               	movlw	high display@LCDP
  2774  001BAE  6FC3               	movwf	(sprintf@sp+1)& (0+255),b
  2775  001BB0  0E90               	movlw	low STR_2
  2776  001BB2  6FC4               	movwf	sprintf@f& (0+255),b
  2777  001BB4  0EFF               	movlw	high STR_2
  2778  001BB6  6FC5               	movwf	(sprintf@f+1)& (0+255),b
  2779  001BB8  EC09  F000         	call	_sprintf	;wreg free
  2780                           
  2781                           ;pwm_asl.c: 222: H = 'N';
  2782  001BBC  0E4E               	movlw	78
  2783  001BBE  0101               	movlb	1	; () banked
  2784  001BC0  6FA0               	movwf	display@H& (0+255),b
  2785                           
  2786                           ; BSR set to: 1
  2787                           ;pwm_asl.c: 223: C = 'Y';
  2788  001BC2  0E59               	movlw	89
  2789  001BC4  D00E               	goto	L4
  2790  001BC6                     
  2791                           ;pwm_asl.c: 227: sprintf(LCDP, "Heat                ");
  2792                           
  2793                           ; BSR set to: 1
  2794  001BC6  0E1F               	movlw	low display@LCDP
  2795  001BC8  0100               	movlb	0	; () banked
  2796  001BCA  6FC2               	movwf	sprintf@sp& (0+255),b
  2797  001BCC  0E01               	movlw	high display@LCDP
  2798  001BCE  6FC3               	movwf	(sprintf@sp+1)& (0+255),b
  2799  001BD0  0EA5               	movlw	low STR_3
  2800  001BD2  6FC4               	movwf	sprintf@f& (0+255),b
  2801  001BD4  0EFF               	movlw	high STR_3
  2802  001BD6  6FC5               	movwf	(sprintf@f+1)& (0+255),b
  2803  001BD8  EC09  F000         	call	_sprintf	;wreg free
  2804                           
  2805                           ;pwm_asl.c: 228: H = 'Y';
  2806  001BDC  0E59               	movlw	89
  2807  001BDE  D00F               	goto	L5
  2808  001BE0                     l5699:
  2809                           
  2810                           ; BSR set to: 1
  2811                           ;pwm_asl.c: 229: C = 'N';
  2812  001BE0  0E4E               	movlw	78
  2813  001BE2                     L4:
  2814  001BE2  6F9F               	movwf	display@C& (0+255),b
  2815                           
  2816                           ;pwm_asl.c: 230: break;
  2817  001BE4  D01C               	goto	l130
  2818  001BE6                     
  2819                           ;pwm_asl.c: 233: sprintf(LCDP, "Auto Cool         ");
  2820                           
  2821                           ; BSR set to: 1
  2822  001BE6  0E1F               	movlw	low display@LCDP
  2823  001BE8  0100               	movlb	0	; () banked
  2824  001BEA  6FC2               	movwf	sprintf@sp& (0+255),b
  2825  001BEC  0E01               	movlw	high display@LCDP
  2826  001BEE  6FC3               	movwf	(sprintf@sp+1)& (0+255),b
  2827  001BF0  0EBA               	movlw	low STR_4
  2828  001BF2  6FC4               	movwf	sprintf@f& (0+255),b
  2829  001BF4  0EFF               	movlw	high STR_4
  2830  001BF6  6FC5               	movwf	(sprintf@f+1)& (0+255),b
  2831  001BF8  EC09  F000         	call	_sprintf	;wreg free
  2832  001BFC  D7D2               	goto	l5685
  2833  001BFE                     L5:
  2834  001BFE  0101               	movlb	1	; () banked
  2835  001C00  6FA0               	movwf	display@H& (0+255),b
  2836  001C02  D7EE               	goto	l5699
  2837  001C04                     l128:
  2838                           
  2839                           ; BSR set to: 1
  2840  001C04  505E               	movf	_mode,w,c
  2841                           
  2842                           ; Switch size 1, requested type "space"
  2843                           ; Number of cases is 4, Range of values is 0 to 3
  2844                           ; switch strategies available:
  2845                           ; Name         Instructions Cycles
  2846                           ; simple_byte           13     7 (average)
  2847                           ;	Chosen strategy is simple_byte
  2848  001C06  0A00               	xorlw	0	; case 0
  2849  001C08  B4D8               	btfsc	status,2,c
  2850  001C0A  D7C0               	goto	l129
  2851  001C0C  0A01               	xorlw	1	; case 1
  2852  001C0E  B4D8               	btfsc	status,2,c
  2853  001C10  D7CA               	goto	l131
  2854  001C12  0A03               	xorlw	3	; case 2
  2855  001C14  B4D8               	btfsc	status,2,c
  2856  001C16  D7D7               	goto	l132
  2857  001C18  0A01               	xorlw	1	; case 3
  2858  001C1A  B4D8               	btfsc	status,2,c
  2859  001C1C  D7E4               	goto	l133
  2860  001C1E                     l130:
  2861                           
  2862                           ;pwm_asl.c: 240: lcd_gotoxy(1, 1);
  2863  001C1E  0E01               	movlw	1
  2864  001C20  6E25               	movwf	lcd_gotoxy@y,c
  2865  001C22  0E01               	movlw	1
  2866  001C24  EC7D  F015         	call	_lcd_gotoxy
  2867                           
  2868                           ;pwm_asl.c: 241: sprintf(LCD, "RT: %4.1fC", temp);
  2869  001C28  0E5F               	movlw	low display@LCD
  2870  001C2A  0100               	movlb	0	; () banked
  2871  001C2C  6FC2               	movwf	sprintf@sp& (0+255),b
  2872  001C2E  0E01               	movlw	high display@LCD
  2873  001C30  6FC3               	movwf	(sprintf@sp+1)& (0+255),b
  2874  001C32  0EE5               	movlw	low STR_5
  2875  001C34  6FC4               	movwf	sprintf@f& (0+255),b
  2876  001C36  0EFF               	movlw	high STR_5
  2877  001C38  6FC5               	movwf	(sprintf@f+1)& (0+255),b
  2878  001C3A  C1A5  F0C6         	movff	_temp,?_sprintf+4
  2879  001C3E  C1A6  F0C7         	movff	_temp+1,?_sprintf+5
  2880  001C42  C1A7  F0C8         	movff	_temp+2,?_sprintf+6
  2881  001C46  C1A8  F0C9         	movff	_temp+3,?_sprintf+7
  2882  001C4A  EC09  F000         	call	_sprintf	;wreg free
  2883                           
  2884                           ;pwm_asl.c: 242: lcd_puts(LCD);
  2885  001C4E  0E5F               	movlw	low display@LCD
  2886  001C50  6E29               	movwf	lcd_puts@s,c
  2887  001C52  0E01               	movlw	high display@LCD
  2888  001C54  6E2A               	movwf	lcd_puts@s+1,c
  2889  001C56  ECB6  F014         	call	_lcd_puts	;wreg free
  2890                           
  2891                           ;pwm_asl.c: 244: lcd_gotoxy(14, 1);
  2892  001C5A  0E01               	movlw	1
  2893  001C5C  6E25               	movwf	lcd_gotoxy@y,c
  2894  001C5E  0E0E               	movlw	14
  2895  001C60  EC7D  F015         	call	_lcd_gotoxy
  2896                           
  2897                           ;pwm_asl.c: 245: lcd_puts("H C");
  2898  001C64  0EFB               	movlw	low STR_6
  2899  001C66  6E29               	movwf	lcd_puts@s,c
  2900  001C68  0EFF               	movlw	high STR_6
  2901  001C6A  6E2A               	movwf	lcd_puts@s+1,c
  2902  001C6C  ECB6  F014         	call	_lcd_puts	;wreg free
  2903                           
  2904                           ;pwm_asl.c: 247: lcd_gotoxy(1, 2);
  2905  001C70  0E02               	movlw	2
  2906  001C72  6E25               	movwf	lcd_gotoxy@y,c
  2907  001C74  0E01               	movlw	1
  2908  001C76  EC7D  F015         	call	_lcd_gotoxy
  2909                           
  2910                           ;pwm_asl.c: 248: sprintf(LCD, "SP: %4.1fC ", sp);
  2911  001C7A  0E5F               	movlw	low display@LCD
  2912  001C7C  0100               	movlb	0	; () banked
  2913  001C7E  6FC2               	movwf	sprintf@sp& (0+255),b
  2914  001C80  0E01               	movlw	high display@LCD
  2915  001C82  6FC3               	movwf	(sprintf@sp+1)& (0+255),b
  2916  001C84  0ECD               	movlw	low STR_7
  2917  001C86  6FC4               	movwf	sprintf@f& (0+255),b
  2918  001C88  0EFF               	movlw	high STR_7
  2919  001C8A  6FC5               	movwf	(sprintf@f+1)& (0+255),b
  2920  001C8C  C1A1  F0C6         	movff	_sp,?_sprintf+4
  2921  001C90  C1A2  F0C7         	movff	_sp+1,?_sprintf+5
  2922  001C94  C1A3  F0C8         	movff	_sp+2,?_sprintf+6
  2923  001C98  C1A4  F0C9         	movff	_sp+3,?_sprintf+7
  2924  001C9C  EC09  F000         	call	_sprintf	;wreg free
  2925                           
  2926                           ;pwm_asl.c: 249: lcd_puts(LCD);
  2927  001CA0  0E5F               	movlw	low display@LCD
  2928  001CA2  6E29               	movwf	lcd_puts@s,c
  2929  001CA4  0E01               	movlw	high display@LCD
  2930  001CA6  6E2A               	movwf	lcd_puts@s+1,c
  2931  001CA8  ECB6  F014         	call	_lcd_puts	;wreg free
  2932                           
  2933                           ;pwm_asl.c: 251: lcd_gotoxy(14, 2);
  2934  001CAC  0E02               	movlw	2
  2935  001CAE  6E25               	movwf	lcd_gotoxy@y,c
  2936  001CB0  0E0E               	movlw	14
  2937  001CB2  EC7D  F015         	call	_lcd_gotoxy
  2938                           
  2939                           ;pwm_asl.c: 252: lcd_putc(H);
  2940  001CB6  0101               	movlb	1	; () banked
  2941  001CB8  51A0               	movf	display@H& (0+255),w,b
  2942  001CBA  ECE1  F014         	call	_lcd_putc
  2943                           
  2944                           ;pwm_asl.c: 253: lcd_gotoxy(16, 2);
  2945  001CBE  0E02               	movlw	2
  2946  001CC0  6E25               	movwf	lcd_gotoxy@y,c
  2947  001CC2  0E10               	movlw	16
  2948  001CC4  EC7D  F015         	call	_lcd_gotoxy
  2949                           
  2950                           ;pwm_asl.c: 254: lcd_putc(C);
  2951  001CC8  0101               	movlb	1	; () banked
  2952  001CCA  519F               	movf	display@C& (0+255),w,b
  2953  001CCC  ECE1  F014         	call	_lcd_putc
  2954                           
  2955                           ;pwm_asl.c: 256: lcd_gotoxy(1, 3);
  2956  001CD0  0E03               	movlw	3
  2957  001CD2  6E25               	movwf	lcd_gotoxy@y,c
  2958  001CD4  0E01               	movlw	1
  2959  001CD6  EC7D  F015         	call	_lcd_gotoxy
  2960                           
  2961                           ;pwm_asl.c: 257: sprintf(LCD, "HS: %d", HS);
  2962  001CDA  0E5F               	movlw	low display@LCD
  2963  001CDC  0100               	movlb	0	; () banked
  2964  001CDE  6FC2               	movwf	sprintf@sp& (0+255),b
  2965  001CE0  0E01               	movlw	high display@LCD
  2966  001CE2  6FC3               	movwf	(sprintf@sp+1)& (0+255),b
  2967  001CE4  0EF0               	movlw	low STR_8
  2968  001CE6  6FC4               	movwf	sprintf@f& (0+255),b
  2969  001CE8  0EFF               	movlw	high STR_8
  2970  001CEA  6FC5               	movwf	(sprintf@f+1)& (0+255),b
  2971  001CEC  C05F  F0C6         	movff	_HS,?_sprintf+4
  2972  001CF0  6BC7               	clrf	(?_sprintf+5)& (0+255),b
  2973  001CF2  EC09  F000         	call	_sprintf	;wreg free
  2974                           
  2975                           ;pwm_asl.c: 258: lcd_puts(LCD);
  2976  001CF6  0E5F               	movlw	low display@LCD
  2977  001CF8  6E29               	movwf	lcd_puts@s,c
  2978  001CFA  0E01               	movlw	high display@LCD
  2979  001CFC  6E2A               	movwf	lcd_puts@s+1,c
  2980  001CFE  ECB6  F014         	call	_lcd_puts	;wreg free
  2981                           
  2982                           ;pwm_asl.c: 260: lcd_gotoxy(8, 3);
  2983  001D02  0E03               	movlw	3
  2984  001D04  6E25               	movwf	lcd_gotoxy@y,c
  2985  001D06  0E08               	movlw	8
  2986  001D08  EC7D  F015         	call	_lcd_gotoxy
  2987                           
  2988                           ;pwm_asl.c: 261: sprintf(LCD, "HC: %4.1f%%", HC);
  2989  001D0C  0E5F               	movlw	low display@LCD
  2990  001D0E  0100               	movlb	0	; () banked
  2991  001D10  6FC2               	movwf	sprintf@sp& (0+255),b
  2992  001D12  0E01               	movlw	high display@LCD
  2993  001D14  6FC3               	movwf	(sprintf@sp+1)& (0+255),b
  2994  001D16  0ED9               	movlw	low STR_9
  2995  001D18  6FC4               	movwf	sprintf@f& (0+255),b
  2996  001D1A  0EFF               	movlw	high STR_9
  2997  001D1C  6FC5               	movwf	(sprintf@f+1)& (0+255),b
  2998  001D1E  C1A9  F0C6         	movff	_HC,?_sprintf+4
  2999  001D22  C1AA  F0C7         	movff	_HC+1,?_sprintf+5
  3000  001D26  C1AB  F0C8         	movff	_HC+2,?_sprintf+6
  3001  001D2A  C1AC  F0C9         	movff	_HC+3,?_sprintf+7
  3002  001D2E  EC09  F000         	call	_sprintf	;wreg free
  3003                           
  3004                           ;pwm_asl.c: 262: lcd_puts(LCD);
  3005  001D32  0E5F               	movlw	low display@LCD
  3006  001D34  6E29               	movwf	lcd_puts@s,c
  3007  001D36  0E01               	movlw	high display@LCD
  3008  001D38  6E2A               	movwf	lcd_puts@s+1,c
  3009  001D3A  ECB6  F014         	call	_lcd_puts	;wreg free
  3010                           
  3011                           ;pwm_asl.c: 265: lcd_gotoxy(1, 4);
  3012  001D3E  0E04               	movlw	4
  3013  001D40  6E25               	movwf	lcd_gotoxy@y,c
  3014  001D42  0E01               	movlw	1
  3015  001D44  EC7D  F015         	call	_lcd_gotoxy
  3016                           
  3017                           ;pwm_asl.c: 266: sprintf(LCD, "MD:");
  3018  001D48  0E5F               	movlw	low display@LCD
  3019  001D4A  0100               	movlb	0	; () banked
  3020  001D4C  6FC2               	movwf	sprintf@sp& (0+255),b
  3021  001D4E  0E01               	movlw	high display@LCD
  3022  001D50  6FC3               	movwf	(sprintf@sp+1)& (0+255),b
  3023  001D52  0EF7               	movlw	low STR_10
  3024  001D54  6FC4               	movwf	sprintf@f& (0+255),b
  3025  001D56  0EFF               	movlw	high STR_10
  3026  001D58  6FC5               	movwf	(sprintf@f+1)& (0+255),b
  3027  001D5A  EC09  F000         	call	_sprintf	;wreg free
  3028                           
  3029                           ;pwm_asl.c: 267: lcd_puts(LCD);
  3030  001D5E  0E5F               	movlw	low display@LCD
  3031  001D60  6E29               	movwf	lcd_puts@s,c
  3032  001D62  0E01               	movlw	high display@LCD
  3033  001D64  6E2A               	movwf	lcd_puts@s+1,c
  3034  001D66  ECB6  F014         	call	_lcd_puts	;wreg free
  3035                           
  3036                           ;pwm_asl.c: 269: lcd_gotoxy(5, 4);
  3037  001D6A  0E04               	movlw	4
  3038  001D6C  6E25               	movwf	lcd_gotoxy@y,c
  3039  001D6E  0E05               	movlw	5
  3040  001D70  EC7D  F015         	call	_lcd_gotoxy
  3041                           
  3042                           ;pwm_asl.c: 270: lcd_puts(LCDP);
  3043  001D74  0E1F               	movlw	low display@LCDP
  3044  001D76  6E29               	movwf	lcd_puts@s,c
  3045  001D78  0E01               	movlw	high display@LCDP
  3046  001D7A  6E2A               	movwf	lcd_puts@s+1,c
  3047  001D7C  ECB6  F014         	call	_lcd_puts	;wreg free
  3048  001D80  0012               	return		;funcret
  3049  001D82                     __end_of_display:
  3050                           	opt stack 0
  3051                           tblptru	equ	0xFF8
  3052                           tblptrh	equ	0xFF7
  3053                           tblptrl	equ	0xFF6
  3054                           tablat	equ	0xFF5
  3055                           prodh	equ	0xFF4
  3056                           prodl	equ	0xFF3
  3057                           intcon	equ	0xFF2
  3058                           intcon2	equ	0xFF1
  3059                           intcon3	equ	0xFF0
  3060                           postinc0	equ	0xFEE
  3061                           wreg	equ	0xFE8
  3062                           postdec1	equ	0xFE5
  3063                           fsr1l	equ	0xFE1
  3064                           indf2	equ	0xFDF
  3065                           postinc2	equ	0xFDE
  3066                           fsr2h	equ	0xFDA
  3067                           fsr2l	equ	0xFD9
  3068                           status	equ	0xFD8
  3069                           
  3070 ;; *************** function _sprintf *****************
  3071 ;; Defined at:
  3072 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3073 ;; Parameters:    Size  Location     Type
  3074 ;;  sp              2   66[BANK0 ] PTR unsigned char 
  3075 ;;		 -> display@LCD(64), display@LCDP(64), 
  3076 ;;  f               2   68[BANK0 ] PTR const unsigned char 
  3077 ;;		 -> STR_10(4), STR_9(12), STR_8(7), STR_7(12), 
  3078 ;;		 -> STR_5(11), STR_4(19), STR_3(21), STR_2(21), 
  3079 ;;		 -> STR_1(21), 
  3080 ;; Auto vars:     Size  Location     Type
  3081 ;;  fval            4   24[BANK1 ] PTR const unsigned char 
  3082 ;;  val             4   16[BANK1 ] unsigned long 
  3083 ;;  tmpval          4   12[BANK1 ] struct .
  3084 ;;  prec            2   28[BANK1 ] int 
  3085 ;;  width           2   22[BANK1 ] int 
  3086 ;;  exp             2   20[BANK1 ] int 
  3087 ;;  flag            2   10[BANK1 ] unsigned short 
  3088 ;;  len             2    8[BANK1 ] unsigned int 
  3089 ;;  ap              2    6[BANK1 ] PTR void [1]
  3090 ;;		 -> ?_sprintf(2), 
  3091 ;;  cp              2    4[BANK1 ] PTR const unsigned char 
  3092 ;;		 -> sprintf@c(1), 
  3093 ;;  c               1   30[BANK1 ] char 
  3094 ;;  d               1    0        unsigned char 
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  2   66[BANK0 ] int 
  3097 ;; Registers used:
  3098 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 0/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3104 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3105 ;;      Locals:         0       0      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3106 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3107 ;;      Totals:         0      12      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3108 ;;Total ram usage:       43 bytes
  3109 ;; Hardware stack levels used:    1
  3110 ;; Hardware stack levels required when called:    4
  3111 ;; This function calls:
  3112 ;;		___awdiv
  3113 ;;		___fladd
  3114 ;;		___flge
  3115 ;;		___flmul
  3116 ;;		___flneg
  3117 ;;		___flsub
  3118 ;;		___fltol
  3119 ;;		___lldiv
  3120 ;;		___llmod
  3121 ;;		___wmul
  3122 ;;		___xxtofl
  3123 ;;		__div_to_l_
  3124 ;;		__tdiv_to_l_
  3125 ;;		_fround
  3126 ;;		_isdigit
  3127 ;;		_scale
  3128 ;; This function is called by:
  3129 ;;		_display
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133                           	psect	text12
  3134  000012                     __ptext12:
  3135                           	opt stack 0
  3136  000012                     _sprintf:
  3137                           	opt stack 25
  3138                           
  3139                           ;doprnt.c: 494: va_list ap;
  3140                           ;doprnt.c: 499: signed char c;
  3141                           ;doprnt.c: 501: int width;
  3142                           ;doprnt.c: 504: int prec;
  3143                           ;doprnt.c: 508: unsigned short flag;
  3144                           ;doprnt.c: 515: char d;
  3145                           ;doprnt.c: 516: double fval;
  3146                           ;doprnt.c: 517: int exp;
  3147                           ;doprnt.c: 523: union {
  3148                           ;doprnt.c: 524: unsigned long vd;
  3149                           ;doprnt.c: 525: double integ;
  3150                           ;doprnt.c: 526: } tmpval;
  3151                           ;doprnt.c: 528: unsigned long val;
  3152                           ;doprnt.c: 529: unsigned len;
  3153                           ;doprnt.c: 530: const char * cp;
  3154                           ;doprnt.c: 533: *ap = __va_start();
  3155                           
  3156                           ;incstack = 0
  3157  000012  0EC6               	movlw	low (?_sprintf+4)
  3158  000014  0101               	movlb	1	; () banked
  3159  000016  6F06               	movwf	sprintf@ap& (0+255),b
  3160  000018  0E00               	movlw	high (?_sprintf+4)
  3161  00001A  6F07               	movwf	(sprintf@ap+1)& (0+255),b
  3162                           
  3163                           ;doprnt.c: 536: while(c = *f++) {
  3164  00001C  EF9A  F005         	goto	u6440
  3165  000020                     
  3166                           ; BSR set to: 1
  3167                           ;doprnt.c: 538: if(c != '%')
  3168                           
  3169                           ; BSR set to: 1
  3170  000020  0E25               	movlw	37
  3171  000022  191E               	xorwf	sprintf@c& (0+255),w,b
  3172  000024  B4D8               	btfsc	status,2,c
  3173  000026  D00B               	goto	l346
  3174                           
  3175                           ; BSR set to: 1
  3176                           ;doprnt.c: 540: {
  3177                           ;doprnt.c: 541: ((*sp++ = (c)));
  3178  000028  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  3179  00002C  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  3180  000030  C11E  FFDF         	movff	sprintf@c,indf2
  3181                           
  3182                           ; BSR set to: 1
  3183  000034  0100               	movlb	0	; () banked
  3184  000036  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  3185  000038  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  3186                           
  3187                           ;doprnt.c: 542: continue;
  3188  00003A  EF9A  F005         	goto	u6440
  3189  00003E                     l346:
  3190                           
  3191                           ;doprnt.c: 543: }
  3192                           ;doprnt.c: 546: width = 0;
  3193                           
  3194                           ; BSR set to: 0
  3195  00003E  0E00               	movlw	0
  3196  000040  0101               	movlb	1	; () banked
  3197  000042  6F17               	movwf	(sprintf@width+1)& (0+255),b
  3198  000044  0E00               	movlw	0
  3199  000046  6F16               	movwf	sprintf@width& (0+255),b
  3200                           
  3201                           ;doprnt.c: 548: flag = 0;
  3202  000048  0E00               	movlw	0
  3203  00004A  6F0B               	movwf	(sprintf@flag+1)& (0+255),b
  3204  00004C  0E00               	movlw	0
  3205  00004E  6F0A               	movwf	sprintf@flag& (0+255),b
  3206                           
  3207                           ; BSR set to: 1
  3208                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3209  000050  C0C4  FFF6         	movff	sprintf@f,tblptrl
  3210  000054  C0C5  FFF7         	movff	sprintf@f+1,tblptrh
  3211  000058                     	if	0	;tblptru may be non-zero
  3212  000058                     	endif
  3213  000058                     	if	0	;tblptru may be non-zero
  3214  000058                     	endif
  3215  000058  0008               	tblrd		*
  3216  00005A  50F5               	movf	tablat,w,c
  3217  00005C  EC66  F016         	call	_isdigit
  3218  000060  A0D8               	btfss	status,0,c
  3219  000062  D038               	goto	u5940
  3220                           
  3221                           ;doprnt.c: 598: width = 0;
  3222  000064  0E00               	movlw	0
  3223  000066  0101               	movlb	1	; () banked
  3224  000068  6F17               	movwf	(sprintf@width+1)& (0+255),b
  3225  00006A  0E00               	movlw	0
  3226  00006C  6F16               	movwf	sprintf@width& (0+255),b
  3227  00006E                     
  3228                           ;doprnt.c: 600: width *= 10;
  3229                           
  3230                           ; BSR set to: 1
  3231  00006E  C116  F01B         	movff	sprintf@width,___wmul@multiplier
  3232  000072  C117  F01C         	movff	sprintf@width+1,___wmul@multiplier+1
  3233  000076  0E00               	movlw	0
  3234  000078  6E1E               	movwf	___wmul@multiplicand+1,c
  3235  00007A  0E0A               	movlw	10
  3236  00007C  6E1D               	movwf	___wmul@multiplicand,c
  3237  00007E  EC20  F016         	call	___wmul	;wreg free
  3238  000082  C01B  F116         	movff	?___wmul,sprintf@width
  3239  000086  C01C  F117         	movff	?___wmul+1,sprintf@width+1
  3240                           
  3241                           ;doprnt.c: 601: width += *f++ - '0';
  3242  00008A  0ED0               	movlw	208
  3243  00008C  0100               	movlb	0	; () banked
  3244  00008E  6FCA               	movwf	??_sprintf& (0+255),b
  3245  000090  0EFF               	movlw	255
  3246  000092  6FCB               	movwf	(??_sprintf+1)& (0+255),b
  3247  000094  C0C4  FFF6         	movff	sprintf@f,tblptrl
  3248  000098  C0C5  FFF7         	movff	sprintf@f+1,tblptrh
  3249  00009C                     	if	0	;tblptru may be non-zero
  3250  00009C                     	endif
  3251  00009C                     	if	0	;tblptru may be non-zero
  3252  00009C                     	endif
  3253  00009C  0008               	tblrd		*
  3254  00009E  50F5               	movf	tablat,w,c
  3255  0000A0  6FCC               	movwf	(??_sprintf+2)& (0+255),b
  3256  0000A2  6BCD               	clrf	(??_sprintf+3)& (0+255),b
  3257  0000A4  51CA               	movf	??_sprintf& (0+255),w,b
  3258  0000A6  27CC               	addwf	(??_sprintf+2)& (0+255),f,b
  3259  0000A8  51CB               	movf	(??_sprintf+1)& (0+255),w,b
  3260  0000AA  23CD               	addwfc	(??_sprintf+3)& (0+255),f,b
  3261  0000AC  51CC               	movf	(??_sprintf+2)& (0+255),w,b
  3262  0000AE  0101               	movlb	1	; () banked
  3263  0000B0  2716               	addwf	sprintf@width& (0+255),f,b
  3264  0000B2  0100               	movlb	0	; () banked
  3265  0000B4  51CD               	movf	(??_sprintf+3)& (0+255),w,b
  3266  0000B6  0101               	movlb	1	; () banked
  3267  0000B8  2317               	addwfc	(sprintf@width+1)& (0+255),f,b
  3268                           
  3269                           ; BSR set to: 1
  3270  0000BA  0100               	movlb	0	; () banked
  3271  0000BC  4BC4               	infsnz	sprintf@f& (0+255),f,b
  3272  0000BE  2BC5               	incf	(sprintf@f+1)& (0+255),f,b
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3276  0000C0  C0C4  FFF6         	movff	sprintf@f,tblptrl
  3277  0000C4  C0C5  FFF7         	movff	sprintf@f+1,tblptrh
  3278  0000C8                     	if	0	;tblptru may be non-zero
  3279  0000C8                     	endif
  3280  0000C8                     	if	0	;tblptru may be non-zero
  3281  0000C8                     	endif
  3282  0000C8  0008               	tblrd		*
  3283  0000CA  50F5               	movf	tablat,w,c
  3284  0000CC  EC66  F016         	call	_isdigit
  3285  0000D0  B0D8               	btfsc	status,0,c
  3286  0000D2  D7CD               	goto	l348
  3287  0000D4                     u5940:
  3288                           
  3289                           ;doprnt.c: 608: }
  3290                           ;doprnt.c: 611: if(*f == '.') {
  3291  0000D4  C0C4  FFF6         	movff	sprintf@f,tblptrl
  3292  0000D8  C0C5  FFF7         	movff	sprintf@f+1,tblptrh
  3293  0000DC                     	if	0	;tblptru may be non-zero
  3294  0000DC                     	endif
  3295  0000DC                     	if	0	;tblptru may be non-zero
  3296  0000DC                     	endif
  3297  0000DC  0008               	tblrd		*
  3298  0000DE  50F5               	movf	tablat,w,c
  3299  0000E0  0A2E               	xorlw	46
  3300  0000E2  A4D8               	btfss	status,2,c
  3301  0000E4  D033               	goto	l350
  3302                           
  3303                           ;doprnt.c: 612: flag |= 0x4000;
  3304  0000E6  0101               	movlb	1	; () banked
  3305  0000E8  8D0B               	bsf	(sprintf@flag+1)& (0+255),6,b
  3306                           
  3307                           ;doprnt.c: 613: f++;
  3308  0000EA  0100               	movlb	0	; () banked
  3309  0000EC  4BC4               	infsnz	sprintf@f& (0+255),f,b
  3310  0000EE  2BC5               	incf	(sprintf@f+1)& (0+255),f,b
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;doprnt.c: 620: {
  3314                           ;doprnt.c: 621: prec = 0;
  3315  0000F0  0E00               	movlw	0
  3316  0000F2  0101               	movlb	1	; () banked
  3317  0000F4  6F1D               	movwf	(sprintf@prec+1)& (0+255),b
  3318  0000F6  0E00               	movlw	0
  3319  0000F8  6F1C               	movwf	sprintf@prec& (0+255),b
  3320                           
  3321                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3322  0000FA  D01D               	goto	l351
  3323  0000FC                     
  3324                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3325                           
  3326                           ; BSR set to: 1
  3327  0000FC  C11C  F01B         	movff	sprintf@prec,___wmul@multiplier
  3328  000100  C11D  F01C         	movff	sprintf@prec+1,___wmul@multiplier+1
  3329  000104  0E00               	movlw	0
  3330  000106  6E1E               	movwf	___wmul@multiplicand+1,c
  3331  000108  0E0A               	movlw	10
  3332  00010A  6E1D               	movwf	___wmul@multiplicand,c
  3333  00010C  EC20  F016         	call	___wmul	;wreg free
  3334  000110  C0C4  FFF6         	movff	sprintf@f,tblptrl
  3335  000114  C0C5  FFF7         	movff	sprintf@f+1,tblptrh
  3336  000118                     	if	0	;tblptru may be non-zero
  3337  000118                     	endif
  3338  000118                     	if	0	;tblptru may be non-zero
  3339  000118                     	endif
  3340  000118  0008               	tblrd		*
  3341  00011A  50F5               	movf	tablat,w,c
  3342  00011C  261B               	addwf	?___wmul,f,c
  3343  00011E  0E00               	movlw	0
  3344  000120  221C               	addwfc	?___wmul+1,f,c
  3345  000122  0ED0               	movlw	208
  3346  000124  241B               	addwf	?___wmul,w,c
  3347  000126  0101               	movlb	1	; () banked
  3348  000128  6F1C               	movwf	sprintf@prec& (0+255),b
  3349  00012A  0EFF               	movlw	255
  3350  00012C  201C               	addwfc	?___wmul+1,w,c
  3351  00012E  6F1D               	movwf	(sprintf@prec+1)& (0+255),b
  3352                           
  3353                           ; BSR set to: 1
  3354  000130  0100               	movlb	0	; () banked
  3355  000132  4BC4               	infsnz	sprintf@f& (0+255),f,b
  3356  000134  2BC5               	incf	(sprintf@f+1)& (0+255),f,b
  3357  000136                     l351:
  3358                           
  3359                           ; BSR set to: 0
  3360  000136  C0C4  FFF6         	movff	sprintf@f,tblptrl
  3361  00013A  C0C5  FFF7         	movff	sprintf@f+1,tblptrh
  3362  00013E                     	if	0	;tblptru may be non-zero
  3363  00013E                     	endif
  3364  00013E                     	if	0	;tblptru may be non-zero
  3365  00013E                     	endif
  3366  00013E  0008               	tblrd		*
  3367  000140  50F5               	movf	tablat,w,c
  3368  000142  EC66  F016         	call	_isdigit
  3369  000146  A0D8               	btfss	status,0,c
  3370  000148  D05E               	goto	l355
  3371  00014A  D7D8               	goto	l352
  3372  00014C                     l350:
  3373                           
  3374                           ;doprnt.c: 626: prec = 0;
  3375  00014C  0E00               	movlw	0
  3376  00014E  0101               	movlb	1	; () banked
  3377  000150  6F1D               	movwf	(sprintf@prec+1)& (0+255),b
  3378  000152  0E00               	movlw	0
  3379  000154  6F1C               	movwf	sprintf@prec& (0+255),b
  3380                           
  3381                           ; BSR set to: 1
  3382                           ;doprnt.c: 628: flag |= 0x1000;
  3383  000156  890B               	bsf	(sprintf@flag+1)& (0+255),4,b
  3384                           
  3385                           ; BSR set to: 1
  3386                           ;doprnt.c: 630: }
  3387                           ;doprnt.c: 635: switch(c = *f++) {
  3388  000158  D056               	goto	l355
  3389  00015A                     
  3390                           ; BSR set to: 1
  3391                           ;doprnt.c: 663: flag |= 0x400;
  3392                           
  3393                           ; BSR set to: 1
  3394  00015A  850B               	bsf	(sprintf@flag+1)& (0+255),2,b
  3395                           
  3396                           ; BSR set to: 1
  3397                           ;doprnt.c: 698: case 'i':
  3398                           ;doprnt.c: 699: break;
  3399                           
  3400                           ; BSR set to: 1
  3401                           
  3402                           ;doprnt.c: 697: case 'd':
  3403                           
  3404                           ;doprnt.c: 664: break;
  3405  00015C  D06D               	goto	l359
  3406  00015E                     
  3407                           ; BSR set to: 1
  3408                           ;doprnt.c: 753: if(prec && prec < len)
  3409                           
  3410                           ; BSR set to: 1
  3411  00015E  511C               	movf	sprintf@prec& (0+255),w,b
  3412  000160  111D               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3413  000162  B4D8               	btfsc	status,2,c
  3414  000164  D00A               	goto	l363
  3415                           
  3416                           ; BSR set to: 1
  3417  000166  5108               	movf	sprintf@len& (0+255),w,b
  3418  000168  5D1C               	subwf	sprintf@prec& (0+255),w,b
  3419  00016A  5109               	movf	(sprintf@len+1)& (0+255),w,b
  3420  00016C  591D               	subwfb	(sprintf@prec+1)& (0+255),w,b
  3421  00016E  B0D8               	btfsc	status,0,c
  3422  000170  D004               	goto	l363
  3423                           
  3424                           ; BSR set to: 1
  3425                           ;doprnt.c: 754: len = prec;
  3426  000172  C11C  F108         	movff	sprintf@prec,sprintf@len
  3427  000176  C11D  F109         	movff	sprintf@prec+1,sprintf@len+1
  3428  00017A                     l363:
  3429                           
  3430                           ; BSR set to: 1
  3431                           ;doprnt.c: 757: if(width > len)
  3432                           
  3433                           ; BSR set to: 1
  3434  00017A  5116               	movf	sprintf@width& (0+255),w,b
  3435  00017C  5D08               	subwf	sprintf@len& (0+255),w,b
  3436  00017E  5117               	movf	(sprintf@width+1)& (0+255),w,b
  3437  000180  5909               	subwfb	(sprintf@len+1)& (0+255),w,b
  3438  000182  B0D8               	btfsc	status,0,c
  3439  000184  D005               	goto	l364
  3440                           
  3441                           ; BSR set to: 1
  3442                           ;doprnt.c: 758: width -= len;
  3443  000186  5108               	movf	sprintf@len& (0+255),w,b
  3444  000188  5F16               	subwf	sprintf@width& (0+255),f,b
  3445  00018A  5109               	movf	(sprintf@len+1)& (0+255),w,b
  3446  00018C  5B17               	subwfb	(sprintf@width+1)& (0+255),f,b
  3447  00018E  D00E               	goto	l366
  3448  000190                     l364:
  3449                           
  3450                           ; BSR set to: 1
  3451                           ;doprnt.c: 759: else
  3452                           ;doprnt.c: 760: width = 0;
  3453                           
  3454                           ; BSR set to: 1
  3455  000190  0E00               	movlw	0
  3456  000192  6F17               	movwf	(sprintf@width+1)& (0+255),b
  3457  000194  0E00               	movlw	0
  3458  000196  6F16               	movwf	sprintf@width& (0+255),b
  3459                           
  3460                           ; BSR set to: 1
  3461                           ;doprnt.c: 764: while(width--)
  3462  000198  D009               	goto	l366
  3463  00019A                     l5247:
  3464                           
  3465                           ; BSR set to: 1
  3466                           ;doprnt.c: 765: ((*sp++ = (' ')));
  3467  00019A  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  3468  00019E  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  3469  0001A2  0E20               	movlw	32
  3470  0001A4  6EDF               	movwf	indf2,c
  3471                           
  3472                           ; BSR set to: 1
  3473  0001A6  0100               	movlb	0	; () banked
  3474  0001A8  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  3475  0001AA  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  3476  0001AC                     l366:
  3477                           
  3478                           ; BSR set to: 0
  3479  0001AC  0101               	movlb	1	; () banked
  3480  0001AE  0716               	decf	sprintf@width& (0+255),f,b
  3481  0001B0  A0D8               	btfss	status,0,c
  3482  0001B2  0717               	decf	(sprintf@width+1)& (0+255),f,b
  3483  0001B4  2916               	incf	sprintf@width& (0+255),w,b
  3484  0001B6  E1F1               	bnz	l5247
  3485  0001B8  2917               	incf	(sprintf@width+1)& (0+255),w,b
  3486  0001BA  B4D8               	btfsc	status,2,c
  3487  0001BC  D010               	goto	l369
  3488  0001BE  D7ED               	goto	l367
  3489  0001C0                     l5253:
  3490                           
  3491                           ; BSR set to: 1
  3492                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  3493  0001C0  C104  FFD9         	movff	sprintf@cp,fsr2l
  3494  0001C4  C105  FFDA         	movff	sprintf@cp+1,fsr2h
  3495  0001C8  C0C2  FFE1         	movff	sprintf@sp,fsr1l
  3496  0001CC  C0C3  FFE2         	movff	sprintf@sp+1,fsr1h
  3497  0001D0  CFDF FFE7          	movff	indf2,indf1
  3498                           
  3499                           ; BSR set to: 1
  3500  0001D4  4B04               	infsnz	sprintf@cp& (0+255),f,b
  3501  0001D6  2B05               	incf	(sprintf@cp+1)& (0+255),f,b
  3502                           
  3503                           ; BSR set to: 1
  3504  0001D8  0100               	movlb	0	; () banked
  3505  0001DA  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  3506  0001DC  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  3507  0001DE                     l369:
  3508                           
  3509                           ; BSR set to: 0
  3510  0001DE  0101               	movlb	1	; () banked
  3511  0001E0  0708               	decf	sprintf@len& (0+255),f,b
  3512  0001E2  A0D8               	btfss	status,0,c
  3513  0001E4  0709               	decf	(sprintf@len+1)& (0+255),f,b
  3514  0001E6  2908               	incf	sprintf@len& (0+255),w,b
  3515  0001E8  E1EB               	bnz	l5253
  3516  0001EA  2909               	incf	(sprintf@len+1)& (0+255),w,b
  3517  0001EC  B4D8               	btfsc	status,2,c
  3518  0001EE  EF9A  F005         	goto	u6440
  3519  0001F2  D7E6               	goto	l370
  3520  0001F4                     
  3521                           ; BSR set to: 1
  3522                           ;doprnt.c: 805: cp = (char *)&c;
  3523                           
  3524                           ; BSR set to: 1
  3525  0001F4  0E1E               	movlw	low sprintf@c
  3526  0001F6  6F04               	movwf	sprintf@cp& (0+255),b
  3527  0001F8  0E01               	movlw	high sprintf@c
  3528  0001FA  6F05               	movwf	(sprintf@cp+1)& (0+255),b
  3529                           
  3530                           ; BSR set to: 1
  3531                           ;doprnt.c: 806: len = 1;
  3532  0001FC  0E00               	movlw	0
  3533  0001FE  6F09               	movwf	(sprintf@len+1)& (0+255),b
  3534  000200  0E01               	movlw	1
  3535  000202  6F08               	movwf	sprintf@len& (0+255),b
  3536                           
  3537                           ;doprnt.c: 807: goto dostring;
  3538  000204  D7AC               	goto	l362
  3539  000206                     l355:
  3540                           
  3541                           ; BSR set to: 1
  3542  000206  C0C4  FFF6         	movff	sprintf@f,tblptrl
  3543  00020A  C0C5  FFF7         	movff	sprintf@f+1,tblptrh
  3544  00020E  0100               	movlb	0	; () banked
  3545  000210  4BC4               	infsnz	sprintf@f& (0+255),f,b
  3546  000212  2BC5               	incf	(sprintf@f+1)& (0+255),f,b
  3547  000214                     	if	0	;tblptru may be non-zero
  3548  000214                     	endif
  3549  000214                     	if	0	;tblptru may be non-zero
  3550  000214                     	endif
  3551  000214  0008               	tblrd		*
  3552  000216  CFF5 F11E          	movff	tablat,sprintf@c
  3553  00021A  0101               	movlb	1	; () banked
  3554  00021C  511E               	movf	sprintf@c& (0+255),w,b
  3555                           
  3556                           ; Switch size 1, requested type "space"
  3557                           ; Number of cases is 4, Range of values is 0 to 105
  3558                           ; switch strategies available:
  3559                           ; Name         Instructions Cycles
  3560                           ; simple_byte           13     7 (average)
  3561                           ;	Chosen strategy is simple_byte
  3562  00021E  0A00               	xorlw	0	; case 0
  3563  000220  B4D8               	btfsc	status,2,c
  3564  000222  EFA9  F005         	goto	u6450
  3565  000226  0A64               	xorlw	100	; case 100
  3566  000228  B4D8               	btfsc	status,2,c
  3567  00022A  D006               	goto	l359
  3568  00022C  0A02               	xorlw	2	; case 102
  3569  00022E  B4D8               	btfsc	status,2,c
  3570  000230  D794               	goto	l358
  3571  000232  0A0F               	xorlw	15	; case 105
  3572  000234  A4D8               	btfss	status,2,c
  3573  000236  D7DE               	goto	l372
  3574  000238                     l359:
  3575                           
  3576                           ; BSR set to: 1
  3577                           ;doprnt.c: 825: if(flag & (0x700)) {
  3578                           
  3579                           ; BSR set to: 1
  3580  000238  0E07               	movlw	7
  3581  00023A  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  3582  00023C  B4D8               	btfsc	status,2,c
  3583  00023E  D349               	goto	l373
  3584                           
  3585                           ; BSR set to: 1
  3586                           ;doprnt.c: 827: if(flag & 0x1000)
  3587  000240  A90B               	btfss	(sprintf@flag+1)& (0+255),4,b
  3588  000242  D004               	goto	l374
  3589                           
  3590                           ; BSR set to: 1
  3591                           ;doprnt.c: 829: prec = 6;
  3592  000244  0E00               	movlw	0
  3593  000246  6F1D               	movwf	(sprintf@prec+1)& (0+255),b
  3594  000248  0E06               	movlw	6
  3595  00024A  6F1C               	movwf	sprintf@prec& (0+255),b
  3596  00024C                     l374:
  3597                           
  3598                           ; BSR set to: 1
  3599                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3600                           
  3601                           ; BSR set to: 1
  3602  00024C  C106  FFD9         	movff	sprintf@ap,fsr2l
  3603  000250  C107  FFDA         	movff	sprintf@ap+1,fsr2h
  3604  000254  CFDE F118          	movff	postinc2,sprintf@fval
  3605  000258  CFDE F119          	movff	postinc2,sprintf@fval+1
  3606  00025C  CFDE F11A          	movff	postinc2,sprintf@fval+2
  3607  000260  CFDE F11B          	movff	postinc2,sprintf@fval+3
  3608                           
  3609                           ; BSR set to: 1
  3610  000264  0E04               	movlw	4
  3611  000266  2706               	addwf	sprintf@ap& (0+255),f,b
  3612  000268  0E00               	movlw	0
  3613  00026A  2307               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3614                           
  3615                           ; BSR set to: 1
  3616                           ;doprnt.c: 831: if(fval < 0.0) {
  3617  00026C  AF1B               	btfss	(sprintf@fval+3)& (0+255),7,b
  3618  00026E  D015               	goto	l375
  3619                           
  3620                           ; BSR set to: 1
  3621                           ;doprnt.c: 832: fval = -fval;
  3622  000270  C118  F01B         	movff	sprintf@fval,___flneg@f1
  3623  000274  C119  F01C         	movff	sprintf@fval+1,___flneg@f1+1
  3624  000278  C11A  F01D         	movff	sprintf@fval+2,___flneg@f1+2
  3625  00027C  C11B  F01E         	movff	sprintf@fval+3,___flneg@f1+3
  3626  000280  ECF2  F015         	call	___flneg	;wreg free
  3627  000284  C01B  F118         	movff	?___flneg,sprintf@fval
  3628  000288  C01C  F119         	movff	?___flneg+1,sprintf@fval+1
  3629  00028C  C01D  F11A         	movff	?___flneg+2,sprintf@fval+2
  3630  000290  C01E  F11B         	movff	?___flneg+3,sprintf@fval+3
  3631                           
  3632                           ;doprnt.c: 833: flag |= 0x03;
  3633  000294  0E03               	movlw	3
  3634  000296  0101               	movlb	1	; () banked
  3635  000298  130A               	iorwf	sprintf@flag& (0+255),f,b
  3636  00029A                     l375:
  3637                           
  3638                           ; BSR set to: 1
  3639                           ;doprnt.c: 834: }
  3640                           ;doprnt.c: 835: exp = 0;
  3641                           
  3642                           ; BSR set to: 1
  3643  00029A  0E00               	movlw	0
  3644  00029C  6F15               	movwf	(sprintf@exp+1)& (0+255),b
  3645  00029E  0E00               	movlw	0
  3646  0002A0  6F14               	movwf	sprintf@exp& (0+255),b
  3647                           
  3648                           ; BSR set to: 1
  3649                           ;doprnt.c: 836: if( fval!=0) {
  3650  0002A2  5118               	movf	sprintf@fval& (0+255),w,b
  3651  0002A4  1119               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3652  0002A6  111A               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3653  0002A8  111B               	iorwf	(sprintf@fval+3)& (0+255),w,b
  3654  0002AA  B4D8               	btfsc	status,2,c
  3655  0002AC  D082               	goto	l380
  3656                           
  3657                           ; BSR set to: 1
  3658                           ;doprnt.c: 837: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
  3659  0002AE  351A               	rlcf	(sprintf@fval+2)& (0+255),w,b
  3660  0002B0  351B               	rlcf	(sprintf@fval+3)& (0+255),w,b
  3661  0002B2  0F82               	addlw	130
  3662  0002B4  6F14               	movwf	sprintf@exp& (0+255),b
  3663  0002B6  6B15               	clrf	(sprintf@exp+1)& (0+255),b
  3664  0002B8  0EFF               	movlw	255
  3665  0002BA  2315               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3666                           
  3667                           ; BSR set to: 1
  3668                           ;doprnt.c: 838: exp--;
  3669  0002BC  0714               	decf	sprintf@exp& (0+255),f,b
  3670  0002BE  A0D8               	btfss	status,0,c
  3671  0002C0  0715               	decf	(sprintf@exp+1)& (0+255),f,b
  3672                           
  3673                           ; BSR set to: 1
  3674                           ;doprnt.c: 839: exp *= 3;
  3675  0002C2  C114  F01B         	movff	sprintf@exp,___wmul@multiplier
  3676  0002C6  C115  F01C         	movff	sprintf@exp+1,___wmul@multiplier+1
  3677  0002CA  0E00               	movlw	0
  3678  0002CC  6E1E               	movwf	___wmul@multiplicand+1,c
  3679  0002CE  0E03               	movlw	3
  3680  0002D0  6E1D               	movwf	___wmul@multiplicand,c
  3681  0002D2  EC20  F016         	call	___wmul	;wreg free
  3682  0002D6  C01B  F114         	movff	?___wmul,sprintf@exp
  3683  0002DA  C01C  F115         	movff	?___wmul+1,sprintf@exp+1
  3684                           
  3685                           ;doprnt.c: 840: exp /= 10;
  3686  0002DE  C114  F021         	movff	sprintf@exp,___awdiv@dividend
  3687  0002E2  C115  F022         	movff	sprintf@exp+1,___awdiv@dividend+1
  3688  0002E6  0E00               	movlw	0
  3689  0002E8  6E24               	movwf	___awdiv@divisor+1,c
  3690  0002EA  0E0A               	movlw	10
  3691  0002EC  6E23               	movwf	___awdiv@divisor,c
  3692  0002EE  EC5F  F013         	call	___awdiv	;wreg free
  3693  0002F2  C021  F114         	movff	?___awdiv,sprintf@exp
  3694  0002F6  C022  F115         	movff	?___awdiv+1,sprintf@exp+1
  3695                           
  3696                           ;doprnt.c: 841: if(exp < 0)
  3697  0002FA  0101               	movlb	1	; () banked
  3698  0002FC  AF15               	btfss	(sprintf@exp+1)& (0+255),7,b
  3699  0002FE  D003               	goto	l377
  3700                           
  3701                           ; BSR set to: 1
  3702                           ;doprnt.c: 842: exp--;
  3703  000300  0714               	decf	sprintf@exp& (0+255),f,b
  3704  000302  A0D8               	btfss	status,0,c
  3705  000304  0715               	decf	(sprintf@exp+1)& (0+255),f,b
  3706  000306                     l377:
  3707                           
  3708                           ; BSR set to: 1
  3709                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3710                           
  3711                           ; BSR set to: 1
  3712  000306  5114               	movf	sprintf@exp& (0+255),w,b
  3713  000308  0800               	sublw	0
  3714  00030A  ECB0  F005         	call	_scale
  3715  00030E  C099  F10C         	movff	?_scale,sprintf@tmpval
  3716  000312  C09A  F10D         	movff	?_scale+1,sprintf@tmpval+1
  3717  000316  C09B  F10E         	movff	?_scale+2,sprintf@tmpval+2
  3718  00031A  C09C  F10F         	movff	?_scale+3,sprintf@tmpval+3
  3719                           
  3720                           ;doprnt.c: 847: tmpval.integ *= fval;
  3721  00031E  C10C  F080         	movff	sprintf@tmpval,___flmul@b
  3722  000322  C10D  F081         	movff	sprintf@tmpval+1,___flmul@b+1
  3723  000326  C10E  F082         	movff	sprintf@tmpval+2,___flmul@b+2
  3724  00032A  C10F  F083         	movff	sprintf@tmpval+3,___flmul@b+3
  3725  00032E  C118  F084         	movff	sprintf@fval,___flmul@a
  3726  000332  C119  F085         	movff	sprintf@fval+1,___flmul@a+1
  3727  000336  C11A  F086         	movff	sprintf@fval+2,___flmul@a+2
  3728  00033A  C11B  F087         	movff	sprintf@fval+3,___flmul@a+3
  3729  00033E  ECD8  F007         	call	___flmul	;wreg free
  3730  000342  C080  F10C         	movff	?___flmul,sprintf@tmpval
  3731  000346  C081  F10D         	movff	?___flmul+1,sprintf@tmpval+1
  3732  00034A  C082  F10E         	movff	?___flmul+2,sprintf@tmpval+2
  3733  00034E  C083  F10F         	movff	?___flmul+3,sprintf@tmpval+3
  3734                           
  3735                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3736  000352  C10C  F01B         	movff	sprintf@tmpval,___flge@ff1
  3737  000356  C10D  F01C         	movff	sprintf@tmpval+1,___flge@ff1+1
  3738  00035A  C10E  F01D         	movff	sprintf@tmpval+2,___flge@ff1+2
  3739  00035E  C10F  F01E         	movff	sprintf@tmpval+3,___flge@ff1+3
  3740  000362  0E00               	movlw	0
  3741  000364  6E1F               	movwf	___flge@ff2,c
  3742  000366  0E00               	movlw	0
  3743  000368  6E20               	movwf	___flge@ff2+1,c
  3744  00036A  0E80               	movlw	128
  3745  00036C  6E21               	movwf	___flge@ff2+2,c
  3746  00036E  0E3F               	movlw	63
  3747  000370  6E22               	movwf	___flge@ff2+3,c
  3748  000372  EC28  F011         	call	___flge	;wreg free
  3749  000376  B0D8               	btfsc	status,0,c
  3750  000378  D005               	goto	l378
  3751                           
  3752                           ;doprnt.c: 849: exp--;
  3753  00037A  0101               	movlb	1	; () banked
  3754  00037C  0714               	decf	sprintf@exp& (0+255),f,b
  3755  00037E  A0D8               	btfss	status,0,c
  3756  000380  0715               	decf	(sprintf@exp+1)& (0+255),f,b
  3757  000382  D017               	goto	l380
  3758  000384                     l378:
  3759                           
  3760                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3761                           
  3762                           ; BSR set to: 1
  3763  000384  C10C  F01B         	movff	sprintf@tmpval,___flge@ff1
  3764  000388  C10D  F01C         	movff	sprintf@tmpval+1,___flge@ff1+1
  3765  00038C  C10E  F01D         	movff	sprintf@tmpval+2,___flge@ff1+2
  3766  000390  C10F  F01E         	movff	sprintf@tmpval+3,___flge@ff1+3
  3767  000394  0E00               	movlw	0
  3768  000396  6E1F               	movwf	___flge@ff2,c
  3769  000398  0E00               	movlw	0
  3770  00039A  6E20               	movwf	___flge@ff2+1,c
  3771  00039C  0E20               	movlw	32
  3772  00039E  6E21               	movwf	___flge@ff2+2,c
  3773  0003A0  0E41               	movlw	65
  3774  0003A2  6E22               	movwf	___flge@ff2+3,c
  3775  0003A4  EC28  F011         	call	___flge	;wreg free
  3776  0003A8  A0D8               	btfss	status,0,c
  3777  0003AA  D003               	goto	l380
  3778                           
  3779                           ;doprnt.c: 851: exp++;
  3780  0003AC  0101               	movlb	1	; () banked
  3781  0003AE  4B14               	infsnz	sprintf@exp& (0+255),f,b
  3782  0003B0  2B15               	incf	(sprintf@exp+1)& (0+255),f,b
  3783  0003B2                     l380:
  3784                           
  3785                           ;doprnt.c: 852: }
  3786                           ;doprnt.c: 1112: if(prec <= 12)
  3787                           
  3788                           ; BSR set to: 1
  3789                           
  3790                           ; BSR set to: 1
  3791                           
  3792                           ; BSR set to: 1
  3793  0003B2  0101               	movlb	1	; () banked
  3794  0003B4  BF1D               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3795  0003B6  D006               	goto	u6090
  3796  0003B8  511D               	movf	(sprintf@prec+1)& (0+255),w,b
  3797  0003BA  E121               	bnz	l5317
  3798  0003BC  0E0D               	movlw	13
  3799  0003BE  5D1C               	subwf	sprintf@prec& (0+255),w,b
  3800  0003C0  B0D8               	btfsc	status,0,c
  3801  0003C2  D01D               	goto	l381
  3802  0003C4                     u6090:
  3803                           
  3804                           ; BSR set to: 1
  3805                           ;doprnt.c: 1113: fval += fround(prec);
  3806  0003C4  C118  F0A6         	movff	sprintf@fval,___fladd@b
  3807  0003C8  C119  F0A7         	movff	sprintf@fval+1,___fladd@b+1
  3808  0003CC  C11A  F0A8         	movff	sprintf@fval+2,___fladd@b+2
  3809  0003D0  C11B  F0A9         	movff	sprintf@fval+3,___fladd@b+3
  3810  0003D4  511C               	movf	sprintf@prec& (0+255),w,b
  3811  0003D6  EC7A  F00C         	call	_fround
  3812  0003DA  C099  F0AA         	movff	?_fround,___fladd@a
  3813  0003DE  C09A  F0AB         	movff	?_fround+1,___fladd@a+1
  3814  0003E2  C09B  F0AC         	movff	?_fround+2,___fladd@a+2
  3815  0003E6  C09C  F0AD         	movff	?_fround+3,___fladd@a+3
  3816  0003EA  EC81  F009         	call	___fladd	;wreg free
  3817  0003EE  C0A6  F118         	movff	?___fladd,sprintf@fval
  3818  0003F2  C0A7  F119         	movff	?___fladd+1,sprintf@fval+1
  3819  0003F6  C0A8  F11A         	movff	?___fladd+2,sprintf@fval+2
  3820  0003FA  C0A9  F11B         	movff	?___fladd+3,sprintf@fval+3
  3821  0003FE                     l381:
  3822  0003FE                     l5317:
  3823                           
  3824                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3825  0003FE  0101               	movlb	1	; () banked
  3826  000400  BF15               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3827  000402  D006               	goto	u6100
  3828  000404  5115               	movf	(sprintf@exp+1)& (0+255),w,b
  3829  000406  E124               	bnz	l5325
  3830  000408  0E0A               	movlw	10
  3831  00040A  5D14               	subwf	sprintf@exp& (0+255),w,b
  3832  00040C  B0D8               	btfsc	status,0,c
  3833  00040E  D020               	goto	u6130
  3834  000410                     u6100:
  3835                           
  3836                           ; BSR set to: 1
  3837  000410  5118               	movf	sprintf@fval& (0+255),w,b
  3838  000412  1119               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3839  000414  111A               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3840  000416  111B               	iorwf	(sprintf@fval+3)& (0+255),w,b
  3841  000418  B4D8               	btfsc	status,2,c
  3842  00041A  D065               	goto	l382
  3843                           
  3844                           ; BSR set to: 1
  3845  00041C  C118  F0A2         	movff	sprintf@fval,___fltol@f1
  3846  000420  C119  F0A3         	movff	sprintf@fval+1,___fltol@f1+1
  3847  000424  C11A  F0A4         	movff	sprintf@fval+2,___fltol@f1+2
  3848  000428  C11B  F0A5         	movff	sprintf@fval+3,___fltol@f1+3
  3849  00042C  ECAD  F012         	call	___fltol	;wreg free
  3850  000430  0100               	movlb	0	; () banked
  3851  000432  51A2               	movf	?___fltol& (0+255),w,b
  3852  000434  11A3               	iorwf	(?___fltol+1)& (0+255),w,b
  3853  000436  11A4               	iorwf	(?___fltol+2)& (0+255),w,b
  3854  000438  11A5               	iorwf	(?___fltol+3)& (0+255),w,b
  3855  00043A  A4D8               	btfss	status,2,c
  3856  00043C  D054               	goto	l382
  3857                           
  3858                           ; BSR set to: 0
  3859  00043E  0101               	movlb	1	; () banked
  3860  000440  BF15               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3861  000442  D051               	goto	l382
  3862  000444  5115               	movf	(sprintf@exp+1)& (0+255),w,b
  3863  000446  E104               	bnz	l5325
  3864  000448  0E02               	movlw	2
  3865  00044A  5D14               	subwf	sprintf@exp& (0+255),w,b
  3866  00044C  A0D8               	btfss	status,0,c
  3867  00044E  D04B               	goto	l382
  3868  000450                     u6130:
  3869  000450                     l5325:
  3870                           
  3871                           ; BSR set to: 1
  3872                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3873  000450  C10C  F01B         	movff	sprintf@tmpval,___flge@ff1
  3874  000454  C10D  F01C         	movff	sprintf@tmpval+1,___flge@ff1+1
  3875  000458  C10E  F01D         	movff	sprintf@tmpval+2,___flge@ff1+2
  3876  00045C  C10F  F01E         	movff	sprintf@tmpval+3,___flge@ff1+3
  3877  000460  0E5F               	movlw	95
  3878  000462  6E1F               	movwf	___flge@ff2,c
  3879  000464  0E70               	movlw	112
  3880  000466  6E20               	movwf	___flge@ff2+1,c
  3881  000468  0E89               	movlw	137
  3882  00046A  6E21               	movwf	___flge@ff2+2,c
  3883  00046C  0E40               	movlw	64
  3884  00046E  6E22               	movwf	___flge@ff2+3,c
  3885  000470  EC28  F011         	call	___flge	;wreg free
  3886  000474  B0D8               	btfsc	status,0,c
  3887  000476  D003               	goto	l385
  3888                           
  3889                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3890  000478  0101               	movlb	1	; () banked
  3891  00047A  0EF7               	movlw	247
  3892  00047C  D002               	goto	L6
  3893  00047E                     l385:
  3894                           
  3895                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3896                           
  3897                           ; BSR set to: 1
  3898  00047E  0101               	movlb	1	; () banked
  3899  000480  0EF8               	movlw	248
  3900  000482                     L6:
  3901  000482  2714               	addwf	sprintf@exp& (0+255),f,b
  3902  000484  0EFF               	movlw	255
  3903  000486  2315               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3904                           
  3905                           ; BSR set to: 1
  3906                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3907                           
  3908                           ; BSR set to: 1
  3909  000488  5114               	movf	sprintf@exp& (0+255),w,b
  3910  00048A  ECB0  F005         	call	_scale
  3911  00048E  C099  F10C         	movff	?_scale,sprintf@tmpval
  3912  000492  C09A  F10D         	movff	?_scale+1,sprintf@tmpval+1
  3913  000496  C09B  F10E         	movff	?_scale+2,sprintf@tmpval+2
  3914  00049A  C09C  F10F         	movff	?_scale+3,sprintf@tmpval+3
  3915  00049E  C118  F01B         	movff	sprintf@fval,__div_to_l_@f1
  3916  0004A2  C119  F01C         	movff	sprintf@fval+1,__div_to_l_@f1+1
  3917  0004A6  C11A  F01D         	movff	sprintf@fval+2,__div_to_l_@f1+2
  3918  0004AA  C11B  F01E         	movff	sprintf@fval+3,__div_to_l_@f1+3
  3919  0004AE  C10C  F01F         	movff	sprintf@tmpval,__div_to_l_@f2
  3920  0004B2  C10D  F020         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  3921  0004B6  C10E  F021         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  3922  0004BA  C10F  F022         	movff	sprintf@tmpval+3,__div_to_l_@f2+3
  3923  0004BE  EC02  F010         	call	__div_to_l_	;wreg free
  3924  0004C2  C01B  F110         	movff	?__div_to_l_,sprintf@val
  3925  0004C6  C01C  F111         	movff	?__div_to_l_+1,sprintf@val+1
  3926  0004CA  C01D  F112         	movff	?__div_to_l_+2,sprintf@val+2
  3927  0004CE  C01E  F113         	movff	?__div_to_l_+3,sprintf@val+3
  3928                           
  3929                           ;doprnt.c: 1129: fval = 0.0;
  3930  0004D2  0E00               	movlw	0
  3931  0004D4  0101               	movlb	1	; () banked
  3932  0004D6  6F18               	movwf	sprintf@fval& (0+255),b
  3933  0004D8  0E00               	movlw	0
  3934  0004DA  6F19               	movwf	(sprintf@fval+1)& (0+255),b
  3935  0004DC  0E00               	movlw	0
  3936  0004DE  6F1A               	movwf	(sprintf@fval+2)& (0+255),b
  3937  0004E0  0E00               	movlw	0
  3938  0004E2  6F1B               	movwf	(sprintf@fval+3)& (0+255),b
  3939                           
  3940                           ;doprnt.c: 1130: } else {
  3941  0004E4  D03C               	goto	l391
  3942  0004E6                     l382:
  3943                           
  3944                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3945                           
  3946                           ; BSR set to: 1
  3947  0004E6  C118  F0A2         	movff	sprintf@fval,___fltol@f1
  3948  0004EA  C119  F0A3         	movff	sprintf@fval+1,___fltol@f1+1
  3949  0004EE  C11A  F0A4         	movff	sprintf@fval+2,___fltol@f1+2
  3950  0004F2  C11B  F0A5         	movff	sprintf@fval+3,___fltol@f1+3
  3951  0004F6  ECAD  F012         	call	___fltol	;wreg free
  3952  0004FA  C0A2  F110         	movff	?___fltol,sprintf@val
  3953  0004FE  C0A3  F111         	movff	?___fltol+1,sprintf@val+1
  3954  000502  C0A4  F112         	movff	?___fltol+2,sprintf@val+2
  3955  000506  C0A5  F113         	movff	?___fltol+3,sprintf@val+3
  3956                           
  3957                           ;doprnt.c: 1132: fval -= (double)val;
  3958  00050A  C118  F0BA         	movff	sprintf@fval,___flsub@b
  3959  00050E  C119  F0BB         	movff	sprintf@fval+1,___flsub@b+1
  3960  000512  C11A  F0BC         	movff	sprintf@fval+2,___flsub@b+2
  3961  000516  C11B  F0BD         	movff	sprintf@fval+3,___flsub@b+3
  3962  00051A  C110  F021         	movff	sprintf@val,___xxtofl@val
  3963  00051E  C111  F022         	movff	sprintf@val+1,___xxtofl@val+1
  3964  000522  C112  F023         	movff	sprintf@val+2,___xxtofl@val+2
  3965  000526  C113  F024         	movff	sprintf@val+3,___xxtofl@val+3
  3966  00052A  0E00               	movlw	0
  3967  00052C  ECC1  F00E         	call	___xxtofl
  3968  000530  C021  F0BE         	movff	?___xxtofl,___flsub@a
  3969  000534  C022  F0BF         	movff	?___xxtofl+1,___flsub@a+1
  3970  000538  C023  F0C0         	movff	?___xxtofl+2,___flsub@a+2
  3971  00053C  C024  F0C1         	movff	?___xxtofl+3,___flsub@a+3
  3972  000540  EC35  F015         	call	___flsub	;wreg free
  3973  000544  C0BA  F118         	movff	?___flsub,sprintf@fval
  3974  000548  C0BB  F119         	movff	?___flsub+1,sprintf@fval+1
  3975  00054C  C0BC  F11A         	movff	?___flsub+2,sprintf@fval+2
  3976  000550  C0BD  F11B         	movff	?___flsub+3,sprintf@fval+3
  3977                           
  3978                           ;doprnt.c: 1133: exp = 0;
  3979  000554  0E00               	movlw	0
  3980  000556  0101               	movlb	1	; () banked
  3981  000558  6F15               	movwf	(sprintf@exp+1)& (0+255),b
  3982  00055A  0E00               	movlw	0
  3983  00055C  6F14               	movwf	sprintf@exp& (0+255),b
  3984  00055E                     l391:
  3985                           
  3986                           ; BSR set to: 1
  3987                           ;doprnt.c: 1134: }
  3988                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3989                           
  3990                           ; BSR set to: 1
  3991  00055E  0E01               	movlw	1
  3992  000560  6F1E               	movwf	sprintf@c& (0+255),b
  3993  000562                     l5345:
  3994                           
  3995                           ; BSR set to: 1
  3996  000562  0E0A               	movlw	10
  3997  000564  191E               	xorwf	sprintf@c& (0+255),w,b
  3998  000566  B4D8               	btfsc	status,2,c
  3999  000568  D018               	goto	u6170
  4000                           
  4001                           ; BSR set to: 1
  4002                           ;doprnt.c: 1137: if(val < dpowers[c])
  4003                           
  4004                           ; BSR set to: 1
  4005                           
  4006                           ; BSR set to: 1
  4007  00056A  511E               	movf	sprintf@c& (0+255),w,b
  4008  00056C  0D04               	mullw	4
  4009  00056E  0E53               	movlw	low _dpowers
  4010  000570  24F3               	addwf	prodl,w,c
  4011  000572  6EF6               	movwf	tblptrl,c
  4012  000574  0EFF               	movlw	high _dpowers
  4013  000576  20F4               	addwfc	prodh,w,c
  4014  000578  6EF7               	movwf	tblptrh,c
  4015  00057A                     	if	0	;There are less than 3 active tblptr bytes
  4016  00057A                     	endif
  4017  00057A  0009               	tblrd		*+
  4018  00057C  50F5               	movf	tablat,w,c
  4019  00057E  5D10               	subwf	sprintf@val& (0+255),w,b
  4020  000580  0009               	tblrd		*+
  4021  000582  50F5               	movf	tablat,w,c
  4022  000584  5911               	subwfb	(sprintf@val+1)& (0+255),w,b
  4023  000586  0009               	tblrd		*+
  4024  000588  50F5               	movf	tablat,w,c
  4025  00058A  5912               	subwfb	(sprintf@val+2)& (0+255),w,b
  4026  00058C  0009               	tblrd		*+
  4027  00058E  50F5               	movf	tablat,w,c
  4028  000590  5913               	subwfb	(sprintf@val+3)& (0+255),w,b
  4029  000592  A0D8               	btfss	status,0,c
  4030  000594  D002               	goto	u6170
  4031                           
  4032                           ; BSR set to: 1
  4033                           
  4034                           ; BSR set to: 1
  4035                           
  4036                           ; BSR set to: 1
  4037                           ;doprnt.c: 1138: break;
  4038  000596  2B1E               	incf	sprintf@c& (0+255),f,b
  4039  000598  D7E4               	goto	l5345
  4040  00059A                     u6170:
  4041                           
  4042                           ; BSR set to: 1
  4043                           ;doprnt.c: 1142: width -= prec + c + exp;
  4044                           
  4045                           ; BSR set to: 1
  4046  00059A  C11E  F0CA         	movff	sprintf@c,??_sprintf
  4047  00059E  0100               	movlb	0	; () banked
  4048  0005A0  6BCB               	clrf	(??_sprintf+1)& (0+255),b
  4049  0005A2  BFCA               	btfsc	??_sprintf& (0+255),7,b
  4050  0005A4  07CB               	decf	(??_sprintf+1)& (0+255),f,b
  4051  0005A6  0101               	movlb	1	; () banked
  4052  0005A8  511C               	movf	sprintf@prec& (0+255),w,b
  4053  0005AA  0100               	movlb	0	; () banked
  4054  0005AC  27CA               	addwf	??_sprintf& (0+255),f,b
  4055  0005AE  0101               	movlb	1	; () banked
  4056  0005B0  511D               	movf	(sprintf@prec+1)& (0+255),w,b
  4057  0005B2  0100               	movlb	0	; () banked
  4058  0005B4  23CB               	addwfc	(??_sprintf+1)& (0+255),f,b
  4059  0005B6  0101               	movlb	1	; () banked
  4060  0005B8  5114               	movf	sprintf@exp& (0+255),w,b
  4061  0005BA  0100               	movlb	0	; () banked
  4062  0005BC  27CA               	addwf	??_sprintf& (0+255),f,b
  4063  0005BE  0101               	movlb	1	; () banked
  4064  0005C0  5115               	movf	(sprintf@exp+1)& (0+255),w,b
  4065  0005C2  0100               	movlb	0	; () banked
  4066  0005C4  23CB               	addwfc	(??_sprintf+1)& (0+255),f,b
  4067  0005C6  51CA               	movf	??_sprintf& (0+255),w,b
  4068  0005C8  0101               	movlb	1	; () banked
  4069  0005CA  5F16               	subwf	sprintf@width& (0+255),f,b
  4070  0005CC  0100               	movlb	0	; () banked
  4071  0005CE  51CB               	movf	(??_sprintf+1)& (0+255),w,b
  4072  0005D0  0101               	movlb	1	; () banked
  4073  0005D2  5B17               	subwfb	(sprintf@width+1)& (0+255),f,b
  4074                           
  4075                           ;doprnt.c: 1143: if(
  4076                           ;doprnt.c: 1147: prec)
  4077  0005D4  511C               	movf	sprintf@prec& (0+255),w,b
  4078  0005D6  111D               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4079  0005D8  B4D8               	btfsc	status,2,c
  4080  0005DA  D003               	goto	l395
  4081                           
  4082                           ; BSR set to: 1
  4083                           ;doprnt.c: 1148: width--;
  4084  0005DC  0716               	decf	sprintf@width& (0+255),f,b
  4085  0005DE  A0D8               	btfss	status,0,c
  4086  0005E0  0717               	decf	(sprintf@width+1)& (0+255),f,b
  4087  0005E2                     l395:
  4088                           
  4089                           ; BSR set to: 1
  4090                           ;doprnt.c: 1149: if(flag & 0x03)
  4091                           
  4092                           ; BSR set to: 1
  4093  0005E2  0E03               	movlw	3
  4094  0005E4  150A               	andwf	sprintf@flag& (0+255),w,b
  4095  0005E6  0100               	movlb	0	; () banked
  4096  0005E8  6FCA               	movwf	??_sprintf& (0+255),b
  4097  0005EA  0E00               	movlw	0
  4098  0005EC  0101               	movlb	1	; () banked
  4099  0005EE  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  4100  0005F0  0100               	movlb	0	; () banked
  4101  0005F2  6FCB               	movwf	(??_sprintf+1)& (0+255),b
  4102  0005F4  51CA               	movf	??_sprintf& (0+255),w,b
  4103  0005F6  11CB               	iorwf	(??_sprintf+1)& (0+255),w,b
  4104  0005F8  B4D8               	btfsc	status,2,c
  4105  0005FA  D00E               	goto	l397
  4106  0005FC  D009               	goto	l5369
  4107  0005FE                     l5365:
  4108                           
  4109                           ; BSR set to: 1
  4110                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  4111  0005FE  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  4112  000602  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  4113  000606  0E20               	movlw	32
  4114  000608  6EDF               	movwf	indf2,c
  4115                           
  4116                           ; BSR set to: 1
  4117  00060A  0100               	movlb	0	; () banked
  4118  00060C  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  4119  00060E  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  4120  000610                     l5369:
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;doprnt.c: 1182: width--;
  4124  000610  0101               	movlb	1	; () banked
  4125  000612  0716               	decf	sprintf@width& (0+255),f,b
  4126  000614  A0D8               	btfss	status,0,c
  4127  000616  0717               	decf	(sprintf@width+1)& (0+255),f,b
  4128  000618                     l397:
  4129                           
  4130                           ; BSR set to: 1
  4131  000618  0101               	movlb	1	; () banked
  4132  00061A  BF17               	btfsc	(sprintf@width+1)& (0+255),7,b
  4133  00061C  D005               	goto	u6200
  4134  00061E  5117               	movf	(sprintf@width+1)& (0+255),w,b
  4135  000620  E1EE               	bnz	l5365
  4136  000622  0516               	decf	sprintf@width& (0+255),w,b
  4137  000624  B0D8               	btfsc	status,0,c
  4138  000626  D7EB               	goto	l398
  4139  000628                     u6200:
  4140                           
  4141                           ; BSR set to: 1
  4142                           ;doprnt.c: 1183: }
  4143                           ;doprnt.c: 1188: if(flag & 0x03)
  4144                           
  4145                           ; BSR set to: 1
  4146  000628  0E03               	movlw	3
  4147  00062A  150A               	andwf	sprintf@flag& (0+255),w,b
  4148  00062C  0100               	movlb	0	; () banked
  4149  00062E  6FCA               	movwf	??_sprintf& (0+255),b
  4150  000630  0E00               	movlw	0
  4151  000632  0101               	movlb	1	; () banked
  4152  000634  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  4153  000636  0100               	movlb	0	; () banked
  4154  000638  6FCB               	movwf	(??_sprintf+1)& (0+255),b
  4155  00063A  51CA               	movf	??_sprintf& (0+255),w,b
  4156  00063C  11CB               	iorwf	(??_sprintf+1)& (0+255),w,b
  4157  00063E  B4D8               	btfsc	status,2,c
  4158  000640  D053               	goto	l401
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  4162  000642  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  4163  000646  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  4164  00064A  0E2D               	movlw	45
  4165  00064C  6EDF               	movwf	indf2,c
  4166  00064E  D04A               	goto	L7
  4167  000650                     
  4168                           ;doprnt.c: 1200: {
  4169                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4170                           
  4171                           ; BSR set to: 0
  4172  000650  C110  F01B         	movff	sprintf@val,___lldiv@dividend
  4173  000654  C111  F01C         	movff	sprintf@val+1,___lldiv@dividend+1
  4174  000658  C112  F01D         	movff	sprintf@val+2,___lldiv@dividend+2
  4175  00065C  C113  F01E         	movff	sprintf@val+3,___lldiv@dividend+3
  4176  000660  0101               	movlb	1	; () banked
  4177  000662  511E               	movf	sprintf@c& (0+255),w,b
  4178  000664  0D04               	mullw	4
  4179  000666  0E53               	movlw	low _dpowers
  4180  000668  24F3               	addwf	prodl,w,c
  4181  00066A  6EF6               	movwf	tblptrl,c
  4182  00066C  0EFF               	movlw	high _dpowers
  4183  00066E  20F4               	addwfc	prodh,w,c
  4184  000670  6EF7               	movwf	tblptrh,c
  4185  000672                     	if	0	;There are less than 3 active tblptr bytes
  4186  000672                     	endif
  4187  000672  0009               	tblrd		*+
  4188  000674  CFF5 F01F          	movff	tablat,___lldiv@divisor
  4189  000678  0009               	tblrd		*+
  4190  00067A  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  4191  00067E  0009               	tblrd		*+
  4192  000680  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  4193  000684  000A               	tblrd		*-
  4194  000686  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  4195  00068A  ECA1  F013         	call	___lldiv	;wreg free
  4196  00068E  C01B  F10C         	movff	?___lldiv,sprintf@tmpval
  4197  000692  C01C  F10D         	movff	?___lldiv+1,sprintf@tmpval+1
  4198  000696  C01D  F10E         	movff	?___lldiv+2,sprintf@tmpval+2
  4199  00069A  C01E  F10F         	movff	?___lldiv+3,sprintf@tmpval+3
  4200                           
  4201                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4202  00069E  C10C  F028         	movff	sprintf@tmpval,___llmod@dividend
  4203  0006A2  C10D  F029         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4204  0006A6  C10E  F02A         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4205  0006AA  C10F  F02B         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4206  0006AE  0E0A               	movlw	10
  4207  0006B0  6E2C               	movwf	___llmod@divisor,c
  4208  0006B2  0E00               	movlw	0
  4209  0006B4  6E2D               	movwf	___llmod@divisor+1,c
  4210  0006B6  0E00               	movlw	0
  4211  0006B8  6E2E               	movwf	___llmod@divisor+2,c
  4212  0006BA  0E00               	movlw	0
  4213  0006BC  6E2F               	movwf	___llmod@divisor+3,c
  4214  0006BE  EC52  F014         	call	___llmod	;wreg free
  4215  0006C2  C028  F10C         	movff	?___llmod,sprintf@tmpval
  4216  0006C6  C029  F10D         	movff	?___llmod+1,sprintf@tmpval+1
  4217  0006CA  C02A  F10E         	movff	?___llmod+2,sprintf@tmpval+2
  4218  0006CE  C02B  F10F         	movff	?___llmod+3,sprintf@tmpval+3
  4219                           
  4220                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  4221  0006D2  0101               	movlb	1	; () banked
  4222  0006D4  510C               	movf	sprintf@tmpval& (0+255),w,b
  4223  0006D6  0F30               	addlw	48
  4224  0006D8  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  4225  0006DC  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  4226  0006E0  6EDF               	movwf	indf2,c
  4227                           
  4228                           ; BSR set to: 1
  4229  0006E2  0100               	movlb	0	; () banked
  4230  0006E4                     L7:
  4231  0006E4  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  4232  0006E6  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  4233  0006E8                     l401:
  4234                           
  4235                           ; BSR set to: 0
  4236                           
  4237                           ; BSR set to: 0
  4238  0006E8  0101               	movlb	1	; () banked
  4239  0006EA  071E               	decf	sprintf@c& (0+255),f,b
  4240  0006EC  291E               	incf	sprintf@c& (0+255),w,b
  4241  0006EE  B4D8               	btfsc	status,2,c
  4242  0006F0  D00E               	goto	l404
  4243  0006F2  D7AE               	goto	l402
  4244  0006F4                     l5389:
  4245                           
  4246                           ; BSR set to: 1
  4247                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  4248  0006F4  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  4249  0006F8  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  4250  0006FC  0E30               	movlw	48
  4251  0006FE  6EDF               	movwf	indf2,c
  4252                           
  4253                           ; BSR set to: 1
  4254  000700  0100               	movlb	0	; () banked
  4255  000702  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  4256  000704  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  4257                           
  4258                           ; BSR set to: 0
  4259                           ;doprnt.c: 1209: exp--;
  4260  000706  0101               	movlb	1	; () banked
  4261  000708  0714               	decf	sprintf@exp& (0+255),f,b
  4262  00070A  A0D8               	btfss	status,0,c
  4263  00070C  0715               	decf	(sprintf@exp+1)& (0+255),f,b
  4264  00070E                     l404:
  4265                           
  4266                           ; BSR set to: 1
  4267                           
  4268                           ; BSR set to: 1
  4269  00070E  BF15               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4270  000710  D005               	goto	u6230
  4271  000712  5115               	movf	(sprintf@exp+1)& (0+255),w,b
  4272  000714  E1EF               	bnz	l5389
  4273  000716  0514               	decf	sprintf@exp& (0+255),w,b
  4274  000718  B0D8               	btfsc	status,0,c
  4275  00071A  D7EC               	goto	l405
  4276  00071C                     u6230:
  4277                           
  4278                           ; BSR set to: 1
  4279                           ;doprnt.c: 1210: }
  4280                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4281                           
  4282                           ; BSR set to: 1
  4283  00071C  BF1D               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4284  00071E  D009               	goto	l407
  4285  000720  511D               	movf	(sprintf@prec+1)& (0+255),w,b
  4286  000722  E104               	bnz	u6240
  4287  000724  0E09               	movlw	9
  4288  000726  5D1C               	subwf	sprintf@prec& (0+255),w,b
  4289  000728  A0D8               	btfss	status,0,c
  4290  00072A  D003               	goto	l407
  4291  00072C                     u6240:
  4292                           
  4293                           ; BSR set to: 1
  4294                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4295  00072C  0E08               	movlw	8
  4296  00072E  6F1E               	movwf	sprintf@c& (0+255),b
  4297  000730  D002               	goto	l408
  4298  000732                     l407:
  4299                           
  4300                           ; BSR set to: 1
  4301                           ;doprnt.c: 1213: else
  4302                           ;doprnt.c: 1214: c = prec;
  4303  000732  C11C  F11E         	movff	sprintf@prec,sprintf@c
  4304  000736                     l408:
  4305                           
  4306                           ; BSR set to: 1
  4307                           ;doprnt.c: 1215: prec -= c;
  4308                           
  4309                           ; BSR set to: 1
  4310  000736  511E               	movf	sprintf@c& (0+255),w,b
  4311  000738  5F1C               	subwf	sprintf@prec& (0+255),f,b
  4312  00073A  0E00               	movlw	0
  4313  00073C  BF1E               	btfsc	sprintf@c& (0+255),7,b
  4314  00073E  0EFF               	movlw	255
  4315  000740  5B1D               	subwfb	(sprintf@prec+1)& (0+255),f,b
  4316                           
  4317                           ; BSR set to: 1
  4318                           ;doprnt.c: 1219: if(c)
  4319  000742  511E               	movf	sprintf@c& (0+255),w,b
  4320  000744  B4D8               	btfsc	status,2,c
  4321  000746  D009               	goto	l409
  4322                           
  4323                           ; BSR set to: 1
  4324                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  4325  000748  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  4326  00074C  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  4327  000750  0E2E               	movlw	46
  4328  000752  6EDF               	movwf	indf2,c
  4329                           
  4330                           ; BSR set to: 1
  4331  000754  0100               	movlb	0	; () banked
  4332  000756  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  4333  000758  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  4334  00075A                     l409:
  4335                           
  4336                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4337                           
  4338                           ; BSR set to: 0
  4339  00075A  0101               	movlb	1	; () banked
  4340  00075C  511E               	movf	sprintf@c& (0+255),w,b
  4341  00075E  ECB0  F005         	call	_scale
  4342  000762  C099  F100         	movff	?_scale,_sprintf$1935
  4343  000766  C09A  F101         	movff	?_scale+1,_sprintf$1935+1
  4344  00076A  C09B  F102         	movff	?_scale+2,_sprintf$1935+2
  4345  00076E  C09C  F103         	movff	?_scale+3,_sprintf$1935+3
  4346                           
  4347                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4348  000772  C118  F084         	movff	sprintf@fval,___flmul@a
  4349  000776  C119  F085         	movff	sprintf@fval+1,___flmul@a+1
  4350  00077A  C11A  F086         	movff	sprintf@fval+2,___flmul@a+2
  4351  00077E  C11B  F087         	movff	sprintf@fval+3,___flmul@a+3
  4352  000782  C100  F080         	movff	_sprintf$1935,___flmul@b
  4353  000786  C101  F081         	movff	_sprintf$1935+1,___flmul@b+1
  4354  00078A  C102  F082         	movff	_sprintf$1935+2,___flmul@b+2
  4355  00078E  C103  F083         	movff	_sprintf$1935+3,___flmul@b+3
  4356  000792  ECD8  F007         	call	___flmul	;wreg free
  4357  000796  C080  F0A2         	movff	?___flmul,___fltol@f1
  4358  00079A  C081  F0A3         	movff	?___flmul+1,___fltol@f1+1
  4359  00079E  C082  F0A4         	movff	?___flmul+2,___fltol@f1+2
  4360  0007A2  C083  F0A5         	movff	?___flmul+3,___fltol@f1+3
  4361  0007A6  ECAD  F012         	call	___fltol	;wreg free
  4362  0007AA  C0A2  F110         	movff	?___fltol,sprintf@val
  4363  0007AE  C0A3  F111         	movff	?___fltol+1,sprintf@val+1
  4364  0007B2  C0A4  F112         	movff	?___fltol+2,sprintf@val+2
  4365  0007B6  C0A5  F113         	movff	?___fltol+3,sprintf@val+3
  4366                           
  4367                           ;doprnt.c: 1228: while(c--) {
  4368  0007BA  D073               	goto	l410
  4369  0007BC                     
  4370                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4371  0007BC  C110  F01B         	movff	sprintf@val,___lldiv@dividend
  4372  0007C0  C111  F01C         	movff	sprintf@val+1,___lldiv@dividend+1
  4373  0007C4  C112  F01D         	movff	sprintf@val+2,___lldiv@dividend+2
  4374  0007C8  C113  F01E         	movff	sprintf@val+3,___lldiv@dividend+3
  4375  0007CC  0101               	movlb	1	; () banked
  4376  0007CE  511E               	movf	sprintf@c& (0+255),w,b
  4377  0007D0  0D04               	mullw	4
  4378  0007D2  0E53               	movlw	low _dpowers
  4379  0007D4  24F3               	addwf	prodl,w,c
  4380  0007D6  6EF6               	movwf	tblptrl,c
  4381  0007D8  0EFF               	movlw	high _dpowers
  4382  0007DA  20F4               	addwfc	prodh,w,c
  4383  0007DC  6EF7               	movwf	tblptrh,c
  4384  0007DE                     	if	0	;There are less than 3 active tblptr bytes
  4385  0007DE                     	endif
  4386  0007DE  0009               	tblrd		*+
  4387  0007E0  CFF5 F01F          	movff	tablat,___lldiv@divisor
  4388  0007E4  0009               	tblrd		*+
  4389  0007E6  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  4390  0007EA  0009               	tblrd		*+
  4391  0007EC  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  4392  0007F0  000A               	tblrd		*-
  4393  0007F2  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  4394  0007F6  ECA1  F013         	call	___lldiv	;wreg free
  4395  0007FA  C01B  F10C         	movff	?___lldiv,sprintf@tmpval
  4396  0007FE  C01C  F10D         	movff	?___lldiv+1,sprintf@tmpval+1
  4397  000802  C01D  F10E         	movff	?___lldiv+2,sprintf@tmpval+2
  4398  000806  C01E  F10F         	movff	?___lldiv+3,sprintf@tmpval+3
  4399                           
  4400                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4401  00080A  C10C  F028         	movff	sprintf@tmpval,___llmod@dividend
  4402  00080E  C10D  F029         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4403  000812  C10E  F02A         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4404  000816  C10F  F02B         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4405  00081A  0E0A               	movlw	10
  4406  00081C  6E2C               	movwf	___llmod@divisor,c
  4407  00081E  0E00               	movlw	0
  4408  000820  6E2D               	movwf	___llmod@divisor+1,c
  4409  000822  0E00               	movlw	0
  4410  000824  6E2E               	movwf	___llmod@divisor+2,c
  4411  000826  0E00               	movlw	0
  4412  000828  6E2F               	movwf	___llmod@divisor+3,c
  4413  00082A  EC52  F014         	call	___llmod	;wreg free
  4414  00082E  C028  F10C         	movff	?___llmod,sprintf@tmpval
  4415  000832  C029  F10D         	movff	?___llmod+1,sprintf@tmpval+1
  4416  000836  C02A  F10E         	movff	?___llmod+2,sprintf@tmpval+2
  4417  00083A  C02B  F10F         	movff	?___llmod+3,sprintf@tmpval+3
  4418                           
  4419                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4420  00083E  0101               	movlb	1	; () banked
  4421  000840  510C               	movf	sprintf@tmpval& (0+255),w,b
  4422  000842  0F30               	addlw	48
  4423  000844  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  4424  000848  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  4425  00084C  6EDF               	movwf	indf2,c
  4426                           
  4427                           ; BSR set to: 1
  4428  00084E  0100               	movlb	0	; () banked
  4429  000850  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  4430  000852  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  4431                           
  4432                           ; BSR set to: 0
  4433                           ;doprnt.c: 1232: val %= dpowers[c];
  4434  000854  C110  F028         	movff	sprintf@val,___llmod@dividend
  4435  000858  C111  F029         	movff	sprintf@val+1,___llmod@dividend+1
  4436  00085C  C112  F02A         	movff	sprintf@val+2,___llmod@dividend+2
  4437  000860  C113  F02B         	movff	sprintf@val+3,___llmod@dividend+3
  4438  000864  0101               	movlb	1	; () banked
  4439  000866  511E               	movf	sprintf@c& (0+255),w,b
  4440  000868  0D04               	mullw	4
  4441  00086A  0E53               	movlw	low _dpowers
  4442  00086C  24F3               	addwf	prodl,w,c
  4443  00086E  6EF6               	movwf	tblptrl,c
  4444  000870  0EFF               	movlw	high _dpowers
  4445  000872  20F4               	addwfc	prodh,w,c
  4446  000874  6EF7               	movwf	tblptrh,c
  4447  000876                     	if	0	;There are less than 3 active tblptr bytes
  4448  000876                     	endif
  4449  000876  0009               	tblrd		*+
  4450  000878  CFF5 F02C          	movff	tablat,___llmod@divisor
  4451  00087C  0009               	tblrd		*+
  4452  00087E  CFF5 F02D          	movff	tablat,___llmod@divisor+1
  4453  000882  0009               	tblrd		*+
  4454  000884  CFF5 F02E          	movff	tablat,___llmod@divisor+2
  4455  000888  000A               	tblrd		*-
  4456  00088A  CFF5 F02F          	movff	tablat,___llmod@divisor+3
  4457  00088E  EC52  F014         	call	___llmod	;wreg free
  4458  000892  C028  F110         	movff	?___llmod,sprintf@val
  4459  000896  C029  F111         	movff	?___llmod+1,sprintf@val+1
  4460  00089A  C02A  F112         	movff	?___llmod+2,sprintf@val+2
  4461  00089E  C02B  F113         	movff	?___llmod+3,sprintf@val+3
  4462  0008A2                     l410:
  4463  0008A2  0101               	movlb	1	; () banked
  4464  0008A4  071E               	decf	sprintf@c& (0+255),f,b
  4465  0008A6  291E               	incf	sprintf@c& (0+255),w,b
  4466  0008A8  B4D8               	btfsc	status,2,c
  4467  0008AA  D00E               	goto	l413
  4468  0008AC  D787               	goto	l411
  4469  0008AE                     
  4470                           ; BSR set to: 1
  4471                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4472                           
  4473                           ; BSR set to: 1
  4474  0008AE  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  4475  0008B2  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  4476  0008B6  0E30               	movlw	48
  4477  0008B8  6EDF               	movwf	indf2,c
  4478                           
  4479                           ; BSR set to: 1
  4480  0008BA  0100               	movlb	0	; () banked
  4481  0008BC  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  4482  0008BE  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;doprnt.c: 1237: prec--;
  4486  0008C0  0101               	movlb	1	; () banked
  4487  0008C2  071C               	decf	sprintf@prec& (0+255),f,b
  4488  0008C4  A0D8               	btfss	status,0,c
  4489  0008C6  071D               	decf	(sprintf@prec+1)& (0+255),f,b
  4490  0008C8                     l413:
  4491                           
  4492                           ; BSR set to: 1
  4493                           
  4494                           ; BSR set to: 1
  4495  0008C8  511C               	movf	sprintf@prec& (0+255),w,b
  4496  0008CA  111D               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4497  0008CC  B4D8               	btfsc	status,2,c
  4498  0008CE  D132               	goto	u6440
  4499  0008D0  D7EE               	goto	l414
  4500  0008D2                     l373:
  4501                           
  4502                           ; BSR set to: 1
  4503                           ;doprnt.c: 1246: }
  4504                           ;doprnt.c: 1253: {
  4505                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4506                           
  4507                           ; BSR set to: 1
  4508  0008D2  C106  FFD9         	movff	sprintf@ap,fsr2l
  4509  0008D6  C107  FFDA         	movff	sprintf@ap+1,fsr2h
  4510  0008DA  CFDE F110          	movff	postinc2,sprintf@val
  4511  0008DE  CFDD F111          	movff	postdec2,sprintf@val+1
  4512  0008E2  0E00               	movlw	0
  4513  0008E4  BF11               	btfsc	(sprintf@val+1)& (0+255),7,b
  4514  0008E6  0EFF               	movlw	-1
  4515  0008E8  6F12               	movwf	(sprintf@val+2)& (0+255),b
  4516  0008EA  6F13               	movwf	(sprintf@val+3)& (0+255),b
  4517                           
  4518                           ; BSR set to: 1
  4519  0008EC  0E02               	movlw	2
  4520  0008EE  2706               	addwf	sprintf@ap& (0+255),f,b
  4521  0008F0  0E00               	movlw	0
  4522  0008F2  2307               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4523                           
  4524                           ; BSR set to: 1
  4525                           ;doprnt.c: 1261: if((long)val < 0) {
  4526  0008F4  AF13               	btfss	(sprintf@val+3)& (0+255),7,b
  4527  0008F6  D00A               	goto	l416
  4528                           
  4529                           ; BSR set to: 1
  4530                           ;doprnt.c: 1262: flag |= 0x03;
  4531  0008F8  0E03               	movlw	3
  4532  0008FA  130A               	iorwf	sprintf@flag& (0+255),f,b
  4533                           
  4534                           ; BSR set to: 1
  4535                           ;doprnt.c: 1263: val = -val;
  4536  0008FC  1F13               	comf	(sprintf@val+3)& (0+255),f,b
  4537  0008FE  1F12               	comf	(sprintf@val+2)& (0+255),f,b
  4538  000900  1F11               	comf	(sprintf@val+1)& (0+255),f,b
  4539  000902  6D10               	negf	sprintf@val& (0+255),b
  4540  000904  0E00               	movlw	0
  4541  000906  2311               	addwfc	(sprintf@val+1)& (0+255),f,b
  4542  000908  2312               	addwfc	(sprintf@val+2)& (0+255),f,b
  4543  00090A  2313               	addwfc	(sprintf@val+3)& (0+255),f,b
  4544  00090C                     l416:
  4545                           
  4546                           ; BSR set to: 1
  4547                           ;doprnt.c: 1264: }
  4548                           ;doprnt.c: 1266: }
  4549                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4550                           
  4551                           ; BSR set to: 1
  4552  00090C  511C               	movf	sprintf@prec& (0+255),w,b
  4553  00090E  111D               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4554  000910  A4D8               	btfss	status,2,c
  4555  000912  D008               	goto	l417
  4556                           
  4557                           ; BSR set to: 1
  4558  000914  5110               	movf	sprintf@val& (0+255),w,b
  4559  000916  1111               	iorwf	(sprintf@val+1)& (0+255),w,b
  4560  000918  1112               	iorwf	(sprintf@val+2)& (0+255),w,b
  4561  00091A  1113               	iorwf	(sprintf@val+3)& (0+255),w,b
  4562  00091C  A4D8               	btfss	status,2,c
  4563  00091E  D002               	goto	l417
  4564                           
  4565                           ; BSR set to: 1
  4566                           ;doprnt.c: 1291: prec++;
  4567  000920  4B1C               	infsnz	sprintf@prec& (0+255),f,b
  4568  000922  2B1D               	incf	(sprintf@prec+1)& (0+255),f,b
  4569  000924                     l417:
  4570                           
  4571                           ; BSR set to: 1
  4572                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4573                           
  4574                           ; BSR set to: 1
  4575  000924  0E01               	movlw	1
  4576  000926  6F1E               	movwf	sprintf@c& (0+255),b
  4577  000928                     l5451:
  4578                           
  4579                           ; BSR set to: 1
  4580  000928  0E0A               	movlw	10
  4581  00092A  191E               	xorwf	sprintf@c& (0+255),w,b
  4582  00092C  B4D8               	btfsc	status,2,c
  4583  00092E  D018               	goto	u6330
  4584                           
  4585                           ; BSR set to: 1
  4586                           ;doprnt.c: 1306: if(val < dpowers[c])
  4587                           
  4588                           ; BSR set to: 1
  4589                           
  4590                           ; BSR set to: 1
  4591  000930  511E               	movf	sprintf@c& (0+255),w,b
  4592  000932  0D04               	mullw	4
  4593  000934  0E53               	movlw	low _dpowers
  4594  000936  24F3               	addwf	prodl,w,c
  4595  000938  6EF6               	movwf	tblptrl,c
  4596  00093A  0EFF               	movlw	high _dpowers
  4597  00093C  20F4               	addwfc	prodh,w,c
  4598  00093E  6EF7               	movwf	tblptrh,c
  4599  000940                     	if	0	;There are less than 3 active tblptr bytes
  4600  000940                     	endif
  4601  000940  0009               	tblrd		*+
  4602  000942  50F5               	movf	tablat,w,c
  4603  000944  5D10               	subwf	sprintf@val& (0+255),w,b
  4604  000946  0009               	tblrd		*+
  4605  000948  50F5               	movf	tablat,w,c
  4606  00094A  5911               	subwfb	(sprintf@val+1)& (0+255),w,b
  4607  00094C  0009               	tblrd		*+
  4608  00094E  50F5               	movf	tablat,w,c
  4609  000950  5912               	subwfb	(sprintf@val+2)& (0+255),w,b
  4610  000952  0009               	tblrd		*+
  4611  000954  50F5               	movf	tablat,w,c
  4612  000956  5913               	subwfb	(sprintf@val+3)& (0+255),w,b
  4613  000958  A0D8               	btfss	status,0,c
  4614  00095A  D002               	goto	u6330
  4615                           
  4616                           ; BSR set to: 1
  4617                           
  4618                           ; BSR set to: 1
  4619                           
  4620                           ; BSR set to: 1
  4621                           ;doprnt.c: 1307: break;
  4622  00095C  2B1E               	incf	sprintf@c& (0+255),f,b
  4623  00095E  D7E4               	goto	l5451
  4624  000960                     u6330:
  4625                           
  4626                           ; BSR set to: 1
  4627                           ;doprnt.c: 1339: if(c < prec)
  4628                           
  4629                           ; BSR set to: 1
  4630  000960  0E80               	movlw	128
  4631  000962  BF1E               	btfsc	sprintf@c& (0+255),7,b
  4632  000964  0E7F               	movlw	127
  4633  000966  0100               	movlb	0	; () banked
  4634  000968  6FCA               	movwf	??_sprintf& (0+255),b
  4635  00096A  0101               	movlb	1	; () banked
  4636  00096C  511C               	movf	sprintf@prec& (0+255),w,b
  4637  00096E  5D1E               	subwf	sprintf@c& (0+255),w,b
  4638  000970  511D               	movf	(sprintf@prec+1)& (0+255),w,b
  4639  000972  0A80               	xorlw	128
  4640  000974  0100               	movlb	0	; () banked
  4641  000976  59CA               	subwfb	??_sprintf& (0+255),w,b
  4642  000978  B0D8               	btfsc	status,0,c
  4643  00097A  D003               	goto	l421
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;doprnt.c: 1340: c = prec;
  4647  00097C  C11C  F11E         	movff	sprintf@prec,sprintf@c
  4648  000980  D015               	goto	l423
  4649  000982                     l421:
  4650                           
  4651                           ; BSR set to: 0
  4652                           ;doprnt.c: 1341: else if(prec < c)
  4653                           
  4654                           ; BSR set to: 0
  4655  000982  0101               	movlb	1	; () banked
  4656  000984  511D               	movf	(sprintf@prec+1)& (0+255),w,b
  4657  000986  0A80               	xorlw	128
  4658  000988  0100               	movlb	0	; () banked
  4659  00098A  6FCA               	movwf	??_sprintf& (0+255),b
  4660  00098C  0101               	movlb	1	; () banked
  4661  00098E  511E               	movf	sprintf@c& (0+255),w,b
  4662  000990  5D1C               	subwf	sprintf@prec& (0+255),w,b
  4663  000992  0E80               	movlw	128
  4664  000994  BF1E               	btfsc	sprintf@c& (0+255),7,b
  4665  000996  0E7F               	movlw	127
  4666  000998  0100               	movlb	0	; () banked
  4667  00099A  59CA               	subwfb	??_sprintf& (0+255),w,b
  4668  00099C  B0D8               	btfsc	status,0,c
  4669  00099E  D006               	goto	l423
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;doprnt.c: 1342: prec = c;
  4673  0009A0  0101               	movlb	1	; () banked
  4674  0009A2  511E               	movf	sprintf@c& (0+255),w,b
  4675  0009A4  6F1C               	movwf	sprintf@prec& (0+255),b
  4676  0009A6  6B1D               	clrf	(sprintf@prec+1)& (0+255),b
  4677  0009A8  BF1C               	btfsc	sprintf@prec& (0+255),7,b
  4678  0009AA  071D               	decf	(sprintf@prec+1)& (0+255),f,b
  4679  0009AC                     l423:
  4680                           
  4681                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4682                           
  4683                           ; BSR set to: 1
  4684                           
  4685                           ; BSR set to: 1
  4686  0009AC  0101               	movlb	1	; () banked
  4687  0009AE  5116               	movf	sprintf@width& (0+255),w,b
  4688  0009B0  1117               	iorwf	(sprintf@width+1)& (0+255),w,b
  4689  0009B2  B4D8               	btfsc	status,2,c
  4690  0009B4  D011               	goto	l424
  4691                           
  4692                           ; BSR set to: 1
  4693  0009B6  0E03               	movlw	3
  4694  0009B8  150A               	andwf	sprintf@flag& (0+255),w,b
  4695  0009BA  0100               	movlb	0	; () banked
  4696  0009BC  6FCA               	movwf	??_sprintf& (0+255),b
  4697  0009BE  0E00               	movlw	0
  4698  0009C0  0101               	movlb	1	; () banked
  4699  0009C2  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  4700  0009C4  0100               	movlb	0	; () banked
  4701  0009C6  6FCB               	movwf	(??_sprintf+1)& (0+255),b
  4702  0009C8  51CA               	movf	??_sprintf& (0+255),w,b
  4703  0009CA  11CB               	iorwf	(??_sprintf+1)& (0+255),w,b
  4704  0009CC  B4D8               	btfsc	status,2,c
  4705  0009CE  D004               	goto	l424
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;doprnt.c: 1346: width--;
  4709  0009D0  0101               	movlb	1	; () banked
  4710  0009D2  0716               	decf	sprintf@width& (0+255),f,b
  4711  0009D4  A0D8               	btfss	status,0,c
  4712  0009D6  0717               	decf	(sprintf@width+1)& (0+255),f,b
  4713  0009D8                     l424:
  4714                           
  4715                           ;doprnt.c: 1348: if(flag & 0x4000) {
  4716                           
  4717                           ; BSR set to: 1
  4718  0009D8  0101               	movlb	1	; () banked
  4719  0009DA  AD0B               	btfss	(sprintf@flag+1)& (0+255),6,b
  4720  0009DC  D018               	goto	l427
  4721                           
  4722                           ; BSR set to: 1
  4723                           ;doprnt.c: 1349: if(width > prec)
  4724  0009DE  5116               	movf	sprintf@width& (0+255),w,b
  4725  0009E0  5D1C               	subwf	sprintf@prec& (0+255),w,b
  4726  0009E2  511D               	movf	(sprintf@prec+1)& (0+255),w,b
  4727  0009E4  0A80               	xorlw	128
  4728  0009E6  0100               	movlb	0	; () banked
  4729  0009E8  6FCA               	movwf	??_sprintf& (0+255),b
  4730  0009EA  0101               	movlb	1	; () banked
  4731  0009EC  5117               	movf	(sprintf@width+1)& (0+255),w,b
  4732  0009EE  0A80               	xorlw	128
  4733  0009F0  0100               	movlb	0	; () banked
  4734  0009F2  59CA               	subwfb	??_sprintf& (0+255),w,b
  4735  0009F4  B0D8               	btfsc	status,0,c
  4736  0009F6  D006               	goto	l426
  4737                           
  4738                           ; BSR set to: 0
  4739                           ;doprnt.c: 1350: width -= prec;
  4740  0009F8  0101               	movlb	1	; () banked
  4741  0009FA  511C               	movf	sprintf@prec& (0+255),w,b
  4742  0009FC  5F16               	subwf	sprintf@width& (0+255),f,b
  4743  0009FE  511D               	movf	(sprintf@prec+1)& (0+255),w,b
  4744  000A00  5B17               	subwfb	(sprintf@width+1)& (0+255),f,b
  4745  000A02  D005               	goto	l427
  4746  000A04                     l426:
  4747                           
  4748                           ;doprnt.c: 1351: else
  4749                           ;doprnt.c: 1352: width = 0;
  4750                           
  4751                           ; BSR set to: 1
  4752  000A04  0E00               	movlw	0
  4753  000A06  0101               	movlb	1	; () banked
  4754  000A08  6F17               	movwf	(sprintf@width+1)& (0+255),b
  4755  000A0A  0E00               	movlw	0
  4756  000A0C  6F16               	movwf	sprintf@width& (0+255),b
  4757  000A0E                     l427:
  4758                           
  4759                           ; BSR set to: 1
  4760                           ;doprnt.c: 1353: }
  4761                           ;doprnt.c: 1381: if(width > c)
  4762                           
  4763                           ; BSR set to: 1
  4764                           
  4765                           ; BSR set to: 1
  4766  000A0E  0E80               	movlw	128
  4767  000A10  BF1E               	btfsc	sprintf@c& (0+255),7,b
  4768  000A12  0E7F               	movlw	127
  4769  000A14  0100               	movlb	0	; () banked
  4770  000A16  6FCA               	movwf	??_sprintf& (0+255),b
  4771  000A18  0101               	movlb	1	; () banked
  4772  000A1A  5116               	movf	sprintf@width& (0+255),w,b
  4773  000A1C  5D1E               	subwf	sprintf@c& (0+255),w,b
  4774  000A1E  5117               	movf	(sprintf@width+1)& (0+255),w,b
  4775  000A20  0A80               	xorlw	128
  4776  000A22  0100               	movlb	0	; () banked
  4777  000A24  59CA               	subwfb	??_sprintf& (0+255),w,b
  4778  000A26  B0D8               	btfsc	status,0,c
  4779  000A28  D008               	goto	l428
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;doprnt.c: 1382: width -= c;
  4783  000A2A  0101               	movlb	1	; () banked
  4784  000A2C  511E               	movf	sprintf@c& (0+255),w,b
  4785  000A2E  5F16               	subwf	sprintf@width& (0+255),f,b
  4786  000A30  0E00               	movlw	0
  4787  000A32  BF1E               	btfsc	sprintf@c& (0+255),7,b
  4788  000A34  0EFF               	movlw	255
  4789  000A36  5B17               	subwfb	(sprintf@width+1)& (0+255),f,b
  4790  000A38  D005               	goto	l429
  4791  000A3A                     l428:
  4792                           
  4793                           ;doprnt.c: 1383: else
  4794                           ;doprnt.c: 1384: width = 0;
  4795                           
  4796                           ; BSR set to: 1
  4797  000A3A  0E00               	movlw	0
  4798  000A3C  0101               	movlb	1	; () banked
  4799  000A3E  6F17               	movwf	(sprintf@width+1)& (0+255),b
  4800  000A40  0E00               	movlw	0
  4801  000A42  6F16               	movwf	sprintf@width& (0+255),b
  4802  000A44                     l429:
  4803                           
  4804                           ; BSR set to: 1
  4805                           ;doprnt.c: 1422: {
  4806                           ;doprnt.c: 1424: if(width
  4807                           ;doprnt.c: 1428: )
  4808                           
  4809                           ; BSR set to: 1
  4810  000A44  5116               	movf	sprintf@width& (0+255),w,b
  4811  000A46  1117               	iorwf	(sprintf@width+1)& (0+255),w,b
  4812  000A48  B4D8               	btfsc	status,2,c
  4813  000A4A  D011               	goto	u6420
  4814  000A4C                     u6410:
  4815                           
  4816                           ; BSR set to: 1
  4817                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4818                           
  4819                           ; BSR set to: 1
  4820                           
  4821                           ;doprnt.c: 1429: do
  4822  000A4C  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  4823  000A50  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  4824  000A54  0E20               	movlw	32
  4825  000A56  6EDF               	movwf	indf2,c
  4826                           
  4827                           ; BSR set to: 1
  4828  000A58  0100               	movlb	0	; () banked
  4829  000A5A  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  4830  000A5C  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  4831                           
  4832                           ; BSR set to: 0
  4833                           ;doprnt.c: 1431: while(--width);
  4834  000A5E  0101               	movlb	1	; () banked
  4835  000A60  0716               	decf	sprintf@width& (0+255),f,b
  4836  000A62  A0D8               	btfss	status,0,c
  4837  000A64  0717               	decf	(sprintf@width+1)& (0+255),f,b
  4838  000A66  5116               	movf	sprintf@width& (0+255),w,b
  4839  000A68  1117               	iorwf	(sprintf@width+1)& (0+255),w,b
  4840  000A6A  A4D8               	btfss	status,2,c
  4841  000A6C  D7EF               	goto	u6410
  4842  000A6E                     u6420:
  4843                           
  4844                           ; BSR set to: 1
  4845                           ;doprnt.c: 1438: if(flag & 0x03)
  4846                           
  4847                           ; BSR set to: 1
  4848                           
  4849                           ; BSR set to: 1
  4850  000A6E  0E03               	movlw	3
  4851  000A70  150A               	andwf	sprintf@flag& (0+255),w,b
  4852  000A72  0100               	movlb	0	; () banked
  4853  000A74  6FCA               	movwf	??_sprintf& (0+255),b
  4854  000A76  0E00               	movlw	0
  4855  000A78  0101               	movlb	1	; () banked
  4856  000A7A  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  4857  000A7C  0100               	movlb	0	; () banked
  4858  000A7E  6FCB               	movwf	(??_sprintf+1)& (0+255),b
  4859  000A80  51CA               	movf	??_sprintf& (0+255),w,b
  4860  000A82  11CB               	iorwf	(??_sprintf+1)& (0+255),w,b
  4861  000A84  B4D8               	btfsc	status,2,c
  4862  000A86  D04D               	goto	l434
  4863                           
  4864                           ; BSR set to: 0
  4865                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4866  000A88  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  4867  000A8C  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  4868  000A90  0E2D               	movlw	45
  4869  000A92  6EDF               	movwf	indf2,c
  4870  000A94  D044               	goto	L8
  4871  000A96                     l5505:
  4872                           
  4873                           ;doprnt.c: 1478: {
  4874                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4875  000A96  C11C  F0CA         	movff	sprintf@prec,??_sprintf
  4876  000A9A  C11D  F0CB         	movff	sprintf@prec+1,??_sprintf+1
  4877  000A9E  0100               	movlb	0	; () banked
  4878  000AA0  90D8               	bcf	status,0,c
  4879  000AA2  37CA               	rlcf	??_sprintf& (0+255),f,b
  4880  000AA4  37CB               	rlcf	(??_sprintf+1)& (0+255),f,b
  4881  000AA6  90D8               	bcf	status,0,c
  4882  000AA8  37CA               	rlcf	??_sprintf& (0+255),f,b
  4883  000AAA  37CB               	rlcf	(??_sprintf+1)& (0+255),f,b
  4884  000AAC  0E53               	movlw	low _dpowers
  4885  000AAE  25CA               	addwf	??_sprintf& (0+255),w,b
  4886  000AB0  6EF6               	movwf	tblptrl,c
  4887  000AB2  0EFF               	movlw	high _dpowers
  4888  000AB4  21CB               	addwfc	(??_sprintf+1)& (0+255),w,b
  4889  000AB6  6EF7               	movwf	tblptrh,c
  4890  000AB8                     	if	0	;There are less than 3 active tblptr bytes
  4891  000AB8                     	endif
  4892  000AB8  0009               	tblrd		*+
  4893  000ABA  CFF5 F01F          	movff	tablat,___lldiv@divisor
  4894  000ABE  0009               	tblrd		*+
  4895  000AC0  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  4896  000AC4  0009               	tblrd		*+
  4897  000AC6  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  4898  000ACA  000A               	tblrd		*-
  4899  000ACC  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  4900  000AD0  C110  F01B         	movff	sprintf@val,___lldiv@dividend
  4901  000AD4  C111  F01C         	movff	sprintf@val+1,___lldiv@dividend+1
  4902  000AD8  C112  F01D         	movff	sprintf@val+2,___lldiv@dividend+2
  4903  000ADC  C113  F01E         	movff	sprintf@val+3,___lldiv@dividend+3
  4904  000AE0  ECA1  F013         	call	___lldiv	;wreg free
  4905  000AE4  C01B  F028         	movff	?___lldiv,___llmod@dividend
  4906  000AE8  C01C  F029         	movff	?___lldiv+1,___llmod@dividend+1
  4907  000AEC  C01D  F02A         	movff	?___lldiv+2,___llmod@dividend+2
  4908  000AF0  C01E  F02B         	movff	?___lldiv+3,___llmod@dividend+3
  4909  000AF4  0E0A               	movlw	10
  4910  000AF6  6E2C               	movwf	___llmod@divisor,c
  4911  000AF8  0E00               	movlw	0
  4912  000AFA  6E2D               	movwf	___llmod@divisor+1,c
  4913  000AFC  0E00               	movlw	0
  4914  000AFE  6E2E               	movwf	___llmod@divisor+2,c
  4915  000B00  0E00               	movlw	0
  4916  000B02  6E2F               	movwf	___llmod@divisor+3,c
  4917  000B04  EC52  F014         	call	___llmod	;wreg free
  4918  000B08  5028               	movf	?___llmod,w,c
  4919  000B0A  0F30               	addlw	48
  4920  000B0C  0101               	movlb	1	; () banked
  4921  000B0E  6F1E               	movwf	sprintf@c& (0+255),b
  4922                           
  4923                           ; BSR set to: 1
  4924                           ;doprnt.c: 1523: }
  4925                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4926  000B10  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  4927  000B14  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  4928  000B18  C11E  FFDF         	movff	sprintf@c,indf2
  4929                           
  4930                           ; BSR set to: 1
  4931  000B1C  0100               	movlb	0	; () banked
  4932  000B1E                     L8:
  4933  000B1E  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  4934  000B20  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  4935  000B22                     l434:
  4936                           
  4937                           ; BSR set to: 0
  4938                           
  4939                           ; BSR set to: 0
  4940  000B22  0101               	movlb	1	; () banked
  4941  000B24  071C               	decf	sprintf@prec& (0+255),f,b
  4942  000B26  A0D8               	btfss	status,0,c
  4943  000B28  071D               	decf	(sprintf@prec+1)& (0+255),f,b
  4944  000B2A  291C               	incf	sprintf@prec& (0+255),w,b
  4945  000B2C  E1B4               	bnz	l5505
  4946  000B2E  291D               	incf	(sprintf@prec+1)& (0+255),w,b
  4947  000B30  A4D8               	btfss	status,2,c
  4948  000B32  D7B1               	goto	l435
  4949  000B34                     u6440:
  4950                           
  4951                           ; BSR set to: 1
  4952                           
  4953                           ; BSR set to: 1
  4954  000B34  C0C4  FFF6         	movff	sprintf@f,tblptrl
  4955  000B38  C0C5  FFF7         	movff	sprintf@f+1,tblptrh
  4956  000B3C  0100               	movlb	0	; () banked
  4957  000B3E  4BC4               	infsnz	sprintf@f& (0+255),f,b
  4958  000B40  2BC5               	incf	(sprintf@f+1)& (0+255),f,b
  4959  000B42                     	if	0	;tblptru may be non-zero
  4960  000B42                     	endif
  4961  000B42                     	if	0	;tblptru may be non-zero
  4962  000B42                     	endif
  4963  000B42  0008               	tblrd		*
  4964  000B44  CFF5 F11E          	movff	tablat,sprintf@c
  4965  000B48  0101               	movlb	1	; () banked
  4966  000B4A  511E               	movf	sprintf@c& (0+255),w,b
  4967  000B4C  A4D8               	btfss	status,2,c
  4968  000B4E  EF10  F000         	goto	l345
  4969  000B52                     u6450:
  4970                           
  4971                           ; BSR set to: 1
  4972                           ;doprnt.c: 1538: *sp = 0;
  4973                           
  4974                           ; BSR set to: 1
  4975                           
  4976                           ;doprnt.c: 1525: }
  4977                           ;doprnt.c: 1533: }
  4978                           ;doprnt.c: 1535: alldone:
  4979                           
  4980                           ; BSR set to: 1
  4981  000B52  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  4982  000B56  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  4983  000B5A  0E00               	movlw	0
  4984  000B5C  6EDF               	movwf	indf2,c
  4985  000B5E  0012               	return	
  4986  000B60                     __end_of_sprintf:
  4987                           	opt stack 0
  4988                           tblptru	equ	0xFF8
  4989                           tblptrh	equ	0xFF7
  4990                           tblptrl	equ	0xFF6
  4991                           tablat	equ	0xFF5
  4992                           prodh	equ	0xFF4
  4993                           prodl	equ	0xFF3
  4994                           intcon	equ	0xFF2
  4995                           intcon2	equ	0xFF1
  4996                           intcon3	equ	0xFF0
  4997                           postinc0	equ	0xFEE
  4998                           wreg	equ	0xFE8
  4999                           indf1	equ	0xFE7
  5000                           postdec1	equ	0xFE5
  5001                           fsr1h	equ	0xFE2
  5002                           fsr1l	equ	0xFE1
  5003                           indf2	equ	0xFDF
  5004                           postinc2	equ	0xFDE
  5005                           postdec2	equ	0xFDD
  5006                           fsr2h	equ	0xFDA
  5007                           fsr2l	equ	0xFD9
  5008                           status	equ	0xFD8
  5009                           
  5010 ;; *************** function _scale *****************
  5011 ;; Defined at:
  5012 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  5013 ;; Parameters:    Size  Location     Type
  5014 ;;  scl             1    wreg     char 
  5015 ;; Auto vars:     Size  Location     Type
  5016 ;;  scl             1   33[BANK0 ] char 
  5017 ;; Return value:  Size  Location     Type
  5018 ;;                  4   25[BANK0 ] char 
  5019 ;; Registers used:
  5020 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5021 ;; Tracked objects:
  5022 ;;		On entry : 0/0
  5023 ;;		On exit  : 0/0
  5024 ;;		Unchanged: 0/0
  5025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5026 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5027 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5029 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5030 ;;Total ram usage:        9 bytes
  5031 ;; Hardware stack levels used:    1
  5032 ;; Hardware stack levels required when called:    3
  5033 ;; This function calls:
  5034 ;;		___awdiv
  5035 ;;		___awmod
  5036 ;;		___flmul
  5037 ;; This function is called by:
  5038 ;;		_sprintf
  5039 ;; This function uses a non-reentrant model
  5040 ;;
  5041                           
  5042                           	psect	text13
  5043  000B60                     __ptext13:
  5044                           	opt stack 0
  5045  000B60                     _scale:
  5046                           	opt stack 25
  5047                           
  5048                           ; BSR set to: 1
  5049                           ;incstack = 0
  5050                           ;scale@scl stored from wreg
  5051  000B60  0100               	movlb	0	; () banked
  5052  000B62  6FA1               	movwf	scale@scl& (0+255),b
  5053                           
  5054                           ;doprnt.c: 428: if(scl < 0) {
  5055  000B64  0100               	movlb	0	; () banked
  5056  000B66  AFA1               	btfss	scale@scl& (0+255),7,b
  5057  000B68  D112               	goto	l334
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;doprnt.c: 429: scl = -scl;
  5061  000B6A  6DA1               	negf	scale@scl& (0+255),b
  5062                           
  5063                           ;doprnt.c: 430: if(scl>=110)
  5064  000B6C  51A1               	movf	scale@scl& (0+255),w,b
  5065  000B6E  0A80               	xorlw	128
  5066  000B70  0F12               	addlw	-238
  5067  000B72  A0D8               	btfss	status,0,c
  5068  000B74  D09A               	goto	l335
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5072  000B76  0E00               	movlw	0
  5073  000B78  6E24               	movwf	___awdiv@divisor+1,c
  5074  000B7A  0E0A               	movlw	10
  5075  000B7C  6E23               	movwf	___awdiv@divisor,c
  5076  000B7E  0E00               	movlw	0
  5077  000B80  6E1E               	movwf	___awmod@divisor+1,c
  5078  000B82  0E64               	movlw	100
  5079  000B84  6E1D               	movwf	___awmod@divisor,c
  5080  000B86  51A1               	movf	scale@scl& (0+255),w,b
  5081  000B88  6E1B               	movwf	___awmod@dividend,c
  5082  000B8A  6A1C               	clrf	___awmod@dividend+1,c
  5083  000B8C  BE1B               	btfsc	___awmod@dividend,7,c
  5084  000B8E  061C               	decf	___awmod@dividend+1,f,c
  5085  000B90  ECE2  F013         	call	___awmod	;wreg free
  5086  000B94  C01B  F021         	movff	?___awmod,___awdiv@dividend
  5087  000B98  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  5088  000B9C  EC5F  F013         	call	___awdiv	;wreg free
  5089  000BA0  90D8               	bcf	status,0,c
  5090  000BA2  3621               	rlcf	?___awdiv,f,c
  5091  000BA4  3622               	rlcf	?___awdiv+1,f,c
  5092  000BA6  90D8               	bcf	status,0,c
  5093  000BA8  3621               	rlcf	?___awdiv,f,c
  5094  000BAA  3622               	rlcf	?___awdiv+1,f,c
  5095  000BAC  0E24               	movlw	36
  5096  000BAE  2621               	addwf	?___awdiv,f,c
  5097  000BB0  0E00               	movlw	0
  5098  000BB2  2222               	addwfc	?___awdiv+1,f,c
  5099  000BB4  0E1F               	movlw	low __npowers_
  5100  000BB6  2421               	addwf	?___awdiv,w,c
  5101  000BB8  6EF6               	movwf	tblptrl,c
  5102  000BBA  0EFF               	movlw	high __npowers_
  5103  000BBC  2022               	addwfc	?___awdiv+1,w,c
  5104  000BBE  6EF7               	movwf	tblptrh,c
  5105  000BC0                     	if	0	;There are less than 3 active tblptr bytes
  5106  000BC0                     	endif
  5107  000BC0  0009               	tblrd		*+
  5108  000BC2  CFF5 F084          	movff	tablat,___flmul@a
  5109  000BC6  0009               	tblrd		*+
  5110  000BC8  CFF5 F085          	movff	tablat,___flmul@a+1
  5111  000BCC  0009               	tblrd		*+
  5112  000BCE  CFF5 F086          	movff	tablat,___flmul@a+2
  5113  000BD2  000A               	tblrd		*-
  5114  000BD4  CFF5 F087          	movff	tablat,___flmul@a+3
  5115  000BD8  0E00               	movlw	0
  5116  000BDA  6E24               	movwf	___awdiv@divisor+1,c
  5117  000BDC  0E64               	movlw	100
  5118  000BDE  6E23               	movwf	___awdiv@divisor,c
  5119  000BE0  0100               	movlb	0	; () banked
  5120  000BE2  51A1               	movf	scale@scl& (0+255),w,b
  5121  000BE4  6E21               	movwf	___awdiv@dividend,c
  5122  000BE6  6A22               	clrf	___awdiv@dividend+1,c
  5123  000BE8  BE21               	btfsc	___awdiv@dividend,7,c
  5124  000BEA  0622               	decf	___awdiv@dividend+1,f,c
  5125  000BEC  EC5F  F013         	call	___awdiv	;wreg free
  5126  000BF0  90D8               	bcf	status,0,c
  5127  000BF2  3621               	rlcf	?___awdiv,f,c
  5128  000BF4  3622               	rlcf	?___awdiv+1,f,c
  5129  000BF6  90D8               	bcf	status,0,c
  5130  000BF8  3621               	rlcf	?___awdiv,f,c
  5131  000BFA  3622               	rlcf	?___awdiv+1,f,c
  5132  000BFC  0E48               	movlw	72
  5133  000BFE  2621               	addwf	?___awdiv,f,c
  5134  000C00  0E00               	movlw	0
  5135  000C02  2222               	addwfc	?___awdiv+1,f,c
  5136  000C04  0E1F               	movlw	low __npowers_
  5137  000C06  2421               	addwf	?___awdiv,w,c
  5138  000C08  6EF6               	movwf	tblptrl,c
  5139  000C0A  0EFF               	movlw	high __npowers_
  5140  000C0C  2022               	addwfc	?___awdiv+1,w,c
  5141  000C0E  6EF7               	movwf	tblptrh,c
  5142  000C10                     	if	0	;There are less than 3 active tblptr bytes
  5143  000C10                     	endif
  5144  000C10  0009               	tblrd		*+
  5145  000C12  CFF5 F080          	movff	tablat,___flmul@b
  5146  000C16  0009               	tblrd		*+
  5147  000C18  CFF5 F081          	movff	tablat,___flmul@b+1
  5148  000C1C  0009               	tblrd		*+
  5149  000C1E  CFF5 F082          	movff	tablat,___flmul@b+2
  5150  000C22  000A               	tblrd		*-
  5151  000C24  CFF5 F083          	movff	tablat,___flmul@b+3
  5152  000C28  ECD8  F007         	call	___flmul	;wreg free
  5153  000C2C  C080  F09D         	movff	?___flmul,_scale$1934
  5154  000C30  C081  F09E         	movff	?___flmul+1,_scale$1934+1
  5155  000C34  C082  F09F         	movff	?___flmul+2,_scale$1934+2
  5156  000C38  C083  F0A0         	movff	?___flmul+3,_scale$1934+3
  5157                           
  5158                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5159  000C3C  C09D  F080         	movff	_scale$1934,___flmul@b
  5160  000C40  C09E  F081         	movff	_scale$1934+1,___flmul@b+1
  5161  000C44  C09F  F082         	movff	_scale$1934+2,___flmul@b+2
  5162  000C48  C0A0  F083         	movff	_scale$1934+3,___flmul@b+3
  5163  000C4C  0E00               	movlw	0
  5164  000C4E  6E1E               	movwf	___awmod@divisor+1,c
  5165  000C50  0E0A               	movlw	10
  5166  000C52  6E1D               	movwf	___awmod@divisor,c
  5167  000C54  0100               	movlb	0	; () banked
  5168  000C56  51A1               	movf	scale@scl& (0+255),w,b
  5169  000C58  6E1B               	movwf	___awmod@dividend,c
  5170  000C5A  6A1C               	clrf	___awmod@dividend+1,c
  5171  000C5C  BE1B               	btfsc	___awmod@dividend,7,c
  5172  000C5E  061C               	decf	___awmod@dividend+1,f,c
  5173  000C60  ECE2  F013         	call	___awmod	;wreg free
  5174  000C64  90D8               	bcf	status,0,c
  5175  000C66  361B               	rlcf	?___awmod,f,c
  5176  000C68  361C               	rlcf	?___awmod+1,f,c
  5177  000C6A  90D8               	bcf	status,0,c
  5178  000C6C  361B               	rlcf	?___awmod,f,c
  5179  000C6E  361C               	rlcf	?___awmod+1,f,c
  5180  000C70  0E1F               	movlw	low __npowers_
  5181  000C72  241B               	addwf	?___awmod,w,c
  5182  000C74  6EF6               	movwf	tblptrl,c
  5183  000C76  0EFF               	movlw	high __npowers_
  5184  000C78  201C               	addwfc	?___awmod+1,w,c
  5185  000C7A  6EF7               	movwf	tblptrh,c
  5186  000C7C                     	if	0	;There are less than 3 active tblptr bytes
  5187  000C7C                     	endif
  5188  000C7C  0009               	tblrd		*+
  5189  000C7E  CFF5 F084          	movff	tablat,___flmul@a
  5190  000C82  0009               	tblrd		*+
  5191  000C84  CFF5 F085          	movff	tablat,___flmul@a+1
  5192  000C88  0009               	tblrd		*+
  5193  000C8A  CFF5 F086          	movff	tablat,___flmul@a+2
  5194  000C8E  000A               	tblrd		*-
  5195  000C90  CFF5 F087          	movff	tablat,___flmul@a+3
  5196  000C94  ECD8  F007         	call	___flmul	;wreg free
  5197  000C98  C080  F099         	movff	?___flmul,?_scale
  5198  000C9C  C081  F09A         	movff	?___flmul+1,?_scale+1
  5199  000CA0  C082  F09B         	movff	?___flmul+2,?_scale+2
  5200  000CA4  C083  F09C         	movff	?___flmul+3,?_scale+3
  5201  000CA8  0012               	return	
  5202  000CAA                     l335:
  5203                           
  5204                           ;doprnt.c: 432: else if(scl > 10)
  5205  000CAA  0100               	movlb	0	; () banked
  5206  000CAC  51A1               	movf	scale@scl& (0+255),w,b
  5207  000CAE  0A80               	xorlw	128
  5208  000CB0  0F75               	addlw	-139
  5209  000CB2  A0D8               	btfss	status,0,c
  5210  000CB4  D056               	goto	l338
  5211                           
  5212                           ; BSR set to: 0
  5213                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5214  000CB6  0E00               	movlw	0
  5215  000CB8  6E24               	movwf	___awdiv@divisor+1,c
  5216  000CBA  0E0A               	movlw	10
  5217  000CBC  6E23               	movwf	___awdiv@divisor,c
  5218  000CBE  51A1               	movf	scale@scl& (0+255),w,b
  5219  000CC0  6E21               	movwf	___awdiv@dividend,c
  5220  000CC2  6A22               	clrf	___awdiv@dividend+1,c
  5221  000CC4  BE21               	btfsc	___awdiv@dividend,7,c
  5222  000CC6  0622               	decf	___awdiv@dividend+1,f,c
  5223  000CC8  EC5F  F013         	call	___awdiv	;wreg free
  5224  000CCC  90D8               	bcf	status,0,c
  5225  000CCE  3621               	rlcf	?___awdiv,f,c
  5226  000CD0  3622               	rlcf	?___awdiv+1,f,c
  5227  000CD2  90D8               	bcf	status,0,c
  5228  000CD4  3621               	rlcf	?___awdiv,f,c
  5229  000CD6  3622               	rlcf	?___awdiv+1,f,c
  5230  000CD8  0E24               	movlw	36
  5231  000CDA  2621               	addwf	?___awdiv,f,c
  5232  000CDC  0E00               	movlw	0
  5233  000CDE  2222               	addwfc	?___awdiv+1,f,c
  5234  000CE0  0E1F               	movlw	low __npowers_
  5235  000CE2  2421               	addwf	?___awdiv,w,c
  5236  000CE4  6EF6               	movwf	tblptrl,c
  5237  000CE6  0EFF               	movlw	high __npowers_
  5238  000CE8  2022               	addwfc	?___awdiv+1,w,c
  5239  000CEA  6EF7               	movwf	tblptrh,c
  5240  000CEC                     	if	0	;There are less than 3 active tblptr bytes
  5241  000CEC                     	endif
  5242  000CEC  0009               	tblrd		*+
  5243  000CEE  CFF5 F080          	movff	tablat,___flmul@b
  5244  000CF2  0009               	tblrd		*+
  5245  000CF4  CFF5 F081          	movff	tablat,___flmul@b+1
  5246  000CF8  0009               	tblrd		*+
  5247  000CFA  CFF5 F082          	movff	tablat,___flmul@b+2
  5248  000CFE  000A               	tblrd		*-
  5249  000D00  CFF5 F083          	movff	tablat,___flmul@b+3
  5250  000D04  0E00               	movlw	0
  5251  000D06  6E1E               	movwf	___awmod@divisor+1,c
  5252  000D08  0E0A               	movlw	10
  5253  000D0A  6E1D               	movwf	___awmod@divisor,c
  5254  000D0C  0100               	movlb	0	; () banked
  5255  000D0E  51A1               	movf	scale@scl& (0+255),w,b
  5256  000D10  6E1B               	movwf	___awmod@dividend,c
  5257  000D12  6A1C               	clrf	___awmod@dividend+1,c
  5258  000D14  BE1B               	btfsc	___awmod@dividend,7,c
  5259  000D16  061C               	decf	___awmod@dividend+1,f,c
  5260  000D18  ECE2  F013         	call	___awmod	;wreg free
  5261  000D1C  90D8               	bcf	status,0,c
  5262  000D1E  361B               	rlcf	?___awmod,f,c
  5263  000D20  361C               	rlcf	?___awmod+1,f,c
  5264  000D22  90D8               	bcf	status,0,c
  5265  000D24  361B               	rlcf	?___awmod,f,c
  5266  000D26  361C               	rlcf	?___awmod+1,f,c
  5267  000D28  0E1F               	movlw	low __npowers_
  5268  000D2A  241B               	addwf	?___awmod,w,c
  5269  000D2C  6EF6               	movwf	tblptrl,c
  5270  000D2E  0EFF               	movlw	high __npowers_
  5271  000D30  201C               	addwfc	?___awmod+1,w,c
  5272  000D32  6EF7               	movwf	tblptrh,c
  5273  000D34                     	if	0	;There are less than 3 active tblptr bytes
  5274  000D34                     	endif
  5275  000D34  0009               	tblrd		*+
  5276  000D36  CFF5 F084          	movff	tablat,___flmul@a
  5277  000D3A  0009               	tblrd		*+
  5278  000D3C  CFF5 F085          	movff	tablat,___flmul@a+1
  5279  000D40  0009               	tblrd		*+
  5280  000D42  CFF5 F086          	movff	tablat,___flmul@a+2
  5281  000D46  000A               	tblrd		*-
  5282  000D48  CFF5 F087          	movff	tablat,___flmul@a+3
  5283  000D4C  ECD8  F007         	call	___flmul	;wreg free
  5284  000D50  C080  F099         	movff	?___flmul,?_scale
  5285  000D54  C081  F09A         	movff	?___flmul+1,?_scale+1
  5286  000D58  C082  F09B         	movff	?___flmul+2,?_scale+2
  5287  000D5C  C083  F09C         	movff	?___flmul+3,?_scale+3
  5288  000D60  0012               	return	
  5289  000D62                     l338:
  5290                           
  5291                           ;doprnt.c: 434: return _npowers_[scl];
  5292  000D62  0100               	movlb	0	; () banked
  5293  000D64  51A1               	movf	scale@scl& (0+255),w,b
  5294  000D66  0D04               	mullw	4
  5295  000D68  0E1F               	movlw	low __npowers_
  5296  000D6A  24F3               	addwf	prodl,w,c
  5297  000D6C  6EF6               	movwf	tblptrl,c
  5298  000D6E  0EFF               	movlw	high __npowers_
  5299  000D70  20F4               	addwfc	prodh,w,c
  5300  000D72  6EF7               	movwf	tblptrh,c
  5301  000D74                     	if	0	;There are less than 3 active tblptr bytes
  5302  000D74                     	endif
  5303  000D74  0009               	tblrd		*+
  5304  000D76  CFF5 F099          	movff	tablat,?_scale
  5305  000D7A  0009               	tblrd		*+
  5306  000D7C  CFF5 F09A          	movff	tablat,?_scale+1
  5307  000D80  0009               	tblrd		*+
  5308  000D82  CFF5 F09B          	movff	tablat,?_scale+2
  5309  000D86  000A               	tblrd		*-
  5310  000D88  CFF5 F09C          	movff	tablat,?_scale+3
  5311                           
  5312                           ; BSR set to: 0
  5313  000D8C  0012               	return	
  5314  000D8E                     l334:
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;doprnt.c: 435: }
  5318                           ;doprnt.c: 436: if(scl>=110)
  5319                           
  5320                           ; BSR set to: 0
  5321  000D8E  51A1               	movf	scale@scl& (0+255),w,b
  5322  000D90  0A80               	xorlw	128
  5323  000D92  0F12               	addlw	-238
  5324  000D94  A0D8               	btfss	status,0,c
  5325  000D96  D09A               	goto	l339
  5326                           
  5327                           ; BSR set to: 0
  5328                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5329  000D98  0E00               	movlw	0
  5330  000D9A  6E24               	movwf	___awdiv@divisor+1,c
  5331  000D9C  0E0A               	movlw	10
  5332  000D9E  6E23               	movwf	___awdiv@divisor,c
  5333  000DA0  0E00               	movlw	0
  5334  000DA2  6E1E               	movwf	___awmod@divisor+1,c
  5335  000DA4  0E64               	movlw	100
  5336  000DA6  6E1D               	movwf	___awmod@divisor,c
  5337  000DA8  51A1               	movf	scale@scl& (0+255),w,b
  5338  000DAA  6E1B               	movwf	___awmod@dividend,c
  5339  000DAC  6A1C               	clrf	___awmod@dividend+1,c
  5340  000DAE  BE1B               	btfsc	___awmod@dividend,7,c
  5341  000DB0  061C               	decf	___awmod@dividend+1,f,c
  5342  000DB2  ECE2  F013         	call	___awmod	;wreg free
  5343  000DB6  C01B  F021         	movff	?___awmod,___awdiv@dividend
  5344  000DBA  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  5345  000DBE  EC5F  F013         	call	___awdiv	;wreg free
  5346  000DC2  90D8               	bcf	status,0,c
  5347  000DC4  3621               	rlcf	?___awdiv,f,c
  5348  000DC6  3622               	rlcf	?___awdiv+1,f,c
  5349  000DC8  90D8               	bcf	status,0,c
  5350  000DCA  3621               	rlcf	?___awdiv,f,c
  5351  000DCC  3622               	rlcf	?___awdiv+1,f,c
  5352  000DCE  0E24               	movlw	36
  5353  000DD0  2621               	addwf	?___awdiv,f,c
  5354  000DD2  0E00               	movlw	0
  5355  000DD4  2222               	addwfc	?___awdiv+1,f,c
  5356  000DD6  0EEB               	movlw	low __powers_
  5357  000DD8  2421               	addwf	?___awdiv,w,c
  5358  000DDA  6EF6               	movwf	tblptrl,c
  5359  000DDC  0EFE               	movlw	high __powers_
  5360  000DDE  2022               	addwfc	?___awdiv+1,w,c
  5361  000DE0  6EF7               	movwf	tblptrh,c
  5362  000DE2                     	if	0	;There are less than 3 active tblptr bytes
  5363  000DE2                     	endif
  5364  000DE2  0009               	tblrd		*+
  5365  000DE4  CFF5 F084          	movff	tablat,___flmul@a
  5366  000DE8  0009               	tblrd		*+
  5367  000DEA  CFF5 F085          	movff	tablat,___flmul@a+1
  5368  000DEE  0009               	tblrd		*+
  5369  000DF0  CFF5 F086          	movff	tablat,___flmul@a+2
  5370  000DF4  000A               	tblrd		*-
  5371  000DF6  CFF5 F087          	movff	tablat,___flmul@a+3
  5372  000DFA  0E00               	movlw	0
  5373  000DFC  6E24               	movwf	___awdiv@divisor+1,c
  5374  000DFE  0E64               	movlw	100
  5375  000E00  6E23               	movwf	___awdiv@divisor,c
  5376  000E02  0100               	movlb	0	; () banked
  5377  000E04  51A1               	movf	scale@scl& (0+255),w,b
  5378  000E06  6E21               	movwf	___awdiv@dividend,c
  5379  000E08  6A22               	clrf	___awdiv@dividend+1,c
  5380  000E0A  BE21               	btfsc	___awdiv@dividend,7,c
  5381  000E0C  0622               	decf	___awdiv@dividend+1,f,c
  5382  000E0E  EC5F  F013         	call	___awdiv	;wreg free
  5383  000E12  90D8               	bcf	status,0,c
  5384  000E14  3621               	rlcf	?___awdiv,f,c
  5385  000E16  3622               	rlcf	?___awdiv+1,f,c
  5386  000E18  90D8               	bcf	status,0,c
  5387  000E1A  3621               	rlcf	?___awdiv,f,c
  5388  000E1C  3622               	rlcf	?___awdiv+1,f,c
  5389  000E1E  0E48               	movlw	72
  5390  000E20  2621               	addwf	?___awdiv,f,c
  5391  000E22  0E00               	movlw	0
  5392  000E24  2222               	addwfc	?___awdiv+1,f,c
  5393  000E26  0EEB               	movlw	low __powers_
  5394  000E28  2421               	addwf	?___awdiv,w,c
  5395  000E2A  6EF6               	movwf	tblptrl,c
  5396  000E2C  0EFE               	movlw	high __powers_
  5397  000E2E  2022               	addwfc	?___awdiv+1,w,c
  5398  000E30  6EF7               	movwf	tblptrh,c
  5399  000E32                     	if	0	;There are less than 3 active tblptr bytes
  5400  000E32                     	endif
  5401  000E32  0009               	tblrd		*+
  5402  000E34  CFF5 F080          	movff	tablat,___flmul@b
  5403  000E38  0009               	tblrd		*+
  5404  000E3A  CFF5 F081          	movff	tablat,___flmul@b+1
  5405  000E3E  0009               	tblrd		*+
  5406  000E40  CFF5 F082          	movff	tablat,___flmul@b+2
  5407  000E44  000A               	tblrd		*-
  5408  000E46  CFF5 F083          	movff	tablat,___flmul@b+3
  5409  000E4A  ECD8  F007         	call	___flmul	;wreg free
  5410  000E4E  C080  F09D         	movff	?___flmul,_scale$1934
  5411  000E52  C081  F09E         	movff	?___flmul+1,_scale$1934+1
  5412  000E56  C082  F09F         	movff	?___flmul+2,_scale$1934+2
  5413  000E5A  C083  F0A0         	movff	?___flmul+3,_scale$1934+3
  5414                           
  5415                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5416  000E5E  C09D  F080         	movff	_scale$1934,___flmul@b
  5417  000E62  C09E  F081         	movff	_scale$1934+1,___flmul@b+1
  5418  000E66  C09F  F082         	movff	_scale$1934+2,___flmul@b+2
  5419  000E6A  C0A0  F083         	movff	_scale$1934+3,___flmul@b+3
  5420  000E6E  0E00               	movlw	0
  5421  000E70  6E1E               	movwf	___awmod@divisor+1,c
  5422  000E72  0E0A               	movlw	10
  5423  000E74  6E1D               	movwf	___awmod@divisor,c
  5424  000E76  0100               	movlb	0	; () banked
  5425  000E78  51A1               	movf	scale@scl& (0+255),w,b
  5426  000E7A  6E1B               	movwf	___awmod@dividend,c
  5427  000E7C  6A1C               	clrf	___awmod@dividend+1,c
  5428  000E7E  BE1B               	btfsc	___awmod@dividend,7,c
  5429  000E80  061C               	decf	___awmod@dividend+1,f,c
  5430  000E82  ECE2  F013         	call	___awmod	;wreg free
  5431  000E86  90D8               	bcf	status,0,c
  5432  000E88  361B               	rlcf	?___awmod,f,c
  5433  000E8A  361C               	rlcf	?___awmod+1,f,c
  5434  000E8C  90D8               	bcf	status,0,c
  5435  000E8E  361B               	rlcf	?___awmod,f,c
  5436  000E90  361C               	rlcf	?___awmod+1,f,c
  5437  000E92  0EEB               	movlw	low __powers_
  5438  000E94  241B               	addwf	?___awmod,w,c
  5439  000E96  6EF6               	movwf	tblptrl,c
  5440  000E98  0EFE               	movlw	high __powers_
  5441  000E9A  201C               	addwfc	?___awmod+1,w,c
  5442  000E9C  6EF7               	movwf	tblptrh,c
  5443  000E9E                     	if	0	;There are less than 3 active tblptr bytes
  5444  000E9E                     	endif
  5445  000E9E  0009               	tblrd		*+
  5446  000EA0  CFF5 F084          	movff	tablat,___flmul@a
  5447  000EA4  0009               	tblrd		*+
  5448  000EA6  CFF5 F085          	movff	tablat,___flmul@a+1
  5449  000EAA  0009               	tblrd		*+
  5450  000EAC  CFF5 F086          	movff	tablat,___flmul@a+2
  5451  000EB0  000A               	tblrd		*-
  5452  000EB2  CFF5 F087          	movff	tablat,___flmul@a+3
  5453  000EB6  ECD8  F007         	call	___flmul	;wreg free
  5454  000EBA  C080  F099         	movff	?___flmul,?_scale
  5455  000EBE  C081  F09A         	movff	?___flmul+1,?_scale+1
  5456  000EC2  C082  F09B         	movff	?___flmul+2,?_scale+2
  5457  000EC6  C083  F09C         	movff	?___flmul+3,?_scale+3
  5458  000ECA  0012               	return	
  5459  000ECC                     l339:
  5460                           
  5461                           ;doprnt.c: 438: else if(scl > 10)
  5462  000ECC  0100               	movlb	0	; () banked
  5463  000ECE  51A1               	movf	scale@scl& (0+255),w,b
  5464  000ED0  0A80               	xorlw	128
  5465  000ED2  0F75               	addlw	-139
  5466  000ED4  A0D8               	btfss	status,0,c
  5467  000ED6  D056               	goto	l341
  5468                           
  5469                           ; BSR set to: 0
  5470                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5471  000ED8  0E00               	movlw	0
  5472  000EDA  6E24               	movwf	___awdiv@divisor+1,c
  5473  000EDC  0E0A               	movlw	10
  5474  000EDE  6E23               	movwf	___awdiv@divisor,c
  5475  000EE0  51A1               	movf	scale@scl& (0+255),w,b
  5476  000EE2  6E21               	movwf	___awdiv@dividend,c
  5477  000EE4  6A22               	clrf	___awdiv@dividend+1,c
  5478  000EE6  BE21               	btfsc	___awdiv@dividend,7,c
  5479  000EE8  0622               	decf	___awdiv@dividend+1,f,c
  5480  000EEA  EC5F  F013         	call	___awdiv	;wreg free
  5481  000EEE  90D8               	bcf	status,0,c
  5482  000EF0  3621               	rlcf	?___awdiv,f,c
  5483  000EF2  3622               	rlcf	?___awdiv+1,f,c
  5484  000EF4  90D8               	bcf	status,0,c
  5485  000EF6  3621               	rlcf	?___awdiv,f,c
  5486  000EF8  3622               	rlcf	?___awdiv+1,f,c
  5487  000EFA  0E24               	movlw	36
  5488  000EFC  2621               	addwf	?___awdiv,f,c
  5489  000EFE  0E00               	movlw	0
  5490  000F00  2222               	addwfc	?___awdiv+1,f,c
  5491  000F02  0EEB               	movlw	low __powers_
  5492  000F04  2421               	addwf	?___awdiv,w,c
  5493  000F06  6EF6               	movwf	tblptrl,c
  5494  000F08  0EFE               	movlw	high __powers_
  5495  000F0A  2022               	addwfc	?___awdiv+1,w,c
  5496  000F0C  6EF7               	movwf	tblptrh,c
  5497  000F0E                     	if	0	;There are less than 3 active tblptr bytes
  5498  000F0E                     	endif
  5499  000F0E  0009               	tblrd		*+
  5500  000F10  CFF5 F080          	movff	tablat,___flmul@b
  5501  000F14  0009               	tblrd		*+
  5502  000F16  CFF5 F081          	movff	tablat,___flmul@b+1
  5503  000F1A  0009               	tblrd		*+
  5504  000F1C  CFF5 F082          	movff	tablat,___flmul@b+2
  5505  000F20  000A               	tblrd		*-
  5506  000F22  CFF5 F083          	movff	tablat,___flmul@b+3
  5507  000F26  0E00               	movlw	0
  5508  000F28  6E1E               	movwf	___awmod@divisor+1,c
  5509  000F2A  0E0A               	movlw	10
  5510  000F2C  6E1D               	movwf	___awmod@divisor,c
  5511  000F2E  0100               	movlb	0	; () banked
  5512  000F30  51A1               	movf	scale@scl& (0+255),w,b
  5513  000F32  6E1B               	movwf	___awmod@dividend,c
  5514  000F34  6A1C               	clrf	___awmod@dividend+1,c
  5515  000F36  BE1B               	btfsc	___awmod@dividend,7,c
  5516  000F38  061C               	decf	___awmod@dividend+1,f,c
  5517  000F3A  ECE2  F013         	call	___awmod	;wreg free
  5518  000F3E  90D8               	bcf	status,0,c
  5519  000F40  361B               	rlcf	?___awmod,f,c
  5520  000F42  361C               	rlcf	?___awmod+1,f,c
  5521  000F44  90D8               	bcf	status,0,c
  5522  000F46  361B               	rlcf	?___awmod,f,c
  5523  000F48  361C               	rlcf	?___awmod+1,f,c
  5524  000F4A  0EEB               	movlw	low __powers_
  5525  000F4C  241B               	addwf	?___awmod,w,c
  5526  000F4E  6EF6               	movwf	tblptrl,c
  5527  000F50  0EFE               	movlw	high __powers_
  5528  000F52  201C               	addwfc	?___awmod+1,w,c
  5529  000F54  6EF7               	movwf	tblptrh,c
  5530  000F56                     	if	0	;There are less than 3 active tblptr bytes
  5531  000F56                     	endif
  5532  000F56  0009               	tblrd		*+
  5533  000F58  CFF5 F084          	movff	tablat,___flmul@a
  5534  000F5C  0009               	tblrd		*+
  5535  000F5E  CFF5 F085          	movff	tablat,___flmul@a+1
  5536  000F62  0009               	tblrd		*+
  5537  000F64  CFF5 F086          	movff	tablat,___flmul@a+2
  5538  000F68  000A               	tblrd		*-
  5539  000F6A  CFF5 F087          	movff	tablat,___flmul@a+3
  5540  000F6E  ECD8  F007         	call	___flmul	;wreg free
  5541  000F72  C080  F099         	movff	?___flmul,?_scale
  5542  000F76  C081  F09A         	movff	?___flmul+1,?_scale+1
  5543  000F7A  C082  F09B         	movff	?___flmul+2,?_scale+2
  5544  000F7E  C083  F09C         	movff	?___flmul+3,?_scale+3
  5545  000F82  0012               	return	
  5546  000F84                     l341:
  5547                           
  5548                           ;doprnt.c: 440: return _powers_[scl];
  5549  000F84  0100               	movlb	0	; () banked
  5550  000F86  51A1               	movf	scale@scl& (0+255),w,b
  5551  000F88  0D04               	mullw	4
  5552  000F8A  0EEB               	movlw	low __powers_
  5553  000F8C  24F3               	addwf	prodl,w,c
  5554  000F8E  6EF6               	movwf	tblptrl,c
  5555  000F90  0EFE               	movlw	high __powers_
  5556  000F92  20F4               	addwfc	prodh,w,c
  5557  000F94  6EF7               	movwf	tblptrh,c
  5558  000F96                     	if	0	;There are less than 3 active tblptr bytes
  5559  000F96                     	endif
  5560  000F96  0009               	tblrd		*+
  5561  000F98  CFF5 F099          	movff	tablat,?_scale
  5562  000F9C  0009               	tblrd		*+
  5563  000F9E  CFF5 F09A          	movff	tablat,?_scale+1
  5564  000FA2  0009               	tblrd		*+
  5565  000FA4  CFF5 F09B          	movff	tablat,?_scale+2
  5566  000FA8  000A               	tblrd		*-
  5567  000FAA  CFF5 F09C          	movff	tablat,?_scale+3
  5568  000FAE  0012               	return	
  5569  000FB0                     __end_of_scale:
  5570                           	opt stack 0
  5571                           tblptru	equ	0xFF8
  5572                           tblptrh	equ	0xFF7
  5573                           tblptrl	equ	0xFF6
  5574                           tablat	equ	0xFF5
  5575                           prodh	equ	0xFF4
  5576                           prodl	equ	0xFF3
  5577                           intcon	equ	0xFF2
  5578                           intcon2	equ	0xFF1
  5579                           intcon3	equ	0xFF0
  5580                           postinc0	equ	0xFEE
  5581                           wreg	equ	0xFE8
  5582                           indf1	equ	0xFE7
  5583                           postdec1	equ	0xFE5
  5584                           fsr1h	equ	0xFE2
  5585                           fsr1l	equ	0xFE1
  5586                           indf2	equ	0xFDF
  5587                           postinc2	equ	0xFDE
  5588                           postdec2	equ	0xFDD
  5589                           fsr2h	equ	0xFDA
  5590                           fsr2l	equ	0xFD9
  5591                           status	equ	0xFD8
  5592                           
  5593 ;; *************** function _isdigit *****************
  5594 ;; Defined at:
  5595 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  5596 ;; Parameters:    Size  Location     Type
  5597 ;;  c               1    wreg     unsigned char 
  5598 ;; Auto vars:     Size  Location     Type
  5599 ;;  c               1   28[COMRAM] unsigned char 
  5600 ;; Return value:  Size  Location     Type
  5601 ;;		None               void
  5602 ;; Registers used:
  5603 ;;		wreg, status,2, status,0
  5604 ;; Tracked objects:
  5605 ;;		On entry : 0/0
  5606 ;;		On exit  : 0/0
  5607 ;;		Unchanged: 0/0
  5608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5610 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5611 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5612 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5613 ;;Total ram usage:        3 bytes
  5614 ;; Hardware stack levels used:    1
  5615 ;; Hardware stack levels required when called:    2
  5616 ;; This function calls:
  5617 ;;		Nothing
  5618 ;; This function is called by:
  5619 ;;		_sprintf
  5620 ;; This function uses a non-reentrant model
  5621 ;;
  5622                           
  5623                           	psect	text14
  5624  002CCC                     __ptext14:
  5625                           	opt stack 0
  5626  002CCC                     _isdigit:
  5627                           	opt stack 26
  5628                           
  5629                           ;incstack = 0
  5630                           ;isdigit@c stored from wreg
  5631  002CCC  6E1D               	movwf	isdigit@c,c
  5632  002CCE  0E00               	movlw	0
  5633  002CD0  6E1C               	movwf	_isdigit$1559,c
  5634  002CD2  0E3A               	movlw	58
  5635  002CD4  601D               	cpfslt	isdigit@c,c
  5636  002CD6  D005               	goto	l802
  5637  002CD8  0E2F               	movlw	47
  5638  002CDA  641D               	cpfsgt	isdigit@c,c
  5639  002CDC  D002               	goto	l802
  5640  002CDE  0E01               	movlw	1
  5641  002CE0  6E1C               	movwf	_isdigit$1559,c
  5642  002CE2                     l802:
  5643  002CE2  C01C  F01B         	movff	_isdigit$1559,??_isdigit
  5644  002CE6  301B               	rrcf	??_isdigit,w,c
  5645  002CE8  0012               	return	
  5646  002CEA                     __end_of_isdigit:
  5647                           	opt stack 0
  5648                           tblptru	equ	0xFF8
  5649                           tblptrh	equ	0xFF7
  5650                           tblptrl	equ	0xFF6
  5651                           tablat	equ	0xFF5
  5652                           prodh	equ	0xFF4
  5653                           prodl	equ	0xFF3
  5654                           intcon	equ	0xFF2
  5655                           intcon2	equ	0xFF1
  5656                           intcon3	equ	0xFF0
  5657                           postinc0	equ	0xFEE
  5658                           wreg	equ	0xFE8
  5659                           indf1	equ	0xFE7
  5660                           postdec1	equ	0xFE5
  5661                           fsr1h	equ	0xFE2
  5662                           fsr1l	equ	0xFE1
  5663                           indf2	equ	0xFDF
  5664                           postinc2	equ	0xFDE
  5665                           postdec2	equ	0xFDD
  5666                           fsr2h	equ	0xFDA
  5667                           fsr2l	equ	0xFD9
  5668                           status	equ	0xFD8
  5669                           
  5670 ;; *************** function _fround *****************
  5671 ;; Defined at:
  5672 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  5673 ;; Parameters:    Size  Location     Type
  5674 ;;  prec            1    wreg     unsigned char 
  5675 ;; Auto vars:     Size  Location     Type
  5676 ;;  prec            1   37[BANK0 ] unsigned char 
  5677 ;; Return value:  Size  Location     Type
  5678 ;;                  4   25[BANK0 ] unsigned char 
  5679 ;; Registers used:
  5680 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5681 ;; Tracked objects:
  5682 ;;		On entry : 0/0
  5683 ;;		On exit  : 0/0
  5684 ;;		Unchanged: 0/0
  5685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5686 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5687 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5689 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5690 ;;Total ram usage:       13 bytes
  5691 ;; Hardware stack levels used:    1
  5692 ;; Hardware stack levels required when called:    3
  5693 ;; This function calls:
  5694 ;;		___awdiv
  5695 ;;		___awmod
  5696 ;;		___flmul
  5697 ;; This function is called by:
  5698 ;;		_sprintf
  5699 ;; This function uses a non-reentrant model
  5700 ;;
  5701                           
  5702                           	psect	text15
  5703  0018F4                     __ptext15:
  5704                           	opt stack 0
  5705  0018F4                     _fround:
  5706                           	opt stack 25
  5707                           
  5708                           ;incstack = 0
  5709                           ;fround@prec stored from wreg
  5710  0018F4  0100               	movlb	0	; () banked
  5711  0018F6  6FA5               	movwf	fround@prec& (0+255),b
  5712                           
  5713                           ;doprnt.c: 413: if(prec>=110)
  5714  0018F8  0E6D               	movlw	109
  5715  0018FA  0100               	movlb	0	; () banked
  5716  0018FC  65A5               	cpfsgt	fround@prec& (0+255),b
  5717  0018FE  D0AD               	goto	l328
  5718                           
  5719                           ; BSR set to: 0
  5720                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5721  001900  0E00               	movlw	0
  5722  001902  6E24               	movwf	___awdiv@divisor+1,c
  5723  001904  0E0A               	movlw	10
  5724  001906  6E23               	movwf	___awdiv@divisor,c
  5725  001908  0E00               	movlw	0
  5726  00190A  6E1E               	movwf	___awmod@divisor+1,c
  5727  00190C  0E64               	movlw	100
  5728  00190E  6E1D               	movwf	___awmod@divisor,c
  5729  001910  C0A5  F01B         	movff	fround@prec,___awmod@dividend
  5730  001914  6A1C               	clrf	___awmod@dividend+1,c
  5731  001916  ECE2  F013         	call	___awmod	;wreg free
  5732  00191A  C01B  F021         	movff	?___awmod,___awdiv@dividend
  5733  00191E  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  5734  001922  EC5F  F013         	call	___awdiv	;wreg free
  5735  001926  90D8               	bcf	status,0,c
  5736  001928  3621               	rlcf	?___awdiv,f,c
  5737  00192A  3622               	rlcf	?___awdiv+1,f,c
  5738  00192C  90D8               	bcf	status,0,c
  5739  00192E  3621               	rlcf	?___awdiv,f,c
  5740  001930  3622               	rlcf	?___awdiv+1,f,c
  5741  001932  0E24               	movlw	36
  5742  001934  2621               	addwf	?___awdiv,f,c
  5743  001936  0E00               	movlw	0
  5744  001938  2222               	addwfc	?___awdiv+1,f,c
  5745  00193A  0E1F               	movlw	low __npowers_
  5746  00193C  2421               	addwf	?___awdiv,w,c
  5747  00193E  6EF6               	movwf	tblptrl,c
  5748  001940  0EFF               	movlw	high __npowers_
  5749  001942  2022               	addwfc	?___awdiv+1,w,c
  5750  001944  6EF7               	movwf	tblptrh,c
  5751  001946                     	if	0	;There are less than 3 active tblptr bytes
  5752  001946                     	endif
  5753  001946  0009               	tblrd		*+
  5754  001948  CFF5 F084          	movff	tablat,___flmul@a
  5755  00194C  0009               	tblrd		*+
  5756  00194E  CFF5 F085          	movff	tablat,___flmul@a+1
  5757  001952  0009               	tblrd		*+
  5758  001954  CFF5 F086          	movff	tablat,___flmul@a+2
  5759  001958  000A               	tblrd		*-
  5760  00195A  CFF5 F087          	movff	tablat,___flmul@a+3
  5761  00195E  0E00               	movlw	0
  5762  001960  6E24               	movwf	___awdiv@divisor+1,c
  5763  001962  0E64               	movlw	100
  5764  001964  6E23               	movwf	___awdiv@divisor,c
  5765  001966  C0A5  F021         	movff	fround@prec,___awdiv@dividend
  5766  00196A  6A22               	clrf	___awdiv@dividend+1,c
  5767  00196C  EC5F  F013         	call	___awdiv	;wreg free
  5768  001970  90D8               	bcf	status,0,c
  5769  001972  3621               	rlcf	?___awdiv,f,c
  5770  001974  3622               	rlcf	?___awdiv+1,f,c
  5771  001976  90D8               	bcf	status,0,c
  5772  001978  3621               	rlcf	?___awdiv,f,c
  5773  00197A  3622               	rlcf	?___awdiv+1,f,c
  5774  00197C  0E48               	movlw	72
  5775  00197E  2621               	addwf	?___awdiv,f,c
  5776  001980  0E00               	movlw	0
  5777  001982  2222               	addwfc	?___awdiv+1,f,c
  5778  001984  0E1F               	movlw	low __npowers_
  5779  001986  2421               	addwf	?___awdiv,w,c
  5780  001988  6EF6               	movwf	tblptrl,c
  5781  00198A  0EFF               	movlw	high __npowers_
  5782  00198C  2022               	addwfc	?___awdiv+1,w,c
  5783  00198E  6EF7               	movwf	tblptrh,c
  5784  001990                     	if	0	;There are less than 3 active tblptr bytes
  5785  001990                     	endif
  5786  001990  0009               	tblrd		*+
  5787  001992  CFF5 F080          	movff	tablat,___flmul@b
  5788  001996  0009               	tblrd		*+
  5789  001998  CFF5 F081          	movff	tablat,___flmul@b+1
  5790  00199C  0009               	tblrd		*+
  5791  00199E  CFF5 F082          	movff	tablat,___flmul@b+2
  5792  0019A2  000A               	tblrd		*-
  5793  0019A4  CFF5 F083          	movff	tablat,___flmul@b+3
  5794  0019A8  ECD8  F007         	call	___flmul	;wreg free
  5795  0019AC  C080  F0A1         	movff	?___flmul,_fround$1932
  5796  0019B0  C081  F0A2         	movff	?___flmul+1,_fround$1932+1
  5797  0019B4  C082  F0A3         	movff	?___flmul+2,_fround$1932+2
  5798  0019B8  C083  F0A4         	movff	?___flmul+3,_fround$1932+3
  5799                           
  5800                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5801  0019BC  0E00               	movlw	0
  5802  0019BE  6E1E               	movwf	___awmod@divisor+1,c
  5803  0019C0  0E0A               	movlw	10
  5804  0019C2  6E1D               	movwf	___awmod@divisor,c
  5805  0019C4  C0A5  F01B         	movff	fround@prec,___awmod@dividend
  5806  0019C8  6A1C               	clrf	___awmod@dividend+1,c
  5807  0019CA  ECE2  F013         	call	___awmod	;wreg free
  5808  0019CE  90D8               	bcf	status,0,c
  5809  0019D0  361B               	rlcf	?___awmod,f,c
  5810  0019D2  361C               	rlcf	?___awmod+1,f,c
  5811  0019D4  90D8               	bcf	status,0,c
  5812  0019D6  361B               	rlcf	?___awmod,f,c
  5813  0019D8  361C               	rlcf	?___awmod+1,f,c
  5814  0019DA  0E1F               	movlw	low __npowers_
  5815  0019DC  241B               	addwf	?___awmod,w,c
  5816  0019DE  6EF6               	movwf	tblptrl,c
  5817  0019E0  0EFF               	movlw	high __npowers_
  5818  0019E2  201C               	addwfc	?___awmod+1,w,c
  5819  0019E4  6EF7               	movwf	tblptrh,c
  5820  0019E6                     	if	0	;There are less than 3 active tblptr bytes
  5821  0019E6                     	endif
  5822  0019E6  0009               	tblrd		*+
  5823  0019E8  CFF5 F084          	movff	tablat,___flmul@a
  5824  0019EC  0009               	tblrd		*+
  5825  0019EE  CFF5 F085          	movff	tablat,___flmul@a+1
  5826  0019F2  0009               	tblrd		*+
  5827  0019F4  CFF5 F086          	movff	tablat,___flmul@a+2
  5828  0019F8  000A               	tblrd		*-
  5829  0019FA  CFF5 F087          	movff	tablat,___flmul@a+3
  5830  0019FE  C0A1  F080         	movff	_fround$1932,___flmul@b
  5831  001A02  C0A2  F081         	movff	_fround$1932+1,___flmul@b+1
  5832  001A06  C0A3  F082         	movff	_fround$1932+2,___flmul@b+2
  5833  001A0A  C0A4  F083         	movff	_fround$1932+3,___flmul@b+3
  5834  001A0E  ECD8  F007         	call	___flmul	;wreg free
  5835  001A12  C080  F09D         	movff	?___flmul,_fround$1933
  5836  001A16  C081  F09E         	movff	?___flmul+1,_fround$1933+1
  5837  001A1A  C082  F09F         	movff	?___flmul+2,_fround$1933+2
  5838  001A1E  C083  F0A0         	movff	?___flmul+3,_fround$1933+3
  5839                           
  5840                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5841  001A22  C09D  F080         	movff	_fround$1933,___flmul@b
  5842  001A26  C09E  F081         	movff	_fround$1933+1,___flmul@b+1
  5843  001A2A  C09F  F082         	movff	_fround$1933+2,___flmul@b+2
  5844  001A2E  C0A0  F083         	movff	_fround$1933+3,___flmul@b+3
  5845  001A32  0E00               	movlw	0
  5846  001A34  0100               	movlb	0	; () banked
  5847  001A36  6F84               	movwf	___flmul@a& (0+255),b
  5848  001A38  0E00               	movlw	0
  5849  001A3A  6F85               	movwf	(___flmul@a+1)& (0+255),b
  5850  001A3C  0E00               	movlw	0
  5851  001A3E  6F86               	movwf	(___flmul@a+2)& (0+255),b
  5852  001A40  0E3F               	movlw	63
  5853  001A42  6F87               	movwf	(___flmul@a+3)& (0+255),b
  5854  001A44  ECD8  F007         	call	___flmul	;wreg free
  5855  001A48  C080  F099         	movff	?___flmul,?_fround
  5856  001A4C  C081  F09A         	movff	?___flmul+1,?_fround+1
  5857  001A50  C082  F09B         	movff	?___flmul+2,?_fround+2
  5858  001A54  C083  F09C         	movff	?___flmul+3,?_fround+3
  5859  001A58  0012               	return	
  5860  001A5A                     l328:
  5861                           
  5862                           ;doprnt.c: 415: else if(prec > 10)
  5863  001A5A  0E0A               	movlw	10
  5864  001A5C  0100               	movlb	0	; () banked
  5865  001A5E  65A5               	cpfsgt	fround@prec& (0+255),b
  5866  001A60  D06C               	goto	l331
  5867                           
  5868                           ; BSR set to: 0
  5869                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5870  001A62  0E00               	movlw	0
  5871  001A64  6E1E               	movwf	___awmod@divisor+1,c
  5872  001A66  0E0A               	movlw	10
  5873  001A68  6E1D               	movwf	___awmod@divisor,c
  5874  001A6A  C0A5  F01B         	movff	fround@prec,___awmod@dividend
  5875  001A6E  6A1C               	clrf	___awmod@dividend+1,c
  5876  001A70  ECE2  F013         	call	___awmod	;wreg free
  5877  001A74  90D8               	bcf	status,0,c
  5878  001A76  361B               	rlcf	?___awmod,f,c
  5879  001A78  361C               	rlcf	?___awmod+1,f,c
  5880  001A7A  90D8               	bcf	status,0,c
  5881  001A7C  361B               	rlcf	?___awmod,f,c
  5882  001A7E  361C               	rlcf	?___awmod+1,f,c
  5883  001A80  0E1F               	movlw	low __npowers_
  5884  001A82  241B               	addwf	?___awmod,w,c
  5885  001A84  6EF6               	movwf	tblptrl,c
  5886  001A86  0EFF               	movlw	high __npowers_
  5887  001A88  201C               	addwfc	?___awmod+1,w,c
  5888  001A8A  6EF7               	movwf	tblptrh,c
  5889  001A8C                     	if	0	;There are less than 3 active tblptr bytes
  5890  001A8C                     	endif
  5891  001A8C  0009               	tblrd		*+
  5892  001A8E  CFF5 F084          	movff	tablat,___flmul@a
  5893  001A92  0009               	tblrd		*+
  5894  001A94  CFF5 F085          	movff	tablat,___flmul@a+1
  5895  001A98  0009               	tblrd		*+
  5896  001A9A  CFF5 F086          	movff	tablat,___flmul@a+2
  5897  001A9E  000A               	tblrd		*-
  5898  001AA0  CFF5 F087          	movff	tablat,___flmul@a+3
  5899  001AA4  0E00               	movlw	0
  5900  001AA6  6E24               	movwf	___awdiv@divisor+1,c
  5901  001AA8  0E0A               	movlw	10
  5902  001AAA  6E23               	movwf	___awdiv@divisor,c
  5903  001AAC  C0A5  F021         	movff	fround@prec,___awdiv@dividend
  5904  001AB0  6A22               	clrf	___awdiv@dividend+1,c
  5905  001AB2  EC5F  F013         	call	___awdiv	;wreg free
  5906  001AB6  90D8               	bcf	status,0,c
  5907  001AB8  3621               	rlcf	?___awdiv,f,c
  5908  001ABA  3622               	rlcf	?___awdiv+1,f,c
  5909  001ABC  90D8               	bcf	status,0,c
  5910  001ABE  3621               	rlcf	?___awdiv,f,c
  5911  001AC0  3622               	rlcf	?___awdiv+1,f,c
  5912  001AC2  0E24               	movlw	36
  5913  001AC4  2621               	addwf	?___awdiv,f,c
  5914  001AC6  0E00               	movlw	0
  5915  001AC8  2222               	addwfc	?___awdiv+1,f,c
  5916  001ACA  0E1F               	movlw	low __npowers_
  5917  001ACC  2421               	addwf	?___awdiv,w,c
  5918  001ACE  6EF6               	movwf	tblptrl,c
  5919  001AD0  0EFF               	movlw	high __npowers_
  5920  001AD2  2022               	addwfc	?___awdiv+1,w,c
  5921  001AD4  6EF7               	movwf	tblptrh,c
  5922  001AD6                     	if	0	;There are less than 3 active tblptr bytes
  5923  001AD6                     	endif
  5924  001AD6  0009               	tblrd		*+
  5925  001AD8  CFF5 F080          	movff	tablat,___flmul@b
  5926  001ADC  0009               	tblrd		*+
  5927  001ADE  CFF5 F081          	movff	tablat,___flmul@b+1
  5928  001AE2  0009               	tblrd		*+
  5929  001AE4  CFF5 F082          	movff	tablat,___flmul@b+2
  5930  001AE8  000A               	tblrd		*-
  5931  001AEA  CFF5 F083          	movff	tablat,___flmul@b+3
  5932  001AEE  ECD8  F007         	call	___flmul	;wreg free
  5933  001AF2  C080  F0A1         	movff	?___flmul,_fround$1932
  5934  001AF6  C081  F0A2         	movff	?___flmul+1,_fround$1932+1
  5935  001AFA  C082  F0A3         	movff	?___flmul+2,_fround$1932+2
  5936  001AFE  C083  F0A4         	movff	?___flmul+3,_fround$1932+3
  5937                           
  5938                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5939  001B02  C0A1  F080         	movff	_fround$1932,___flmul@b
  5940  001B06  C0A2  F081         	movff	_fround$1932+1,___flmul@b+1
  5941  001B0A  C0A3  F082         	movff	_fround$1932+2,___flmul@b+2
  5942  001B0E  C0A4  F083         	movff	_fround$1932+3,___flmul@b+3
  5943  001B12  0E00               	movlw	0
  5944  001B14  0100               	movlb	0	; () banked
  5945  001B16  6F84               	movwf	___flmul@a& (0+255),b
  5946  001B18  0E00               	movlw	0
  5947  001B1A  6F85               	movwf	(___flmul@a+1)& (0+255),b
  5948  001B1C  0E00               	movlw	0
  5949  001B1E  6F86               	movwf	(___flmul@a+2)& (0+255),b
  5950  001B20  0E3F               	movlw	63
  5951  001B22  6F87               	movwf	(___flmul@a+3)& (0+255),b
  5952  001B24  ECD8  F007         	call	___flmul	;wreg free
  5953  001B28  C080  F099         	movff	?___flmul,?_fround
  5954  001B2C  C081  F09A         	movff	?___flmul+1,?_fround+1
  5955  001B30  C082  F09B         	movff	?___flmul+2,?_fround+2
  5956  001B34  C083  F09C         	movff	?___flmul+3,?_fround+3
  5957  001B38  0012               	return	
  5958  001B3A                     l331:
  5959                           
  5960                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5961  001B3A  0100               	movlb	0	; () banked
  5962  001B3C  51A5               	movf	fround@prec& (0+255),w,b
  5963  001B3E  0D04               	mullw	4
  5964  001B40  0E1F               	movlw	low __npowers_
  5965  001B42  24F3               	addwf	prodl,w,c
  5966  001B44  6EF6               	movwf	tblptrl,c
  5967  001B46  0EFF               	movlw	high __npowers_
  5968  001B48  20F4               	addwfc	prodh,w,c
  5969  001B4A  6EF7               	movwf	tblptrh,c
  5970  001B4C                     	if	0	;There are less than 3 active tblptr bytes
  5971  001B4C                     	endif
  5972  001B4C  0009               	tblrd		*+
  5973  001B4E  CFF5 F080          	movff	tablat,___flmul@b
  5974  001B52  0009               	tblrd		*+
  5975  001B54  CFF5 F081          	movff	tablat,___flmul@b+1
  5976  001B58  0009               	tblrd		*+
  5977  001B5A  CFF5 F082          	movff	tablat,___flmul@b+2
  5978  001B5E  000A               	tblrd		*-
  5979  001B60  CFF5 F083          	movff	tablat,___flmul@b+3
  5980  001B64  0E00               	movlw	0
  5981  001B66  6F84               	movwf	___flmul@a& (0+255),b
  5982  001B68  0E00               	movlw	0
  5983  001B6A  6F85               	movwf	(___flmul@a+1)& (0+255),b
  5984  001B6C  0E00               	movlw	0
  5985  001B6E  6F86               	movwf	(___flmul@a+2)& (0+255),b
  5986  001B70  0E3F               	movlw	63
  5987  001B72  6F87               	movwf	(___flmul@a+3)& (0+255),b
  5988  001B74  ECD8  F007         	call	___flmul	;wreg free
  5989  001B78  C080  F099         	movff	?___flmul,?_fround
  5990  001B7C  C081  F09A         	movff	?___flmul+1,?_fround+1
  5991  001B80  C082  F09B         	movff	?___flmul+2,?_fround+2
  5992  001B84  C083  F09C         	movff	?___flmul+3,?_fround+3
  5993  001B88  0012               	return	
  5994  001B8A                     __end_of_fround:
  5995                           	opt stack 0
  5996                           tblptru	equ	0xFF8
  5997                           tblptrh	equ	0xFF7
  5998                           tblptrl	equ	0xFF6
  5999                           tablat	equ	0xFF5
  6000                           prodh	equ	0xFF4
  6001                           prodl	equ	0xFF3
  6002                           intcon	equ	0xFF2
  6003                           intcon2	equ	0xFF1
  6004                           intcon3	equ	0xFF0
  6005                           postinc0	equ	0xFEE
  6006                           wreg	equ	0xFE8
  6007                           indf1	equ	0xFE7
  6008                           postdec1	equ	0xFE5
  6009                           fsr1h	equ	0xFE2
  6010                           fsr1l	equ	0xFE1
  6011                           indf2	equ	0xFDF
  6012                           postinc2	equ	0xFDE
  6013                           postdec2	equ	0xFDD
  6014                           fsr2h	equ	0xFDA
  6015                           fsr2l	equ	0xFD9
  6016                           status	equ	0xFD8
  6017                           
  6018 ;; *************** function ___flmul *****************
  6019 ;; Defined at:
  6020 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcmul.c"
  6021 ;; Parameters:    Size  Location     Type
  6022 ;;  b               4    0[BANK0 ] unsigned char 
  6023 ;;  a               4    4[BANK0 ] unsigned char 
  6024 ;; Auto vars:     Size  Location     Type
  6025 ;;  prod            4   19[BANK0 ] struct .
  6026 ;;  grs             4   14[BANK0 ] unsigned long 
  6027 ;;  temp            2   23[BANK0 ] struct .
  6028 ;;  bexp            1   18[BANK0 ] unsigned char 
  6029 ;;  aexp            1   13[BANK0 ] unsigned char 
  6030 ;;  sign            1   12[BANK0 ] unsigned char 
  6031 ;; Return value:  Size  Location     Type
  6032 ;;                  4    0[BANK0 ] unsigned char 
  6033 ;; Registers used:
  6034 ;;		wreg, status,2, status,0, prodl, prodh
  6035 ;; Tracked objects:
  6036 ;;		On entry : 0/0
  6037 ;;		On exit  : 0/0
  6038 ;;		Unchanged: 0/0
  6039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6040 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6041 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6042 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6043 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6044 ;;Total ram usage:       25 bytes
  6045 ;; Hardware stack levels used:    1
  6046 ;; Hardware stack levels required when called:    2
  6047 ;; This function calls:
  6048 ;;		Nothing
  6049 ;; This function is called by:
  6050 ;;		_operation
  6051 ;;		_main
  6052 ;;		_fround
  6053 ;;		_scale
  6054 ;;		_sprintf
  6055 ;;		_set_pwm1_percent
  6056 ;;		_set_pwm1_voltage
  6057 ;;		_set_pwm1_general
  6058 ;; This function uses a non-reentrant model
  6059 ;;
  6060                           
  6061                           	psect	text16
  6062  000FB0                     __ptext16:
  6063                           	opt stack 0
  6064  000FB0                     ___flmul:
  6065                           	opt stack 27
  6066                           
  6067                           ;incstack = 0
  6068  000FB0  0100               	movlb	0	; () banked
  6069  000FB2  5183               	movf	(___flmul@b+3)& (0+255),w,b
  6070  000FB4  0B80               	andlw	128
  6071  000FB6  6F8C               	movwf	___flmul@sign& (0+255),b
  6072  000FB8  5183               	movf	(___flmul@b+3)& (0+255),w,b
  6073  000FBA  2583               	addwf	(___flmul@b+3)& (0+255),w,b
  6074  000FBC  6F92               	movwf	___flmul@bexp& (0+255),b
  6075                           
  6076                           ; BSR set to: 0
  6077  000FBE  BF82               	btfsc	(___flmul@b+2)& (0+255),7,b
  6078                           
  6079                           ; BSR set to: 0
  6080  000FC0  8192               	bsf	___flmul@bexp& (0+255),0,b
  6081                           
  6082                           ; BSR set to: 0
  6083                           
  6084                           ; BSR set to: 0
  6085  000FC2  5192               	movf	___flmul@bexp& (0+255),w,b
  6086  000FC4  B4D8               	btfsc	status,2,c
  6087  000FC6  D00D               	goto	l1001
  6088                           
  6089                           ; BSR set to: 0
  6090  000FC8  2992               	incf	___flmul@bexp& (0+255),w,b
  6091  000FCA  A4D8               	btfss	status,2,c
  6092  000FCC  D008               	goto	l1002
  6093                           
  6094                           ; BSR set to: 0
  6095  000FCE  0E00               	movlw	0
  6096  000FD0  6F80               	movwf	___flmul@b& (0+255),b
  6097  000FD2  0E00               	movlw	0
  6098  000FD4  6F81               	movwf	(___flmul@b+1)& (0+255),b
  6099  000FD6  0E00               	movlw	0
  6100  000FD8  6F82               	movwf	(___flmul@b+2)& (0+255),b
  6101  000FDA  0E00               	movlw	0
  6102  000FDC  6F83               	movwf	(___flmul@b+3)& (0+255),b
  6103  000FDE                     l1002:
  6104                           
  6105                           ; BSR set to: 0
  6106                           
  6107                           ; BSR set to: 0
  6108  000FDE  8F82               	bsf	(___flmul@b+2)& (0+255),7,b
  6109  000FE0  D008               	goto	l1003
  6110  000FE2                     l1001:
  6111                           
  6112                           ; BSR set to: 0
  6113                           
  6114                           ; BSR set to: 0
  6115  000FE2  0E00               	movlw	0
  6116  000FE4  6F80               	movwf	___flmul@b& (0+255),b
  6117  000FE6  0E00               	movlw	0
  6118  000FE8  6F81               	movwf	(___flmul@b+1)& (0+255),b
  6119  000FEA  0E00               	movlw	0
  6120  000FEC  6F82               	movwf	(___flmul@b+2)& (0+255),b
  6121  000FEE  0E00               	movlw	0
  6122  000FF0  6F83               	movwf	(___flmul@b+3)& (0+255),b
  6123  000FF2                     l1003:
  6124                           
  6125                           ; BSR set to: 0
  6126                           
  6127                           ; BSR set to: 0
  6128  000FF2  5187               	movf	(___flmul@a+3)& (0+255),w,b
  6129  000FF4  0B80               	andlw	128
  6130  000FF6  1B8C               	xorwf	___flmul@sign& (0+255),f,b
  6131                           
  6132                           ; BSR set to: 0
  6133  000FF8  5187               	movf	(___flmul@a+3)& (0+255),w,b
  6134  000FFA  2587               	addwf	(___flmul@a+3)& (0+255),w,b
  6135  000FFC  6F8D               	movwf	___flmul@aexp& (0+255),b
  6136                           
  6137                           ; BSR set to: 0
  6138  000FFE  BF86               	btfsc	(___flmul@a+2)& (0+255),7,b
  6139                           
  6140                           ; BSR set to: 0
  6141  001000  818D               	bsf	___flmul@aexp& (0+255),0,b
  6142                           
  6143                           ; BSR set to: 0
  6144                           
  6145                           ; BSR set to: 0
  6146  001002  518D               	movf	___flmul@aexp& (0+255),w,b
  6147  001004  B4D8               	btfsc	status,2,c
  6148  001006  D00D               	goto	l1005
  6149                           
  6150                           ; BSR set to: 0
  6151  001008  298D               	incf	___flmul@aexp& (0+255),w,b
  6152  00100A  A4D8               	btfss	status,2,c
  6153  00100C  D008               	goto	l1006
  6154                           
  6155                           ; BSR set to: 0
  6156  00100E  0E00               	movlw	0
  6157  001010  6F84               	movwf	___flmul@a& (0+255),b
  6158  001012  0E00               	movlw	0
  6159  001014  6F85               	movwf	(___flmul@a+1)& (0+255),b
  6160  001016  0E00               	movlw	0
  6161  001018  6F86               	movwf	(___flmul@a+2)& (0+255),b
  6162  00101A  0E00               	movlw	0
  6163  00101C  6F87               	movwf	(___flmul@a+3)& (0+255),b
  6164  00101E                     l1006:
  6165                           
  6166                           ; BSR set to: 0
  6167                           
  6168                           ; BSR set to: 0
  6169  00101E  8F86               	bsf	(___flmul@a+2)& (0+255),7,b
  6170  001020  D008               	goto	l1007
  6171  001022                     l1005:
  6172                           
  6173                           ; BSR set to: 0
  6174                           
  6175                           ; BSR set to: 0
  6176  001022  0E00               	movlw	0
  6177  001024  6F84               	movwf	___flmul@a& (0+255),b
  6178  001026  0E00               	movlw	0
  6179  001028  6F85               	movwf	(___flmul@a+1)& (0+255),b
  6180  00102A  0E00               	movlw	0
  6181  00102C  6F86               	movwf	(___flmul@a+2)& (0+255),b
  6182  00102E  0E00               	movlw	0
  6183  001030  6F87               	movwf	(___flmul@a+3)& (0+255),b
  6184  001032                     l1007:
  6185                           
  6186                           ; BSR set to: 0
  6187  001032  518D               	movf	___flmul@aexp& (0+255),w,b
  6188  001034  B4D8               	btfsc	status,2,c
  6189  001036  D003               	goto	u5130
  6190                           
  6191                           ; BSR set to: 0
  6192  001038  5192               	movf	___flmul@bexp& (0+255),w,b
  6193  00103A  A4D8               	btfss	status,2,c
  6194  00103C  D009               	goto	l1008
  6195  00103E                     u5130:
  6196                           
  6197                           ; BSR set to: 0
  6198                           
  6199                           ; BSR set to: 0
  6200  00103E  0E00               	movlw	0
  6201  001040  6F80               	movwf	?___flmul& (0+255),b
  6202  001042  0E00               	movlw	0
  6203  001044  6F81               	movwf	(?___flmul+1)& (0+255),b
  6204  001046  0E00               	movlw	0
  6205  001048  6F82               	movwf	(?___flmul+2)& (0+255),b
  6206  00104A  0E00               	movlw	0
  6207  00104C  6F83               	movwf	(?___flmul+3)& (0+255),b
  6208                           
  6209                           ; BSR set to: 0
  6210  00104E  0012               	return	
  6211  001050                     l1008:
  6212                           
  6213                           ; BSR set to: 0
  6214                           
  6215                           ; BSR set to: 0
  6216  001050  5186               	movf	(___flmul@a+2)& (0+255),w,b
  6217  001052  0380               	mulwf	___flmul@b& (0+255),b
  6218  001054  CFF3 F097          	movff	prodl,___flmul@temp
  6219  001058  CFF4 F098          	movff	prodh,___flmul@temp+1
  6220                           
  6221                           ; BSR set to: 0
  6222  00105C  5197               	movf	___flmul@temp& (0+255),w,b
  6223  00105E  6F8E               	movwf	___flmul@grs& (0+255),b
  6224  001060  6B8F               	clrf	(___flmul@grs+1)& (0+255),b
  6225  001062  6B90               	clrf	(___flmul@grs+2)& (0+255),b
  6226  001064  6B91               	clrf	(___flmul@grs+3)& (0+255),b
  6227                           
  6228                           ; BSR set to: 0
  6229  001066  5198               	movf	(___flmul@temp+1)& (0+255),w,b
  6230  001068  6F93               	movwf	___flmul@prod& (0+255),b
  6231  00106A  6B94               	clrf	(___flmul@prod+1)& (0+255),b
  6232  00106C  6B95               	clrf	(___flmul@prod+2)& (0+255),b
  6233  00106E  6B96               	clrf	(___flmul@prod+3)& (0+255),b
  6234  001070  5185               	movf	(___flmul@a+1)& (0+255),w,b
  6235  001072  0381               	mulwf	(___flmul@b+1)& (0+255),b
  6236  001074  CFF3 F097          	movff	prodl,___flmul@temp
  6237  001078  CFF4 F098          	movff	prodh,___flmul@temp+1
  6238                           
  6239                           ; BSR set to: 0
  6240  00107C  5197               	movf	___flmul@temp& (0+255),w,b
  6241  00107E  278E               	addwf	___flmul@grs& (0+255),f,b
  6242  001080  0E00               	movlw	0
  6243  001082  238F               	addwfc	(___flmul@grs+1)& (0+255),f,b
  6244  001084  2390               	addwfc	(___flmul@grs+2)& (0+255),f,b
  6245  001086  2391               	addwfc	(___flmul@grs+3)& (0+255),f,b
  6246                           
  6247                           ; BSR set to: 0
  6248  001088  5198               	movf	(___flmul@temp+1)& (0+255),w,b
  6249  00108A  2793               	addwf	___flmul@prod& (0+255),f,b
  6250  00108C  0E00               	movlw	0
  6251  00108E  2394               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6252  001090  2395               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6253  001092  2396               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6254  001094  5184               	movf	___flmul@a& (0+255),w,b
  6255  001096  0382               	mulwf	(___flmul@b+2)& (0+255),b
  6256  001098  CFF3 F097          	movff	prodl,___flmul@temp
  6257  00109C  CFF4 F098          	movff	prodh,___flmul@temp+1
  6258                           
  6259                           ; BSR set to: 0
  6260  0010A0  5197               	movf	___flmul@temp& (0+255),w,b
  6261  0010A2  278E               	addwf	___flmul@grs& (0+255),f,b
  6262  0010A4  0E00               	movlw	0
  6263  0010A6  238F               	addwfc	(___flmul@grs+1)& (0+255),f,b
  6264  0010A8  2390               	addwfc	(___flmul@grs+2)& (0+255),f,b
  6265  0010AA  2391               	addwfc	(___flmul@grs+3)& (0+255),f,b
  6266                           
  6267                           ; BSR set to: 0
  6268  0010AC  5198               	movf	(___flmul@temp+1)& (0+255),w,b
  6269  0010AE  2793               	addwf	___flmul@prod& (0+255),f,b
  6270  0010B0  0E00               	movlw	0
  6271  0010B2  2394               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6272  0010B4  2395               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6273  0010B6  2396               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6274                           
  6275                           ; BSR set to: 0
  6276  0010B8  C090  F091         	movff	___flmul@grs+2,___flmul@grs+3
  6277  0010BC  C08F  F090         	movff	___flmul@grs+1,___flmul@grs+2
  6278  0010C0  C08E  F08F         	movff	___flmul@grs,___flmul@grs+1
  6279  0010C4  6B8E               	clrf	___flmul@grs& (0+255),b
  6280                           
  6281                           ; BSR set to: 0
  6282  0010C6  5184               	movf	___flmul@a& (0+255),w,b
  6283  0010C8  0381               	mulwf	(___flmul@b+1)& (0+255),b
  6284  0010CA  CFF3 F097          	movff	prodl,___flmul@temp
  6285  0010CE  CFF4 F098          	movff	prodh,___flmul@temp+1
  6286                           
  6287                           ; BSR set to: 0
  6288  0010D2  5197               	movf	___flmul@temp& (0+255),w,b
  6289  0010D4  278E               	addwf	___flmul@grs& (0+255),f,b
  6290  0010D6  5198               	movf	(___flmul@temp+1)& (0+255),w,b
  6291  0010D8  238F               	addwfc	(___flmul@grs+1)& (0+255),f,b
  6292  0010DA  0E00               	movlw	0
  6293  0010DC  2390               	addwfc	(___flmul@grs+2)& (0+255),f,b
  6294  0010DE  0E00               	movlw	0
  6295  0010E0  2391               	addwfc	(___flmul@grs+3)& (0+255),f,b
  6296                           
  6297                           ; BSR set to: 0
  6298  0010E2  5185               	movf	(___flmul@a+1)& (0+255),w,b
  6299  0010E4  0380               	mulwf	___flmul@b& (0+255),b
  6300  0010E6  CFF3 F097          	movff	prodl,___flmul@temp
  6301  0010EA  CFF4 F098          	movff	prodh,___flmul@temp+1
  6302                           
  6303                           ; BSR set to: 0
  6304  0010EE  5197               	movf	___flmul@temp& (0+255),w,b
  6305  0010F0  278E               	addwf	___flmul@grs& (0+255),f,b
  6306  0010F2  5198               	movf	(___flmul@temp+1)& (0+255),w,b
  6307  0010F4  238F               	addwfc	(___flmul@grs+1)& (0+255),f,b
  6308  0010F6  0E00               	movlw	0
  6309  0010F8  2390               	addwfc	(___flmul@grs+2)& (0+255),f,b
  6310  0010FA  0E00               	movlw	0
  6311  0010FC  2391               	addwfc	(___flmul@grs+3)& (0+255),f,b
  6312                           
  6313                           ; BSR set to: 0
  6314  0010FE  C090  F091         	movff	___flmul@grs+2,___flmul@grs+3
  6315  001102  C08F  F090         	movff	___flmul@grs+1,___flmul@grs+2
  6316  001106  C08E  F08F         	movff	___flmul@grs,___flmul@grs+1
  6317  00110A  6B8E               	clrf	___flmul@grs& (0+255),b
  6318  00110C  5184               	movf	___flmul@a& (0+255),w,b
  6319  00110E  0380               	mulwf	___flmul@b& (0+255),b
  6320  001110  CFF3 F097          	movff	prodl,___flmul@temp
  6321  001114  CFF4 F098          	movff	prodh,___flmul@temp+1
  6322                           
  6323                           ; BSR set to: 0
  6324  001118  5197               	movf	___flmul@temp& (0+255),w,b
  6325  00111A  278E               	addwf	___flmul@grs& (0+255),f,b
  6326  00111C  5198               	movf	(___flmul@temp+1)& (0+255),w,b
  6327  00111E  238F               	addwfc	(___flmul@grs+1)& (0+255),f,b
  6328  001120  0E00               	movlw	0
  6329  001122  2390               	addwfc	(___flmul@grs+2)& (0+255),f,b
  6330  001124  0E00               	movlw	0
  6331  001126  2391               	addwfc	(___flmul@grs+3)& (0+255),f,b
  6332                           
  6333                           ; BSR set to: 0
  6334  001128  5186               	movf	(___flmul@a+2)& (0+255),w,b
  6335  00112A  0381               	mulwf	(___flmul@b+1)& (0+255),b
  6336  00112C  CFF3 F097          	movff	prodl,___flmul@temp
  6337  001130  CFF4 F098          	movff	prodh,___flmul@temp+1
  6338  001134  5197               	movf	___flmul@temp& (0+255),w,b
  6339  001136  2793               	addwf	___flmul@prod& (0+255),f,b
  6340  001138  5198               	movf	(___flmul@temp+1)& (0+255),w,b
  6341  00113A  2394               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6342  00113C  0E00               	movlw	0
  6343  00113E  2395               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6344  001140  0E00               	movlw	0
  6345  001142  2396               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6346                           
  6347                           ; BSR set to: 0
  6348  001144  5185               	movf	(___flmul@a+1)& (0+255),w,b
  6349  001146  0382               	mulwf	(___flmul@b+2)& (0+255),b
  6350  001148  CFF3 F097          	movff	prodl,___flmul@temp
  6351  00114C  CFF4 F098          	movff	prodh,___flmul@temp+1
  6352                           
  6353                           ; BSR set to: 0
  6354  001150  5197               	movf	___flmul@temp& (0+255),w,b
  6355  001152  2793               	addwf	___flmul@prod& (0+255),f,b
  6356  001154  5198               	movf	(___flmul@temp+1)& (0+255),w,b
  6357  001156  2394               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6358  001158  0E00               	movlw	0
  6359  00115A  2395               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6360  00115C  0E00               	movlw	0
  6361  00115E  2396               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6362  001160  5186               	movf	(___flmul@a+2)& (0+255),w,b
  6363  001162  0382               	mulwf	(___flmul@b+2)& (0+255),b
  6364  001164  CFF3 F097          	movff	prodl,___flmul@temp
  6365  001168  CFF4 F098          	movff	prodh,___flmul@temp+1
  6366                           
  6367                           ; BSR set to: 0
  6368  00116C  5197               	movf	___flmul@temp& (0+255),w,b
  6369  00116E  6F88               	movwf	??___flmul& (0+255),b
  6370  001170  5198               	movf	(___flmul@temp+1)& (0+255),w,b
  6371  001172  6F89               	movwf	(??___flmul+1)& (0+255),b
  6372  001174  6B8A               	clrf	(??___flmul+2)& (0+255),b
  6373  001176  6B8B               	clrf	(??___flmul+3)& (0+255),b
  6374  001178  C08A  F08B         	movff	??___flmul+2,??___flmul+3
  6375  00117C  C089  F08A         	movff	??___flmul+1,??___flmul+2
  6376  001180  C088  F089         	movff	??___flmul,??___flmul+1
  6377  001184  6B88               	clrf	??___flmul& (0+255),b
  6378  001186  5188               	movf	??___flmul& (0+255),w,b
  6379  001188  2793               	addwf	___flmul@prod& (0+255),f,b
  6380  00118A  5189               	movf	(??___flmul+1)& (0+255),w,b
  6381  00118C  2394               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6382  00118E  518A               	movf	(??___flmul+2)& (0+255),w,b
  6383  001190  2395               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6384  001192  518B               	movf	(??___flmul+3)& (0+255),w,b
  6385  001194  2396               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6386                           
  6387                           ; BSR set to: 0
  6388  001196  C08E  F088         	movff	___flmul@grs,??___flmul
  6389  00119A  C08F  F089         	movff	___flmul@grs+1,??___flmul+1
  6390  00119E  C090  F08A         	movff	___flmul@grs+2,??___flmul+2
  6391  0011A2  C091  F08B         	movff	___flmul@grs+3,??___flmul+3
  6392  0011A6  0E19               	movlw	25
  6393  0011A8  D005               	goto	u5140
  6394  0011AA                     u5145:
  6395  0011AA  90D8               	bcf	status,0,c
  6396  0011AC  338B               	rrcf	(??___flmul+3)& (0+255),f,b
  6397  0011AE  338A               	rrcf	(??___flmul+2)& (0+255),f,b
  6398  0011B0  3389               	rrcf	(??___flmul+1)& (0+255),f,b
  6399  0011B2  3388               	rrcf	??___flmul& (0+255),f,b
  6400  0011B4                     u5140:
  6401  0011B4  2EE8               	decfsz	wreg,f,c
  6402  0011B6  D7F9               	goto	u5145
  6403  0011B8  5188               	movf	??___flmul& (0+255),w,b
  6404  0011BA  2793               	addwf	___flmul@prod& (0+255),f,b
  6405  0011BC  5189               	movf	(??___flmul+1)& (0+255),w,b
  6406  0011BE  2394               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6407  0011C0  518A               	movf	(??___flmul+2)& (0+255),w,b
  6408  0011C2  2395               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6409  0011C4  518B               	movf	(??___flmul+3)& (0+255),w,b
  6410  0011C6  2396               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6411                           
  6412                           ; BSR set to: 0
  6413  0011C8  C090  F091         	movff	___flmul@grs+2,___flmul@grs+3
  6414  0011CC  C08F  F090         	movff	___flmul@grs+1,___flmul@grs+2
  6415  0011D0  C08E  F08F         	movff	___flmul@grs,___flmul@grs+1
  6416  0011D4  6B8E               	clrf	___flmul@grs& (0+255),b
  6417                           
  6418                           ; BSR set to: 0
  6419  0011D6  518D               	movf	___flmul@aexp& (0+255),w,b
  6420  0011D8  C092  F088         	movff	___flmul@bexp,??___flmul
  6421  0011DC  6B89               	clrf	(??___flmul+1)& (0+255),b
  6422  0011DE  2788               	addwf	??___flmul& (0+255),f,b
  6423  0011E0  0E00               	movlw	0
  6424  0011E2  2389               	addwfc	(??___flmul+1)& (0+255),f,b
  6425  0011E4  0E82               	movlw	130
  6426  0011E6  2588               	addwf	??___flmul& (0+255),w,b
  6427  0011E8  6F97               	movwf	___flmul@temp& (0+255),b
  6428  0011EA  0EFF               	movlw	255
  6429  0011EC  2189               	addwfc	(??___flmul+1)& (0+255),w,b
  6430  0011EE  6F98               	movwf	(___flmul@temp+1)& (0+255),b
  6431  0011F0  D00F               	goto	l1012
  6432  0011F2                     
  6433                           ; BSR set to: 0
  6434                           
  6435                           ; BSR set to: 0
  6436  0011F2  90D8               	bcf	status,0,c
  6437  0011F4  3793               	rlcf	___flmul@prod& (0+255),f,b
  6438  0011F6  3794               	rlcf	(___flmul@prod+1)& (0+255),f,b
  6439  0011F8  3795               	rlcf	(___flmul@prod+2)& (0+255),f,b
  6440  0011FA  3796               	rlcf	(___flmul@prod+3)& (0+255),f,b
  6441                           
  6442                           ; BSR set to: 0
  6443  0011FC  BF91               	btfsc	(___flmul@grs+3)& (0+255),7,b
  6444                           
  6445                           ; BSR set to: 0
  6446  0011FE  8193               	bsf	___flmul@prod& (0+255),0,b
  6447                           
  6448                           ; BSR set to: 0
  6449  001200  90D8               	bcf	status,0,c
  6450  001202  378E               	rlcf	___flmul@grs& (0+255),f,b
  6451  001204  378F               	rlcf	(___flmul@grs+1)& (0+255),f,b
  6452  001206  3790               	rlcf	(___flmul@grs+2)& (0+255),f,b
  6453  001208  3791               	rlcf	(___flmul@grs+3)& (0+255),f,b
  6454  00120A  0797               	decf	___flmul@temp& (0+255),f,b
  6455  00120C  A0D8               	btfss	status,0,c
  6456  00120E  0798               	decf	(___flmul@temp+1)& (0+255),f,b
  6457  001210                     l1012:
  6458                           
  6459                           ; BSR set to: 0
  6460                           
  6461                           ; BSR set to: 0
  6462  001210  AF95               	btfss	(___flmul@prod+2)& (0+255),7,b
  6463  001212  D7EF               	goto	l1013
  6464                           
  6465                           ; BSR set to: 0
  6466                           
  6467                           ; BSR set to: 0
  6468  001214  0E00               	movlw	0
  6469  001216  6F8D               	movwf	___flmul@aexp& (0+255),b
  6470                           
  6471                           ; BSR set to: 0
  6472  001218  AF91               	btfss	(___flmul@grs+3)& (0+255),7,b
  6473  00121A  D016               	goto	l1019
  6474                           
  6475                           ; BSR set to: 0
  6476  00121C  0EFF               	movlw	255
  6477  00121E  158E               	andwf	___flmul@grs& (0+255),w,b
  6478  001220  6F88               	movwf	??___flmul& (0+255),b
  6479  001222  0EFF               	movlw	255
  6480  001224  158F               	andwf	(___flmul@grs+1)& (0+255),w,b
  6481  001226  6F89               	movwf	(??___flmul+1)& (0+255),b
  6482  001228  0EFF               	movlw	255
  6483  00122A  1590               	andwf	(___flmul@grs+2)& (0+255),w,b
  6484  00122C  6F8A               	movwf	(??___flmul+2)& (0+255),b
  6485  00122E  0E7F               	movlw	127
  6486  001230  1591               	andwf	(___flmul@grs+3)& (0+255),w,b
  6487  001232  6F8B               	movwf	(??___flmul+3)& (0+255),b
  6488  001234  5188               	movf	??___flmul& (0+255),w,b
  6489  001236  1189               	iorwf	(??___flmul+1)& (0+255),w,b
  6490  001238  118A               	iorwf	(??___flmul+2)& (0+255),w,b
  6491  00123A  118B               	iorwf	(??___flmul+3)& (0+255),w,b
  6492  00123C  A4D8               	btfss	status,2,c
  6493  00123E  D002               	goto	u5190
  6494                           
  6495                           ; BSR set to: 0
  6496                           
  6497                           ; BSR set to: 0
  6498  001240  A193               	btfss	___flmul@prod& (0+255),0,b
  6499  001242  D002               	goto	l1019
  6500  001244                     u5190:
  6501                           
  6502                           ; BSR set to: 0
  6503  001244  0E01               	movlw	1
  6504  001246  6F8D               	movwf	___flmul@aexp& (0+255),b
  6505  001248                     l1019:
  6506                           
  6507                           ; BSR set to: 0
  6508                           
  6509                           ; BSR set to: 0
  6510                           
  6511                           ; BSR set to: 0
  6512  001248  518D               	movf	___flmul@aexp& (0+255),w,b
  6513  00124A  B4D8               	btfsc	status,2,c
  6514  00124C  D01F               	goto	l1021
  6515                           
  6516                           ; BSR set to: 0
  6517  00124E  0E01               	movlw	1
  6518  001250  2793               	addwf	___flmul@prod& (0+255),f,b
  6519  001252  0E00               	movlw	0
  6520  001254  2394               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6521  001256  2395               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6522  001258  2396               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6523                           
  6524                           ; BSR set to: 0
  6525  00125A  A196               	btfss	(___flmul@prod+3)& (0+255),0,b
  6526  00125C  D017               	goto	l1021
  6527                           
  6528                           ; BSR set to: 0
  6529  00125E  C093  F088         	movff	___flmul@prod,??___flmul
  6530  001262  C094  F089         	movff	___flmul@prod+1,??___flmul+1
  6531  001266  C095  F08A         	movff	___flmul@prod+2,??___flmul+2
  6532  00126A  C096  F08B         	movff	___flmul@prod+3,??___flmul+3
  6533  00126E  358B               	rlcf	(??___flmul+3)& (0+255),w,b
  6534  001270  338B               	rrcf	(??___flmul+3)& (0+255),f,b
  6535  001272  338A               	rrcf	(??___flmul+2)& (0+255),f,b
  6536  001274  3389               	rrcf	(??___flmul+1)& (0+255),f,b
  6537  001276  3388               	rrcf	??___flmul& (0+255),f,b
  6538  001278  C088  F093         	movff	??___flmul,___flmul@prod
  6539  00127C  C089  F094         	movff	??___flmul+1,___flmul@prod+1
  6540  001280  C08A  F095         	movff	??___flmul+2,___flmul@prod+2
  6541  001284  C08B  F096         	movff	??___flmul+3,___flmul@prod+3
  6542                           
  6543                           ; BSR set to: 0
  6544  001288  4B97               	infsnz	___flmul@temp& (0+255),f,b
  6545  00128A  2B98               	incf	(___flmul@temp+1)& (0+255),f,b
  6546  00128C                     l1021:
  6547                           
  6548                           ; BSR set to: 0
  6549                           
  6550                           ; BSR set to: 0
  6551                           
  6552                           ; BSR set to: 0
  6553  00128C  BF98               	btfsc	(___flmul@temp+1)& (0+255),7,b
  6554  00128E  D00D               	goto	l1022
  6555  001290  5198               	movf	(___flmul@temp+1)& (0+255),w,b
  6556  001292  E103               	bnz	u5220
  6557  001294  2997               	incf	___flmul@temp& (0+255),w,b
  6558  001296  A0D8               	btfss	status,0,c
  6559  001298  D008               	goto	l1022
  6560  00129A                     u5220:
  6561                           
  6562                           ; BSR set to: 0
  6563  00129A  0E00               	movlw	0
  6564  00129C  6F93               	movwf	___flmul@prod& (0+255),b
  6565  00129E  0E00               	movlw	0
  6566  0012A0  6F94               	movwf	(___flmul@prod+1)& (0+255),b
  6567  0012A2  0E80               	movlw	128
  6568  0012A4  6F95               	movwf	(___flmul@prod+2)& (0+255),b
  6569  0012A6  0E7F               	movlw	127
  6570  0012A8  D020               	goto	L9
  6571  0012AA                     l1022:
  6572                           
  6573                           ; BSR set to: 0
  6574                           
  6575                           ; BSR set to: 0
  6576  0012AA  BF98               	btfsc	(___flmul@temp+1)& (0+255),7,b
  6577  0012AC  D005               	goto	u5230
  6578  0012AE  5198               	movf	(___flmul@temp+1)& (0+255),w,b
  6579  0012B0  E10E               	bnz	l1024
  6580  0012B2  0597               	decf	___flmul@temp& (0+255),w,b
  6581  0012B4  B0D8               	btfsc	status,0,c
  6582  0012B6  D00B               	goto	l1024
  6583  0012B8                     u5230:
  6584                           
  6585                           ; BSR set to: 0
  6586  0012B8  0E00               	movlw	0
  6587  0012BA  6F93               	movwf	___flmul@prod& (0+255),b
  6588  0012BC  0E00               	movlw	0
  6589  0012BE  6F94               	movwf	(___flmul@prod+1)& (0+255),b
  6590  0012C0  0E00               	movlw	0
  6591  0012C2  6F95               	movwf	(___flmul@prod+2)& (0+255),b
  6592  0012C4  0E00               	movlw	0
  6593  0012C6  6F96               	movwf	(___flmul@prod+3)& (0+255),b
  6594  0012C8  0E00               	movlw	0
  6595  0012CA  6F8C               	movwf	___flmul@sign& (0+255),b
  6596  0012CC  D00F               	goto	l1025
  6597  0012CE                     l1024:
  6598                           
  6599                           ; BSR set to: 0
  6600  0012CE  C097  F092         	movff	___flmul@temp,___flmul@bexp
  6601                           
  6602                           ; BSR set to: 0
  6603  0012D2  0EFF               	movlw	255
  6604  0012D4  1793               	andwf	___flmul@prod& (0+255),f,b
  6605  0012D6  0EFF               	movlw	255
  6606  0012D8  1794               	andwf	(___flmul@prod+1)& (0+255),f,b
  6607  0012DA  0E7F               	movlw	127
  6608  0012DC  1795               	andwf	(___flmul@prod+2)& (0+255),f,b
  6609  0012DE  0E00               	movlw	0
  6610  0012E0  1796               	andwf	(___flmul@prod+3)& (0+255),f,b
  6611                           
  6612                           ; BSR set to: 0
  6613  0012E2  B192               	btfsc	___flmul@bexp& (0+255),0,b
  6614                           
  6615                           ; BSR set to: 0
  6616  0012E4  8F95               	bsf	(___flmul@prod+2)& (0+255),7,b
  6617                           
  6618                           ; BSR set to: 0
  6619                           
  6620                           ; BSR set to: 0
  6621  0012E6  90D8               	bcf	status,0,c
  6622  0012E8  3192               	rrcf	___flmul@bexp& (0+255),w,b
  6623  0012EA                     L9:
  6624  0012EA  6F96               	movwf	(___flmul@prod+3)& (0+255),b
  6625  0012EC                     l1025:
  6626                           
  6627                           ; BSR set to: 0
  6628                           
  6629                           ; BSR set to: 0
  6630                           
  6631                           ; BSR set to: 0
  6632  0012EC  518C               	movf	___flmul@sign& (0+255),w,b
  6633  0012EE  1396               	iorwf	(___flmul@prod+3)& (0+255),f,b
  6634                           
  6635                           ; BSR set to: 0
  6636  0012F0  C093  F080         	movff	___flmul@prod,?___flmul
  6637  0012F4  C094  F081         	movff	___flmul@prod+1,?___flmul+1
  6638  0012F8  C095  F082         	movff	___flmul@prod+2,?___flmul+2
  6639  0012FC  C096  F083         	movff	___flmul@prod+3,?___flmul+3
  6640  001300  0012               	return	
  6641  001302                     __end_of___flmul:
  6642                           	opt stack 0
  6643                           tblptru	equ	0xFF8
  6644                           tblptrh	equ	0xFF7
  6645                           tblptrl	equ	0xFF6
  6646                           tablat	equ	0xFF5
  6647                           prodh	equ	0xFF4
  6648                           prodl	equ	0xFF3
  6649                           intcon	equ	0xFF2
  6650                           intcon2	equ	0xFF1
  6651                           intcon3	equ	0xFF0
  6652                           postinc0	equ	0xFEE
  6653                           wreg	equ	0xFE8
  6654                           indf1	equ	0xFE7
  6655                           postdec1	equ	0xFE5
  6656                           fsr1h	equ	0xFE2
  6657                           fsr1l	equ	0xFE1
  6658                           indf2	equ	0xFDF
  6659                           postinc2	equ	0xFDE
  6660                           postdec2	equ	0xFDD
  6661                           fsr2h	equ	0xFDA
  6662                           fsr2l	equ	0xFD9
  6663                           status	equ	0xFD8
  6664                           
  6665 ;; *************** function ___awmod *****************
  6666 ;; Defined at:
  6667 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  6668 ;; Parameters:    Size  Location     Type
  6669 ;;  dividend        2   26[COMRAM] int 
  6670 ;;  divisor         2   28[COMRAM] int 
  6671 ;; Auto vars:     Size  Location     Type
  6672 ;;  sign            1   31[COMRAM] unsigned char 
  6673 ;;  counter         1   30[COMRAM] unsigned char 
  6674 ;; Return value:  Size  Location     Type
  6675 ;;                  2   26[COMRAM] int 
  6676 ;; Registers used:
  6677 ;;		wreg, status,2, status,0
  6678 ;; Tracked objects:
  6679 ;;		On entry : 0/0
  6680 ;;		On exit  : 0/0
  6681 ;;		Unchanged: 0/0
  6682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6683 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6684 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6686 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6687 ;;Total ram usage:        6 bytes
  6688 ;; Hardware stack levels used:    1
  6689 ;; Hardware stack levels required when called:    2
  6690 ;; This function calls:
  6691 ;;		Nothing
  6692 ;; This function is called by:
  6693 ;;		_fround
  6694 ;;		_scale
  6695 ;; This function uses a non-reentrant model
  6696 ;;
  6697                           
  6698                           	psect	text17
  6699  0027C4                     __ptext17:
  6700                           	opt stack 0
  6701  0027C4                     ___awmod:
  6702                           	opt stack 25
  6703                           
  6704                           ; BSR set to: 0
  6705                           ;incstack = 0
  6706  0027C4  0E00               	movlw	0
  6707  0027C6  6E20               	movwf	___awmod@sign,c
  6708  0027C8  AE1C               	btfss	___awmod@dividend+1,7,c
  6709  0027CA  D006               	goto	l619
  6710  0027CC  6C1B               	negf	___awmod@dividend,c
  6711  0027CE  1E1C               	comf	___awmod@dividend+1,f,c
  6712  0027D0  B0D8               	btfsc	status,0,c
  6713  0027D2  2A1C               	incf	___awmod@dividend+1,f,c
  6714  0027D4  0E01               	movlw	1
  6715  0027D6  6E20               	movwf	___awmod@sign,c
  6716  0027D8                     l619:
  6717  0027D8  AE1E               	btfss	___awmod@divisor+1,7,c
  6718  0027DA  D004               	goto	l620
  6719  0027DC  6C1D               	negf	___awmod@divisor,c
  6720  0027DE  1E1E               	comf	___awmod@divisor+1,f,c
  6721  0027E0  B0D8               	btfsc	status,0,c
  6722  0027E2  2A1E               	incf	___awmod@divisor+1,f,c
  6723  0027E4                     l620:
  6724  0027E4  501D               	movf	___awmod@divisor,w,c
  6725  0027E6  101E               	iorwf	___awmod@divisor+1,w,c
  6726  0027E8  B4D8               	btfsc	status,2,c
  6727  0027EA  D018               	goto	l627
  6728  0027EC  0E01               	movlw	1
  6729  0027EE  6E1F               	movwf	___awmod@counter,c
  6730  0027F0  D004               	goto	l622
  6731  0027F2  90D8               	bcf	status,0,c
  6732  0027F4  361D               	rlcf	___awmod@divisor,f,c
  6733  0027F6  361E               	rlcf	___awmod@divisor+1,f,c
  6734  0027F8  2A1F               	incf	___awmod@counter,f,c
  6735  0027FA                     l622:
  6736  0027FA  AE1E               	btfss	___awmod@divisor+1,7,c
  6737  0027FC  D7FA               	goto	l623
  6738  0027FE                     u5340:
  6739  0027FE  501D               	movf	___awmod@divisor,w,c
  6740  002800  5C1B               	subwf	___awmod@dividend,w,c
  6741  002802  501E               	movf	___awmod@divisor+1,w,c
  6742  002804  581C               	subwfb	___awmod@dividend+1,w,c
  6743  002806  A0D8               	btfss	status,0,c
  6744  002808  D004               	goto	l626
  6745  00280A  501D               	movf	___awmod@divisor,w,c
  6746  00280C  5E1B               	subwf	___awmod@dividend,f,c
  6747  00280E  501E               	movf	___awmod@divisor+1,w,c
  6748  002810  5A1C               	subwfb	___awmod@dividend+1,f,c
  6749  002812                     l626:
  6750  002812  90D8               	bcf	status,0,c
  6751  002814  321E               	rrcf	___awmod@divisor+1,f,c
  6752  002816  321D               	rrcf	___awmod@divisor,f,c
  6753  002818  2E1F               	decfsz	___awmod@counter,f,c
  6754  00281A  D7F1               	goto	u5340
  6755  00281C                     l627:
  6756  00281C  5020               	movf	___awmod@sign,w,c
  6757  00281E  B4D8               	btfsc	status,2,c
  6758  002820  D004               	goto	l628
  6759  002822  6C1B               	negf	___awmod@dividend,c
  6760  002824  1E1C               	comf	___awmod@dividend+1,f,c
  6761  002826  B0D8               	btfsc	status,0,c
  6762  002828  2A1C               	incf	___awmod@dividend+1,f,c
  6763  00282A                     l628:
  6764  00282A  C01B  F01B         	movff	___awmod@dividend,?___awmod
  6765  00282E  C01C  F01C         	movff	___awmod@dividend+1,?___awmod+1
  6766  002832  0012               	return	
  6767  002834                     __end_of___awmod:
  6768                           	opt stack 0
  6769                           tblptru	equ	0xFF8
  6770                           tblptrh	equ	0xFF7
  6771                           tblptrl	equ	0xFF6
  6772                           tablat	equ	0xFF5
  6773                           prodh	equ	0xFF4
  6774                           prodl	equ	0xFF3
  6775                           intcon	equ	0xFF2
  6776                           intcon2	equ	0xFF1
  6777                           intcon3	equ	0xFF0
  6778                           postinc0	equ	0xFEE
  6779                           wreg	equ	0xFE8
  6780                           indf1	equ	0xFE7
  6781                           postdec1	equ	0xFE5
  6782                           fsr1h	equ	0xFE2
  6783                           fsr1l	equ	0xFE1
  6784                           indf2	equ	0xFDF
  6785                           postinc2	equ	0xFDE
  6786                           postdec2	equ	0xFDD
  6787                           fsr2h	equ	0xFDA
  6788                           fsr2l	equ	0xFD9
  6789                           status	equ	0xFD8
  6790                           
  6791 ;; *************** function ___awdiv *****************
  6792 ;; Defined at:
  6793 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  6794 ;; Parameters:    Size  Location     Type
  6795 ;;  dividend        2   32[COMRAM] int 
  6796 ;;  divisor         2   34[COMRAM] int 
  6797 ;; Auto vars:     Size  Location     Type
  6798 ;;  quotient        2   38[COMRAM] int 
  6799 ;;  sign            1   37[COMRAM] unsigned char 
  6800 ;;  counter         1   36[COMRAM] unsigned char 
  6801 ;; Return value:  Size  Location     Type
  6802 ;;                  2   32[COMRAM] int 
  6803 ;; Registers used:
  6804 ;;		wreg, status,2, status,0
  6805 ;; Tracked objects:
  6806 ;;		On entry : 0/0
  6807 ;;		On exit  : 0/0
  6808 ;;		Unchanged: 0/0
  6809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6810 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6811 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6813 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6814 ;;Total ram usage:        8 bytes
  6815 ;; Hardware stack levels used:    1
  6816 ;; Hardware stack levels required when called:    2
  6817 ;; This function calls:
  6818 ;;		Nothing
  6819 ;; This function is called by:
  6820 ;;		_fround
  6821 ;;		_scale
  6822 ;;		_sprintf
  6823 ;; This function uses a non-reentrant model
  6824 ;;
  6825                           
  6826                           	psect	text18
  6827  0026BE                     __ptext18:
  6828                           	opt stack 0
  6829  0026BE                     ___awdiv:
  6830                           	opt stack 25
  6831                           
  6832                           ;incstack = 0
  6833  0026BE  0E00               	movlw	0
  6834  0026C0  6E26               	movwf	___awdiv@sign,c
  6835  0026C2  AE24               	btfss	___awdiv@divisor+1,7,c
  6836  0026C4  D006               	goto	l606
  6837  0026C6  6C23               	negf	___awdiv@divisor,c
  6838  0026C8  1E24               	comf	___awdiv@divisor+1,f,c
  6839  0026CA  B0D8               	btfsc	status,0,c
  6840  0026CC  2A24               	incf	___awdiv@divisor+1,f,c
  6841  0026CE  0E01               	movlw	1
  6842  0026D0  6E26               	movwf	___awdiv@sign,c
  6843  0026D2                     l606:
  6844  0026D2  AE22               	btfss	___awdiv@dividend+1,7,c
  6845  0026D4  D006               	goto	l607
  6846  0026D6  6C21               	negf	___awdiv@dividend,c
  6847  0026D8  1E22               	comf	___awdiv@dividend+1,f,c
  6848  0026DA  B0D8               	btfsc	status,0,c
  6849  0026DC  2A22               	incf	___awdiv@dividend+1,f,c
  6850  0026DE  0E01               	movlw	1
  6851  0026E0  1A26               	xorwf	___awdiv@sign,f,c
  6852  0026E2                     l607:
  6853  0026E2  0E00               	movlw	0
  6854  0026E4  6E28               	movwf	___awdiv@quotient+1,c
  6855  0026E6  0E00               	movlw	0
  6856  0026E8  6E27               	movwf	___awdiv@quotient,c
  6857  0026EA  5023               	movf	___awdiv@divisor,w,c
  6858  0026EC  1024               	iorwf	___awdiv@divisor+1,w,c
  6859  0026EE  B4D8               	btfsc	status,2,c
  6860  0026F0  D01C               	goto	l614
  6861  0026F2  0E01               	movlw	1
  6862  0026F4  6E25               	movwf	___awdiv@counter,c
  6863  0026F6  D004               	goto	l609
  6864  0026F8  90D8               	bcf	status,0,c
  6865  0026FA  3623               	rlcf	___awdiv@divisor,f,c
  6866  0026FC  3624               	rlcf	___awdiv@divisor+1,f,c
  6867  0026FE  2A25               	incf	___awdiv@counter,f,c
  6868  002700                     l609:
  6869  002700  AE24               	btfss	___awdiv@divisor+1,7,c
  6870  002702  D7FA               	goto	l610
  6871  002704                     u5280:
  6872  002704  90D8               	bcf	status,0,c
  6873  002706  3627               	rlcf	___awdiv@quotient,f,c
  6874  002708  3628               	rlcf	___awdiv@quotient+1,f,c
  6875  00270A  5023               	movf	___awdiv@divisor,w,c
  6876  00270C  5C21               	subwf	___awdiv@dividend,w,c
  6877  00270E  5024               	movf	___awdiv@divisor+1,w,c
  6878  002710  5822               	subwfb	___awdiv@dividend+1,w,c
  6879  002712  A0D8               	btfss	status,0,c
  6880  002714  D005               	goto	l613
  6881  002716  5023               	movf	___awdiv@divisor,w,c
  6882  002718  5E21               	subwf	___awdiv@dividend,f,c
  6883  00271A  5024               	movf	___awdiv@divisor+1,w,c
  6884  00271C  5A22               	subwfb	___awdiv@dividend+1,f,c
  6885  00271E  8027               	bsf	___awdiv@quotient,0,c
  6886  002720                     l613:
  6887  002720  90D8               	bcf	status,0,c
  6888  002722  3224               	rrcf	___awdiv@divisor+1,f,c
  6889  002724  3223               	rrcf	___awdiv@divisor,f,c
  6890  002726  2E25               	decfsz	___awdiv@counter,f,c
  6891  002728  D7ED               	goto	u5280
  6892  00272A                     l614:
  6893  00272A  5026               	movf	___awdiv@sign,w,c
  6894  00272C  B4D8               	btfsc	status,2,c
  6895  00272E  D004               	goto	l615
  6896  002730  6C27               	negf	___awdiv@quotient,c
  6897  002732  1E28               	comf	___awdiv@quotient+1,f,c
  6898  002734  B0D8               	btfsc	status,0,c
  6899  002736  2A28               	incf	___awdiv@quotient+1,f,c
  6900  002738                     l615:
  6901  002738  C027  F021         	movff	___awdiv@quotient,?___awdiv
  6902  00273C  C028  F022         	movff	___awdiv@quotient+1,?___awdiv+1
  6903  002740  0012               	return	
  6904  002742                     __end_of___awdiv:
  6905                           	opt stack 0
  6906                           tblptru	equ	0xFF8
  6907                           tblptrh	equ	0xFF7
  6908                           tblptrl	equ	0xFF6
  6909                           tablat	equ	0xFF5
  6910                           prodh	equ	0xFF4
  6911                           prodl	equ	0xFF3
  6912                           intcon	equ	0xFF2
  6913                           intcon2	equ	0xFF1
  6914                           intcon3	equ	0xFF0
  6915                           postinc0	equ	0xFEE
  6916                           wreg	equ	0xFE8
  6917                           indf1	equ	0xFE7
  6918                           postdec1	equ	0xFE5
  6919                           fsr1h	equ	0xFE2
  6920                           fsr1l	equ	0xFE1
  6921                           indf2	equ	0xFDF
  6922                           postinc2	equ	0xFDE
  6923                           postdec2	equ	0xFDD
  6924                           fsr2h	equ	0xFDA
  6925                           fsr2l	equ	0xFD9
  6926                           status	equ	0xFD8
  6927                           
  6928 ;; *************** function __tdiv_to_l_ *****************
  6929 ;; Defined at:
  6930 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  6931 ;; Parameters:    Size  Location     Type
  6932 ;;  f1              4   26[COMRAM] float 
  6933 ;;  f2              4   30[COMRAM] float 
  6934 ;; Auto vars:     Size  Location     Type
  6935 ;;  quot            4   37[COMRAM] unsigned long 
  6936 ;;  exp1            1   42[COMRAM] unsigned char 
  6937 ;;  cntr            1   41[COMRAM] unsigned char 
  6938 ;; Return value:  Size  Location     Type
  6939 ;;                  4   26[COMRAM] unsigned long 
  6940 ;; Registers used:
  6941 ;;		wreg, status,2, status,0
  6942 ;; Tracked objects:
  6943 ;;		On entry : 0/0
  6944 ;;		On exit  : 0/0
  6945 ;;		Unchanged: 0/0
  6946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6947 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6949 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6950 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6951 ;;Total ram usage:       17 bytes
  6952 ;; Hardware stack levels used:    1
  6953 ;; Hardware stack levels required when called:    2
  6954 ;; This function calls:
  6955 ;;		Nothing
  6956 ;; This function is called by:
  6957 ;;		_sprintf
  6958 ;; This function uses a non-reentrant model
  6959 ;;
  6960                           
  6961                           	psect	text19
  6962  001ED2                     __ptext19:
  6963                           	opt stack 0
  6964  001ED2                     __tdiv_to_l_:
  6965                           	opt stack 26
  6966                           
  6967                           ;incstack = 0
  6968  001ED2  C01D  F023         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6969  001ED6  6A24               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6970  001ED8  6A25               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6971  001EDA  341C               	rlcf	__tdiv_to_l_@f1+1,w,c
  6972  001EDC  3623               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6973  001EDE  E301               	bnc	u5461
  6974  001EE0  8024               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6975  001EE2                     u5461:
  6976  001EE2  5023               	movf	??__tdiv_to_l_,w,c
  6977  001EE4  6E2B               	movwf	__tdiv_to_l_@exp1,c
  6978  001EE6  502B               	movf	__tdiv_to_l_@exp1,w,c
  6979  001EE8  A4D8               	btfss	status,2,c
  6980  001EEA  D009               	goto	l742
  6981  001EEC  0E00               	movlw	0
  6982  001EEE  6E1B               	movwf	?__tdiv_to_l_,c
  6983  001EF0  0E00               	movlw	0
  6984  001EF2  6E1C               	movwf	?__tdiv_to_l_+1,c
  6985  001EF4  0E00               	movlw	0
  6986  001EF6  6E1D               	movwf	?__tdiv_to_l_+2,c
  6987  001EF8  0E00               	movlw	0
  6988  001EFA  6E1E               	movwf	?__tdiv_to_l_+3,c
  6989  001EFC  0012               	return	
  6990  001EFE                     l742:
  6991  001EFE  C021  F023         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6992  001F02  6A24               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6993  001F04  6A25               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6994  001F06  3420               	rlcf	__tdiv_to_l_@f2+1,w,c
  6995  001F08  3623               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6996  001F0A  E301               	bnc	u5481
  6997  001F0C  8024               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6998  001F0E                     u5481:
  6999  001F0E  5023               	movf	??__tdiv_to_l_,w,c
  7000  001F10  6E2A               	movwf	__tdiv_to_l_@cntr,c
  7001  001F12  502A               	movf	__tdiv_to_l_@cntr,w,c
  7002  001F14  A4D8               	btfss	status,2,c
  7003  001F16  D009               	goto	l744
  7004  001F18  0E00               	movlw	0
  7005  001F1A  6E1B               	movwf	?__tdiv_to_l_,c
  7006  001F1C  0E00               	movlw	0
  7007  001F1E  6E1C               	movwf	?__tdiv_to_l_+1,c
  7008  001F20  0E00               	movlw	0
  7009  001F22  6E1D               	movwf	?__tdiv_to_l_+2,c
  7010  001F24  0E00               	movlw	0
  7011  001F26  6E1E               	movwf	?__tdiv_to_l_+3,c
  7012  001F28  0012               	return	
  7013  001F2A                     l744:
  7014  001F2A  8E1C               	bsf	__tdiv_to_l_@f1+1,7,c
  7015  001F2C  0EFF               	movlw	255
  7016  001F2E  161B               	andwf	__tdiv_to_l_@f1,f,c
  7017  001F30  0EFF               	movlw	255
  7018  001F32  161C               	andwf	__tdiv_to_l_@f1+1,f,c
  7019  001F34  0E00               	movlw	0
  7020  001F36  161D               	andwf	__tdiv_to_l_@f1+2,f,c
  7021  001F38  8E20               	bsf	__tdiv_to_l_@f2+1,7,c
  7022  001F3A  0EFF               	movlw	255
  7023  001F3C  161F               	andwf	__tdiv_to_l_@f2,f,c
  7024  001F3E  0EFF               	movlw	255
  7025  001F40  1620               	andwf	__tdiv_to_l_@f2+1,f,c
  7026  001F42  0E00               	movlw	0
  7027  001F44  1621               	andwf	__tdiv_to_l_@f2+2,f,c
  7028  001F46  0E00               	movlw	0
  7029  001F48  6E26               	movwf	__tdiv_to_l_@quot,c
  7030  001F4A  0E00               	movlw	0
  7031  001F4C  6E27               	movwf	__tdiv_to_l_@quot+1,c
  7032  001F4E  0E00               	movlw	0
  7033  001F50  6E28               	movwf	__tdiv_to_l_@quot+2,c
  7034  001F52  0E00               	movlw	0
  7035  001F54  6E29               	movwf	__tdiv_to_l_@quot+3,c
  7036  001F56  0E7F               	movlw	127
  7037  001F58  5E2B               	subwf	__tdiv_to_l_@exp1,f,c
  7038  001F5A  502A               	movf	__tdiv_to_l_@cntr,w,c
  7039  001F5C  0F98               	addlw	152
  7040  001F5E  5E2B               	subwf	__tdiv_to_l_@exp1,f,c
  7041  001F60  0E18               	movlw	24
  7042  001F62  6E2A               	movwf	__tdiv_to_l_@cntr,c
  7043  001F64                     l745:
  7044  001F64  90D8               	bcf	status,0,c
  7045  001F66  3626               	rlcf	__tdiv_to_l_@quot,f,c
  7046  001F68  3627               	rlcf	__tdiv_to_l_@quot+1,f,c
  7047  001F6A  3628               	rlcf	__tdiv_to_l_@quot+2,f,c
  7048  001F6C  3629               	rlcf	__tdiv_to_l_@quot+3,f,c
  7049  001F6E  501F               	movf	__tdiv_to_l_@f2,w,c
  7050  001F70  5C1B               	subwf	__tdiv_to_l_@f1,w,c
  7051  001F72  5020               	movf	__tdiv_to_l_@f2+1,w,c
  7052  001F74  581C               	subwfb	__tdiv_to_l_@f1+1,w,c
  7053  001F76  5021               	movf	__tdiv_to_l_@f2+2,w,c
  7054  001F78  581D               	subwfb	__tdiv_to_l_@f1+2,w,c
  7055  001F7A  A0D8               	btfss	status,0,c
  7056  001F7C  D007               	goto	l746
  7057  001F7E  501F               	movf	__tdiv_to_l_@f2,w,c
  7058  001F80  5E1B               	subwf	__tdiv_to_l_@f1,f,c
  7059  001F82  5020               	movf	__tdiv_to_l_@f2+1,w,c
  7060  001F84  5A1C               	subwfb	__tdiv_to_l_@f1+1,f,c
  7061  001F86  5021               	movf	__tdiv_to_l_@f2+2,w,c
  7062  001F88  5A1D               	subwfb	__tdiv_to_l_@f1+2,f,c
  7063  001F8A  8026               	bsf	__tdiv_to_l_@quot,0,c
  7064  001F8C                     l746:
  7065  001F8C  90D8               	bcf	status,0,c
  7066  001F8E  361B               	rlcf	__tdiv_to_l_@f1,f,c
  7067  001F90  361C               	rlcf	__tdiv_to_l_@f1+1,f,c
  7068  001F92  361D               	rlcf	__tdiv_to_l_@f1+2,f,c
  7069  001F94  2E2A               	decfsz	__tdiv_to_l_@cntr,f,c
  7070  001F96  D7E6               	goto	l745
  7071  001F98  AE2B               	btfss	__tdiv_to_l_@exp1,7,c
  7072  001F9A  D016               	goto	l748
  7073  001F9C  502B               	movf	__tdiv_to_l_@exp1,w,c
  7074  001F9E  0A80               	xorlw	128
  7075  001FA0  0F97               	addlw	151
  7076  001FA2  B0D8               	btfsc	status,0,c
  7077  001FA4  D009               	goto	l749
  7078  001FA6  0E00               	movlw	0
  7079  001FA8  6E1B               	movwf	?__tdiv_to_l_,c
  7080  001FAA  0E00               	movlw	0
  7081  001FAC  6E1C               	movwf	?__tdiv_to_l_+1,c
  7082  001FAE  0E00               	movlw	0
  7083  001FB0  6E1D               	movwf	?__tdiv_to_l_+2,c
  7084  001FB2  0E00               	movlw	0
  7085  001FB4  6E1E               	movwf	?__tdiv_to_l_+3,c
  7086  001FB6  0012               	return	
  7087  001FB8                     l749:
  7088  001FB8  90D8               	bcf	status,0,c
  7089  001FBA  3229               	rrcf	__tdiv_to_l_@quot+3,f,c
  7090  001FBC  3228               	rrcf	__tdiv_to_l_@quot+2,f,c
  7091  001FBE  3227               	rrcf	__tdiv_to_l_@quot+1,f,c
  7092  001FC0  3226               	rrcf	__tdiv_to_l_@quot,f,c
  7093  001FC2  3E2B               	incfsz	__tdiv_to_l_@exp1,f,c
  7094  001FC4  D7F9               	goto	l749
  7095  001FC6  D015               	goto	u5540
  7096  001FC8                     l748:
  7097  001FC8  0E17               	movlw	23
  7098  001FCA  642B               	cpfsgt	__tdiv_to_l_@exp1,c
  7099  001FCC  D00F               	goto	l754
  7100  001FCE  0E00               	movlw	0
  7101  001FD0  6E1B               	movwf	?__tdiv_to_l_,c
  7102  001FD2  0E00               	movlw	0
  7103  001FD4  6E1C               	movwf	?__tdiv_to_l_+1,c
  7104  001FD6  0E00               	movlw	0
  7105  001FD8  6E1D               	movwf	?__tdiv_to_l_+2,c
  7106  001FDA  0E00               	movlw	0
  7107  001FDC  6E1E               	movwf	?__tdiv_to_l_+3,c
  7108  001FDE  0012               	return	
  7109  001FE0  90D8               	bcf	status,0,c
  7110  001FE2  3626               	rlcf	__tdiv_to_l_@quot,f,c
  7111  001FE4  3627               	rlcf	__tdiv_to_l_@quot+1,f,c
  7112  001FE6  3628               	rlcf	__tdiv_to_l_@quot+2,f,c
  7113  001FE8  3629               	rlcf	__tdiv_to_l_@quot+3,f,c
  7114  001FEA  062B               	decf	__tdiv_to_l_@exp1,f,c
  7115  001FEC                     l754:
  7116  001FEC  502B               	movf	__tdiv_to_l_@exp1,w,c
  7117  001FEE  A4D8               	btfss	status,2,c
  7118  001FF0  D7F7               	goto	l755
  7119  001FF2                     u5540:
  7120  001FF2  C026  F01B         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7121  001FF6  C027  F01C         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7122  001FFA  C028  F01D         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7123  001FFE  C029  F01E         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7124  002002  0012               	return		;funcret
  7125  002004                     __end_of__tdiv_to_l_:
  7126                           	opt stack 0
  7127                           tblptru	equ	0xFF8
  7128                           tblptrh	equ	0xFF7
  7129                           tblptrl	equ	0xFF6
  7130                           tablat	equ	0xFF5
  7131                           prodh	equ	0xFF4
  7132                           prodl	equ	0xFF3
  7133                           intcon	equ	0xFF2
  7134                           intcon2	equ	0xFF1
  7135                           intcon3	equ	0xFF0
  7136                           postinc0	equ	0xFEE
  7137                           wreg	equ	0xFE8
  7138                           indf1	equ	0xFE7
  7139                           postdec1	equ	0xFE5
  7140                           fsr1h	equ	0xFE2
  7141                           fsr1l	equ	0xFE1
  7142                           indf2	equ	0xFDF
  7143                           postinc2	equ	0xFDE
  7144                           postdec2	equ	0xFDD
  7145                           fsr2h	equ	0xFDA
  7146                           fsr2l	equ	0xFD9
  7147                           status	equ	0xFD8
  7148                           
  7149 ;; *************** function __div_to_l_ *****************
  7150 ;; Defined at:
  7151 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  7152 ;; Parameters:    Size  Location     Type
  7153 ;;  f1              4   26[COMRAM] unsigned long 
  7154 ;;  f2              4   30[COMRAM] unsigned long 
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;  quot            4   34[COMRAM] unsigned long 
  7157 ;;  exp1            1   39[COMRAM] unsigned char 
  7158 ;;  cntr            1   38[COMRAM] unsigned char 
  7159 ;; Return value:  Size  Location     Type
  7160 ;;                  4   26[COMRAM] unsigned long 
  7161 ;; Registers used:
  7162 ;;		wreg, status,2, status,0
  7163 ;; Tracked objects:
  7164 ;;		On entry : 0/0
  7165 ;;		On exit  : 0/0
  7166 ;;		Unchanged: 0/0
  7167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7168 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7169 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7171 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7172 ;;Total ram usage:       14 bytes
  7173 ;; Hardware stack levels used:    1
  7174 ;; Hardware stack levels required when called:    2
  7175 ;; This function calls:
  7176 ;;		Nothing
  7177 ;; This function is called by:
  7178 ;;		_sprintf
  7179 ;; This function uses a non-reentrant model
  7180 ;;
  7181                           
  7182                           	psect	text20
  7183  002004                     __ptext20:
  7184                           	opt stack 0
  7185  002004                     __div_to_l_:
  7186                           	opt stack 26
  7187                           
  7188                           ;incstack = 0
  7189  002004  341D               	rlcf	__div_to_l_@f1+2,w,c
  7190  002006  341E               	rlcf	__div_to_l_@f1+3,w,c
  7191  002008  6E28               	movwf	__div_to_l_@exp1,c
  7192  00200A  5028               	movf	__div_to_l_@exp1,w,c
  7193  00200C  A4D8               	btfss	status,2,c
  7194  00200E  D009               	goto	l638
  7195  002010  0E00               	movlw	0
  7196  002012  6E1B               	movwf	?__div_to_l_,c
  7197  002014  0E00               	movlw	0
  7198  002016  6E1C               	movwf	?__div_to_l_+1,c
  7199  002018  0E00               	movlw	0
  7200  00201A  6E1D               	movwf	?__div_to_l_+2,c
  7201  00201C  0E00               	movlw	0
  7202  00201E  6E1E               	movwf	?__div_to_l_+3,c
  7203  002020  0012               	return	
  7204  002022                     l638:
  7205  002022  3421               	rlcf	__div_to_l_@f2+2,w,c
  7206  002024  3422               	rlcf	__div_to_l_@f2+3,w,c
  7207  002026  6E27               	movwf	__div_to_l_@cntr,c
  7208  002028  5027               	movf	__div_to_l_@cntr,w,c
  7209  00202A  A4D8               	btfss	status,2,c
  7210  00202C  D009               	goto	l640
  7211  00202E  0E00               	movlw	0
  7212  002030  6E1B               	movwf	?__div_to_l_,c
  7213  002032  0E00               	movlw	0
  7214  002034  6E1C               	movwf	?__div_to_l_+1,c
  7215  002036  0E00               	movlw	0
  7216  002038  6E1D               	movwf	?__div_to_l_+2,c
  7217  00203A  0E00               	movlw	0
  7218  00203C  6E1E               	movwf	?__div_to_l_+3,c
  7219  00203E  0012               	return	
  7220  002040                     l640:
  7221  002040  8E1D               	bsf	__div_to_l_@f1+2,7,c
  7222  002042  0EFF               	movlw	255
  7223  002044  161B               	andwf	__div_to_l_@f1,f,c
  7224  002046  0EFF               	movlw	255
  7225  002048  161C               	andwf	__div_to_l_@f1+1,f,c
  7226  00204A  0EFF               	movlw	255
  7227  00204C  161D               	andwf	__div_to_l_@f1+2,f,c
  7228  00204E  0E00               	movlw	0
  7229  002050  161E               	andwf	__div_to_l_@f1+3,f,c
  7230  002052  8E21               	bsf	__div_to_l_@f2+2,7,c
  7231  002054  0EFF               	movlw	255
  7232  002056  161F               	andwf	__div_to_l_@f2,f,c
  7233  002058  0EFF               	movlw	255
  7234  00205A  1620               	andwf	__div_to_l_@f2+1,f,c
  7235  00205C  0EFF               	movlw	255
  7236  00205E  1621               	andwf	__div_to_l_@f2+2,f,c
  7237  002060  0E00               	movlw	0
  7238  002062  1622               	andwf	__div_to_l_@f2+3,f,c
  7239  002064  0E00               	movlw	0
  7240  002066  6E23               	movwf	__div_to_l_@quot,c
  7241  002068  0E00               	movlw	0
  7242  00206A  6E24               	movwf	__div_to_l_@quot+1,c
  7243  00206C  0E00               	movlw	0
  7244  00206E  6E25               	movwf	__div_to_l_@quot+2,c
  7245  002070  0E00               	movlw	0
  7246  002072  6E26               	movwf	__div_to_l_@quot+3,c
  7247  002074  0E7F               	movlw	127
  7248  002076  5E28               	subwf	__div_to_l_@exp1,f,c
  7249  002078  5027               	movf	__div_to_l_@cntr,w,c
  7250  00207A  0FA0               	addlw	160
  7251  00207C  5E28               	subwf	__div_to_l_@exp1,f,c
  7252  00207E  0E20               	movlw	32
  7253  002080  6E27               	movwf	__div_to_l_@cntr,c
  7254  002082  90D8               	bcf	status,0,c
  7255  002084  3623               	rlcf	__div_to_l_@quot,f,c
  7256  002086  3624               	rlcf	__div_to_l_@quot+1,f,c
  7257  002088  3625               	rlcf	__div_to_l_@quot+2,f,c
  7258  00208A  3626               	rlcf	__div_to_l_@quot+3,f,c
  7259  00208C  501F               	movf	__div_to_l_@f2,w,c
  7260  00208E  5C1B               	subwf	__div_to_l_@f1,w,c
  7261  002090  5020               	movf	__div_to_l_@f2+1,w,c
  7262  002092  581C               	subwfb	__div_to_l_@f1+1,w,c
  7263  002094  5021               	movf	__div_to_l_@f2+2,w,c
  7264  002096  581D               	subwfb	__div_to_l_@f1+2,w,c
  7265  002098  5022               	movf	__div_to_l_@f2+3,w,c
  7266  00209A  581E               	subwfb	__div_to_l_@f1+3,w,c
  7267  00209C  A0D8               	btfss	status,0,c
  7268  00209E  D009               	goto	l642
  7269  0020A0  501F               	movf	__div_to_l_@f2,w,c
  7270  0020A2  5E1B               	subwf	__div_to_l_@f1,f,c
  7271  0020A4  5020               	movf	__div_to_l_@f2+1,w,c
  7272  0020A6  5A1C               	subwfb	__div_to_l_@f1+1,f,c
  7273  0020A8  5021               	movf	__div_to_l_@f2+2,w,c
  7274  0020AA  5A1D               	subwfb	__div_to_l_@f1+2,f,c
  7275  0020AC  5022               	movf	__div_to_l_@f2+3,w,c
  7276  0020AE  5A1E               	subwfb	__div_to_l_@f1+3,f,c
  7277  0020B0  8023               	bsf	__div_to_l_@quot,0,c
  7278  0020B2                     l642:
  7279  0020B2  90D8               	bcf	status,0,c
  7280  0020B4  361B               	rlcf	__div_to_l_@f1,f,c
  7281  0020B6  361C               	rlcf	__div_to_l_@f1+1,f,c
  7282  0020B8  361D               	rlcf	__div_to_l_@f1+2,f,c
  7283  0020BA  361E               	rlcf	__div_to_l_@f1+3,f,c
  7284  0020BC  2E27               	decfsz	__div_to_l_@cntr,f,c
  7285  0020BE  D7E1               	goto	l641
  7286  0020C0  AE28               	btfss	__div_to_l_@exp1,7,c
  7287  0020C2  D016               	goto	l644
  7288  0020C4  5028               	movf	__div_to_l_@exp1,w,c
  7289  0020C6  0A80               	xorlw	128
  7290  0020C8  0F9F               	addlw	159
  7291  0020CA  B0D8               	btfsc	status,0,c
  7292  0020CC  D009               	goto	l645
  7293  0020CE  0E00               	movlw	0
  7294  0020D0  6E1B               	movwf	?__div_to_l_,c
  7295  0020D2  0E00               	movlw	0
  7296  0020D4  6E1C               	movwf	?__div_to_l_+1,c
  7297  0020D6  0E00               	movlw	0
  7298  0020D8  6E1D               	movwf	?__div_to_l_+2,c
  7299  0020DA  0E00               	movlw	0
  7300  0020DC  6E1E               	movwf	?__div_to_l_+3,c
  7301  0020DE  0012               	return	
  7302  0020E0                     l645:
  7303  0020E0  90D8               	bcf	status,0,c
  7304  0020E2  3226               	rrcf	__div_to_l_@quot+3,f,c
  7305  0020E4  3225               	rrcf	__div_to_l_@quot+2,f,c
  7306  0020E6  3224               	rrcf	__div_to_l_@quot+1,f,c
  7307  0020E8  3223               	rrcf	__div_to_l_@quot,f,c
  7308  0020EA  3E28               	incfsz	__div_to_l_@exp1,f,c
  7309  0020EC  D7F9               	goto	l645
  7310  0020EE  D015               	goto	u5610
  7311  0020F0                     l644:
  7312  0020F0  0E1F               	movlw	31
  7313  0020F2  6428               	cpfsgt	__div_to_l_@exp1,c
  7314  0020F4  D00F               	goto	l650
  7315  0020F6  0E00               	movlw	0
  7316  0020F8  6E1B               	movwf	?__div_to_l_,c
  7317  0020FA  0E00               	movlw	0
  7318  0020FC  6E1C               	movwf	?__div_to_l_+1,c
  7319  0020FE  0E00               	movlw	0
  7320  002100  6E1D               	movwf	?__div_to_l_+2,c
  7321  002102  0E00               	movlw	0
  7322  002104  6E1E               	movwf	?__div_to_l_+3,c
  7323  002106  0012               	return	
  7324  002108  90D8               	bcf	status,0,c
  7325  00210A  3623               	rlcf	__div_to_l_@quot,f,c
  7326  00210C  3624               	rlcf	__div_to_l_@quot+1,f,c
  7327  00210E  3625               	rlcf	__div_to_l_@quot+2,f,c
  7328  002110  3626               	rlcf	__div_to_l_@quot+3,f,c
  7329  002112  0628               	decf	__div_to_l_@exp1,f,c
  7330  002114                     l650:
  7331  002114  5028               	movf	__div_to_l_@exp1,w,c
  7332  002116  A4D8               	btfss	status,2,c
  7333  002118  D7F7               	goto	l651
  7334  00211A                     u5610:
  7335  00211A  C023  F01B         	movff	__div_to_l_@quot,?__div_to_l_
  7336  00211E  C024  F01C         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7337  002122  C025  F01D         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7338  002126  C026  F01E         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7339  00212A  0012               	return		;funcret
  7340  00212C                     __end_of__div_to_l_:
  7341                           	opt stack 0
  7342                           tblptru	equ	0xFF8
  7343                           tblptrh	equ	0xFF7
  7344                           tblptrl	equ	0xFF6
  7345                           tablat	equ	0xFF5
  7346                           prodh	equ	0xFF4
  7347                           prodl	equ	0xFF3
  7348                           intcon	equ	0xFF2
  7349                           intcon2	equ	0xFF1
  7350                           intcon3	equ	0xFF0
  7351                           postinc0	equ	0xFEE
  7352                           wreg	equ	0xFE8
  7353                           indf1	equ	0xFE7
  7354                           postdec1	equ	0xFE5
  7355                           fsr1h	equ	0xFE2
  7356                           fsr1l	equ	0xFE1
  7357                           indf2	equ	0xFDF
  7358                           postinc2	equ	0xFDE
  7359                           postdec2	equ	0xFDD
  7360                           fsr2h	equ	0xFDA
  7361                           fsr2l	equ	0xFD9
  7362                           status	equ	0xFD8
  7363                           
  7364 ;; *************** function ___xxtofl *****************
  7365 ;; Defined at:
  7366 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\xxtofl.c"
  7367 ;; Parameters:    Size  Location     Type
  7368 ;;  sign            1    wreg     unsigned char 
  7369 ;;  val             4   32[COMRAM] long 
  7370 ;; Auto vars:     Size  Location     Type
  7371 ;;  sign            1   40[COMRAM] unsigned char 
  7372 ;;  arg             4   42[COMRAM] unsigned long 
  7373 ;;  exp             1   41[COMRAM] unsigned char 
  7374 ;; Return value:  Size  Location     Type
  7375 ;;                  4   32[COMRAM] unsigned char 
  7376 ;; Registers used:
  7377 ;;		wreg, status,2, status,0
  7378 ;; Tracked objects:
  7379 ;;		On entry : 0/0
  7380 ;;		On exit  : 0/0
  7381 ;;		Unchanged: 0/0
  7382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7383 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7384 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7385 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7386 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7387 ;;Total ram usage:       14 bytes
  7388 ;; Hardware stack levels used:    1
  7389 ;; Hardware stack levels required when called:    2
  7390 ;; This function calls:
  7391 ;;		Nothing
  7392 ;; This function is called by:
  7393 ;;		_read_adc_voltage
  7394 ;;		_sprintf
  7395 ;; This function uses a non-reentrant model
  7396 ;;
  7397                           
  7398                           	psect	text21
  7399  001D82                     __ptext21:
  7400                           	opt stack 0
  7401  001D82                     ___xxtofl:
  7402                           	opt stack 27
  7403                           
  7404                           ;incstack = 0
  7405                           ;___xxtofl@sign stored from wreg
  7406  001D82  6E29               	movwf	___xxtofl@sign,c
  7407  001D84  5029               	movf	___xxtofl@sign,w,c
  7408  001D86  A4D8               	btfss	status,2,c
  7409  001D88  AE24               	btfss	___xxtofl@val+3,7,c
  7410  001D8A  D01A               	goto	l1029
  7411  001D8C  C021  F025         	movff	___xxtofl@val,??___xxtofl
  7412  001D90  C022  F026         	movff	___xxtofl@val+1,??___xxtofl+1
  7413  001D94  C023  F027         	movff	___xxtofl@val+2,??___xxtofl+2
  7414  001D98  C024  F028         	movff	___xxtofl@val+3,??___xxtofl+3
  7415  001D9C  1E25               	comf	??___xxtofl,f,c
  7416  001D9E  1E26               	comf	??___xxtofl+1,f,c
  7417  001DA0  1E27               	comf	??___xxtofl+2,f,c
  7418  001DA2  1E28               	comf	??___xxtofl+3,f,c
  7419  001DA4  2A25               	incf	??___xxtofl,f,c
  7420  001DA6  0E00               	movlw	0
  7421  001DA8  2226               	addwfc	??___xxtofl+1,f,c
  7422  001DAA  2227               	addwfc	??___xxtofl+2,f,c
  7423  001DAC  2228               	addwfc	??___xxtofl+3,f,c
  7424  001DAE  C025  F02B         	movff	??___xxtofl,___xxtofl@arg
  7425  001DB2  C026  F02C         	movff	??___xxtofl+1,___xxtofl@arg+1
  7426  001DB6  C027  F02D         	movff	??___xxtofl+2,___xxtofl@arg+2
  7427  001DBA  C028  F02E         	movff	??___xxtofl+3,___xxtofl@arg+3
  7428  001DBE  D008               	goto	l1030
  7429  001DC0                     l1029:
  7430  001DC0  C021  F02B         	movff	___xxtofl@val,___xxtofl@arg
  7431  001DC4  C022  F02C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  7432  001DC8  C023  F02D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  7433  001DCC  C024  F02E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  7434  001DD0                     l1030:
  7435  001DD0  5021               	movf	___xxtofl@val,w,c
  7436  001DD2  1022               	iorwf	___xxtofl@val+1,w,c
  7437  001DD4  1023               	iorwf	___xxtofl@val+2,w,c
  7438  001DD6  1024               	iorwf	___xxtofl@val+3,w,c
  7439  001DD8  A4D8               	btfss	status,2,c
  7440  001DDA  D009               	goto	l1031
  7441  001DDC  0E00               	movlw	0
  7442  001DDE  6E21               	movwf	?___xxtofl,c
  7443  001DE0  0E00               	movlw	0
  7444  001DE2  6E22               	movwf	?___xxtofl+1,c
  7445  001DE4  0E00               	movlw	0
  7446  001DE6  6E23               	movwf	?___xxtofl+2,c
  7447  001DE8  0E00               	movlw	0
  7448  001DEA  6E24               	movwf	?___xxtofl+3,c
  7449  001DEC  0012               	return	
  7450  001DEE                     l1031:
  7451  001DEE  0E96               	movlw	150
  7452  001DF0  6E2A               	movwf	___xxtofl@exp,c
  7453  001DF2  D006               	goto	l1033
  7454  001DF4  2A2A               	incf	___xxtofl@exp,f,c
  7455  001DF6  90D8               	bcf	status,0,c
  7456  001DF8  322E               	rrcf	___xxtofl@arg+3,f,c
  7457  001DFA  322D               	rrcf	___xxtofl@arg+2,f,c
  7458  001DFC  322C               	rrcf	___xxtofl@arg+1,f,c
  7459  001DFE  322B               	rrcf	___xxtofl@arg,f,c
  7460  001E00                     l1033:
  7461  001E00  0E00               	movlw	0
  7462  001E02  142B               	andwf	___xxtofl@arg,w,c
  7463  001E04  6E25               	movwf	??___xxtofl& (0+255),c
  7464  001E06  0E00               	movlw	0
  7465  001E08  142C               	andwf	___xxtofl@arg+1,w,c
  7466  001E0A  6E26               	movwf	(??___xxtofl+1)& (0+255),c
  7467  001E0C  0E00               	movlw	0
  7468  001E0E  142D               	andwf	___xxtofl@arg+2,w,c
  7469  001E10  6E27               	movwf	(??___xxtofl+2)& (0+255),c
  7470  001E12  0EFE               	movlw	254
  7471  001E14  142E               	andwf	___xxtofl@arg+3,w,c
  7472  001E16  6E28               	movwf	(??___xxtofl+3)& (0+255),c
  7473  001E18  5025               	movf	??___xxtofl,w,c
  7474  001E1A  1026               	iorwf	??___xxtofl+1,w,c
  7475  001E1C  1027               	iorwf	??___xxtofl+2,w,c
  7476  001E1E  1028               	iorwf	??___xxtofl+3,w,c
  7477  001E20  B4D8               	btfsc	status,2,c
  7478  001E22  D00D               	goto	l1036
  7479  001E24  D7E7               	goto	l1034
  7480  001E26  2A2A               	incf	___xxtofl@exp,f,c
  7481  001E28  0E01               	movlw	1
  7482  001E2A  262B               	addwf	___xxtofl@arg,f,c
  7483  001E2C  0E00               	movlw	0
  7484  001E2E  222C               	addwfc	___xxtofl@arg+1,f,c
  7485  001E30  222D               	addwfc	___xxtofl@arg+2,f,c
  7486  001E32  222E               	addwfc	___xxtofl@arg+3,f,c
  7487  001E34  90D8               	bcf	status,0,c
  7488  001E36  322E               	rrcf	___xxtofl@arg+3,f,c
  7489  001E38  322D               	rrcf	___xxtofl@arg+2,f,c
  7490  001E3A  322C               	rrcf	___xxtofl@arg+1,f,c
  7491  001E3C  322B               	rrcf	___xxtofl@arg,f,c
  7492  001E3E                     l1036:
  7493  001E3E  0E00               	movlw	0
  7494  001E40  142B               	andwf	___xxtofl@arg,w,c
  7495  001E42  6E25               	movwf	??___xxtofl& (0+255),c
  7496  001E44  0E00               	movlw	0
  7497  001E46  142C               	andwf	___xxtofl@arg+1,w,c
  7498  001E48  6E26               	movwf	(??___xxtofl+1)& (0+255),c
  7499  001E4A  0E00               	movlw	0
  7500  001E4C  142D               	andwf	___xxtofl@arg+2,w,c
  7501  001E4E  6E27               	movwf	(??___xxtofl+2)& (0+255),c
  7502  001E50  0EFF               	movlw	255
  7503  001E52  142E               	andwf	___xxtofl@arg+3,w,c
  7504  001E54  6E28               	movwf	(??___xxtofl+3)& (0+255),c
  7505  001E56  5025               	movf	??___xxtofl,w,c
  7506  001E58  1026               	iorwf	??___xxtofl+1,w,c
  7507  001E5A  1027               	iorwf	??___xxtofl+2,w,c
  7508  001E5C  1028               	iorwf	??___xxtofl+3,w,c
  7509  001E5E  B4D8               	btfsc	status,2,c
  7510  001E60  D007               	goto	l1039
  7511  001E62  D7E1               	goto	l1037
  7512  001E64  062A               	decf	___xxtofl@exp,f,c
  7513  001E66  90D8               	bcf	status,0,c
  7514  001E68  362B               	rlcf	___xxtofl@arg,f,c
  7515  001E6A  362C               	rlcf	___xxtofl@arg+1,f,c
  7516  001E6C  362D               	rlcf	___xxtofl@arg+2,f,c
  7517  001E6E  362E               	rlcf	___xxtofl@arg+3,f,c
  7518  001E70                     l1039:
  7519  001E70  BE2D               	btfsc	___xxtofl@arg+2,7,c
  7520  001E72  D003               	goto	u5870
  7521  001E74  0E02               	movlw	2
  7522  001E76  602A               	cpfslt	___xxtofl@exp,c
  7523  001E78  D7F5               	goto	l1040
  7524  001E7A                     u5870:
  7525  001E7A  B02A               	btfsc	___xxtofl@exp,0,c
  7526  001E7C  D008               	goto	l1044
  7527  001E7E  0EFF               	movlw	255
  7528  001E80  162B               	andwf	___xxtofl@arg,f,c
  7529  001E82  0EFF               	movlw	255
  7530  001E84  162C               	andwf	___xxtofl@arg+1,f,c
  7531  001E86  0E7F               	movlw	127
  7532  001E88  162D               	andwf	___xxtofl@arg+2,f,c
  7533  001E8A  0EFF               	movlw	255
  7534  001E8C  162E               	andwf	___xxtofl@arg+3,f,c
  7535  001E8E                     l1044:
  7536  001E8E  90D8               	bcf	status,0,c
  7537  001E90  322A               	rrcf	___xxtofl@exp,f,c
  7538  001E92  C02A  F025         	movff	___xxtofl@exp,??___xxtofl
  7539  001E96  6A26               	clrf	(??___xxtofl+1)& (0+255),c
  7540  001E98  6A27               	clrf	(??___xxtofl+2)& (0+255),c
  7541  001E9A  6A28               	clrf	(??___xxtofl+3)& (0+255),c
  7542  001E9C  C025  F028         	movff	??___xxtofl,??___xxtofl+3
  7543  001EA0  6A27               	clrf	??___xxtofl+2,c
  7544  001EA2  6A26               	clrf	??___xxtofl+1,c
  7545  001EA4  6A25               	clrf	??___xxtofl,c
  7546  001EA6  5025               	movf	??___xxtofl,w,c
  7547  001EA8  122B               	iorwf	___xxtofl@arg,f,c
  7548  001EAA  5026               	movf	??___xxtofl+1,w,c
  7549  001EAC  122C               	iorwf	___xxtofl@arg+1,f,c
  7550  001EAE  5027               	movf	??___xxtofl+2,w,c
  7551  001EB0  122D               	iorwf	___xxtofl@arg+2,f,c
  7552  001EB2  5028               	movf	??___xxtofl+3,w,c
  7553  001EB4  122E               	iorwf	___xxtofl@arg+3,f,c
  7554  001EB6  5029               	movf	___xxtofl@sign,w,c
  7555  001EB8  A4D8               	btfss	status,2,c
  7556  001EBA  AE24               	btfss	___xxtofl@val+3,7,c
  7557  001EBC  D001               	goto	l1045
  7558  001EBE  8E2E               	bsf	___xxtofl@arg+3,7,c
  7559  001EC0                     l1045:
  7560  001EC0  C02B  F021         	movff	___xxtofl@arg,?___xxtofl
  7561  001EC4  C02C  F022         	movff	___xxtofl@arg+1,?___xxtofl+1
  7562  001EC8  C02D  F023         	movff	___xxtofl@arg+2,?___xxtofl+2
  7563  001ECC  C02E  F024         	movff	___xxtofl@arg+3,?___xxtofl+3
  7564  001ED0  0012               	return	
  7565  001ED2                     __end_of___xxtofl:
  7566                           	opt stack 0
  7567                           tblptru	equ	0xFF8
  7568                           tblptrh	equ	0xFF7
  7569                           tblptrl	equ	0xFF6
  7570                           tablat	equ	0xFF5
  7571                           prodh	equ	0xFF4
  7572                           prodl	equ	0xFF3
  7573                           intcon	equ	0xFF2
  7574                           intcon2	equ	0xFF1
  7575                           intcon3	equ	0xFF0
  7576                           postinc0	equ	0xFEE
  7577                           wreg	equ	0xFE8
  7578                           indf1	equ	0xFE7
  7579                           postdec1	equ	0xFE5
  7580                           fsr1h	equ	0xFE2
  7581                           fsr1l	equ	0xFE1
  7582                           indf2	equ	0xFDF
  7583                           postinc2	equ	0xFDE
  7584                           postdec2	equ	0xFDD
  7585                           fsr2h	equ	0xFDA
  7586                           fsr2l	equ	0xFD9
  7587                           status	equ	0xFD8
  7588                           
  7589 ;; *************** function ___wmul *****************
  7590 ;; Defined at:
  7591 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  7592 ;; Parameters:    Size  Location     Type
  7593 ;;  multiplier      2   26[COMRAM] unsigned int 
  7594 ;;  multiplicand    2   28[COMRAM] unsigned int 
  7595 ;; Auto vars:     Size  Location     Type
  7596 ;;  product         2   30[COMRAM] unsigned int 
  7597 ;; Return value:  Size  Location     Type
  7598 ;;                  2   26[COMRAM] unsigned int 
  7599 ;; Registers used:
  7600 ;;		wreg, status,2, status,0, prodl, prodh
  7601 ;; Tracked objects:
  7602 ;;		On entry : 0/0
  7603 ;;		On exit  : 0/0
  7604 ;;		Unchanged: 0/0
  7605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7606 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7607 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7609 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7610 ;;Total ram usage:        6 bytes
  7611 ;; Hardware stack levels used:    1
  7612 ;; Hardware stack levels required when called:    2
  7613 ;; This function calls:
  7614 ;;		Nothing
  7615 ;; This function is called by:
  7616 ;;		_read_adc_voltage
  7617 ;;		_sprintf
  7618 ;; This function uses a non-reentrant model
  7619 ;;
  7620                           
  7621                           	psect	text22
  7622  002C40                     __ptext22:
  7623                           	opt stack 0
  7624  002C40                     ___wmul:
  7625                           	opt stack 27
  7626                           
  7627                           ;incstack = 0
  7628  002C40  501B               	movf	___wmul@multiplier,w,c
  7629  002C42  021D               	mulwf	___wmul@multiplicand,c
  7630  002C44  CFF3 F01F          	movff	prodl,___wmul@product
  7631  002C48  CFF4 F020          	movff	prodh,___wmul@product+1
  7632  002C4C  501B               	movf	___wmul@multiplier,w,c
  7633  002C4E  021E               	mulwf	___wmul@multiplicand+1,c
  7634  002C50  50F3               	movf	prodl,w,c
  7635  002C52  2620               	addwf	___wmul@product+1,f,c
  7636  002C54  501C               	movf	___wmul@multiplier+1,w,c
  7637  002C56  021D               	mulwf	___wmul@multiplicand,c
  7638  002C58  50F3               	movf	prodl,w,c
  7639  002C5A  2620               	addwf	___wmul@product+1,f,c
  7640  002C5C  C01F  F01B         	movff	___wmul@product,?___wmul
  7641  002C60  C020  F01C         	movff	___wmul@product+1,?___wmul+1
  7642  002C64  0012               	return	
  7643  002C66                     __end_of___wmul:
  7644                           	opt stack 0
  7645                           tblptru	equ	0xFF8
  7646                           tblptrh	equ	0xFF7
  7647                           tblptrl	equ	0xFF6
  7648                           tablat	equ	0xFF5
  7649                           prodh	equ	0xFF4
  7650                           prodl	equ	0xFF3
  7651                           intcon	equ	0xFF2
  7652                           intcon2	equ	0xFF1
  7653                           intcon3	equ	0xFF0
  7654                           postinc0	equ	0xFEE
  7655                           wreg	equ	0xFE8
  7656                           indf1	equ	0xFE7
  7657                           postdec1	equ	0xFE5
  7658                           fsr1h	equ	0xFE2
  7659                           fsr1l	equ	0xFE1
  7660                           indf2	equ	0xFDF
  7661                           postinc2	equ	0xFDE
  7662                           postdec2	equ	0xFDD
  7663                           fsr2h	equ	0xFDA
  7664                           fsr2l	equ	0xFD9
  7665                           status	equ	0xFD8
  7666                           
  7667 ;; *************** function ___llmod *****************
  7668 ;; Defined at:
  7669 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  7670 ;; Parameters:    Size  Location     Type
  7671 ;;  dividend        4   39[COMRAM] unsigned long 
  7672 ;;  divisor         4   43[COMRAM] unsigned long 
  7673 ;; Auto vars:     Size  Location     Type
  7674 ;;  counter         1   47[COMRAM] unsigned char 
  7675 ;; Return value:  Size  Location     Type
  7676 ;;                  4   39[COMRAM] unsigned long 
  7677 ;; Registers used:
  7678 ;;		wreg, status,2, status,0
  7679 ;; Tracked objects:
  7680 ;;		On entry : 0/0
  7681 ;;		On exit  : 0/0
  7682 ;;		Unchanged: 0/0
  7683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7684 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7685 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7687 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7688 ;;Total ram usage:        9 bytes
  7689 ;; Hardware stack levels used:    1
  7690 ;; Hardware stack levels required when called:    2
  7691 ;; This function calls:
  7692 ;;		Nothing
  7693 ;; This function is called by:
  7694 ;;		_sprintf
  7695 ;; This function uses a non-reentrant model
  7696 ;;
  7697                           
  7698                           	psect	text23
  7699  0028A4                     __ptext23:
  7700                           	opt stack 0
  7701  0028A4                     ___llmod:
  7702                           	opt stack 26
  7703                           
  7704                           ;incstack = 0
  7705  0028A4  502C               	movf	___llmod@divisor,w,c
  7706  0028A6  102D               	iorwf	___llmod@divisor+1,w,c
  7707  0028A8  102E               	iorwf	___llmod@divisor+2,w,c
  7708  0028AA  102F               	iorwf	___llmod@divisor+3,w,c
  7709  0028AC  B4D8               	btfsc	status,2,c
  7710  0028AE  D024               	goto	l843
  7711  0028B0  0E01               	movlw	1
  7712  0028B2  6E30               	movwf	___llmod@counter,c
  7713  0028B4  D006               	goto	l838
  7714  0028B6  90D8               	bcf	status,0,c
  7715  0028B8  362C               	rlcf	___llmod@divisor,f,c
  7716  0028BA  362D               	rlcf	___llmod@divisor+1,f,c
  7717  0028BC  362E               	rlcf	___llmod@divisor+2,f,c
  7718  0028BE  362F               	rlcf	___llmod@divisor+3,f,c
  7719  0028C0  2A30               	incf	___llmod@counter,f,c
  7720  0028C2                     l838:
  7721  0028C2  AE2F               	btfss	___llmod@divisor+3,7,c
  7722  0028C4  D7F8               	goto	l839
  7723  0028C6                     u5790:
  7724  0028C6  502C               	movf	___llmod@divisor,w,c
  7725  0028C8  5C28               	subwf	___llmod@dividend,w,c
  7726  0028CA  502D               	movf	___llmod@divisor+1,w,c
  7727  0028CC  5829               	subwfb	___llmod@dividend+1,w,c
  7728  0028CE  502E               	movf	___llmod@divisor+2,w,c
  7729  0028D0  582A               	subwfb	___llmod@dividend+2,w,c
  7730  0028D2  502F               	movf	___llmod@divisor+3,w,c
  7731  0028D4  582B               	subwfb	___llmod@dividend+3,w,c
  7732  0028D6  A0D8               	btfss	status,0,c
  7733  0028D8  D008               	goto	l842
  7734  0028DA  502C               	movf	___llmod@divisor,w,c
  7735  0028DC  5E28               	subwf	___llmod@dividend,f,c
  7736  0028DE  502D               	movf	___llmod@divisor+1,w,c
  7737  0028E0  5A29               	subwfb	___llmod@dividend+1,f,c
  7738  0028E2  502E               	movf	___llmod@divisor+2,w,c
  7739  0028E4  5A2A               	subwfb	___llmod@dividend+2,f,c
  7740  0028E6  502F               	movf	___llmod@divisor+3,w,c
  7741  0028E8  5A2B               	subwfb	___llmod@dividend+3,f,c
  7742  0028EA                     l842:
  7743  0028EA  90D8               	bcf	status,0,c
  7744  0028EC  322F               	rrcf	___llmod@divisor+3,f,c
  7745  0028EE  322E               	rrcf	___llmod@divisor+2,f,c
  7746  0028F0  322D               	rrcf	___llmod@divisor+1,f,c
  7747  0028F2  322C               	rrcf	___llmod@divisor,f,c
  7748  0028F4  2E30               	decfsz	___llmod@counter,f,c
  7749  0028F6  D7E7               	goto	u5790
  7750  0028F8                     l843:
  7751  0028F8  C028  F028         	movff	___llmod@dividend,?___llmod
  7752  0028FC  C029  F029         	movff	___llmod@dividend+1,?___llmod+1
  7753  002900  C02A  F02A         	movff	___llmod@dividend+2,?___llmod+2
  7754  002904  C02B  F02B         	movff	___llmod@dividend+3,?___llmod+3
  7755  002908  0012               	return		;funcret
  7756  00290A                     __end_of___llmod:
  7757                           	opt stack 0
  7758                           tblptru	equ	0xFF8
  7759                           tblptrh	equ	0xFF7
  7760                           tblptrl	equ	0xFF6
  7761                           tablat	equ	0xFF5
  7762                           prodh	equ	0xFF4
  7763                           prodl	equ	0xFF3
  7764                           intcon	equ	0xFF2
  7765                           intcon2	equ	0xFF1
  7766                           intcon3	equ	0xFF0
  7767                           postinc0	equ	0xFEE
  7768                           wreg	equ	0xFE8
  7769                           indf1	equ	0xFE7
  7770                           postdec1	equ	0xFE5
  7771                           fsr1h	equ	0xFE2
  7772                           fsr1l	equ	0xFE1
  7773                           indf2	equ	0xFDF
  7774                           postinc2	equ	0xFDE
  7775                           postdec2	equ	0xFDD
  7776                           fsr2h	equ	0xFDA
  7777                           fsr2l	equ	0xFD9
  7778                           status	equ	0xFD8
  7779                           
  7780 ;; *************** function ___lldiv *****************
  7781 ;; Defined at:
  7782 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  7783 ;; Parameters:    Size  Location     Type
  7784 ;;  dividend        4   26[COMRAM] unsigned long 
  7785 ;;  divisor         4   30[COMRAM] unsigned long 
  7786 ;; Auto vars:     Size  Location     Type
  7787 ;;  quotient        4   34[COMRAM] unsigned long 
  7788 ;;  counter         1   38[COMRAM] unsigned char 
  7789 ;; Return value:  Size  Location     Type
  7790 ;;                  4   26[COMRAM] unsigned long 
  7791 ;; Registers used:
  7792 ;;		wreg, status,2, status,0
  7793 ;; Tracked objects:
  7794 ;;		On entry : 0/0
  7795 ;;		On exit  : 0/0
  7796 ;;		Unchanged: 0/0
  7797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7798 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7799 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7801 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;Total ram usage:       13 bytes
  7803 ;; Hardware stack levels used:    1
  7804 ;; Hardware stack levels required when called:    2
  7805 ;; This function calls:
  7806 ;;		Nothing
  7807 ;; This function is called by:
  7808 ;;		_sprintf
  7809 ;; This function uses a non-reentrant model
  7810 ;;
  7811                           
  7812                           	psect	text24
  7813  002742                     __ptext24:
  7814                           	opt stack 0
  7815  002742                     ___lldiv:
  7816                           	opt stack 26
  7817                           
  7818                           ;incstack = 0
  7819  002742  0E00               	movlw	0
  7820  002744  6E23               	movwf	___lldiv@quotient,c
  7821  002746  0E00               	movlw	0
  7822  002748  6E24               	movwf	___lldiv@quotient+1,c
  7823  00274A  0E00               	movlw	0
  7824  00274C  6E25               	movwf	___lldiv@quotient+2,c
  7825  00274E  0E00               	movlw	0
  7826  002750  6E26               	movwf	___lldiv@quotient+3,c
  7827  002752  501F               	movf	___lldiv@divisor,w,c
  7828  002754  1020               	iorwf	___lldiv@divisor+1,w,c
  7829  002756  1021               	iorwf	___lldiv@divisor+2,w,c
  7830  002758  1022               	iorwf	___lldiv@divisor+3,w,c
  7831  00275A  B4D8               	btfsc	status,2,c
  7832  00275C  D02A               	goto	l833
  7833  00275E  0E01               	movlw	1
  7834  002760  6E27               	movwf	___lldiv@counter,c
  7835  002762  D006               	goto	l828
  7836  002764  90D8               	bcf	status,0,c
  7837  002766  361F               	rlcf	___lldiv@divisor,f,c
  7838  002768  3620               	rlcf	___lldiv@divisor+1,f,c
  7839  00276A  3621               	rlcf	___lldiv@divisor+2,f,c
  7840  00276C  3622               	rlcf	___lldiv@divisor+3,f,c
  7841  00276E  2A27               	incf	___lldiv@counter,f,c
  7842  002770                     l828:
  7843  002770  AE22               	btfss	___lldiv@divisor+3,7,c
  7844  002772  D7F8               	goto	l829
  7845  002774                     u5760:
  7846  002774  90D8               	bcf	status,0,c
  7847  002776  3623               	rlcf	___lldiv@quotient,f,c
  7848  002778  3624               	rlcf	___lldiv@quotient+1,f,c
  7849  00277A  3625               	rlcf	___lldiv@quotient+2,f,c
  7850  00277C  3626               	rlcf	___lldiv@quotient+3,f,c
  7851  00277E  501F               	movf	___lldiv@divisor,w,c
  7852  002780  5C1B               	subwf	___lldiv@dividend,w,c
  7853  002782  5020               	movf	___lldiv@divisor+1,w,c
  7854  002784  581C               	subwfb	___lldiv@dividend+1,w,c
  7855  002786  5021               	movf	___lldiv@divisor+2,w,c
  7856  002788  581D               	subwfb	___lldiv@dividend+2,w,c
  7857  00278A  5022               	movf	___lldiv@divisor+3,w,c
  7858  00278C  581E               	subwfb	___lldiv@dividend+3,w,c
  7859  00278E  A0D8               	btfss	status,0,c
  7860  002790  D009               	goto	l832
  7861  002792  501F               	movf	___lldiv@divisor,w,c
  7862  002794  5E1B               	subwf	___lldiv@dividend,f,c
  7863  002796  5020               	movf	___lldiv@divisor+1,w,c
  7864  002798  5A1C               	subwfb	___lldiv@dividend+1,f,c
  7865  00279A  5021               	movf	___lldiv@divisor+2,w,c
  7866  00279C  5A1D               	subwfb	___lldiv@dividend+2,f,c
  7867  00279E  5022               	movf	___lldiv@divisor+3,w,c
  7868  0027A0  5A1E               	subwfb	___lldiv@dividend+3,f,c
  7869  0027A2  8023               	bsf	___lldiv@quotient,0,c
  7870  0027A4                     l832:
  7871  0027A4  90D8               	bcf	status,0,c
  7872  0027A6  3222               	rrcf	___lldiv@divisor+3,f,c
  7873  0027A8  3221               	rrcf	___lldiv@divisor+2,f,c
  7874  0027AA  3220               	rrcf	___lldiv@divisor+1,f,c
  7875  0027AC  321F               	rrcf	___lldiv@divisor,f,c
  7876  0027AE  2E27               	decfsz	___lldiv@counter,f,c
  7877  0027B0  D7E1               	goto	u5760
  7878  0027B2                     l833:
  7879  0027B2  C023  F01B         	movff	___lldiv@quotient,?___lldiv
  7880  0027B6  C024  F01C         	movff	___lldiv@quotient+1,?___lldiv+1
  7881  0027BA  C025  F01D         	movff	___lldiv@quotient+2,?___lldiv+2
  7882  0027BE  C026  F01E         	movff	___lldiv@quotient+3,?___lldiv+3
  7883  0027C2  0012               	return		;funcret
  7884  0027C4                     __end_of___lldiv:
  7885                           	opt stack 0
  7886                           tblptru	equ	0xFF8
  7887                           tblptrh	equ	0xFF7
  7888                           tblptrl	equ	0xFF6
  7889                           tablat	equ	0xFF5
  7890                           prodh	equ	0xFF4
  7891                           prodl	equ	0xFF3
  7892                           intcon	equ	0xFF2
  7893                           intcon2	equ	0xFF1
  7894                           intcon3	equ	0xFF0
  7895                           postinc0	equ	0xFEE
  7896                           wreg	equ	0xFE8
  7897                           indf1	equ	0xFE7
  7898                           postdec1	equ	0xFE5
  7899                           fsr1h	equ	0xFE2
  7900                           fsr1l	equ	0xFE1
  7901                           indf2	equ	0xFDF
  7902                           postinc2	equ	0xFDE
  7903                           postdec2	equ	0xFDD
  7904                           fsr2h	equ	0xFDA
  7905                           fsr2l	equ	0xFD9
  7906                           status	equ	0xFD8
  7907                           
  7908 ;; *************** function ___fltol *****************
  7909 ;; Defined at:
  7910 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fltol.c"
  7911 ;; Parameters:    Size  Location     Type
  7912 ;;  f1              4   34[BANK0 ] unsigned long 
  7913 ;; Auto vars:     Size  Location     Type
  7914 ;;  exp1            1   72[COMRAM] unsigned char 
  7915 ;;  sign1           1   71[COMRAM] unsigned char 
  7916 ;; Return value:  Size  Location     Type
  7917 ;;                  4   34[BANK0 ] long 
  7918 ;; Registers used:
  7919 ;;		wreg, status,2, status,0
  7920 ;; Tracked objects:
  7921 ;;		On entry : 0/0
  7922 ;;		On exit  : 0/0
  7923 ;;		Unchanged: 0/0
  7924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7925 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7926 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7927 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7928 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7929 ;;Total ram usage:       10 bytes
  7930 ;; Hardware stack levels used:    1
  7931 ;; Hardware stack levels required when called:    2
  7932 ;; This function calls:
  7933 ;;		Nothing
  7934 ;; This function is called by:
  7935 ;;		_sprintf
  7936 ;;		_set_pwm1_percent
  7937 ;;		_set_pwm1_voltage
  7938 ;;		_set_pwm1_general
  7939 ;; This function uses a non-reentrant model
  7940 ;;
  7941                           
  7942                           	psect	text25
  7943  00255A                     __ptext25:
  7944                           	opt stack 0
  7945  00255A                     ___fltol:
  7946                           	opt stack 26
  7947                           
  7948                           ;incstack = 0
  7949  00255A  0100               	movlb	0	; () banked
  7950  00255C  35A4               	rlcf	(___fltol@f1+2)& (0+255),w,b
  7951  00255E  35A5               	rlcf	(___fltol@f1+3)& (0+255),w,b
  7952  002560  6E49               	movwf	___fltol@exp1,c
  7953  002562  5049               	movf	___fltol@exp1,w,c
  7954  002564  A4D8               	btfss	status,2,c
  7955  002566  D009               	goto	l685
  7956                           
  7957                           ; BSR set to: 0
  7958  002568  0E00               	movlw	0
  7959  00256A  6FA2               	movwf	?___fltol& (0+255),b
  7960  00256C  0E00               	movlw	0
  7961  00256E  6FA3               	movwf	(?___fltol+1)& (0+255),b
  7962  002570  0E00               	movlw	0
  7963  002572  6FA4               	movwf	(?___fltol+2)& (0+255),b
  7964  002574  0E00               	movlw	0
  7965  002576  6FA5               	movwf	(?___fltol+3)& (0+255),b
  7966                           
  7967                           ; BSR set to: 0
  7968  002578  0012               	return	
  7969  00257A                     l685:
  7970                           
  7971                           ; BSR set to: 0
  7972                           
  7973                           ; BSR set to: 0
  7974  00257A  C0A2  F0A6         	movff	___fltol@f1,??___fltol
  7975  00257E  C0A3  F0A7         	movff	___fltol@f1+1,??___fltol+1
  7976  002582  C0A4  F0A8         	movff	___fltol@f1+2,??___fltol+2
  7977  002586  C0A5  F0A9         	movff	___fltol@f1+3,??___fltol+3
  7978  00258A  0E20               	movlw	32
  7979  00258C  D005               	goto	u5690
  7980  00258E                     u5695:
  7981  00258E  90D8               	bcf	status,0,c
  7982  002590  33A9               	rrcf	(??___fltol+3)& (0+255),f,b
  7983  002592  33A8               	rrcf	(??___fltol+2)& (0+255),f,b
  7984  002594  33A7               	rrcf	(??___fltol+1)& (0+255),f,b
  7985  002596  33A6               	rrcf	??___fltol& (0+255),f,b
  7986  002598                     u5690:
  7987  002598  2EE8               	decfsz	wreg,f,c
  7988  00259A  D7F9               	goto	u5695
  7989  00259C  51A6               	movf	??___fltol& (0+255),w,b
  7990  00259E  6E48               	movwf	___fltol@sign1,c
  7991                           
  7992                           ; BSR set to: 0
  7993  0025A0  8FA4               	bsf	(___fltol@f1+2)& (0+255),7,b
  7994                           
  7995                           ; BSR set to: 0
  7996  0025A2  0EFF               	movlw	255
  7997  0025A4  17A2               	andwf	___fltol@f1& (0+255),f,b
  7998  0025A6  0EFF               	movlw	255
  7999  0025A8  17A3               	andwf	(___fltol@f1+1)& (0+255),f,b
  8000  0025AA  0EFF               	movlw	255
  8001  0025AC  17A4               	andwf	(___fltol@f1+2)& (0+255),f,b
  8002  0025AE  0E00               	movlw	0
  8003  0025B0  17A5               	andwf	(___fltol@f1+3)& (0+255),f,b
  8004                           
  8005                           ; BSR set to: 0
  8006  0025B2  0E96               	movlw	150
  8007  0025B4  5E49               	subwf	___fltol@exp1,f,c
  8008                           
  8009                           ; BSR set to: 0
  8010  0025B6  AE49               	btfss	___fltol@exp1,7,c
  8011  0025B8  D016               	goto	l687
  8012                           
  8013                           ; BSR set to: 0
  8014  0025BA  5049               	movf	___fltol@exp1,w,c
  8015  0025BC  0A80               	xorlw	128
  8016  0025BE  0F97               	addlw	151
  8017  0025C0  B0D8               	btfsc	status,0,c
  8018  0025C2  D009               	goto	l688
  8019                           
  8020                           ; BSR set to: 0
  8021  0025C4  0E00               	movlw	0
  8022  0025C6  6FA2               	movwf	?___fltol& (0+255),b
  8023  0025C8  0E00               	movlw	0
  8024  0025CA  6FA3               	movwf	(?___fltol+1)& (0+255),b
  8025  0025CC  0E00               	movlw	0
  8026  0025CE  6FA4               	movwf	(?___fltol+2)& (0+255),b
  8027  0025D0  0E00               	movlw	0
  8028  0025D2  6FA5               	movwf	(?___fltol+3)& (0+255),b
  8029                           
  8030                           ; BSR set to: 0
  8031  0025D4  0012               	return	
  8032  0025D6                     l688:
  8033                           
  8034                           ; BSR set to: 0
  8035                           
  8036                           ; BSR set to: 0
  8037                           
  8038                           ; BSR set to: 0
  8039  0025D6  90D8               	bcf	status,0,c
  8040  0025D8  33A5               	rrcf	(___fltol@f1+3)& (0+255),f,b
  8041  0025DA  33A4               	rrcf	(___fltol@f1+2)& (0+255),f,b
  8042  0025DC  33A3               	rrcf	(___fltol@f1+1)& (0+255),f,b
  8043  0025DE  33A2               	rrcf	___fltol@f1& (0+255),f,b
  8044                           
  8045                           ; BSR set to: 0
  8046  0025E0  3E49               	incfsz	___fltol@exp1,f,c
  8047  0025E2  D7F9               	goto	l688
  8048                           
  8049                           ; BSR set to: 0
  8050  0025E4  D015               	goto	u5730
  8051  0025E6                     l687:
  8052                           
  8053                           ; BSR set to: 0
  8054                           
  8055                           ; BSR set to: 0
  8056  0025E6  0E1F               	movlw	31
  8057  0025E8  6449               	cpfsgt	___fltol@exp1,c
  8058  0025EA  D00F               	goto	l693
  8059                           
  8060                           ; BSR set to: 0
  8061  0025EC  0E00               	movlw	0
  8062  0025EE  6FA2               	movwf	?___fltol& (0+255),b
  8063  0025F0  0E00               	movlw	0
  8064  0025F2  6FA3               	movwf	(?___fltol+1)& (0+255),b
  8065  0025F4  0E00               	movlw	0
  8066  0025F6  6FA4               	movwf	(?___fltol+2)& (0+255),b
  8067  0025F8  0E00               	movlw	0
  8068  0025FA  6FA5               	movwf	(?___fltol+3)& (0+255),b
  8069                           
  8070                           ; BSR set to: 0
  8071  0025FC  0012               	return	
  8072  0025FE                     
  8073                           ; BSR set to: 0
  8074                           
  8075                           ; BSR set to: 0
  8076  0025FE  90D8               	bcf	status,0,c
  8077  002600  37A2               	rlcf	___fltol@f1& (0+255),f,b
  8078  002602  37A3               	rlcf	(___fltol@f1+1)& (0+255),f,b
  8079  002604  37A4               	rlcf	(___fltol@f1+2)& (0+255),f,b
  8080  002606  37A5               	rlcf	(___fltol@f1+3)& (0+255),f,b
  8081  002608  0649               	decf	___fltol@exp1,f,c
  8082  00260A                     l693:
  8083                           
  8084                           ; BSR set to: 0
  8085                           
  8086                           ; BSR set to: 0
  8087  00260A  5049               	movf	___fltol@exp1,w,c
  8088  00260C  A4D8               	btfss	status,2,c
  8089  00260E  D7F7               	goto	l694
  8090  002610                     u5730:
  8091                           
  8092                           ; BSR set to: 0
  8093                           
  8094                           ; BSR set to: 0
  8095                           
  8096                           ; BSR set to: 0
  8097  002610  5048               	movf	___fltol@sign1,w,c
  8098  002612  B4D8               	btfsc	status,2,c
  8099  002614  D008               	goto	l696
  8100                           
  8101                           ; BSR set to: 0
  8102  002616  1FA5               	comf	(___fltol@f1+3)& (0+255),f,b
  8103  002618  1FA4               	comf	(___fltol@f1+2)& (0+255),f,b
  8104  00261A  1FA3               	comf	(___fltol@f1+1)& (0+255),f,b
  8105  00261C  6DA2               	negf	___fltol@f1& (0+255),b
  8106  00261E  0E00               	movlw	0
  8107  002620  23A3               	addwfc	(___fltol@f1+1)& (0+255),f,b
  8108  002622  23A4               	addwfc	(___fltol@f1+2)& (0+255),f,b
  8109  002624  23A5               	addwfc	(___fltol@f1+3)& (0+255),f,b
  8110  002626                     l696:
  8111                           
  8112                           ; BSR set to: 0
  8113                           
  8114                           ; BSR set to: 0
  8115  002626  C0A2  F0A2         	movff	___fltol@f1,?___fltol
  8116  00262A  C0A3  F0A3         	movff	___fltol@f1+1,?___fltol+1
  8117  00262E  C0A4  F0A4         	movff	___fltol@f1+2,?___fltol+2
  8118  002632  C0A5  F0A5         	movff	___fltol@f1+3,?___fltol+3
  8119  002636  0012               	return	
  8120  002638                     __end_of___fltol:
  8121                           	opt stack 0
  8122                           tblptru	equ	0xFF8
  8123                           tblptrh	equ	0xFF7
  8124                           tblptrl	equ	0xFF6
  8125                           tablat	equ	0xFF5
  8126                           prodh	equ	0xFF4
  8127                           prodl	equ	0xFF3
  8128                           intcon	equ	0xFF2
  8129                           intcon2	equ	0xFF1
  8130                           intcon3	equ	0xFF0
  8131                           postinc0	equ	0xFEE
  8132                           wreg	equ	0xFE8
  8133                           indf1	equ	0xFE7
  8134                           postdec1	equ	0xFE5
  8135                           fsr1h	equ	0xFE2
  8136                           fsr1l	equ	0xFE1
  8137                           indf2	equ	0xFDF
  8138                           postinc2	equ	0xFDE
  8139                           postdec2	equ	0xFDD
  8140                           fsr2h	equ	0xFDA
  8141                           fsr2l	equ	0xFD9
  8142                           status	equ	0xFD8
  8143                           
  8144 ;; *************** function ___flsub *****************
  8145 ;; Defined at:
  8146 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
  8147 ;; Parameters:    Size  Location     Type
  8148 ;;  b               4   58[BANK0 ] long 
  8149 ;;  a               4   62[BANK0 ] long 
  8150 ;; Auto vars:     Size  Location     Type
  8151 ;;		None
  8152 ;; Return value:  Size  Location     Type
  8153 ;;                  4   58[BANK0 ] long 
  8154 ;; Registers used:
  8155 ;;		wreg, status,2, status,0, cstack
  8156 ;; Tracked objects:
  8157 ;;		On entry : 0/0
  8158 ;;		On exit  : 0/0
  8159 ;;		Unchanged: 0/0
  8160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8161 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8164 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8165 ;;Total ram usage:        8 bytes
  8166 ;; Hardware stack levels used:    1
  8167 ;; Hardware stack levels required when called:    3
  8168 ;; This function calls:
  8169 ;;		___fladd
  8170 ;; This function is called by:
  8171 ;;		_sprintf
  8172 ;; This function uses a non-reentrant model
  8173 ;;
  8174                           
  8175                           	psect	text26
  8176  002A6A                     __ptext26:
  8177                           	opt stack 0
  8178  002A6A                     ___flsub:
  8179                           	opt stack 25
  8180                           
  8181                           ; BSR set to: 0
  8182                           ;incstack = 0
  8183  002A6A  0E00               	movlw	0
  8184  002A6C  0100               	movlb	0	; () banked
  8185  002A6E  1BBE               	xorwf	___flsub@a& (0+255),f,b
  8186  002A70  0E00               	movlw	0
  8187  002A72  1BBF               	xorwf	(___flsub@a+1)& (0+255),f,b
  8188  002A74  0E00               	movlw	0
  8189  002A76  1BC0               	xorwf	(___flsub@a+2)& (0+255),f,b
  8190  002A78  0E80               	movlw	128
  8191  002A7A  1BC1               	xorwf	(___flsub@a+3)& (0+255),f,b
  8192                           
  8193                           ; BSR set to: 0
  8194  002A7C  C0BA  F0A6         	movff	___flsub@b,___fladd@b
  8195  002A80  C0BB  F0A7         	movff	___flsub@b+1,___fladd@b+1
  8196  002A84  C0BC  F0A8         	movff	___flsub@b+2,___fladd@b+2
  8197  002A88  C0BD  F0A9         	movff	___flsub@b+3,___fladd@b+3
  8198  002A8C  C0BE  F0AA         	movff	___flsub@a,___fladd@a
  8199  002A90  C0BF  F0AB         	movff	___flsub@a+1,___fladd@a+1
  8200  002A94  C0C0  F0AC         	movff	___flsub@a+2,___fladd@a+2
  8201  002A98  C0C1  F0AD         	movff	___flsub@a+3,___fladd@a+3
  8202  002A9C  EC81  F009         	call	___fladd	;wreg free
  8203  002AA0  C0A6  F0BA         	movff	?___fladd,?___flsub
  8204  002AA4  C0A7  F0BB         	movff	?___fladd+1,?___flsub+1
  8205  002AA8  C0A8  F0BC         	movff	?___fladd+2,?___flsub+2
  8206  002AAC  C0A9  F0BD         	movff	?___fladd+3,?___flsub+3
  8207  002AB0  0012               	return	
  8208  002AB2                     __end_of___flsub:
  8209                           	opt stack 0
  8210                           tblptru	equ	0xFF8
  8211                           tblptrh	equ	0xFF7
  8212                           tblptrl	equ	0xFF6
  8213                           tablat	equ	0xFF5
  8214                           prodh	equ	0xFF4
  8215                           prodl	equ	0xFF3
  8216                           intcon	equ	0xFF2
  8217                           intcon2	equ	0xFF1
  8218                           intcon3	equ	0xFF0
  8219                           postinc0	equ	0xFEE
  8220                           wreg	equ	0xFE8
  8221                           indf1	equ	0xFE7
  8222                           postdec1	equ	0xFE5
  8223                           fsr1h	equ	0xFE2
  8224                           fsr1l	equ	0xFE1
  8225                           indf2	equ	0xFDF
  8226                           postinc2	equ	0xFDE
  8227                           postdec2	equ	0xFDD
  8228                           fsr2h	equ	0xFDA
  8229                           fsr2l	equ	0xFD9
  8230                           status	equ	0xFD8
  8231                           
  8232 ;; *************** function ___fladd *****************
  8233 ;; Defined at:
  8234 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
  8235 ;; Parameters:    Size  Location     Type
  8236 ;;  b               4   38[BANK0 ] long 
  8237 ;;  a               4   42[BANK0 ] long 
  8238 ;; Auto vars:     Size  Location     Type
  8239 ;;  grs             1   57[BANK0 ] unsigned char 
  8240 ;;  bexp            1   56[BANK0 ] unsigned char 
  8241 ;;  aexp            1   55[BANK0 ] unsigned char 
  8242 ;;  signs           1   54[BANK0 ] unsigned char 
  8243 ;; Return value:  Size  Location     Type
  8244 ;;                  4   38[BANK0 ] unsigned char 
  8245 ;; Registers used:
  8246 ;;		wreg, status,2, status,0
  8247 ;; Tracked objects:
  8248 ;;		On entry : 0/0
  8249 ;;		On exit  : 0/0
  8250 ;;		Unchanged: 0/0
  8251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8252 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8253 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8254 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8255 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8256 ;;Total ram usage:       20 bytes
  8257 ;; Hardware stack levels used:    1
  8258 ;; Hardware stack levels required when called:    2
  8259 ;; This function calls:
  8260 ;;		Nothing
  8261 ;; This function is called by:
  8262 ;;		_sprintf
  8263 ;;		___flsub
  8264 ;;		_set_pwm1_percent
  8265 ;;		_set_pwm1_voltage
  8266 ;;		_set_pwm1_general
  8267 ;; This function uses a non-reentrant model
  8268 ;;
  8269                           
  8270                           	psect	text27
  8271  001302                     __ptext27:
  8272                           	opt stack 0
  8273  001302                     ___fladd:
  8274                           	opt stack 25
  8275                           
  8276                           ;incstack = 0
  8277  001302  0100               	movlb	0	; () banked
  8278  001304  51A9               	movf	(___fladd@b+3)& (0+255),w,b
  8279  001306  0B80               	andlw	128
  8280  001308  6FB6               	movwf	___fladd@signs& (0+255),b
  8281  00130A  51A9               	movf	(___fladd@b+3)& (0+255),w,b
  8282  00130C  25A9               	addwf	(___fladd@b+3)& (0+255),w,b
  8283  00130E  6FB8               	movwf	___fladd@bexp& (0+255),b
  8284                           
  8285                           ; BSR set to: 0
  8286  001310  BFA8               	btfsc	(___fladd@b+2)& (0+255),7,b
  8287                           
  8288                           ; BSR set to: 0
  8289  001312  81B8               	bsf	___fladd@bexp& (0+255),0,b
  8290                           
  8291                           ; BSR set to: 0
  8292                           
  8293                           ; BSR set to: 0
  8294  001314  51B8               	movf	___fladd@bexp& (0+255),w,b
  8295  001316  B4D8               	btfsc	status,2,c
  8296  001318  D00D               	goto	l910
  8297                           
  8298                           ; BSR set to: 0
  8299  00131A  29B8               	incf	___fladd@bexp& (0+255),w,b
  8300  00131C  A4D8               	btfss	status,2,c
  8301  00131E  D008               	goto	l911
  8302                           
  8303                           ; BSR set to: 0
  8304  001320  0E00               	movlw	0
  8305  001322  6FA6               	movwf	___fladd@b& (0+255),b
  8306  001324  0E00               	movlw	0
  8307  001326  6FA7               	movwf	(___fladd@b+1)& (0+255),b
  8308  001328  0E00               	movlw	0
  8309  00132A  6FA8               	movwf	(___fladd@b+2)& (0+255),b
  8310  00132C  0E00               	movlw	0
  8311  00132E  6FA9               	movwf	(___fladd@b+3)& (0+255),b
  8312  001330                     l911:
  8313                           
  8314                           ; BSR set to: 0
  8315                           
  8316                           ; BSR set to: 0
  8317  001330  8FA8               	bsf	(___fladd@b+2)& (0+255),7,b
  8318  001332  D006               	goto	L10
  8319  001334                     l910:
  8320                           
  8321                           ; BSR set to: 0
  8322                           
  8323                           ; BSR set to: 0
  8324  001334  0E00               	movlw	0
  8325  001336  6FA6               	movwf	___fladd@b& (0+255),b
  8326  001338  0E00               	movlw	0
  8327  00133A  6FA7               	movwf	(___fladd@b+1)& (0+255),b
  8328  00133C  0E00               	movlw	0
  8329  00133E  6FA8               	movwf	(___fladd@b+2)& (0+255),b
  8330  001340                     L10:
  8331  001340  0E00               	movlw	0
  8332  001342  6FA9               	movwf	(___fladd@b+3)& (0+255),b
  8333                           
  8334                           ; BSR set to: 0
  8335                           
  8336                           ; BSR set to: 0
  8337  001344  51AD               	movf	(___fladd@a+3)& (0+255),w,b
  8338  001346  0B80               	andlw	128
  8339  001348  6FB7               	movwf	___fladd@aexp& (0+255),b
  8340                           
  8341                           ; BSR set to: 0
  8342  00134A  51B6               	movf	___fladd@signs& (0+255),w,b
  8343  00134C  19B7               	xorwf	___fladd@aexp& (0+255),w,b
  8344  00134E  A4D8               	btfss	status,2,c
  8345                           
  8346                           ; BSR set to: 0
  8347  001350  8DB6               	bsf	___fladd@signs& (0+255),6,b
  8348                           
  8349                           ; BSR set to: 0
  8350                           
  8351                           ; BSR set to: 0
  8352  001352  51AD               	movf	(___fladd@a+3)& (0+255),w,b
  8353  001354  25AD               	addwf	(___fladd@a+3)& (0+255),w,b
  8354  001356  6FB7               	movwf	___fladd@aexp& (0+255),b
  8355                           
  8356                           ; BSR set to: 0
  8357  001358  BFAC               	btfsc	(___fladd@a+2)& (0+255),7,b
  8358                           
  8359                           ; BSR set to: 0
  8360  00135A  81B7               	bsf	___fladd@aexp& (0+255),0,b
  8361                           
  8362                           ; BSR set to: 0
  8363                           
  8364                           ; BSR set to: 0
  8365  00135C  51B7               	movf	___fladd@aexp& (0+255),w,b
  8366  00135E  B4D8               	btfsc	status,2,c
  8367  001360  D00D               	goto	l915
  8368                           
  8369                           ; BSR set to: 0
  8370  001362  29B7               	incf	___fladd@aexp& (0+255),w,b
  8371  001364  A4D8               	btfss	status,2,c
  8372  001366  D008               	goto	l916
  8373                           
  8374                           ; BSR set to: 0
  8375  001368  0E00               	movlw	0
  8376  00136A  6FAA               	movwf	___fladd@a& (0+255),b
  8377  00136C  0E00               	movlw	0
  8378  00136E  6FAB               	movwf	(___fladd@a+1)& (0+255),b
  8379  001370  0E00               	movlw	0
  8380  001372  6FAC               	movwf	(___fladd@a+2)& (0+255),b
  8381  001374  0E00               	movlw	0
  8382  001376  6FAD               	movwf	(___fladd@a+3)& (0+255),b
  8383  001378                     l916:
  8384                           
  8385                           ; BSR set to: 0
  8386                           
  8387                           ; BSR set to: 0
  8388  001378  8FAC               	bsf	(___fladd@a+2)& (0+255),7,b
  8389  00137A  D006               	goto	L11
  8390  00137C                     l915:
  8391                           
  8392                           ; BSR set to: 0
  8393                           
  8394                           ; BSR set to: 0
  8395  00137C  0E00               	movlw	0
  8396  00137E  6FAA               	movwf	___fladd@a& (0+255),b
  8397  001380  0E00               	movlw	0
  8398  001382  6FAB               	movwf	(___fladd@a+1)& (0+255),b
  8399  001384  0E00               	movlw	0
  8400  001386  6FAC               	movwf	(___fladd@a+2)& (0+255),b
  8401  001388                     L11:
  8402  001388  0E00               	movlw	0
  8403  00138A  6FAD               	movwf	(___fladd@a+3)& (0+255),b
  8404                           
  8405                           ; BSR set to: 0
  8406                           
  8407                           ; BSR set to: 0
  8408  00138C  51B8               	movf	___fladd@bexp& (0+255),w,b
  8409  00138E  5DB7               	subwf	___fladd@aexp& (0+255),w,b
  8410  001390  B0D8               	btfsc	status,0,c
  8411  001392  D022               	goto	l918
  8412                           
  8413                           ; BSR set to: 0
  8414  001394  ADB6               	btfss	___fladd@signs& (0+255),6,b
  8415  001396  D002               	goto	l919
  8416                           
  8417                           ; BSR set to: 0
  8418  001398  0E80               	movlw	128
  8419  00139A  1BB6               	xorwf	___fladd@signs& (0+255),f,b
  8420  00139C                     l919:
  8421                           
  8422                           ; BSR set to: 0
  8423                           
  8424                           ; BSR set to: 0
  8425  00139C  C0B8  F0B9         	movff	___fladd@bexp,___fladd@grs
  8426                           
  8427                           ; BSR set to: 0
  8428  0013A0  C0B7  F0B8         	movff	___fladd@aexp,___fladd@bexp
  8429                           
  8430                           ; BSR set to: 0
  8431  0013A4  C0B9  F0B7         	movff	___fladd@grs,___fladd@aexp
  8432                           
  8433                           ; BSR set to: 0
  8434  0013A8  C0A6  F0B9         	movff	___fladd@b,___fladd@grs
  8435                           
  8436                           ; BSR set to: 0
  8437  0013AC  C0AA  F0A6         	movff	___fladd@a,___fladd@b
  8438                           
  8439                           ; BSR set to: 0
  8440  0013B0  C0B9  F0AA         	movff	___fladd@grs,___fladd@a
  8441                           
  8442                           ; BSR set to: 0
  8443  0013B4  C0A7  F0B9         	movff	___fladd@b+1,___fladd@grs
  8444                           
  8445                           ; BSR set to: 0
  8446  0013B8  C0AB  F0A7         	movff	___fladd@a+1,___fladd@b+1
  8447                           
  8448                           ; BSR set to: 0
  8449  0013BC  C0B9  F0AB         	movff	___fladd@grs,___fladd@a+1
  8450                           
  8451                           ; BSR set to: 0
  8452  0013C0  C0A8  F0B9         	movff	___fladd@b+2,___fladd@grs
  8453                           
  8454                           ; BSR set to: 0
  8455  0013C4  C0AC  F0A8         	movff	___fladd@a+2,___fladd@b+2
  8456                           
  8457                           ; BSR set to: 0
  8458  0013C8  C0B9  F0AC         	movff	___fladd@grs,___fladd@a+2
  8459                           
  8460                           ; BSR set to: 0
  8461  0013CC  C0A9  F0B9         	movff	___fladd@b+3,___fladd@grs
  8462                           
  8463                           ; BSR set to: 0
  8464  0013D0  C0AD  F0A9         	movff	___fladd@a+3,___fladd@b+3
  8465                           
  8466                           ; BSR set to: 0
  8467  0013D4  C0B9  F0AD         	movff	___fladd@grs,___fladd@a+3
  8468  0013D8                     l918:
  8469                           
  8470                           ; BSR set to: 0
  8471                           
  8472                           ; BSR set to: 0
  8473  0013D8  0E00               	movlw	0
  8474  0013DA  6FB9               	movwf	___fladd@grs& (0+255),b
  8475                           
  8476                           ; BSR set to: 0
  8477  0013DC  51B8               	movf	___fladd@bexp& (0+255),w,b
  8478  0013DE  6FAE               	movwf	??___fladd& (0+255),b
  8479  0013E0  6BAF               	clrf	(??___fladd+1)& (0+255),b
  8480  0013E2  1FAE               	comf	??___fladd& (0+255),f,b
  8481  0013E4  1FAF               	comf	(??___fladd+1)& (0+255),f,b
  8482  0013E6  4BAE               	infsnz	??___fladd& (0+255),f,b
  8483  0013E8  2BAF               	incf	(??___fladd+1)& (0+255),f,b
  8484  0013EA  51B7               	movf	___fladd@aexp& (0+255),w,b
  8485  0013EC  6FB0               	movwf	(??___fladd+2)& (0+255),b
  8486  0013EE  6BB1               	clrf	(??___fladd+3)& (0+255),b
  8487  0013F0  51AE               	movf	??___fladd& (0+255),w,b
  8488  0013F2  27B0               	addwf	(??___fladd+2)& (0+255),f,b
  8489  0013F4  51AF               	movf	(??___fladd+1)& (0+255),w,b
  8490  0013F6  23B1               	addwfc	(??___fladd+3)& (0+255),f,b
  8491  0013F8  BFB1               	btfsc	(??___fladd+3)& (0+255),7,b
  8492  0013FA  D02C               	goto	l922
  8493  0013FC  51B1               	movf	(??___fladd+3)& (0+255),w,b
  8494  0013FE  E104               	bnz	u4760
  8495  001400  0E1A               	movlw	26
  8496  001402  5DB0               	subwf	(??___fladd+2)& (0+255),w,b
  8497  001404  A0D8               	btfss	status,0,c
  8498  001406  D026               	goto	l922
  8499  001408                     u4760:
  8500                           
  8501                           ; BSR set to: 0
  8502  001408  51A6               	movf	___fladd@b& (0+255),w,b
  8503  00140A  11A7               	iorwf	(___fladd@b+1)& (0+255),w,b
  8504  00140C  11A8               	iorwf	(___fladd@b+2)& (0+255),w,b
  8505  00140E  11A9               	iorwf	(___fladd@b+3)& (0+255),w,b
  8506  001410  B4D8               	btfsc	status,2,c
  8507  001412  D002               	goto	u4770
  8508  001414  0E01               	movlw	1
  8509  001416  D001               	goto	u4780
  8510  001418                     u4770:
  8511  001418  0E00               	movlw	0
  8512  00141A                     u4780:
  8513  00141A  6FB9               	movwf	___fladd@grs& (0+255),b
  8514                           
  8515                           ; BSR set to: 0
  8516  00141C  0E00               	movlw	0
  8517  00141E  6FA6               	movwf	___fladd@b& (0+255),b
  8518  001420  0E00               	movlw	0
  8519  001422  6FA7               	movwf	(___fladd@b+1)& (0+255),b
  8520  001424  0E00               	movlw	0
  8521  001426  6FA8               	movwf	(___fladd@b+2)& (0+255),b
  8522  001428  0E00               	movlw	0
  8523  00142A  6FA9               	movwf	(___fladd@b+3)& (0+255),b
  8524                           
  8525                           ; BSR set to: 0
  8526  00142C  C0B7  F0B8         	movff	___fladd@aexp,___fladd@bexp
  8527  001430  D015               	goto	u4810
  8528  001432                     l923:
  8529                           
  8530                           ; BSR set to: 0
  8531  001432  A1B9               	btfss	___fladd@grs& (0+255),0,b
  8532  001434  D005               	goto	l924
  8533                           
  8534                           ; BSR set to: 0
  8535  001436  90D8               	bcf	status,0,c
  8536  001438  31B9               	rrcf	___fladd@grs& (0+255),w,b
  8537  00143A  0901               	iorlw	1
  8538  00143C  6FB9               	movwf	___fladd@grs& (0+255),b
  8539  00143E  D002               	goto	l925
  8540  001440                     l924:
  8541                           
  8542                           ; BSR set to: 0
  8543                           
  8544                           ; BSR set to: 0
  8545  001440  90D8               	bcf	status,0,c
  8546  001442  33B9               	rrcf	___fladd@grs& (0+255),f,b
  8547  001444                     l925:
  8548                           
  8549                           ; BSR set to: 0
  8550                           
  8551                           ; BSR set to: 0
  8552  001444  B1A6               	btfsc	___fladd@b& (0+255),0,b
  8553                           
  8554                           ; BSR set to: 0
  8555  001446  8FB9               	bsf	___fladd@grs& (0+255),7,b
  8556                           
  8557                           ; BSR set to: 0
  8558                           
  8559                           ; BSR set to: 0
  8560  001448  35A9               	rlcf	(___fladd@b+3)& (0+255),w,b
  8561  00144A  33A9               	rrcf	(___fladd@b+3)& (0+255),f,b
  8562  00144C  33A8               	rrcf	(___fladd@b+2)& (0+255),f,b
  8563  00144E  33A7               	rrcf	(___fladd@b+1)& (0+255),f,b
  8564  001450  33A6               	rrcf	___fladd@b& (0+255),f,b
  8565                           
  8566                           ; BSR set to: 0
  8567  001452  2BB8               	incf	___fladd@bexp& (0+255),f,b
  8568  001454                     l922:
  8569                           
  8570                           ; BSR set to: 0
  8571  001454  51B7               	movf	___fladd@aexp& (0+255),w,b
  8572  001456  5DB8               	subwf	___fladd@bexp& (0+255),w,b
  8573  001458  A0D8               	btfss	status,0,c
  8574  00145A  D7EB               	goto	l923
  8575  00145C                     u4810:
  8576                           
  8577                           ; BSR set to: 0
  8578                           
  8579                           ; BSR set to: 0
  8580  00145C  BDB6               	btfsc	___fladd@signs& (0+255),6,b
  8581  00145E  D029               	goto	l928
  8582                           
  8583                           ; BSR set to: 0
  8584  001460  51B8               	movf	___fladd@bexp& (0+255),w,b
  8585  001462  A4D8               	btfss	status,2,c
  8586  001464  D009               	goto	l929
  8587                           
  8588                           ; BSR set to: 0
  8589  001466  0E00               	movlw	0
  8590  001468  6FA6               	movwf	?___fladd& (0+255),b
  8591  00146A  0E00               	movlw	0
  8592  00146C  6FA7               	movwf	(?___fladd+1)& (0+255),b
  8593  00146E  0E00               	movlw	0
  8594  001470  6FA8               	movwf	(?___fladd+2)& (0+255),b
  8595  001472  0E00               	movlw	0
  8596  001474  6FA9               	movwf	(?___fladd+3)& (0+255),b
  8597                           
  8598                           ; BSR set to: 0
  8599  001476  0012               	return	
  8600  001478                     l929:
  8601                           
  8602                           ; BSR set to: 0
  8603                           
  8604                           ; BSR set to: 0
  8605  001478  51AA               	movf	___fladd@a& (0+255),w,b
  8606  00147A  27A6               	addwf	___fladd@b& (0+255),f,b
  8607  00147C  51AB               	movf	(___fladd@a+1)& (0+255),w,b
  8608  00147E  23A7               	addwfc	(___fladd@b+1)& (0+255),f,b
  8609  001480  51AC               	movf	(___fladd@a+2)& (0+255),w,b
  8610  001482  23A8               	addwfc	(___fladd@b+2)& (0+255),f,b
  8611  001484  51AD               	movf	(___fladd@a+3)& (0+255),w,b
  8612  001486  23A9               	addwfc	(___fladd@b+3)& (0+255),f,b
  8613                           
  8614                           ; BSR set to: 0
  8615  001488  A1A9               	btfss	(___fladd@b+3)& (0+255),0,b
  8616  00148A  D083               	goto	u4940
  8617                           
  8618                           ; BSR set to: 0
  8619  00148C  A1B9               	btfss	___fladd@grs& (0+255),0,b
  8620  00148E  D006               	goto	l932
  8621                           
  8622                           ; BSR set to: 0
  8623  001490  90D8               	bcf	status,0,c
  8624  001492  33B9               	rrcf	___fladd@grs& (0+255),f,b
  8625  001494  51B9               	movf	___fladd@grs& (0+255),w,b
  8626  001496  0901               	iorlw	1
  8627  001498  6FB9               	movwf	___fladd@grs& (0+255),b
  8628  00149A  D002               	goto	l933
  8629  00149C                     l932:
  8630                           
  8631                           ; BSR set to: 0
  8632                           
  8633                           ; BSR set to: 0
  8634  00149C  90D8               	bcf	status,0,c
  8635  00149E  33B9               	rrcf	___fladd@grs& (0+255),f,b
  8636  0014A0                     l933:
  8637                           
  8638                           ; BSR set to: 0
  8639                           
  8640                           ; BSR set to: 0
  8641  0014A0  B1A6               	btfsc	___fladd@b& (0+255),0,b
  8642                           
  8643                           ; BSR set to: 0
  8644  0014A2  8FB9               	bsf	___fladd@grs& (0+255),7,b
  8645                           
  8646                           ; BSR set to: 0
  8647                           
  8648                           ; BSR set to: 0
  8649  0014A4  35A9               	rlcf	(___fladd@b+3)& (0+255),w,b
  8650  0014A6  33A9               	rrcf	(___fladd@b+3)& (0+255),f,b
  8651  0014A8  33A8               	rrcf	(___fladd@b+2)& (0+255),f,b
  8652  0014AA  33A7               	rrcf	(___fladd@b+1)& (0+255),f,b
  8653  0014AC  33A6               	rrcf	___fladd@b& (0+255),f,b
  8654                           
  8655                           ; BSR set to: 0
  8656  0014AE  2BB8               	incf	___fladd@bexp& (0+255),f,b
  8657                           
  8658                           ; BSR set to: 0
  8659  0014B0  D070               	goto	u4940
  8660  0014B2                     l928:
  8661                           
  8662                           ; BSR set to: 0
  8663                           
  8664                           ; BSR set to: 0
  8665  0014B2  51AA               	movf	___fladd@a& (0+255),w,b
  8666  0014B4  5DA6               	subwf	___fladd@b& (0+255),w,b
  8667  0014B6  51AB               	movf	(___fladd@a+1)& (0+255),w,b
  8668  0014B8  59A7               	subwfb	(___fladd@b+1)& (0+255),w,b
  8669  0014BA  51AC               	movf	(___fladd@a+2)& (0+255),w,b
  8670  0014BC  59A8               	subwfb	(___fladd@b+2)& (0+255),w,b
  8671  0014BE  51A9               	movf	(___fladd@b+3)& (0+255),w,b
  8672  0014C0  0A80               	xorlw	128
  8673  0014C2  6FAE               	movwf	??___fladd& (0+255),b
  8674  0014C4  51AD               	movf	(___fladd@a+3)& (0+255),w,b
  8675  0014C6  0A80               	xorlw	128
  8676  0014C8  59AE               	subwfb	??___fladd& (0+255),w,b
  8677  0014CA  B0D8               	btfsc	status,0,c
  8678  0014CC  D036               	goto	l936
  8679                           
  8680                           ; BSR set to: 0
  8681  0014CE  C0A6  F0AE         	movff	___fladd@b,??___fladd
  8682  0014D2  C0A7  F0AF         	movff	___fladd@b+1,??___fladd+1
  8683  0014D6  C0A8  F0B0         	movff	___fladd@b+2,??___fladd+2
  8684  0014DA  C0A9  F0B1         	movff	___fladd@b+3,??___fladd+3
  8685  0014DE  1FAE               	comf	??___fladd& (0+255),f,b
  8686  0014E0  1FAF               	comf	(??___fladd+1)& (0+255),f,b
  8687  0014E2  1FB0               	comf	(??___fladd+2)& (0+255),f,b
  8688  0014E4  1FB1               	comf	(??___fladd+3)& (0+255),f,b
  8689  0014E6  2BAE               	incf	??___fladd& (0+255),f,b
  8690  0014E8  0E00               	movlw	0
  8691  0014EA  23AF               	addwfc	(??___fladd+1)& (0+255),f,b
  8692  0014EC  23B0               	addwfc	(??___fladd+2)& (0+255),f,b
  8693  0014EE  23B1               	addwfc	(??___fladd+3)& (0+255),f,b
  8694  0014F0  51AA               	movf	___fladd@a& (0+255),w,b
  8695  0014F2  25AE               	addwf	??___fladd& (0+255),w,b
  8696  0014F4  6FB2               	movwf	(??___fladd+4)& (0+255),b
  8697  0014F6  51AB               	movf	(___fladd@a+1)& (0+255),w,b
  8698  0014F8  21AF               	addwfc	(??___fladd+1)& (0+255),w,b
  8699  0014FA  6FB3               	movwf	(??___fladd+5)& (0+255),b
  8700  0014FC  51AC               	movf	(___fladd@a+2)& (0+255),w,b
  8701  0014FE  21B0               	addwfc	(??___fladd+2)& (0+255),w,b
  8702  001500  6FB4               	movwf	(??___fladd+6)& (0+255),b
  8703  001502  51AD               	movf	(___fladd@a+3)& (0+255),w,b
  8704  001504  21B1               	addwfc	(??___fladd+3)& (0+255),w,b
  8705  001506  6FB5               	movwf	(??___fladd+7)& (0+255),b
  8706  001508  0EFF               	movlw	255
  8707  00150A  25B2               	addwf	(??___fladd+4)& (0+255),w,b
  8708  00150C  6FA6               	movwf	___fladd@b& (0+255),b
  8709  00150E  0EFF               	movlw	255
  8710  001510  21B3               	addwfc	(??___fladd+5)& (0+255),w,b
  8711  001512  6FA7               	movwf	(___fladd@b+1)& (0+255),b
  8712  001514  0EFF               	movlw	255
  8713  001516  21B4               	addwfc	(??___fladd+6)& (0+255),w,b
  8714  001518  6FA8               	movwf	(___fladd@b+2)& (0+255),b
  8715  00151A  0EFF               	movlw	255
  8716  00151C  21B5               	addwfc	(??___fladd+7)& (0+255),w,b
  8717  00151E  6FA9               	movwf	(___fladd@b+3)& (0+255),b
  8718  001520  0E80               	movlw	128
  8719  001522  1BB6               	xorwf	___fladd@signs& (0+255),f,b
  8720                           
  8721                           ; BSR set to: 0
  8722  001524  6DB9               	negf	___fladd@grs& (0+255),b
  8723                           
  8724                           ; BSR set to: 0
  8725  001526  51B9               	movf	___fladd@grs& (0+255),w,b
  8726  001528  A4D8               	btfss	status,2,c
  8727  00152A  D00F               	goto	l938
  8728                           
  8729                           ; BSR set to: 0
  8730  00152C  0E01               	movlw	1
  8731  00152E  27A6               	addwf	___fladd@b& (0+255),f,b
  8732  001530  0E00               	movlw	0
  8733  001532  23A7               	addwfc	(___fladd@b+1)& (0+255),f,b
  8734  001534  23A8               	addwfc	(___fladd@b+2)& (0+255),f,b
  8735  001536  23A9               	addwfc	(___fladd@b+3)& (0+255),f,b
  8736                           
  8737                           ; BSR set to: 0
  8738  001538  D008               	goto	l938
  8739  00153A                     l936:
  8740                           
  8741                           ; BSR set to: 0
  8742                           
  8743                           ; BSR set to: 0
  8744  00153A  51AA               	movf	___fladd@a& (0+255),w,b
  8745  00153C  5FA6               	subwf	___fladd@b& (0+255),f,b
  8746  00153E  51AB               	movf	(___fladd@a+1)& (0+255),w,b
  8747  001540  5BA7               	subwfb	(___fladd@b+1)& (0+255),f,b
  8748  001542  51AC               	movf	(___fladd@a+2)& (0+255),w,b
  8749  001544  5BA8               	subwfb	(___fladd@b+2)& (0+255),f,b
  8750  001546  51AD               	movf	(___fladd@a+3)& (0+255),w,b
  8751  001548  5BA9               	subwfb	(___fladd@b+3)& (0+255),f,b
  8752  00154A                     l938:
  8753                           
  8754                           ; BSR set to: 0
  8755  00154A  51A6               	movf	___fladd@b& (0+255),w,b
  8756  00154C  11A7               	iorwf	(___fladd@b+1)& (0+255),w,b
  8757  00154E  11A8               	iorwf	(___fladd@b+2)& (0+255),w,b
  8758  001550  11A9               	iorwf	(___fladd@b+3)& (0+255),w,b
  8759  001552  A4D8               	btfss	status,2,c
  8760  001554  D01C               	goto	l945
  8761                           
  8762                           ; BSR set to: 0
  8763  001556  51B9               	movf	___fladd@grs& (0+255),w,b
  8764  001558  A4D8               	btfss	status,2,c
  8765  00155A  D019               	goto	l945
  8766                           
  8767                           ; BSR set to: 0
  8768  00155C  0E00               	movlw	0
  8769  00155E  6FA6               	movwf	?___fladd& (0+255),b
  8770  001560  0E00               	movlw	0
  8771  001562  6FA7               	movwf	(?___fladd+1)& (0+255),b
  8772  001564  0E00               	movlw	0
  8773  001566  6FA8               	movwf	(?___fladd+2)& (0+255),b
  8774  001568  0E00               	movlw	0
  8775  00156A  6FA9               	movwf	(?___fladd+3)& (0+255),b
  8776                           
  8777                           ; BSR set to: 0
  8778  00156C  0012               	return	
  8779  00156E                     
  8780                           ; BSR set to: 0
  8781                           
  8782                           ; BSR set to: 0
  8783  00156E  90D8               	bcf	status,0,c
  8784  001570  37A6               	rlcf	___fladd@b& (0+255),f,b
  8785  001572  37A7               	rlcf	(___fladd@b+1)& (0+255),f,b
  8786  001574  37A8               	rlcf	(___fladd@b+2)& (0+255),f,b
  8787  001576  37A9               	rlcf	(___fladd@b+3)& (0+255),f,b
  8788                           
  8789                           ; BSR set to: 0
  8790  001578  BFB9               	btfsc	___fladd@grs& (0+255),7,b
  8791                           
  8792                           ; BSR set to: 0
  8793  00157A  81A6               	bsf	___fladd@b& (0+255),0,b
  8794                           
  8795                           ; BSR set to: 0
  8796                           
  8797                           ; BSR set to: 0
  8798  00157C  A1B9               	btfss	___fladd@grs& (0+255),0,b
  8799  00157E  D002               	goto	l943
  8800                           
  8801                           ; BSR set to: 0
  8802  001580  80D8               	bsf	status,0,c
  8803  001582  D001               	goto	L12
  8804  001584                     l943:
  8805                           
  8806                           ; BSR set to: 0
  8807                           
  8808                           ; BSR set to: 0
  8809  001584  90D8               	bcf	status,0,c
  8810  001586                     L12:
  8811  001586  37B9               	rlcf	___fladd@grs& (0+255),f,b
  8812                           
  8813                           ; BSR set to: 0
  8814                           
  8815                           ; BSR set to: 0
  8816  001588  51B8               	movf	___fladd@bexp& (0+255),w,b
  8817  00158A  A4D8               	btfss	status,2,c
  8818                           
  8819                           ; BSR set to: 0
  8820  00158C  07B8               	decf	___fladd@bexp& (0+255),f,b
  8821  00158E                     l945:
  8822                           
  8823                           ; BSR set to: 0
  8824                           
  8825                           ; BSR set to: 0
  8826                           
  8827                           ; BSR set to: 0
  8828  00158E  AFA8               	btfss	(___fladd@b+2)& (0+255),7,b
  8829  001590  D7EE               	goto	l941
  8830  001592                     u4940:
  8831                           
  8832                           ; BSR set to: 0
  8833                           
  8834                           ; BSR set to: 0
  8835                           
  8836                           ; BSR set to: 0
  8837  001592  0E00               	movlw	0
  8838  001594  6FB7               	movwf	___fladd@aexp& (0+255),b
  8839                           
  8840                           ; BSR set to: 0
  8841  001596  AFB9               	btfss	___fladd@grs& (0+255),7,b
  8842  001598  D00A               	goto	l950
  8843                           
  8844                           ; BSR set to: 0
  8845  00159A  C0B9  F0AE         	movff	___fladd@grs,??___fladd
  8846  00159E  0E7F               	movlw	127
  8847  0015A0  17AE               	andwf	??___fladd& (0+255),f,b
  8848  0015A2  A4D8               	btfss	status,2,c
  8849  0015A4  D002               	goto	u4970
  8850                           
  8851                           ; BSR set to: 0
  8852                           
  8853                           ; BSR set to: 0
  8854  0015A6  A1A6               	btfss	___fladd@b& (0+255),0,b
  8855  0015A8  D002               	goto	l950
  8856  0015AA                     u4970:
  8857                           
  8858                           ; BSR set to: 0
  8859  0015AA  0E01               	movlw	1
  8860  0015AC  6FB7               	movwf	___fladd@aexp& (0+255),b
  8861  0015AE                     l950:
  8862                           
  8863                           ; BSR set to: 0
  8864                           
  8865                           ; BSR set to: 0
  8866                           
  8867                           ; BSR set to: 0
  8868  0015AE  51B7               	movf	___fladd@aexp& (0+255),w,b
  8869  0015B0  B4D8               	btfsc	status,2,c
  8870  0015B2  D020               	goto	l953
  8871                           
  8872                           ; BSR set to: 0
  8873  0015B4  0E01               	movlw	1
  8874  0015B6  27A6               	addwf	___fladd@b& (0+255),f,b
  8875  0015B8  0E00               	movlw	0
  8876  0015BA  23A7               	addwfc	(___fladd@b+1)& (0+255),f,b
  8877  0015BC  23A8               	addwfc	(___fladd@b+2)& (0+255),f,b
  8878  0015BE  23A9               	addwfc	(___fladd@b+3)& (0+255),f,b
  8879                           
  8880                           ; BSR set to: 0
  8881  0015C0  A1A9               	btfss	(___fladd@b+3)& (0+255),0,b
  8882  0015C2  D018               	goto	l953
  8883                           
  8884                           ; BSR set to: 0
  8885  0015C4  C0A6  F0AE         	movff	___fladd@b,??___fladd
  8886  0015C8  C0A7  F0AF         	movff	___fladd@b+1,??___fladd+1
  8887  0015CC  C0A8  F0B0         	movff	___fladd@b+2,??___fladd+2
  8888  0015D0  C0A9  F0B1         	movff	___fladd@b+3,??___fladd+3
  8889  0015D4  35B1               	rlcf	(??___fladd+3)& (0+255),w,b
  8890  0015D6  33B1               	rrcf	(??___fladd+3)& (0+255),f,b
  8891  0015D8  33B0               	rrcf	(??___fladd+2)& (0+255),f,b
  8892  0015DA  33AF               	rrcf	(??___fladd+1)& (0+255),f,b
  8893  0015DC  33AE               	rrcf	??___fladd& (0+255),f,b
  8894  0015DE  C0AE  F0A6         	movff	??___fladd,___fladd@b
  8895  0015E2  C0AF  F0A7         	movff	??___fladd+1,___fladd@b+1
  8896  0015E6  C0B0  F0A8         	movff	??___fladd+2,___fladd@b+2
  8897  0015EA  C0B1  F0A9         	movff	??___fladd+3,___fladd@b+3
  8898  0015EE  29B8               	incf	___fladd@bexp& (0+255),w,b
  8899  0015F0  A4D8               	btfss	status,2,c
  8900                           
  8901                           ; BSR set to: 0
  8902  0015F2  2BB8               	incf	___fladd@bexp& (0+255),f,b
  8903  0015F4                     l953:
  8904                           
  8905                           ; BSR set to: 0
  8906                           
  8907                           ; BSR set to: 0
  8908                           
  8909                           ; BSR set to: 0
  8910                           
  8911                           ; BSR set to: 0
  8912  0015F4  29B8               	incf	___fladd@bexp& (0+255),w,b
  8913  0015F6  B4D8               	btfsc	status,2,c
  8914  0015F8  D003               	goto	u5020
  8915                           
  8916                           ; BSR set to: 0
  8917  0015FA  51B8               	movf	___fladd@bexp& (0+255),w,b
  8918  0015FC  A4D8               	btfss	status,2,c
  8919  0015FE  D00D               	goto	l957
  8920  001600                     u5020:
  8921                           
  8922                           ; BSR set to: 0
  8923                           
  8924                           ; BSR set to: 0
  8925  001600  0E00               	movlw	0
  8926  001602  6FA6               	movwf	___fladd@b& (0+255),b
  8927  001604  0E00               	movlw	0
  8928  001606  6FA7               	movwf	(___fladd@b+1)& (0+255),b
  8929  001608  0E00               	movlw	0
  8930  00160A  6FA8               	movwf	(___fladd@b+2)& (0+255),b
  8931  00160C  0E00               	movlw	0
  8932  00160E  6FA9               	movwf	(___fladd@b+3)& (0+255),b
  8933  001610  51B8               	movf	___fladd@bexp& (0+255),w,b
  8934  001612  A4D8               	btfss	status,2,c
  8935  001614  D002               	goto	l957
  8936                           
  8937                           ; BSR set to: 0
  8938  001616  0E00               	movlw	0
  8939  001618  6FB6               	movwf	___fladd@signs& (0+255),b
  8940  00161A                     l957:
  8941                           
  8942                           ; BSR set to: 0
  8943                           
  8944                           ; BSR set to: 0
  8945                           
  8946                           ; BSR set to: 0
  8947  00161A  A1B8               	btfss	___fladd@bexp& (0+255),0,b
  8948  00161C  D002               	goto	l958
  8949                           
  8950                           ; BSR set to: 0
  8951  00161E  8FA8               	bsf	(___fladd@b+2)& (0+255),7,b
  8952  001620  D001               	goto	l959
  8953  001622                     l958:
  8954                           
  8955                           ; BSR set to: 0
  8956                           
  8957                           ; BSR set to: 0
  8958  001622  9FA8               	bcf	(___fladd@b+2)& (0+255),7,b
  8959  001624                     l959:
  8960                           
  8961                           ; BSR set to: 0
  8962                           
  8963                           ; BSR set to: 0
  8964  001624  90D8               	bcf	status,0,c
  8965  001626  31B8               	rrcf	___fladd@bexp& (0+255),w,b
  8966  001628  6FA9               	movwf	(___fladd@b+3)& (0+255),b
  8967                           
  8968                           ; BSR set to: 0
  8969  00162A  BFB6               	btfsc	___fladd@signs& (0+255),7,b
  8970                           
  8971                           ; BSR set to: 0
  8972  00162C  8FA9               	bsf	(___fladd@b+3)& (0+255),7,b
  8973                           
  8974                           ; BSR set to: 0
  8975                           
  8976                           ; BSR set to: 0
  8977  00162E  C0A6  F0A6         	movff	___fladd@b,?___fladd
  8978  001632  C0A7  F0A7         	movff	___fladd@b+1,?___fladd+1
  8979  001636  C0A8  F0A8         	movff	___fladd@b+2,?___fladd+2
  8980  00163A  C0A9  F0A9         	movff	___fladd@b+3,?___fladd+3
  8981  00163E  0012               	return	
  8982  001640                     __end_of___fladd:
  8983                           	opt stack 0
  8984                           tblptru	equ	0xFF8
  8985                           tblptrh	equ	0xFF7
  8986                           tblptrl	equ	0xFF6
  8987                           tablat	equ	0xFF5
  8988                           prodh	equ	0xFF4
  8989                           prodl	equ	0xFF3
  8990                           intcon	equ	0xFF2
  8991                           intcon2	equ	0xFF1
  8992                           intcon3	equ	0xFF0
  8993                           postinc0	equ	0xFEE
  8994                           wreg	equ	0xFE8
  8995                           indf1	equ	0xFE7
  8996                           postdec1	equ	0xFE5
  8997                           fsr1h	equ	0xFE2
  8998                           fsr1l	equ	0xFE1
  8999                           indf2	equ	0xFDF
  9000                           postinc2	equ	0xFDE
  9001                           postdec2	equ	0xFDD
  9002                           fsr2h	equ	0xFDA
  9003                           fsr2l	equ	0xFD9
  9004                           status	equ	0xFD8
  9005                           
  9006 ;; *************** function ___flneg *****************
  9007 ;; Defined at:
  9008 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flneg.c"
  9009 ;; Parameters:    Size  Location     Type
  9010 ;;  f1              4   26[COMRAM] unsigned char 
  9011 ;; Auto vars:     Size  Location     Type
  9012 ;;		None
  9013 ;; Return value:  Size  Location     Type
  9014 ;;                  4   26[COMRAM] unsigned char 
  9015 ;; Registers used:
  9016 ;;		wreg, status,2, status,0
  9017 ;; Tracked objects:
  9018 ;;		On entry : 0/0
  9019 ;;		On exit  : 0/0
  9020 ;;		Unchanged: 0/0
  9021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9022 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9025 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9026 ;;Total ram usage:        4 bytes
  9027 ;; Hardware stack levels used:    1
  9028 ;; Hardware stack levels required when called:    2
  9029 ;; This function calls:
  9030 ;;		Nothing
  9031 ;; This function is called by:
  9032 ;;		_sprintf
  9033 ;;		_set_pwm1_general
  9034 ;; This function uses a non-reentrant model
  9035 ;;
  9036                           
  9037                           	psect	text28
  9038  002BE4                     __ptext28:
  9039                           	opt stack 0
  9040  002BE4                     ___flneg:
  9041                           	opt stack 26
  9042                           
  9043                           ; BSR set to: 0
  9044                           ;incstack = 0
  9045  002BE4  501B               	movf	___flneg@f1,w,c
  9046  002BE6  101C               	iorwf	___flneg@f1+1,w,c
  9047  002BE8  101D               	iorwf	___flneg@f1+2,w,c
  9048  002BEA  101E               	iorwf	___flneg@f1+3,w,c
  9049  002BEC  B4D8               	btfsc	status,2,c
  9050  002BEE  D008               	goto	l662
  9051  002BF0  0E00               	movlw	0
  9052  002BF2  1A1B               	xorwf	___flneg@f1,f,c
  9053  002BF4  0E00               	movlw	0
  9054  002BF6  1A1C               	xorwf	___flneg@f1+1,f,c
  9055  002BF8  0E00               	movlw	0
  9056  002BFA  1A1D               	xorwf	___flneg@f1+2,f,c
  9057  002BFC  0E80               	movlw	128
  9058  002BFE  1A1E               	xorwf	___flneg@f1+3,f,c
  9059  002C00                     l662:
  9060  002C00  C01B  F01B         	movff	___flneg@f1,?___flneg
  9061  002C04  C01C  F01C         	movff	___flneg@f1+1,?___flneg+1
  9062  002C08  C01D  F01D         	movff	___flneg@f1+2,?___flneg+2
  9063  002C0C  C01E  F01E         	movff	___flneg@f1+3,?___flneg+3
  9064  002C10  0012               	return	
  9065  002C12                     __end_of___flneg:
  9066                           	opt stack 0
  9067                           tblptru	equ	0xFF8
  9068                           tblptrh	equ	0xFF7
  9069                           tblptrl	equ	0xFF6
  9070                           tablat	equ	0xFF5
  9071                           prodh	equ	0xFF4
  9072                           prodl	equ	0xFF3
  9073                           intcon	equ	0xFF2
  9074                           intcon2	equ	0xFF1
  9075                           intcon3	equ	0xFF0
  9076                           postinc0	equ	0xFEE
  9077                           wreg	equ	0xFE8
  9078                           indf1	equ	0xFE7
  9079                           postdec1	equ	0xFE5
  9080                           fsr1h	equ	0xFE2
  9081                           fsr1l	equ	0xFE1
  9082                           indf2	equ	0xFDF
  9083                           postinc2	equ	0xFDE
  9084                           postdec2	equ	0xFDD
  9085                           fsr2h	equ	0xFDA
  9086                           fsr2l	equ	0xFD9
  9087                           status	equ	0xFD8
  9088                           
  9089 ;; *************** function ___flge *****************
  9090 ;; Defined at:
  9091 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flge.c"
  9092 ;; Parameters:    Size  Location     Type
  9093 ;;  ff1             4   26[COMRAM] unsigned char 
  9094 ;;  ff2             4   30[COMRAM] unsigned char 
  9095 ;; Auto vars:     Size  Location     Type
  9096 ;;		None
  9097 ;; Return value:  Size  Location     Type
  9098 ;;		None               void
  9099 ;; Registers used:
  9100 ;;		wreg, status,2, status,0
  9101 ;; Tracked objects:
  9102 ;;		On entry : 0/0
  9103 ;;		On exit  : 0/0
  9104 ;;		Unchanged: 0/0
  9105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9106 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9108 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9109 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9110 ;;Total ram usage:       12 bytes
  9111 ;; Hardware stack levels used:    1
  9112 ;; Hardware stack levels required when called:    2
  9113 ;; This function calls:
  9114 ;;		Nothing
  9115 ;; This function is called by:
  9116 ;;		_sprintf
  9117 ;; This function uses a non-reentrant model
  9118 ;;
  9119                           
  9120                           	psect	text29
  9121  002250                     __ptext29:
  9122                           	opt stack 0
  9123  002250                     ___flge:
  9124                           	opt stack 26
  9125                           
  9126                           ;incstack = 0
  9127  002250  0E00               	movlw	0
  9128  002252  141B               	andwf	___flge@ff1,w,c
  9129  002254  6E23               	movwf	??___flge& (0+255),c
  9130  002256  0E00               	movlw	0
  9131  002258  141C               	andwf	___flge@ff1+1,w,c
  9132  00225A  6E24               	movwf	(??___flge+1)& (0+255),c
  9133  00225C  0E80               	movlw	128
  9134  00225E  141D               	andwf	___flge@ff1+2,w,c
  9135  002260  6E25               	movwf	(??___flge+2)& (0+255),c
  9136  002262  0E7F               	movlw	127
  9137  002264  141E               	andwf	___flge@ff1+3,w,c
  9138  002266  6E26               	movwf	(??___flge+3)& (0+255),c
  9139  002268  5023               	movf	??___flge,w,c
  9140  00226A  1024               	iorwf	??___flge+1,w,c
  9141  00226C  1025               	iorwf	??___flge+2,w,c
  9142  00226E  1026               	iorwf	??___flge+3,w,c
  9143  002270  A4D8               	btfss	status,2,c
  9144  002272  D008               	goto	l655
  9145  002274  0E00               	movlw	0
  9146  002276  6E1B               	movwf	___flge@ff1,c
  9147  002278  0E00               	movlw	0
  9148  00227A  6E1C               	movwf	___flge@ff1+1,c
  9149  00227C  0E00               	movlw	0
  9150  00227E  6E1D               	movwf	___flge@ff1+2,c
  9151  002280  0E00               	movlw	0
  9152  002282  6E1E               	movwf	___flge@ff1+3,c
  9153  002284                     l655:
  9154  002284  0E00               	movlw	0
  9155  002286  141F               	andwf	___flge@ff2,w,c
  9156  002288  6E23               	movwf	??___flge& (0+255),c
  9157  00228A  0E00               	movlw	0
  9158  00228C  1420               	andwf	___flge@ff2+1,w,c
  9159  00228E  6E24               	movwf	(??___flge+1)& (0+255),c
  9160  002290  0E80               	movlw	128
  9161  002292  1421               	andwf	___flge@ff2+2,w,c
  9162  002294  6E25               	movwf	(??___flge+2)& (0+255),c
  9163  002296  0E7F               	movlw	127
  9164  002298  1422               	andwf	___flge@ff2+3,w,c
  9165  00229A  6E26               	movwf	(??___flge+3)& (0+255),c
  9166  00229C  5023               	movf	??___flge,w,c
  9167  00229E  1024               	iorwf	??___flge+1,w,c
  9168  0022A0  1025               	iorwf	??___flge+2,w,c
  9169  0022A2  1026               	iorwf	??___flge+3,w,c
  9170  0022A4  A4D8               	btfss	status,2,c
  9171  0022A6  D008               	goto	l656
  9172  0022A8  0E00               	movlw	0
  9173  0022AA  6E1F               	movwf	___flge@ff2,c
  9174  0022AC  0E00               	movlw	0
  9175  0022AE  6E20               	movwf	___flge@ff2+1,c
  9176  0022B0  0E00               	movlw	0
  9177  0022B2  6E21               	movwf	___flge@ff2+2,c
  9178  0022B4  0E00               	movlw	0
  9179  0022B6  6E22               	movwf	___flge@ff2+3,c
  9180  0022B8                     l656:
  9181  0022B8  AE1E               	btfss	___flge@ff1+3,7,c
  9182  0022BA  D01D               	goto	l657
  9183  0022BC  C01B  F023         	movff	___flge@ff1,??___flge
  9184  0022C0  C01C  F024         	movff	___flge@ff1+1,??___flge+1
  9185  0022C4  C01D  F025         	movff	___flge@ff1+2,??___flge+2
  9186  0022C8  C01E  F026         	movff	___flge@ff1+3,??___flge+3
  9187  0022CC  1E23               	comf	??___flge,f,c
  9188  0022CE  1E24               	comf	??___flge+1,f,c
  9189  0022D0  1E25               	comf	??___flge+2,f,c
  9190  0022D2  1E26               	comf	??___flge+3,f,c
  9191  0022D4  2A23               	incf	??___flge,f,c
  9192  0022D6  0E00               	movlw	0
  9193  0022D8  2224               	addwfc	??___flge+1,f,c
  9194  0022DA  2225               	addwfc	??___flge+2,f,c
  9195  0022DC  2226               	addwfc	??___flge+3,f,c
  9196  0022DE  0E00               	movlw	0
  9197  0022E0  2423               	addwf	??___flge,w,c
  9198  0022E2  6E1B               	movwf	___flge@ff1,c
  9199  0022E4  0E00               	movlw	0
  9200  0022E6  2024               	addwfc	??___flge+1,w,c
  9201  0022E8  6E1C               	movwf	___flge@ff1+1,c
  9202  0022EA  0E00               	movlw	0
  9203  0022EC  2025               	addwfc	??___flge+2,w,c
  9204  0022EE  6E1D               	movwf	___flge@ff1+2,c
  9205  0022F0  0E80               	movlw	128
  9206  0022F2  2026               	addwfc	??___flge+3,w,c
  9207  0022F4  6E1E               	movwf	___flge@ff1+3,c
  9208  0022F6                     l657:
  9209  0022F6  AE22               	btfss	___flge@ff2+3,7,c
  9210  0022F8  D01D               	goto	l658
  9211  0022FA  C01F  F023         	movff	___flge@ff2,??___flge
  9212  0022FE  C020  F024         	movff	___flge@ff2+1,??___flge+1
  9213  002302  C021  F025         	movff	___flge@ff2+2,??___flge+2
  9214  002306  C022  F026         	movff	___flge@ff2+3,??___flge+3
  9215  00230A  1E23               	comf	??___flge,f,c
  9216  00230C  1E24               	comf	??___flge+1,f,c
  9217  00230E  1E25               	comf	??___flge+2,f,c
  9218  002310  1E26               	comf	??___flge+3,f,c
  9219  002312  2A23               	incf	??___flge,f,c
  9220  002314  0E00               	movlw	0
  9221  002316  2224               	addwfc	??___flge+1,f,c
  9222  002318  2225               	addwfc	??___flge+2,f,c
  9223  00231A  2226               	addwfc	??___flge+3,f,c
  9224  00231C  0E00               	movlw	0
  9225  00231E  2423               	addwf	??___flge,w,c
  9226  002320  6E1F               	movwf	___flge@ff2,c
  9227  002322  0E00               	movlw	0
  9228  002324  2024               	addwfc	??___flge+1,w,c
  9229  002326  6E20               	movwf	___flge@ff2+1,c
  9230  002328  0E00               	movlw	0
  9231  00232A  2025               	addwfc	??___flge+2,w,c
  9232  00232C  6E21               	movwf	___flge@ff2+2,c
  9233  00232E  0E80               	movlw	128
  9234  002330  2026               	addwfc	??___flge+3,w,c
  9235  002332  6E22               	movwf	___flge@ff2+3,c
  9236  002334                     l658:
  9237  002334  0E00               	movlw	0
  9238  002336  1A1B               	xorwf	___flge@ff1,f,c
  9239  002338  0E00               	movlw	0
  9240  00233A  1A1C               	xorwf	___flge@ff1+1,f,c
  9241  00233C  0E00               	movlw	0
  9242  00233E  1A1D               	xorwf	___flge@ff1+2,f,c
  9243  002340  0E80               	movlw	128
  9244  002342  1A1E               	xorwf	___flge@ff1+3,f,c
  9245  002344  0E00               	movlw	0
  9246  002346  1A1F               	xorwf	___flge@ff2,f,c
  9247  002348  0E00               	movlw	0
  9248  00234A  1A20               	xorwf	___flge@ff2+1,f,c
  9249  00234C  0E00               	movlw	0
  9250  00234E  1A21               	xorwf	___flge@ff2+2,f,c
  9251  002350  0E80               	movlw	128
  9252  002352  1A22               	xorwf	___flge@ff2+3,f,c
  9253  002354  501F               	movf	___flge@ff2,w,c
  9254  002356  5C1B               	subwf	___flge@ff1,w,c
  9255  002358  5020               	movf	___flge@ff2+1,w,c
  9256  00235A  581C               	subwfb	___flge@ff1+1,w,c
  9257  00235C  5021               	movf	___flge@ff2+2,w,c
  9258  00235E  581D               	subwfb	___flge@ff1+2,w,c
  9259  002360  5022               	movf	___flge@ff2+3,w,c
  9260  002362  581E               	subwfb	___flge@ff1+3,w,c
  9261  002364  B0D8               	btfsc	status,0,c
  9262  002366  D002               	goto	l4415
  9263  002368  90D8               	bcf	status,0,c
  9264  00236A  0012               	return	
  9265  00236C                     l4415:
  9266  00236C  80D8               	bsf	status,0,c
  9267  00236E  0012               	return	
  9268  002370                     __end_of___flge:
  9269                           	opt stack 0
  9270                           tblptru	equ	0xFF8
  9271                           tblptrh	equ	0xFF7
  9272                           tblptrl	equ	0xFF6
  9273                           tablat	equ	0xFF5
  9274                           prodh	equ	0xFF4
  9275                           prodl	equ	0xFF3
  9276                           intcon	equ	0xFF2
  9277                           intcon2	equ	0xFF1
  9278                           intcon3	equ	0xFF0
  9279                           postinc0	equ	0xFEE
  9280                           wreg	equ	0xFE8
  9281                           indf1	equ	0xFE7
  9282                           postdec1	equ	0xFE5
  9283                           fsr1h	equ	0xFE2
  9284                           fsr1l	equ	0xFE1
  9285                           indf2	equ	0xFDF
  9286                           postinc2	equ	0xFDE
  9287                           postdec2	equ	0xFDD
  9288                           fsr2h	equ	0xFDA
  9289                           fsr2l	equ	0xFD9
  9290                           status	equ	0xFD8
  9291                           
  9292 ;; *************** function _lcd_puts *****************
  9293 ;; Defined at:
  9294 ;;		line 120 in file "lcd_x8.c"
  9295 ;; Parameters:    Size  Location     Type
  9296 ;;  s               2   40[COMRAM] PTR unsigned char 
  9297 ;;		 -> STR_6(4), display@LCD(64), display@LCDP(64), 
  9298 ;; Auto vars:     Size  Location     Type
  9299 ;;		None
  9300 ;; Return value:  Size  Location     Type
  9301 ;;                  1    wreg      void 
  9302 ;; Registers used:
  9303 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9304 ;; Tracked objects:
  9305 ;;		On entry : 0/0
  9306 ;;		On exit  : 0/0
  9307 ;;		Unchanged: 0/0
  9308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9309 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9312 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9313 ;;Total ram usage:        2 bytes
  9314 ;; Hardware stack levels used:    1
  9315 ;; Hardware stack levels required when called:    7
  9316 ;; This function calls:
  9317 ;;		_lcd_putc
  9318 ;; This function is called by:
  9319 ;;		_display
  9320 ;; This function uses a non-reentrant model
  9321 ;;
  9322                           
  9323                           	psect	text30
  9324  00296C                     __ptext30:
  9325                           	opt stack 0
  9326  00296C                     _lcd_puts:
  9327                           	opt stack 22
  9328                           
  9329                           ;lcd_x8.c: 121: while (*s) {
  9330                           
  9331                           ;incstack = 0
  9332  00296C  D015               	goto	l200
  9333  00296E                     
  9334                           ;lcd_x8.c: 122: lcd_putc(*s);
  9335  00296E  C029  FFF6         	movff	lcd_puts@s,tblptrl
  9336  002972  C02A  FFF7         	movff	lcd_puts@s+1,tblptrh
  9337  002976  0E00               	movlw	low (__mediumconst shr (0+16))
  9338  002978  6EF8               	movwf	tblptru,c
  9339  00297A  0E0F               	movlw	(high __ramtop+-1)
  9340  00297C  64F7               	cpfsgt	tblptrh,c
  9341  00297E  D003               	bra	u4197
  9342  002980  0008               	tblrd		*
  9343  002982  50F5               	movf	tablat,w,c
  9344  002984  D005               	bra	u4190
  9345  002986                     u4197:
  9346  002986  CFF6 FFE1          	movff	tblptrl,fsr1l
  9347  00298A  CFF7 FFE2          	movff	tblptrh,fsr1h
  9348  00298E  50E7               	movf	indf1,w,c
  9349  002990                     u4190:
  9350  002990  ECE1  F014         	call	_lcd_putc
  9351                           
  9352                           ;lcd_x8.c: 123: s++;
  9353  002994  4A29               	infsnz	lcd_puts@s,f,c
  9354  002996  2A2A               	incf	lcd_puts@s+1,f,c
  9355  002998                     l200:
  9356  002998  C029  FFF6         	movff	lcd_puts@s,tblptrl
  9357  00299C  C02A  FFF7         	movff	lcd_puts@s+1,tblptrh
  9358  0029A0  0E00               	movlw	low (__mediumconst shr (0+16))
  9359  0029A2  6EF8               	movwf	tblptru,c
  9360  0029A4  0E0F               	movlw	(high __ramtop+-1)
  9361  0029A6  64F7               	cpfsgt	tblptrh,c
  9362  0029A8  D003               	bra	u4207
  9363  0029AA  0008               	tblrd		*
  9364  0029AC  50F5               	movf	tablat,w,c
  9365  0029AE  D005               	bra	u4200
  9366  0029B0                     u4207:
  9367  0029B0  CFF6 FFE1          	movff	tblptrl,fsr1l
  9368  0029B4  CFF7 FFE2          	movff	tblptrh,fsr1h
  9369  0029B8  50E7               	movf	indf1,w,c
  9370  0029BA                     u4200:
  9371  0029BA  0900               	iorlw	0
  9372  0029BC  B4D8               	btfsc	status,2,c
  9373  0029BE  0012               	return	
  9374  0029C0  D7D6               	goto	l201
  9375  0029C2                     __end_of_lcd_puts:
  9376                           	opt stack 0
  9377                           tblptru	equ	0xFF8
  9378                           tblptrh	equ	0xFF7
  9379                           tblptrl	equ	0xFF6
  9380                           tablat	equ	0xFF5
  9381                           prodh	equ	0xFF4
  9382                           prodl	equ	0xFF3
  9383                           intcon	equ	0xFF2
  9384                           intcon2	equ	0xFF1
  9385                           intcon3	equ	0xFF0
  9386                           postinc0	equ	0xFEE
  9387                           wreg	equ	0xFE8
  9388                           indf1	equ	0xFE7
  9389                           postdec1	equ	0xFE5
  9390                           fsr1h	equ	0xFE2
  9391                           fsr1l	equ	0xFE1
  9392                           indf2	equ	0xFDF
  9393                           postinc2	equ	0xFDE
  9394                           postdec2	equ	0xFDD
  9395                           fsr2h	equ	0xFDA
  9396                           fsr2l	equ	0xFD9
  9397                           status	equ	0xFD8
  9398                           
  9399 ;; *************** function _lcd_putc *****************
  9400 ;; Defined at:
  9401 ;;		line 106 in file "lcd_x8.c"
  9402 ;; Parameters:    Size  Location     Type
  9403 ;;  c               1    wreg     unsigned char 
  9404 ;; Auto vars:     Size  Location     Type
  9405 ;;  c               1   39[COMRAM] unsigned char 
  9406 ;; Return value:  Size  Location     Type
  9407 ;;                  1    wreg      void 
  9408 ;; Registers used:
  9409 ;;		wreg, status,2, status,0, cstack
  9410 ;; Tracked objects:
  9411 ;;		On entry : 0/0
  9412 ;;		On exit  : 0/0
  9413 ;;		Unchanged: 0/0
  9414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9416 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9418 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9419 ;;Total ram usage:        1 bytes
  9420 ;; Hardware stack levels used:    1
  9421 ;; Hardware stack levels required when called:    6
  9422 ;; This function calls:
  9423 ;;		_delay_ms
  9424 ;;		_lcd_gotoxy
  9425 ;;		_lcd_send_byte
  9426 ;; This function is called by:
  9427 ;;		_display
  9428 ;;		_main
  9429 ;;		_lcd_puts
  9430 ;; This function uses a non-reentrant model
  9431 ;;
  9432                           
  9433                           	psect	text31
  9434  0029C2                     __ptext31:
  9435                           	opt stack 0
  9436  0029C2                     _lcd_putc:
  9437                           	opt stack 24
  9438                           
  9439                           ;incstack = 0
  9440                           ;lcd_putc@c stored from wreg
  9441  0029C2  6E28               	movwf	lcd_putc@c,c
  9442                           
  9443                           ;lcd_x8.c: 107: switch (c) {
  9444  0029C4  D01E               	goto	l191
  9445  0029C6  0E01               	movlw	1
  9446  0029C8  6E23               	movwf	lcd_send_byte@n,c
  9447  0029CA  0E00               	movlw	0
  9448  0029CC  EC59  F015         	call	_lcd_send_byte
  9449                           
  9450                           ;lcd_x8.c: 109: delay_ms(2);
  9451  0029D0  0E00               	movlw	0
  9452  0029D2  6E1C               	movwf	delay_ms@n+1,c
  9453  0029D4  0E02               	movlw	2
  9454  0029D6  6E1B               	movwf	delay_ms@n,c
  9455  0029D8  EC33  F016         	call	_delay_ms	;wreg free
  9456                           
  9457                           ;lcd_x8.c: 110: break;
  9458  0029DC  0012               	return	
  9459  0029DE  0E02               	movlw	2
  9460  0029E0  6E25               	movwf	lcd_gotoxy@y,c
  9461  0029E2  0E01               	movlw	1
  9462  0029E4  EC7D  F015         	call	_lcd_gotoxy
  9463                           
  9464                           ;lcd_x8.c: 112: break;
  9465  0029E8  0012               	return	
  9466  0029EA  0E10               	movlw	16
  9467  0029EC  6E23               	movwf	lcd_send_byte@n,c
  9468  0029EE  0E00               	movlw	0
  9469  0029F0  EC59  F015         	call	_lcd_send_byte
  9470                           
  9471                           ;lcd_x8.c: 114: break;
  9472  0029F4  0012               	return	
  9473  0029F6  C028  F023         	movff	lcd_putc@c,lcd_send_byte@n
  9474  0029FA  0E01               	movlw	1
  9475  0029FC  EC59  F015         	call	_lcd_send_byte
  9476                           
  9477                           ;lcd_x8.c: 117: }
  9478                           
  9479                           ;lcd_x8.c: 116: break;
  9480  002A00  0012               	return	
  9481  002A02                     l191:
  9482  002A02  5028               	movf	lcd_putc@c,w,c
  9483                           
  9484                           ; Switch size 1, requested type "space"
  9485                           ; Number of cases is 3, Range of values is 8 to 12
  9486                           ; switch strategies available:
  9487                           ; Name         Instructions Cycles
  9488                           ; simple_byte           10     6 (average)
  9489                           ;	Chosen strategy is simple_byte
  9490  002A04  0A08               	xorlw	8	; case 8
  9491  002A06  B4D8               	btfsc	status,2,c
  9492  002A08  D7F0               	goto	l195
  9493  002A0A  0A02               	xorlw	2	; case 10
  9494  002A0C  B4D8               	btfsc	status,2,c
  9495  002A0E  D7E7               	goto	l194
  9496  002A10  0A06               	xorlw	6	; case 12
  9497  002A12  B4D8               	btfsc	status,2,c
  9498  002A14  D7D8               	goto	l192
  9499  002A16  D7EF               	goto	l196
  9500  002A18                     __end_of_lcd_putc:
  9501                           	opt stack 0
  9502                           tblptru	equ	0xFF8
  9503                           tblptrh	equ	0xFF7
  9504                           tblptrl	equ	0xFF6
  9505                           tablat	equ	0xFF5
  9506                           prodh	equ	0xFF4
  9507                           prodl	equ	0xFF3
  9508                           intcon	equ	0xFF2
  9509                           intcon2	equ	0xFF1
  9510                           intcon3	equ	0xFF0
  9511                           postinc0	equ	0xFEE
  9512                           wreg	equ	0xFE8
  9513                           indf1	equ	0xFE7
  9514                           postdec1	equ	0xFE5
  9515                           fsr1h	equ	0xFE2
  9516                           fsr1l	equ	0xFE1
  9517                           indf2	equ	0xFDF
  9518                           postinc2	equ	0xFDE
  9519                           postdec2	equ	0xFDD
  9520                           fsr2h	equ	0xFDA
  9521                           fsr2l	equ	0xFD9
  9522                           status	equ	0xFD8
  9523                           
  9524 ;; *************** function _lcd_gotoxy *****************
  9525 ;; Defined at:
  9526 ;;		line 89 in file "lcd_x8.c"
  9527 ;; Parameters:    Size  Location     Type
  9528 ;;  x               1    wreg     unsigned char 
  9529 ;;  y               1   36[COMRAM] unsigned char 
  9530 ;; Auto vars:     Size  Location     Type
  9531 ;;  x               1   37[COMRAM] unsigned char 
  9532 ;;  address         1   38[COMRAM] unsigned char 
  9533 ;; Return value:  Size  Location     Type
  9534 ;;                  1    wreg      void 
  9535 ;; Registers used:
  9536 ;;		wreg, status,2, status,0, cstack
  9537 ;; Tracked objects:
  9538 ;;		On entry : 0/0
  9539 ;;		On exit  : 0/0
  9540 ;;		Unchanged: 0/0
  9541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9542 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9543 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9545 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9546 ;;Total ram usage:        3 bytes
  9547 ;; Hardware stack levels used:    1
  9548 ;; Hardware stack levels required when called:    5
  9549 ;; This function calls:
  9550 ;;		_lcd_send_byte
  9551 ;; This function is called by:
  9552 ;;		_display
  9553 ;;		_lcd_putc
  9554 ;; This function uses a non-reentrant model
  9555 ;;
  9556                           
  9557                           	psect	text32
  9558  002AFA                     __ptext32:
  9559                           	opt stack 0
  9560  002AFA                     _lcd_gotoxy:
  9561                           	opt stack 24
  9562                           
  9563                           ;incstack = 0
  9564                           ;lcd_gotoxy@x stored from wreg
  9565  002AFA  6E26               	movwf	lcd_gotoxy@x,c
  9566                           
  9567                           ;lcd_x8.c: 90: unsigned char address;
  9568                           ;lcd_x8.c: 92: switch (y) {
  9569  002AFC  D009               	goto	l182
  9570  002AFE  0E80               	movlw	128
  9571  002B00  D005               	goto	L15
  9572  002B02  0EC0               	movlw	192
  9573  002B04  D003               	goto	L15
  9574  002B06  0E90               	movlw	144
  9575  002B08  D001               	goto	L15
  9576  002B0A  0ED0               	movlw	208
  9577  002B0C                     L15:
  9578  002B0C  6E27               	movwf	lcd_gotoxy@address,c
  9579                           
  9580                           ;lcd_x8.c: 101: }
  9581                           
  9582                           ;lcd_x8.c: 100: break;
  9583  002B0E  D00D               	goto	l184
  9584  002B10                     l182:
  9585  002B10  5025               	movf	lcd_gotoxy@y,w,c
  9586                           
  9587                           ; Switch size 1, requested type "space"
  9588                           ; Number of cases is 4, Range of values is 1 to 4
  9589                           ; switch strategies available:
  9590                           ; Name         Instructions Cycles
  9591                           ; simple_byte           13     7 (average)
  9592                           ;	Chosen strategy is simple_byte
  9593  002B12  0A01               	xorlw	1	; case 1
  9594  002B14  B4D8               	btfsc	status,2,c
  9595  002B16  D7F3               	goto	l183
  9596  002B18  0A03               	xorlw	3	; case 2
  9597  002B1A  B4D8               	btfsc	status,2,c
  9598  002B1C  D7F2               	goto	l185
  9599  002B1E  0A01               	xorlw	1	; case 3
  9600  002B20  B4D8               	btfsc	status,2,c
  9601  002B22  D7F1               	goto	l186
  9602  002B24  0A07               	xorlw	7	; case 4
  9603  002B26  B4D8               	btfsc	status,2,c
  9604  002B28  D7F0               	goto	l187
  9605  002B2A                     l184:
  9606                           
  9607                           ;lcd_x8.c: 102: address += x - 1;
  9608  002B2A  0426               	decf	lcd_gotoxy@x,w,c
  9609  002B2C  2627               	addwf	lcd_gotoxy@address,f,c
  9610                           
  9611                           ;lcd_x8.c: 103: lcd_send_byte(0, (unsigned char) (0x80 | address));
  9612  002B2E  5027               	movf	lcd_gotoxy@address,w,c
  9613  002B30  0980               	iorlw	128
  9614  002B32  6E23               	movwf	lcd_send_byte@n,c
  9615  002B34  0E00               	movlw	0
  9616  002B36  EC59  F015         	call	_lcd_send_byte
  9617  002B3A  0012               	return		;funcret
  9618  002B3C                     __end_of_lcd_gotoxy:
  9619                           	opt stack 0
  9620                           tblptru	equ	0xFF8
  9621                           tblptrh	equ	0xFF7
  9622                           tblptrl	equ	0xFF6
  9623                           tablat	equ	0xFF5
  9624                           prodh	equ	0xFF4
  9625                           prodl	equ	0xFF3
  9626                           intcon	equ	0xFF2
  9627                           intcon2	equ	0xFF1
  9628                           intcon3	equ	0xFF0
  9629                           postinc0	equ	0xFEE
  9630                           wreg	equ	0xFE8
  9631                           indf1	equ	0xFE7
  9632                           postdec1	equ	0xFE5
  9633                           fsr1h	equ	0xFE2
  9634                           fsr1l	equ	0xFE1
  9635                           indf2	equ	0xFDF
  9636                           postinc2	equ	0xFDE
  9637                           postdec2	equ	0xFDD
  9638                           fsr2h	equ	0xFDA
  9639                           fsr2l	equ	0xFD9
  9640                           status	equ	0xFD8
  9641                           
  9642 ;; *************** function _lcd_send_byte *****************
  9643 ;; Defined at:
  9644 ;;		line 39 in file "lcd_x8.c"
  9645 ;; Parameters:    Size  Location     Type
  9646 ;;  cm_data         1    wreg     unsigned char 
  9647 ;;  n               1   34[COMRAM] unsigned char 
  9648 ;; Auto vars:     Size  Location     Type
  9649 ;;  cm_data         1   35[COMRAM] unsigned char 
  9650 ;; Return value:  Size  Location     Type
  9651 ;;                  1    wreg      void 
  9652 ;; Registers used:
  9653 ;;		wreg, status,2, status,0, cstack
  9654 ;; Tracked objects:
  9655 ;;		On entry : 0/0
  9656 ;;		On exit  : 0/0
  9657 ;;		Unchanged: 0/0
  9658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9659 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9660 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9662 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9663 ;;Total ram usage:        2 bytes
  9664 ;; Hardware stack levels used:    1
  9665 ;; Hardware stack levels required when called:    4
  9666 ;; This function calls:
  9667 ;;		_delay_cycles
  9668 ;;		_delay_ms
  9669 ;;		_lcd_send_nibble
  9670 ;; This function is called by:
  9671 ;;		_lcd_init
  9672 ;;		_lcd_gotoxy
  9673 ;;		_lcd_putc
  9674 ;;		_Lcd_Shift_Right
  9675 ;;		_Lcd_Shift_Left
  9676 ;; This function uses a non-reentrant model
  9677 ;;
  9678                           
  9679                           	psect	text33
  9680  002AB2                     __ptext33:
  9681                           	opt stack 0
  9682  002AB2                     _lcd_send_byte:
  9683                           	opt stack 25
  9684                           
  9685                           ;incstack = 0
  9686                           ;lcd_send_byte@cm_data stored from wreg
  9687  002AB2  6E24               	movwf	lcd_send_byte@cm_data,c
  9688                           
  9689                           ;lcd_x8.c: 43: PORTEbits.RE2 = cm_data;
  9690  002AB4  B024               	btfsc	lcd_send_byte@cm_data,0,c
  9691  002AB6  D002               	bra	u2385
  9692  002AB8  9484               	bcf	3972,2,c	;volatile
  9693  002ABA  D001               	bra	u2386
  9694  002ABC                     u2385:
  9695  002ABC  8484               	bsf	3972,2,c	;volatile
  9696  002ABE                     u2386:
  9697                           
  9698                           ;lcd_x8.c: 44: delay_cycles(1);
  9699  002ABE  0E01               	movlw	1
  9700  002AC0  EC09  F016         	call	_delay_cycles
  9701                           
  9702                           ;lcd_x8.c: 46: delay_cycles(1);
  9703  002AC4  0E01               	movlw	1
  9704  002AC6  EC09  F016         	call	_delay_cycles
  9705                           
  9706                           ;lcd_x8.c: 47: PORTEbits.RE1 = 0;
  9707  002ACA  9284               	bcf	3972,1,c	;volatile
  9708                           
  9709                           ;lcd_x8.c: 48: lcd_send_nibble(n >> 4);
  9710  002ACC  3823               	swapf	lcd_send_byte@n,w,c
  9711  002ACE  0B0F               	andlw	15
  9712  002AD0  EC46  F016         	call	_lcd_send_nibble
  9713                           
  9714                           ;lcd_x8.c: 49: lcd_send_nibble(n & 0x0f);
  9715  002AD4  5023               	movf	lcd_send_byte@n,w,c
  9716  002AD6  0B0F               	andlw	15
  9717  002AD8  EC46  F016         	call	_lcd_send_nibble
  9718                           
  9719                           ;lcd_x8.c: 50: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
  9720  002ADC  5024               	movf	lcd_send_byte@cm_data,w,c
  9721  002ADE  B4D8               	btfsc	status,2,c
  9722  002AE0  D005               	goto	l170
  9723  002AE2  0E32               	movlw	50
  9724  002AE4                     u6767:
  9725  002AE4  0004               	clrwdt	
  9726  002AE6  2EE8               	decfsz	wreg,f,c
  9727  002AE8  D7FD               	bra	u6767
  9728  002AEA  0012               	return	
  9729  002AEC                     l170:
  9730                           
  9731                           ;lcd_x8.c: 51: else
  9732                           ;lcd_x8.c: 52: delay_ms(2);
  9733  002AEC  0E00               	movlw	0
  9734  002AEE  6E1C               	movwf	delay_ms@n+1,c
  9735  002AF0  0E02               	movlw	2
  9736  002AF2  6E1B               	movwf	delay_ms@n,c
  9737  002AF4  EC33  F016         	call	_delay_ms	;wreg free
  9738  002AF8  0012               	return	
  9739  002AFA                     __end_of_lcd_send_byte:
  9740                           	opt stack 0
  9741                           tblptru	equ	0xFF8
  9742                           tblptrh	equ	0xFF7
  9743                           tblptrl	equ	0xFF6
  9744                           tablat	equ	0xFF5
  9745                           prodh	equ	0xFF4
  9746                           prodl	equ	0xFF3
  9747                           intcon	equ	0xFF2
  9748                           intcon2	equ	0xFF1
  9749                           intcon3	equ	0xFF0
  9750                           postinc0	equ	0xFEE
  9751                           wreg	equ	0xFE8
  9752                           indf1	equ	0xFE7
  9753                           postdec1	equ	0xFE5
  9754                           fsr1h	equ	0xFE2
  9755                           fsr1l	equ	0xFE1
  9756                           indf2	equ	0xFDF
  9757                           postinc2	equ	0xFDE
  9758                           postdec2	equ	0xFDD
  9759                           fsr2h	equ	0xFDA
  9760                           fsr2l	equ	0xFD9
  9761                           status	equ	0xFD8
  9762                           
  9763 ;; *************** function _lcd_send_nibble *****************
  9764 ;; Defined at:
  9765 ;;		line 29 in file "lcd_x8.c"
  9766 ;; Parameters:    Size  Location     Type
  9767 ;;  n               1    wreg     unsigned char 
  9768 ;; Auto vars:     Size  Location     Type
  9769 ;;  n               1   33[COMRAM] unsigned char 
  9770 ;; Return value:  Size  Location     Type
  9771 ;;                  1    wreg      void 
  9772 ;; Registers used:
  9773 ;;		wreg, status,2, status,0, cstack
  9774 ;; Tracked objects:
  9775 ;;		On entry : 0/0
  9776 ;;		On exit  : 0/0
  9777 ;;		Unchanged: 0/0
  9778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9780 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9781 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9782 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9783 ;;Total ram usage:        2 bytes
  9784 ;; Hardware stack levels used:    1
  9785 ;; Hardware stack levels required when called:    3
  9786 ;; This function calls:
  9787 ;;		_delay_cycles
  9788 ;; This function is called by:
  9789 ;;		_lcd_send_byte
  9790 ;;		_lcd_init
  9791 ;; This function uses a non-reentrant model
  9792 ;;
  9793                           
  9794                           	psect	text34
  9795  002C8C                     __ptext34:
  9796                           	opt stack 0
  9797  002C8C                     _lcd_send_nibble:
  9798                           	opt stack 25
  9799                           
  9800                           ;incstack = 0
  9801                           ;lcd_send_nibble@n stored from wreg
  9802  002C8C  6E22               	movwf	lcd_send_nibble@n,c
  9803                           
  9804                           ;lcd_x8.c: 31: lcd.data = n;
  9805  002C8E  C022  F021         	movff	lcd_send_nibble@n,??_lcd_send_nibble
  9806  002C92  3A21               	swapf	??_lcd_send_nibble,f,c
  9807  002C94  5083               	movf	3971,w,c
  9808  002C96  1821               	xorwf	??_lcd_send_nibble,w,c
  9809  002C98  0B0F               	andlw	-241
  9810  002C9A  1821               	xorwf	??_lcd_send_nibble,w,c
  9811  002C9C  6E83               	movwf	3971,c
  9812                           
  9813                           ;lcd_x8.c: 33: delay_cycles(1);
  9814  002C9E  0E01               	movlw	1
  9815  002CA0  EC09  F016         	call	_delay_cycles
  9816                           
  9817                           ;lcd_x8.c: 34: PORTEbits.RE1 = 1;
  9818  002CA4  8284               	bsf	3972,1,c	;volatile
  9819                           
  9820                           ;lcd_x8.c: 35: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
  9821  002CA6  0004               	clrwdt	
  9822  002CA8  F000               	nop		;2 cycle nop
  9823                           
  9824                           ;lcd_x8.c: 36: PORTEbits.RE1 = 0;
  9825  002CAA  9284               	bcf	3972,1,c	;volatile
  9826  002CAC  0012               	return		;funcret
  9827  002CAE                     __end_of_lcd_send_nibble:
  9828                           	opt stack 0
  9829                           tblptru	equ	0xFF8
  9830                           tblptrh	equ	0xFF7
  9831                           tblptrl	equ	0xFF6
  9832                           tablat	equ	0xFF5
  9833                           prodh	equ	0xFF4
  9834                           prodl	equ	0xFF3
  9835                           intcon	equ	0xFF2
  9836                           intcon2	equ	0xFF1
  9837                           intcon3	equ	0xFF0
  9838                           postinc0	equ	0xFEE
  9839                           wreg	equ	0xFE8
  9840                           indf1	equ	0xFE7
  9841                           postdec1	equ	0xFE5
  9842                           fsr1h	equ	0xFE2
  9843                           fsr1l	equ	0xFE1
  9844                           indf2	equ	0xFDF
  9845                           postinc2	equ	0xFDE
  9846                           postdec2	equ	0xFDD
  9847                           fsr2h	equ	0xFDA
  9848                           fsr2l	equ	0xFD9
  9849                           status	equ	0xFD8
  9850                           
  9851 ;; *************** function _delay_cycles *****************
  9852 ;; Defined at:
  9853 ;;		line 20 in file "lcd_x8.c"
  9854 ;; Parameters:    Size  Location     Type
  9855 ;;  n               1    wreg     unsigned char 
  9856 ;; Auto vars:     Size  Location     Type
  9857 ;;  n               1   29[COMRAM] unsigned char 
  9858 ;;  x               2   30[COMRAM] int 
  9859 ;; Return value:  Size  Location     Type
  9860 ;;                  1    wreg      void 
  9861 ;; Registers used:
  9862 ;;		wreg, status,2, status,0
  9863 ;; Tracked objects:
  9864 ;;		On entry : 0/0
  9865 ;;		On exit  : 0/0
  9866 ;;		Unchanged: 0/0
  9867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9869 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9870 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9871 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9872 ;;Total ram usage:        6 bytes
  9873 ;; Hardware stack levels used:    1
  9874 ;; Hardware stack levels required when called:    2
  9875 ;; This function calls:
  9876 ;;		Nothing
  9877 ;; This function is called by:
  9878 ;;		_lcd_send_nibble
  9879 ;;		_lcd_send_byte
  9880 ;; This function uses a non-reentrant model
  9881 ;;
  9882                           
  9883                           	psect	text35
  9884  002C12                     __ptext35:
  9885                           	opt stack 0
  9886  002C12                     _delay_cycles:
  9887                           	opt stack 25
  9888                           
  9889                           ;incstack = 0
  9890                           ;delay_cycles@n stored from wreg
  9891  002C12  6E1E               	movwf	delay_cycles@n,c
  9892                           
  9893                           ;lcd_x8.c: 21: int x;
  9894                           ;lcd_x8.c: 22: for (x = 0; x <= n; x++) {
  9895  002C14  0E00               	movlw	0
  9896  002C16  6E20               	movwf	delay_cycles@x+1,c
  9897  002C18  0E00               	movlw	0
  9898  002C1A  6E1F               	movwf	delay_cycles@x,c
  9899  002C1C  D003               	goto	l161
  9900  002C1E                     l162:
  9901  002C1E  0004               	clrwdt		;# 
  9902  002C20  4A1F               	infsnz	delay_cycles@x,f,c
  9903  002C22  2A20               	incf	delay_cycles@x+1,f,c
  9904  002C24                     l161:
  9905  002C24  501E               	movf	delay_cycles@n,w,c
  9906  002C26  6E1B               	movwf	??_delay_cycles& (0+255),c
  9907  002C28  6A1C               	clrf	(??_delay_cycles+1)& (0+255),c
  9908  002C2A  501F               	movf	delay_cycles@x,w,c
  9909  002C2C  5C1B               	subwf	??_delay_cycles,w,c
  9910  002C2E  501C               	movf	??_delay_cycles+1,w,c
  9911  002C30  0A80               	xorlw	128
  9912  002C32  6E1D               	movwf	(??_delay_cycles+2)& (0+255),c
  9913  002C34  5020               	movf	delay_cycles@x+1,w,c
  9914  002C36  0A80               	xorlw	128
  9915  002C38  581D               	subwfb	(??_delay_cycles+2)& (0+255),w,c
  9916  002C3A  A0D8               	btfss	status,0,c
  9917  002C3C  0012               	return	
  9918  002C3E  D7EF               	goto	l162
  9919  002C40                     __end_of_delay_cycles:
  9920                           	opt stack 0
  9921                           tblptru	equ	0xFF8
  9922                           tblptrh	equ	0xFF7
  9923                           tblptrl	equ	0xFF6
  9924                           tablat	equ	0xFF5
  9925                           prodh	equ	0xFF4
  9926                           prodl	equ	0xFF3
  9927                           intcon	equ	0xFF2
  9928                           intcon2	equ	0xFF1
  9929                           intcon3	equ	0xFF0
  9930                           postinc0	equ	0xFEE
  9931                           wreg	equ	0xFE8
  9932                           indf1	equ	0xFE7
  9933                           postdec1	equ	0xFE5
  9934                           fsr1h	equ	0xFE2
  9935                           fsr1l	equ	0xFE1
  9936                           indf2	equ	0xFDF
  9937                           postinc2	equ	0xFDE
  9938                           postdec2	equ	0xFDD
  9939                           fsr2h	equ	0xFDA
  9940                           fsr2l	equ	0xFD9
  9941                           status	equ	0xFD8
  9942                           
  9943 ;; *************** function _delay_ms *****************
  9944 ;; Defined at:
  9945 ;;		line 12 in file "lcd_x8.c"
  9946 ;; Parameters:    Size  Location     Type
  9947 ;;  n               2   26[COMRAM] unsigned int 
  9948 ;; Auto vars:     Size  Location     Type
  9949 ;;  x               2   28[COMRAM] int 
  9950 ;; Return value:  Size  Location     Type
  9951 ;;                  1    wreg      void 
  9952 ;; Registers used:
  9953 ;;		wreg, status,2, status,0
  9954 ;; Tracked objects:
  9955 ;;		On entry : 0/0
  9956 ;;		On exit  : 0/0
  9957 ;;		Unchanged: 0/0
  9958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9959 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9960 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9962 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9963 ;;Total ram usage:        4 bytes
  9964 ;; Hardware stack levels used:    1
  9965 ;; Hardware stack levels required when called:    2
  9966 ;; This function calls:
  9967 ;;		Nothing
  9968 ;; This function is called by:
  9969 ;;		_operation
  9970 ;;		_main
  9971 ;;		_lcd_send_byte
  9972 ;;		_lcd_init
  9973 ;;		_lcd_putc
  9974 ;; This function uses a non-reentrant model
  9975 ;;
  9976                           
  9977                           	psect	text36
  9978  002C66                     __ptext36:
  9979                           	opt stack 0
  9980  002C66                     _delay_ms:
  9981                           	opt stack 27
  9982                           
  9983                           ;lcd_x8.c: 13: int x;
  9984                           ;lcd_x8.c: 14: for (x = 0; x <= n; x++) {
  9985                           
  9986                           ;incstack = 0
  9987  002C66  0E00               	movlw	0
  9988  002C68  6E1E               	movwf	delay_ms@x+1,c
  9989  002C6A  0E00               	movlw	0
  9990  002C6C  6E1D               	movwf	delay_ms@x,c
  9991  002C6E  D007               	goto	l155
  9992  002C70                     
  9993                           ;lcd_x8.c: 15: _delaywdt((unsigned long)((1)*(4000000UL/4000.0)));
  9994  002C70  0EC8               	movlw	200
  9995  002C72                     u6777:
  9996  002C72  0004               	clrwdt	
  9997  002C74  0004               	clrwdt	
  9998  002C76  2EE8               	decfsz	wreg,f,c
  9999  002C78  D7FC               	bra	u6777
 10000  002C7A  4A1D               	infsnz	delay_ms@x,f,c
 10001  002C7C  2A1E               	incf	delay_ms@x+1,f,c
 10002  002C7E                     l155:
 10003  002C7E  501D               	movf	delay_ms@x,w,c
 10004  002C80  5C1B               	subwf	delay_ms@n,w,c
 10005  002C82  501E               	movf	delay_ms@x+1,w,c
 10006  002C84  581C               	subwfb	delay_ms@n+1,w,c
 10007  002C86  A0D8               	btfss	status,0,c
 10008  002C88  0012               	return	
 10009  002C8A  D7F2               	goto	l156
 10010  002C8C                     __end_of_delay_ms:
 10011                           	opt stack 0
 10012                           tblptru	equ	0xFF8
 10013                           tblptrh	equ	0xFF7
 10014                           tblptrl	equ	0xFF6
 10015                           tablat	equ	0xFF5
 10016                           prodh	equ	0xFF4
 10017                           prodl	equ	0xFF3
 10018                           intcon	equ	0xFF2
 10019                           intcon2	equ	0xFF1
 10020                           intcon3	equ	0xFF0
 10021                           postinc0	equ	0xFEE
 10022                           wreg	equ	0xFE8
 10023                           indf1	equ	0xFE7
 10024                           postdec1	equ	0xFE5
 10025                           fsr1h	equ	0xFE2
 10026                           fsr1l	equ	0xFE1
 10027                           indf2	equ	0xFDF
 10028                           postinc2	equ	0xFDE
 10029                           postdec2	equ	0xFDD
 10030                           fsr2h	equ	0xFDA
 10031                           fsr2l	equ	0xFD9
 10032                           status	equ	0xFD8
 10033                           
 10034 ;; *************** function _highIsr *****************
 10035 ;; Defined at:
 10036 ;;		line 143 in file "pwm_asl.c"
 10037 ;; Parameters:    Size  Location     Type
 10038 ;;		None
 10039 ;; Auto vars:     Size  Location     Type
 10040 ;;		None
 10041 ;; Return value:  Size  Location     Type
 10042 ;;                  1    wreg      void 
 10043 ;; Registers used:
 10044 ;;		wreg, status,2, status,0, cstack
 10045 ;; Tracked objects:
 10046 ;;		On entry : 0/0
 10047 ;;		On exit  : 0/0
 10048 ;;		Unchanged: 0/0
 10049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10052 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10053 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10054 ;;Total ram usage:       20 bytes
 10055 ;; Hardware stack levels used:    1
 10056 ;; Hardware stack levels required when called:    1
 10057 ;; This function calls:
 10058 ;;		i2___awmod
 10059 ;; This function is called by:
 10060 ;;		Interrupt level 2
 10061 ;; This function uses a non-reentrant model
 10062 ;;
 10063                           
 10064                           	psect	intcode
 10065  000008                     __pintcode:
 10066                           	opt stack 0
 10067  000008                     _highIsr:
 10068                           	opt stack 22
 10069                           
 10070                           ;incstack = 0
 10071  000008  8264               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10072  00000A  EDB8  F011         	call	int_func,f	;refresh shadow registers
 10073                           tblptru	equ	0xFF8
 10074                           tblptrh	equ	0xFF7
 10075                           tblptrl	equ	0xFF6
 10076                           tablat	equ	0xFF5
 10077                           prodh	equ	0xFF4
 10078                           prodl	equ	0xFF3
 10079                           intcon	equ	0xFF2
 10080                           intcon2	equ	0xFF1
 10081                           intcon3	equ	0xFF0
 10082                           postinc0	equ	0xFEE
 10083                           wreg	equ	0xFE8
 10084                           indf1	equ	0xFE7
 10085                           postdec1	equ	0xFE5
 10086                           fsr1h	equ	0xFE2
 10087                           fsr1l	equ	0xFE1
 10088                           indf2	equ	0xFDF
 10089                           postinc2	equ	0xFDE
 10090                           postdec2	equ	0xFDD
 10091                           fsr2h	equ	0xFDA
 10092                           fsr2l	equ	0xFD9
 10093                           status	equ	0xFD8
 10094                           
 10095                           	psect	intcode_body
 10096  002370                     __pintcode_body:
 10097                           	opt stack 22
 10098  002370                     int_func:
 10099                           	opt stack 22
 10100  002370  0006               	pop		; remove dummy address from shadow register refresh
 10101  002372  CFFA F009          	movff	pclath,??_highIsr+2
 10102  002376  CFFB F00A          	movff	pclatu,??_highIsr+3
 10103  00237A  CFE9 F00B          	movff	fsr0l,??_highIsr+4
 10104  00237E  CFEA F00C          	movff	fsr0h,??_highIsr+5
 10105  002382  CFE1 F00D          	movff	fsr1l,??_highIsr+6
 10106  002386  CFE2 F00E          	movff	fsr1h,??_highIsr+7
 10107  00238A  CFD9 F00F          	movff	fsr2l,??_highIsr+8
 10108  00238E  CFDA F010          	movff	fsr2h,??_highIsr+9
 10109  002392  CFF3 F011          	movff	prodl,??_highIsr+10
 10110  002396  CFF4 F012          	movff	prodh,??_highIsr+11
 10111  00239A  CFF6 F013          	movff	tblptrl,??_highIsr+12
 10112  00239E  CFF7 F014          	movff	tblptrh,??_highIsr+13
 10113  0023A2  CFF8 F015          	movff	tblptru,??_highIsr+14
 10114  0023A6  CFF5 F016          	movff	tablat,??_highIsr+15
 10115  0023AA  C064  F017         	movff	btemp,??_highIsr+16
 10116  0023AE  C065  F018         	movff	btemp+1,??_highIsr+17
 10117  0023B2  C066  F019         	movff	btemp+2,??_highIsr+18
 10118  0023B6  C067  F01A         	movff	btemp+3,??_highIsr+19
 10119                           
 10120                           ;pwm_asl.c: 145: if (INTCONbits.INT0IF) {
 10121  0023BA  A2F2               	btfss	intcon,1,c	;volatile
 10122  0023BC  D011               	goto	i2l110
 10123                           
 10124                           ;pwm_asl.c: 146: _delay((unsigned long)((250)*(4000000UL/4000.0)));
 10125  0023BE  0E02               	movlw	2
 10126  0023C0  6E08               	movwf	(??_highIsr+1)& (0+255),c
 10127  0023C2  0E45               	movlw	69
 10128  0023C4  6E07               	movwf	??_highIsr& (0+255),c
 10129  0023C6  0EAA               	movlw	170
 10130  0023C8                     i2u678_47:
 10131  0023C8  2EE8               	decfsz	wreg,f,c
 10132  0023CA  D7FE               	bra	i2u678_47
 10133  0023CC  2E07               	decfsz	??_highIsr& (0+255),f,c
 10134  0023CE  D7FC               	bra	i2u678_47
 10135  0023D0  2E08               	decfsz	(??_highIsr+1)& (0+255),f,c
 10136  0023D2  D7FA               	bra	i2u678_47
 10137                           
 10138                           ;pwm_asl.c: 147: if (INTCONbits.INT0IF) {
 10139  0023D4  A2F2               	btfss	intcon,1,c	;volatile
 10140  0023D6  D004               	goto	i2l110
 10141                           
 10142                           ;pwm_asl.c: 148: mode = (mode + 1) % 4;
 10143  0023D8  285E               	incf	_mode,w,c
 10144  0023DA  0B03               	andlw	3
 10145  0023DC  6E5E               	movwf	_mode,c
 10146                           
 10147                           ;pwm_asl.c: 149: INTCONbits.INT0IF = 0;
 10148  0023DE  92F2               	bcf	intcon,1,c	;volatile
 10149  0023E0                     i2l110:
 10150                           
 10151                           ;pwm_asl.c: 150: }
 10152                           ;pwm_asl.c: 152: }
 10153                           ;pwm_asl.c: 153: if (INTCON3bits.INT2IF) {
 10154  0023E0  A2F0               	btfss	intcon3,1,c	;volatile
 10155  0023E2  D01C               	goto	i2l112
 10156                           
 10157                           ;pwm_asl.c: 154: _delay((unsigned long)((250)*(4000000UL/4000.0)));
 10158  0023E4  0E02               	movlw	2
 10159  0023E6  6E08               	movwf	(??_highIsr+1)& (0+255),c
 10160  0023E8  0E45               	movlw	69
 10161  0023EA  6E07               	movwf	??_highIsr& (0+255),c
 10162  0023EC  0EAA               	movlw	170
 10163  0023EE                     i2u679_47:
 10164  0023EE  2EE8               	decfsz	wreg,f,c
 10165  0023F0  D7FE               	bra	i2u679_47
 10166  0023F2  2E07               	decfsz	??_highIsr& (0+255),f,c
 10167  0023F4  D7FC               	bra	i2u679_47
 10168  0023F6  2E08               	decfsz	(??_highIsr+1)& (0+255),f,c
 10169  0023F8  D7FA               	bra	i2u679_47
 10170                           
 10171                           ;pwm_asl.c: 155: if (INTCON3bits.INT2IF) {
 10172  0023FA  A2F0               	btfss	intcon3,1,c	;volatile
 10173  0023FC  D00F               	goto	i2l112
 10174                           
 10175                           ;pwm_asl.c: 156: HS = (HS + 1) % (HS_4 + 1);
 10176  0023FE  0E01               	movlw	1
 10177  002400  245F               	addwf	_HS,w,c
 10178  002402  6E01               	movwf	i2___awmod@dividend,c
 10179  002404  6A02               	clrf	i2___awmod@dividend+1,c
 10180  002406  0E00               	movlw	0
 10181  002408  2202               	addwfc	i2___awmod@dividend+1,f,c
 10182  00240A  0E00               	movlw	0
 10183  00240C  6E04               	movwf	i2___awmod@divisor+1,c
 10184  00240E  0E05               	movlw	5
 10185  002410  6E03               	movwf	i2___awmod@divisor,c
 10186  002412  EC1A  F014         	call	i2___awmod	;wreg free
 10187  002416  5001               	movf	?i2___awmod,w,c
 10188  002418  6E5F               	movwf	_HS,c
 10189                           
 10190                           ;pwm_asl.c: 157: INTCON3bits.INT2IF = 0;
 10191  00241A  92F0               	bcf	intcon3,1,c	;volatile
 10192  00241C                     i2l112:
 10193                           
 10194                           ;pwm_asl.c: 158: }
 10195                           ;pwm_asl.c: 159: }
 10196                           ;pwm_asl.c: 160: if (PIR2bits.TMR3IF) {
 10197  00241C  B2A1               	btfsc	4001,1,c	;volatile
 10198                           
 10199                           ;pwm_asl.c: 162: PIR2bits.TMR3IF = 0;
 10200  00241E  92A1               	bcf	4001,1,c	;volatile
 10201  002420  C01A  F067         	movff	??_highIsr+19,btemp+3
 10202  002424  C019  F066         	movff	??_highIsr+18,btemp+2
 10203  002428  C018  F065         	movff	??_highIsr+17,btemp+1
 10204  00242C  C017  F064         	movff	??_highIsr+16,btemp
 10205  002430  C016  FFF5         	movff	??_highIsr+15,tablat
 10206  002434  C015  FFF8         	movff	??_highIsr+14,tblptru
 10207  002438  C014  FFF7         	movff	??_highIsr+13,tblptrh
 10208  00243C  C013  FFF6         	movff	??_highIsr+12,tblptrl
 10209  002440  C012  FFF4         	movff	??_highIsr+11,prodh
 10210  002444  C011  FFF3         	movff	??_highIsr+10,prodl
 10211  002448  C010  FFDA         	movff	??_highIsr+9,fsr2h
 10212  00244C  C00F  FFD9         	movff	??_highIsr+8,fsr2l
 10213  002450  C00E  FFE2         	movff	??_highIsr+7,fsr1h
 10214  002454  C00D  FFE1         	movff	??_highIsr+6,fsr1l
 10215  002458  C00C  FFEA         	movff	??_highIsr+5,fsr0h
 10216  00245C  C00B  FFE9         	movff	??_highIsr+4,fsr0l
 10217  002460  C00A  FFFB         	movff	??_highIsr+3,pclatu
 10218  002464  C009  FFFA         	movff	??_highIsr+2,pclath
 10219  002468  9264               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10220  00246A  0011               	retfie		f
 10221  00246C                     __end_of_highIsr:
 10222                           	opt stack 0
 10223                           pclatu	equ	0xFFB
 10224                           pclath	equ	0xFFA
 10225                           tblptru	equ	0xFF8
 10226                           tblptrh	equ	0xFF7
 10227                           tblptrl	equ	0xFF6
 10228                           tablat	equ	0xFF5
 10229                           prodh	equ	0xFF4
 10230                           prodl	equ	0xFF3
 10231                           intcon	equ	0xFF2
 10232                           intcon2	equ	0xFF1
 10233                           intcon3	equ	0xFF0
 10234                           postinc0	equ	0xFEE
 10235                           fsr0h	equ	0xFEA
 10236                           fsr0l	equ	0xFE9
 10237                           wreg	equ	0xFE8
 10238                           indf1	equ	0xFE7
 10239                           postdec1	equ	0xFE5
 10240                           fsr1h	equ	0xFE2
 10241                           fsr1l	equ	0xFE1
 10242                           indf2	equ	0xFDF
 10243                           postinc2	equ	0xFDE
 10244                           postdec2	equ	0xFDD
 10245                           fsr2h	equ	0xFDA
 10246                           fsr2l	equ	0xFD9
 10247                           status	equ	0xFD8
 10248                           
 10249 ;; *************** function i2___awmod *****************
 10250 ;; Defined at:
 10251 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 10252 ;; Parameters:    Size  Location     Type
 10253 ;;  dividend        2    0[COMRAM] int 
 10254 ;;  divisor         2    2[COMRAM] int 
 10255 ;; Auto vars:     Size  Location     Type
 10256 ;;  __awmod         1    5[COMRAM] unsigned char 
 10257 ;;  __awmod         1    4[COMRAM] unsigned char 
 10258 ;; Return value:  Size  Location     Type
 10259 ;;                  2    0[COMRAM] int 
 10260 ;; Registers used:
 10261 ;;		wreg, status,2, status,0
 10262 ;; Tracked objects:
 10263 ;;		On entry : 0/0
 10264 ;;		On exit  : 0/0
 10265 ;;		Unchanged: 0/0
 10266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10267 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10268 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10270 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10271 ;;Total ram usage:        6 bytes
 10272 ;; Hardware stack levels used:    1
 10273 ;; This function calls:
 10274 ;;		Nothing
 10275 ;; This function is called by:
 10276 ;;		_highIsr
 10277 ;; This function uses a non-reentrant model
 10278 ;;
 10279                           
 10280                           	psect	text38
 10281  002834                     __ptext38:
 10282                           	opt stack 0
 10283  002834                     i2___awmod:
 10284                           	opt stack 22
 10285                           
 10286                           ;incstack = 0
 10287  002834  0E00               	movlw	0
 10288  002836  6E06               	movwf	i2___awmod@sign,c
 10289  002838  AE02               	btfss	i2___awmod@dividend+1,7,c
 10290  00283A  D006               	goto	i2l619
 10291  00283C  6C01               	negf	i2___awmod@dividend,c
 10292  00283E  1E02               	comf	i2___awmod@dividend+1,f,c
 10293  002840  B0D8               	btfsc	status,0,c
 10294  002842  2A02               	incf	i2___awmod@dividend+1,f,c
 10295  002844  0E01               	movlw	1
 10296  002846  6E06               	movwf	i2___awmod@sign,c
 10297  002848                     i2l619:
 10298  002848  AE04               	btfss	i2___awmod@divisor+1,7,c
 10299  00284A  D004               	goto	i2l620
 10300  00284C  6C03               	negf	i2___awmod@divisor,c
 10301  00284E  1E04               	comf	i2___awmod@divisor+1,f,c
 10302  002850  B0D8               	btfsc	status,0,c
 10303  002852  2A04               	incf	i2___awmod@divisor+1,f,c
 10304  002854                     i2l620:
 10305  002854  5003               	movf	i2___awmod@divisor,w,c
 10306  002856  1004               	iorwf	i2___awmod@divisor+1,w,c
 10307  002858  B4D8               	btfsc	status,2,c
 10308  00285A  D018               	goto	i2l627
 10309  00285C  0E01               	movlw	1
 10310  00285E  6E05               	movwf	i2___awmod@counter,c
 10311  002860  D004               	goto	i2l622
 10312  002862  90D8               	bcf	status,0,c
 10313  002864  3603               	rlcf	i2___awmod@divisor,f,c
 10314  002866  3604               	rlcf	i2___awmod@divisor+1,f,c
 10315  002868  2A05               	incf	i2___awmod@counter,f,c
 10316  00286A                     i2l622:
 10317  00286A  AE04               	btfss	i2___awmod@divisor+1,7,c
 10318  00286C  D7FA               	goto	i2l623
 10319  00286E                     i2u454_40:
 10320  00286E  5003               	movf	i2___awmod@divisor,w,c
 10321  002870  5C01               	subwf	i2___awmod@dividend,w,c
 10322  002872  5004               	movf	i2___awmod@divisor+1,w,c
 10323  002874  5802               	subwfb	i2___awmod@dividend+1,w,c
 10324  002876  A0D8               	btfss	status,0,c
 10325  002878  D004               	goto	i2l626
 10326  00287A  5003               	movf	i2___awmod@divisor,w,c
 10327  00287C  5E01               	subwf	i2___awmod@dividend,f,c
 10328  00287E  5004               	movf	i2___awmod@divisor+1,w,c
 10329  002880  5A02               	subwfb	i2___awmod@dividend+1,f,c
 10330  002882                     i2l626:
 10331  002882  90D8               	bcf	status,0,c
 10332  002884  3204               	rrcf	i2___awmod@divisor+1,f,c
 10333  002886  3203               	rrcf	i2___awmod@divisor,f,c
 10334  002888  2E05               	decfsz	i2___awmod@counter,f,c
 10335  00288A  D7F1               	goto	i2u454_40
 10336  00288C                     i2l627:
 10337  00288C  5006               	movf	i2___awmod@sign,w,c
 10338  00288E  B4D8               	btfsc	status,2,c
 10339  002890  D004               	goto	i2l628
 10340  002892  6C01               	negf	i2___awmod@dividend,c
 10341  002894  1E02               	comf	i2___awmod@dividend+1,f,c
 10342  002896  B0D8               	btfsc	status,0,c
 10343  002898  2A02               	incf	i2___awmod@dividend+1,f,c
 10344  00289A                     i2l628:
 10345  00289A  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 10346  00289E  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 10347  0028A2  0012               	return	
 10348  0028A4                     __end_ofi2___awmod:
 10349                           	opt stack 0
 10350                           pclatu	equ	0xFFB
 10351                           pclath	equ	0xFFA
 10352                           tblptru	equ	0xFF8
 10353                           tblptrh	equ	0xFF7
 10354                           tblptrl	equ	0xFF6
 10355                           tablat	equ	0xFF5
 10356                           prodh	equ	0xFF4
 10357                           prodl	equ	0xFF3
 10358                           intcon	equ	0xFF2
 10359                           intcon2	equ	0xFF1
 10360                           intcon3	equ	0xFF0
 10361                           postinc0	equ	0xFEE
 10362                           fsr0h	equ	0xFEA
 10363                           fsr0l	equ	0xFE9
 10364                           wreg	equ	0xFE8
 10365                           indf1	equ	0xFE7
 10366                           postdec1	equ	0xFE5
 10367                           fsr1h	equ	0xFE2
 10368                           fsr1l	equ	0xFE1
 10369                           indf2	equ	0xFDF
 10370                           postinc2	equ	0xFDE
 10371                           postdec2	equ	0xFDD
 10372                           fsr2h	equ	0xFDA
 10373                           fsr2l	equ	0xFD9
 10374                           status	equ	0xFD8
 10375                           pclatu	equ	0xFFB
 10376                           pclath	equ	0xFFA
 10377                           tblptru	equ	0xFF8
 10378                           tblptrh	equ	0xFF7
 10379                           tblptrl	equ	0xFF6
 10380                           tablat	equ	0xFF5
 10381                           prodh	equ	0xFF4
 10382                           prodl	equ	0xFF3
 10383                           intcon	equ	0xFF2
 10384                           intcon2	equ	0xFF1
 10385                           intcon3	equ	0xFF0
 10386                           postinc0	equ	0xFEE
 10387                           fsr0h	equ	0xFEA
 10388                           fsr0l	equ	0xFE9
 10389                           wreg	equ	0xFE8
 10390                           indf1	equ	0xFE7
 10391                           postdec1	equ	0xFE5
 10392                           fsr1h	equ	0xFE2
 10393                           fsr1l	equ	0xFE1
 10394                           indf2	equ	0xFDF
 10395                           postinc2	equ	0xFDE
 10396                           postdec2	equ	0xFDD
 10397                           fsr2h	equ	0xFDA
 10398                           fsr2l	equ	0xFD9
 10399                           status	equ	0xFD8
 10400                           
 10401                           	psect	rparam
 10402  0000                     pclatu	equ	0xFFB
 10403                           pclath	equ	0xFFA
 10404                           tblptru	equ	0xFF8
 10405                           tblptrh	equ	0xFF7
 10406                           tblptrl	equ	0xFF6
 10407                           tablat	equ	0xFF5
 10408                           prodh	equ	0xFF4
 10409                           prodl	equ	0xFF3
 10410                           intcon	equ	0xFF2
 10411                           intcon2	equ	0xFF1
 10412                           intcon3	equ	0xFF0
 10413                           postinc0	equ	0xFEE
 10414                           fsr0h	equ	0xFEA
 10415                           fsr0l	equ	0xFE9
 10416                           wreg	equ	0xFE8
 10417                           indf1	equ	0xFE7
 10418                           postdec1	equ	0xFE5
 10419                           fsr1h	equ	0xFE2
 10420                           fsr1l	equ	0xFE1
 10421                           indf2	equ	0xFDF
 10422                           postinc2	equ	0xFDE
 10423                           postdec2	equ	0xFDD
 10424                           fsr2h	equ	0xFDA
 10425                           fsr2l	equ	0xFD9
 10426                           status	equ	0xFD8
 10427                           
 10428                           	psect	temp
 10429  000064                     btemp:
 10430                           	opt stack 0
 10431  000064                     	ds	1
 10432  0000                     int$flags	set	btemp
 10433  0000                     wtemp6	set	btemp+1
 10434                           pclatu	equ	0xFFB
 10435                           pclath	equ	0xFFA
 10436                           tblptru	equ	0xFF8
 10437                           tblptrh	equ	0xFF7
 10438                           tblptrl	equ	0xFF6
 10439                           tablat	equ	0xFF5
 10440                           prodh	equ	0xFF4
 10441                           prodl	equ	0xFF3
 10442                           intcon	equ	0xFF2
 10443                           intcon2	equ	0xFF1
 10444                           intcon3	equ	0xFF0
 10445                           postinc0	equ	0xFEE
 10446                           fsr0h	equ	0xFEA
 10447                           fsr0l	equ	0xFE9
 10448                           wreg	equ	0xFE8
 10449                           indf1	equ	0xFE7
 10450                           postdec1	equ	0xFE5
 10451                           fsr1h	equ	0xFE2
 10452                           fsr1l	equ	0xFE1
 10453                           indf2	equ	0xFDF
 10454                           postinc2	equ	0xFDE
 10455                           postdec2	equ	0xFDD
 10456                           fsr2h	equ	0xFDA
 10457                           fsr2l	equ	0xFD9
 10458                           status	equ	0xFD8


Data Sizes:
    Strings     132
    Constant    144
    Data        4
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     73      99
    BANK0           128     83     115
    BANK1           256    161     173
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK1[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_10(CODE[4]), STR_9(CODE[12]), STR_8(CODE[7]), STR_7(CODE[12]), 
		 -> STR_5(CODE[11]), STR_4(CODE[19]), STR_3(CODE[21]), STR_2(CODE[21]), 
		 -> STR_1(CODE[21]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 64
		 -> display@LCD(BANK1[64]), display@LCDP(BANK1[64]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 64
		 -> STR_6(CODE[4]), display@LCD(BANK1[64]), display@LCDP(BANK1[64]), 


Critical Paths under _main in COMRAM

    _read_adc_voltage->___fldiv
    _operation->___fldiv
    ___fldiv->___xxtofl
    _lcd_init->_lcd_send_byte
    _sprintf->___fltol
    ___flmul->___fldiv
    ___awdiv->___awmod
    ___xxtofl->___wmul
    ___llmod->___lldiv
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles

Critical Paths under _highIsr in COMRAM

    _highIsr->i2___awmod

Critical Paths under _main in BANK0

    _operation->___flmul
    _display->_sprintf
    _sprintf->___flsub
    _scale->___flmul
    _fround->___flmul
    ___fltol->_scale
    ___flsub->___fladd
    ___fladd->_fround

Critical Paths under _highIsr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_display
    _display->_sprintf

Critical Paths under _highIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _highIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _highIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _highIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _highIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _highIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _highIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _highIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _highIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _highIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _highIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _highIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _highIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _highIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   90307
                                             78 BANK0      5     5      0
                            ___flmul
                           _delay_ms
                            _display
                     _initInterrupts
                    _init_adc_no_lib
                          _init_pwm1
                           _lcd_init
                           _lcd_putc
                          _operation
                   _read_adc_voltage
                         _setupPorts
 ---------------------------------------------------------------------------------
 (1) _setupPorts                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_adc_voltage                                    11     7      4    4607
                                              0 BANK0     11     7      4
                            ___fldiv
                             ___wmul
                           ___xxtofl
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (1) _operation                                            0     0      0    9939
                            ___fldiv
                            ___flmul
                           _delay_ms
                _read_adc_raw_no_lib
                       _set_pwm1_raw
 ---------------------------------------------------------------------------------
 (2) _set_pwm1_raw                                         4     2      2     424
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _read_adc_raw_no_lib                                  7     5      2      65
                                             26 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    2835
                                             46 COMRAM    25    17      8
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    1920
                                             36 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (1) _init_pwm1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_adc_no_lib                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initInterrupts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _display                                            130   130      0   63213
                                             31 BANK1    130   130      0
                         _lcd_gotoxy
                           _lcd_putc
                           _lcd_puts
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             44    36      8   52140
                                             66 BANK0     12     4      8
                                              0 BANK1     31    31      0
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                9     5      4   11150
                                             25 BANK0      9     5      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             26 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13     9      4   10871
                                             25 BANK0     13     9      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    6113
                                              0 BANK0     25    17      8
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2163
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2245
                                             32 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         17     9      8     634
                                             26 COMRAM    17     9      8
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          14     6      8     634
                                             26 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     656
                                             32 COMRAM    14    10      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     952
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     952
                                             39 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     781
                                             26 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     877
                                             71 COMRAM     2     2      0
                                             34 BANK0      8     4      4
                            ___flmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    4727
                                             58 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             20    12      8    4342
                                             38 BANK0     20    12      8
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4     335
                                             26 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8     806
                                             26 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             2     0      2    4426
                                             40 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (1) _lcd_putc                                             1     1      0    3849
                                             39 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           3     2      1    2067
                                             36 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        2     1      1    1236
                                             34 COMRAM     2     1      1
                       _delay_cycles
                           _delay_ms
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_send_nibble                                      2     2      0      68
                                             32 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (4) _delay_cycles                                         6     6      0      46
                                             26 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             4     2      2     502
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _highIsr                                             20    20      0     348
                                              6 COMRAM    20    20      0
                          i2___awmod
 ---------------------------------------------------------------------------------
 (9) i2___awmod                                            6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___flmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___fldiv (ARG)
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
   _delay_ms
   _display
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_putc
       _delay_ms
       _lcd_gotoxy
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___fladd
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fldiv (ARG)
               ___wmul (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
       ___flge
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
       ___flneg
       ___flsub
         ___fladd
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fldiv (ARG)
                 ___wmul (ARG)
                 ___xxtofl (ARG)
                   ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___fltol
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fldiv (ARG)
               ___wmul (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       ___xxtofl
         ___wmul (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
   _initInterrupts
   _init_adc_no_lib
   _init_pwm1
   _lcd_init
     _delay_ms
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _lcd_putc
     _delay_ms
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _operation
     ___fldiv
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___fldiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
     _delay_ms
     _read_adc_raw_no_lib
     _set_pwm1_raw
   _read_adc_voltage
     ___fldiv
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___wmul
     ___xxtofl
       ___wmul (ARG)
     _read_adc_raw_no_lib
   _setupPorts

 _highIsr (ROOT)
   i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     A1      AD       7       67.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     53      73       5       89.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     49      63       1       78.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     183      34        0.0%
DATA                 0      0     183       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jun 23 16:32:43 2024

           ?_read_adc_voltage 0080                  ___fldiv@aexp 0047                  ___fldiv@bexp 0046  
                ___fldiv@sign 003B            ??_read_adc_voltage 0048                            _AN 004A  
                          _HC 01A9                            _HS 005F                ?_lcd_send_byte 0023  
                ___awdiv@sign 0026                            _ft 0056                            _sp 01A1  
         ___wmul@multiplicand 001D                   __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000  
                __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000  
                 __CFG_OSC$XT 000000                   __CFG_LVP$ON 000000                   __CFG_WDT$ON 000000  
                         l200 2998                           l201 296E                           l130 1C1E  
                         l122 2166                           l131 1BA6                           l123 21DC  
                         l132 1BC6                           l140 24AA                           l133 1BE6  
                         l117 2238                           l118 212E                           l128 1C04  
                         l161 2C24                           l401 06E8                           l129 1B8C  
                         l162 2C1E                           l170 2AEC                           l410 08A2  
                         l402 0650                           l226 2B92                           l155 2C7E  
                         l331 1B3A                           l411 07BC                           l139 248E  
                         l156 2C70                           l404 070E                           l341 0F84  
                         l421 0982                           l413 08C8                           l405 06F4  
                         l182 2B10                           l334 0D8E                           l414 08AE  
                         l350 014C                           l183 2AFE                           l191 2A02  
                         l335 0CAA                           l423 09AC                           l407 0732  
                         l351 0136                           l175 2926                           l184 2B2A  
                         l192 29C6                           l328 1A5A                           l424 09D8  
                         l416 090C                           l408 0736                           l352 00FC  
                         l185 2B02                           l417 0924                           l409 075A  
                         l345 0020                           l177 294E                           l186 2B06  
                         l194 29DE                           l610 26F8                           l338 0D62  
                         l434 0B22                           l426 0A04                           l370 01C0  
                         l362 015E                           l346 003E                           l187 2B0A  
                         l195 29EA                           l339 0ECC                           l435 0A96  
                         l427 0A0E                           l355 0206                           l363 017A  
                         l196 29F6                           l620 27E4                           l428 0A3A  
                         l380 03B2                           l372 01F4                           l364 0190  
                         l348 006E                           l613 2720                           l429 0A44  
                         l373 08D2                           l381 03FE                           l614 272A  
                         l606 26D2                           l622 27FA                           l382 04E6  
                         l374 024C                           l366 01AC                           l358 015A  
                         l615 2738                           l607 26E2                           l623 27F2  
                         l391 055E                           l375 029A                           l359 0238  
                         l367 019A                           l640 2040                           l641 2082  
                         l609 2700                           l385 047E                           l377 0306  
                         l369 01DE                           l650 2114                           l642 20B2  
                         l626 2812                           l802 2CE2                           l378 0384  
                         l651 2108                           l627 281C                           l619 27D8  
                         l395 05E2                           l644 20F0                           l628 282A  
                         l645 20E0                           l397 0618                           l662 2C00  
                         l910 1334                           l638 2022                           l742 1EFE  
                         l398 05FE                           l655 2284                           l911 1330  
                         l656 22B8                           l832 27A4                           l744 1F2A  
                         l657 22F6                           l833 27B2                           l745 1F64  
                         l658 2334                           l922 1454                           l842 28EA  
                         l754 1FEC                           l746 1F8C                           l923 1432  
                         l915 137C                           l843 28F8                           l755 1FE0  
                         l932 149C                           l924 1440                           l916 1378  
                         l828 2770                           l748 1FC8                           l941 156E  
                         l933 14A0                           l925 1444                           l693 260A  
                         l685 257A                           l829 2764                           l749 1FB8  
                         l950 15AE                           l918 13D8                           l694 25FE  
                         l838 28C2                           l943 1584                           l919 139C  
                         l687 25E6                           l839 28B6                           l936 153A  
                         l928 14B2                           l696 2626                           l688 25D6  
                         l953 15F4                           l945 158E                           l929 1478  
                         l938 154A                           l971 16B0                           l972 16AC  
                         l957 161A                           l981 17CA                           l958 1622  
                         l974 16F6                           l959 1624                           l991 1838  
                         l967 1670                           l984 1800                           l976 171E  
                         l968 166C                           l993 187C                           l985 17E2  
                         l977 17CC                           l994 18A0                           l978 177C  
                         l995 18CA                           l979 17A4                           l996 18D6  
                         l997 18D8                  __CFG_CPB$OFF 000000                           _PR2 000FCB  
                __CFG_CPD$OFF 000000                           _RPS 0058                           _lcd 000F83  
                ___awmod@sign 0020                           prod 000FF3     read_adc_voltage@raw_value 0089  
                         wreg 000FE8                  ___flmul@aexp 008D                  ___flmul@bexp 0092  
                ___flmul@sign 008C                  ___flmul@temp 0097                  ___flmul@prod 0093  
                 main@channel 00D2                   lcd_gotoxy@x 0026                   lcd_gotoxy@y 0025  
                ___fltol@exp1 0049                   display@LCDP 011F                          l1001 0FE2  
                        l1002 0FDE                          l1003 0FF2                          l1012 1210  
                        l1021 128C                          l1013 11F2                          l1005 1022  
                        l1030 1DD0                          l1022 12AA                          l1006 101E  
                        l1031 1DEE                          l1007 1032                          l1040 1E64  
                        l1024 12CE                          l1008 1050                          l1033 1E00  
                        l1025 12EC                          l1034 1DF4                          l1019 1248  
                        l1044 1E8E                          l1036 1E3E                          l1045 1EC0  
                        l1037 1E26                          l1029 1DC0                          l1039 1E70  
                        l4243 291E                          l4415 236C                          l4257 2946  
                        l5325 0450                          l5317 03FE                          l5253 01C0  
                        l5247 019A                          l5505 0A96                          l5345 0562  
                        l5451 0928                          l5365 05FE                          l5369 0610  
                        l5389 06F4                          l5639 18CA                          l5685 1BA2  
                        l5783 24A2                          l5699 1BE0                          STR_1 FF7B  
                        STR_2 FF90                          STR_3 FFA5                          STR_4 FFBA  
                        STR_5 FFE5                          STR_6 FFFB                          STR_7 FFCD  
                        STR_8 FFF0                          STR_9 FFD9                          u4200 29BA  
                        u5020 1600                          _IPR1 000F9F                          _IPR2 000FA2  
                        u4207 29B0                          _PIE1 000F9D                          _PIE2 000FA0  
                        u2385 2ABC                          u2386 2ABE                          u5130 103E  
                        u5220 129A                          u5140 11B4                          u6100 0410  
                        u4190 2990                          u5230 12B8                          u6200 0628  
                        u5145 11AA                          u6130 0450                          u5340 27FE  
                        u4197 2986                          u5190 1244                          u6230 071C  
                        u5280 2704                          u6240 072C                          u4480 293C  
                        u4810 145C                          u5610 211A                          u6410 0A4C  
                        u6330 0960                          u6170 059A                          u6090 03C4  
                        u5540 1FF2                          u6420 0A6E                          u5461 1EE2  
                        u4760 1408                          u6440 0B34                          u5481 1F0E  
                        _PIR1 000F9E                          u4770 1418                          u5730 2610  
                        u6450 0B52                          _PIR2 000FA1                          u4940 1592  
                        u4780 141A                          u6630 1834                          u5760 2774  
                        u6720 24E6                          u4970 15AA                          u5690 2598  
                        u5940 00D4                          u6660 188A                          u5790 28C6  
                        u5870 1E7A                          u6670 18AE                          u5695 258E  
                        u6767 2AE4                          u6777 2C72              ?_lcd_send_nibble 0001  
                        _main 246C                          _mode 005E                          _temp 01A5  
                        fsr0h 000FEA                          fsr1h 000FE2                          fsr2h 000FDA  
                        fsr0l 000FE9                          indf1 000FE7                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 0064  
                        prodh 000FF4                          prodl 000FF3                          start 000E  
               __CFG_IESO$OFF 000000               ___fldiv@new_exp 0040                   main@voltage 00CE  
                _sprintf$1935 0100                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
        __end_of_delay_cycles 2C40                 ___fltol@sign1 0048               __end_of___fladd 1640  
                       ?_main 0001               __end_of___fldiv 18F4               __end_of___awdiv 2742  
             __end_of___flneg 2C12                         STR_10 FFF7               __end_of___awmod 2834  
             __end_of___flmul 1302               __end_of___flsub 2AB2               __end_of___fltol 2638  
             __end_of___lldiv 27C4               ___awdiv@divisor 0023               __end_of___llmod 290A  
                       _T2CON 000FCA                         _T3CON 000FB1                         i2l110 23E0  
                       i2l112 241C                         i2l620 2854                         i2l622 286A  
                       i2l623 2862                         i2l626 2882                         i2l627 288C  
                       i2l619 2848                         i2l628 289A               ___awdiv@counter 0025  
                       _RCREG 000FAE                         _RCSTA 000FAB                         _SPBRG 000FAF  
     read_adc_voltage@channel 0088                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
                       _TXREG 000FAD                         _TXSTA 000FAC                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
             __end_of_highIsr 246C                 __CFG_WRTB$OFF 000000               __end_of_display 1D82  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
             __end_of_dpowers FF7B                         _scale 0B60               __end_of_isdigit 2CEA  
             _init_adc_no_lib 2D02                         pclath 000FFA                         tablat 000FF5  
                       status 000FD8       read_adc_voltage@voltage 0084                         wtemp6 0065  
             __end_of_sprintf 0B60            __size_ofi2___awmod 0070                __CFG_PBADEN$ON 000000  
             __initialization 2A18                  __end_of_main 255A               ??_lcd_send_byte 0024  
                      ??_main 004A                 __activetblptr 000002          __size_of__tdiv_to_l_ 0132  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _ADCON2 000FC0  
            ___llmod@dividend 0028                        ?_scale 0099                        _ADRESH 000FC4  
                      _ADRESL 000FC3                        _CCPR1L 000FBE              ___awdiv@dividend 0021  
                      _INTCON 000FF2                        _SPBRGH 000FB0              __end_of___xxtofl 1ED2  
            __end_of_delay_ms 2C8C                        _Buffer 00D3                __CFG_XINST$OFF 000000  
            __end_of__powers_ FF1F              __end_of_lcd_init 296C                        ___flge 2250  
            __end_of_lcd_putc 2A18              __end_of_lcd_puts 29C2                     ??___fladd 00AE  
                      ___wmul 2C40                     ??___fldiv 0037                     ??___awdiv 0025  
                   ??___flneg 001F                __CFG_STVREN$ON 000000                     ??___awmod 001F  
                   ??___flmul 0088                     ??___flsub 0048                     ??___fltol 00A6  
                   ??___lldiv 0023                     ??___llmod 0030                        _fround 18F4  
                      clear_0 2A3E                        clear_1 2A4A                        clear_2 2A56  
            ___awdiv@quotient 0027               ___awmod@divisor 001D               ___awmod@counter 001F  
                   ??_highIsr 0007                     ??_display 004A       __end_of_init_adc_no_lib 2D0E  
                __pdataCOMRAM 0060                     ??_isdigit 001B             __end_ofi2___awmod 28A4  
                __mediumconst FEEA                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                i2___awmod@sign 0006                     ??_sprintf 00CA  
                  ___flge@ff1 001B                    ___flge@ff2 001F                  ___xxtofl@arg 002B  
                ___xxtofl@exp 002A                  ___xxtofl@val 0021                    __accesstop 0080  
     __end_of__initialization 2A5C                    ___flneg@f1 001B                 ___rparam_used 000001  
                  ___fltol@f1 00A2                __pcstackCOMRAM 0001         __size_of_delay_cycles 002E  
     __size_of_initInterrupts 0040                 __end_of_scale 0FB0                    __div_to_l_ 2004  
   __size_of_read_adc_voltage 0086             lcd_gotoxy@address 0027               __div_to_l_@exp1 0028  
             __div_to_l_@cntr 0027                       ??_scale 0048               __div_to_l_@quot 0023  
                sprintf@width 0116                    __pbssBANK0 00D3                    __pbssBANK1 01A1  
 __end_of_read_adc_raw_no_lib 2BB6                  _delay_cycles 2C12                 __div_to_l_@f1 001B  
               __div_to_l_@f2 001F            __size_of_init_pwm1 0018                lcd_send_byte@n 0023  
                     ?___flge 001B                       ?___wmul 001B              lcd_send_nibble@n 0022  
                     _CCP1CON 000FBD                       ?_fround 0099            __size_of_operation 0124  
            ?_init_adc_no_lib 0001                       _INTCON2 000FF1                     ?___xxtofl 0021  
                   ?_delay_ms 001B                    _lcd_gotoxy 2AFA                     ?_lcd_init 0001  
                   ?_lcd_putc 0001                     ?_lcd_puts 0029             __end_of__npowers_ FF53  
                     __Hparam 0000                    _scale$1934 009D                       __Lparam 0000  
    __size_of_lcd_send_nibble 0022               __size_of___flge 0120                       ___fladd 1302  
                     ___fldiv 1640                       ___awdiv 26BE                       ___flneg 2BE4  
                     ___awmod 27C4                       ___flmul 0FB0                       ___flsub 2A6A  
                     ___fltol 255A                       ___lldiv 2742               __size_of___wmul 0026  
                     ___llmod 28A4                 ?_set_pwm1_raw 001B                       __pcinit 2A18  
             __size_of_fround 0296                       __ramtop 1000                       __ptext0 246C  
                     __ptext1 2CAE                       __ptext2 2638                       __ptext3 212C  
                     __ptext4 2BB6                       __ptext5 2B7C                       __ptext6 1640  
                     __ptext7 290A                       __ptext8 2CEA                       __ptext9 2D02  
                     _highIsr 0008                       _display 1B8A                   ?__div_to_l_ 001B  
                     _dpowers FF53                     _T2CONbits 000FCA                       _isdigit 2CCC  
                  ??___xxtofl 0025                     _T3CONbits 000FB1             __end_of_init_pwm1 2D02  
            ___awmod@dividend 001B                       _raw_val 005C                    ??_delay_ms 001D  
                     _sprintf 0012                    ??_lcd_init 0025                __pintcode_body 2370  
                  ??_lcd_putc 0028                    ??_lcd_puts 002B          end_of_initialization 2A5C  
               __Lmediumconst FEEA                       int_func 2370             __end_of_operation 2250  
        lcd_send_byte@cm_data 0024               ___lldiv@divisor 001F               ___lldiv@counter 0027  
                   _RCSTAbits 000FAB                       postdec1 000FE5                       postdec2 000FDD  
              _initInterrupts 2B3C                       postinc0 000FEE                       postinc2 000FDE  
              ??_set_pwm1_raw 001D                __tdiv_to_l_@f1 001B                __tdiv_to_l_@f2 001F  
       __end_of_lcd_send_byte 2AFA                 ??__tdiv_to_l_ 0023                     _PORTBbits 000F81  
                   _PORTCbits 000F82                     _PORTEbits 000F84                    _setupPorts 2CAE  
                 ___fladd@grs 00B9                 ___xxtofl@sign 0029              _read_adc_voltage 2638  
                   _TRISCbits 000F94                   ?_lcd_gotoxy 0025                   ___fldiv@grs 0042  
                 ___fldiv@rem 003C                     i2___awmod 2834               _LCD_INIT_STRING 0060  
                   _RPS_count 005A                   ___flmul@grs 008E                   _CCP1CONbits 000FBD  
                  display@LCD 015F                     _TXSTAbits 000FAC           __size_of__div_to_l_ 0128  
      __end_of_initInterrupts 2B7C                __end_of___flge 2370                __end_of___wmul 2C66  
                 _BAUDCONbits 000FB8                 __pidataCOMRAM 2D0E                 delay_cycles@n 001E  
               delay_cycles@x 001F             ??_lcd_send_nibble 0021                __end_of_fround 1B8A  
         start_initialization 2A18           __end_of__tdiv_to_l_ 2004                    ?i2___awmod 0001  
             ___llmod@divisor 002C               ___llmod@counter 0030               ?_initInterrupts 0001  
                    ??___flge 0023           __size_of_lcd_gotoxy 0042                      ??___wmul 001F  
read_adc_raw_no_lib@raw_value 0020              __CFG_LPT1OSC$OFF 000000                      ??_fround 0048  
               sprintf@tmpval 010C                   ?_setupPorts 0001                     ___fladd@a 00AA  
                   ___fladd@b 00A6                    fround@prec 00A5                     ___fldiv@a 0033  
                   ___fldiv@b 002F                     ___flmul@a 0084                     ___flmul@b 0080  
                 __pbssCOMRAM 004A                     ___flsub@a 00BE                     ___flsub@b 00BA  
               __pcstackBANK0 0080                 __pcstackBANK1 0100             __size_of___xxtofl 0150  
                _isdigit$1559 001C             __size_of_delay_ms 0026          __end_of_set_pwm1_raw 2BE4  
           __size_of_lcd_init 0062                   sprintf@flag 010A             __size_of_lcd_putc 0056  
           __size_of_lcd_puts 0056                   sprintf@fval 0118                   sprintf@prec 011C  
           __CFG_CCP2MX$PORTC 000000                     __pintcode 0008  __size_of_read_adc_raw_no_lib 003A  
               __pmediumconst FEEA                      ?___fladd 00A6                      ?___fldiv 002F  
                    ?___awdiv 0021                      ?___flneg 001B                      ?___awmod 001B  
                    ?___flmul 0080                      ?___flsub 00BA                      ?___fltol 00A2  
                    ?___lldiv 001B                      ?___llmod 0028                     __npowers_ FF1F  
                 __tdiv_to_l_ 1ED2                      ?_highIsr 0001                      ?_display 0001  
                ??__div_to_l_ 0023                      ?_isdigit 0001                   ??i2___awmod 0005  
                    ?_sprintf 00C2                     _init_pwm1 2CEA                __size_of_scale 0450  
    __size_of_init_adc_no_lib 000C                ___wmul@product 001F                     delay_ms@n 001B  
                   delay_ms@x 001D                      _PIE2bits 000FA0           __size_of_setupPorts 001E  
                    _PIR1bits 000F9E            __end_of__div_to_l_ 212C                      _PIR2bits 000FA1  
    __end_of_read_adc_voltage 26BE                      i2u454_40 286E                     _operation 212C  
                    i2u678_47 23C8                      i2u679_47 23EE                      _RCONbits 000FD0  
            __CFG_WDTPS$32768 000000    read_adc_raw_no_lib@channel 001F                    _ADCON0bits 000FC2  
           ___wmul@multiplier 001B                     lcd_init@i 0025                     lcd_putc@c 0028  
                   lcd_puts@s 0029                  ??_lcd_gotoxy 0026                    ?_init_pwm1 0001  
                 _INTCON2bits 000FF1                   _INTCON3bits 000FF0                     copy_data0 2A2C  
          i2___awmod@dividend 0001               _lcd_send_nibble 2C8C                      __Hrparam 0000  
       set_pwm1_raw@raw_value 001B                    ?_operation 0001                      __Lrparam 0000  
          __CFG_BOREN$SBORDIS 000000            __end_of_lcd_gotoxy 2B3C              __size_of___fladd 033E  
            __size_of___fldiv 02B4              __size_of___awdiv 0084              __size_of___flneg 002E  
            __size_of___awmod 0070              __size_of___flmul 0352              __size_of___flsub 0048  
            __size_of___fltol 00DE              __size_of___lldiv 0082              __size_of___llmod 0066  
                 _fround$1932 00A1                   _fround$1933 009D              __size_of_highIsr 2464  
            __size_of_display 01F8                    sprintf@len 0108                    sprintf@exp 0114  
                  sprintf@val 0110                      ___xxtofl 1D82         __size_of_set_pwm1_raw 002E  
            __size_of_isdigit 001E                      _delay_ms 2C66                      __ptext10 2B3C  
                    __ptext11 1B8A                      __ptext20 2004                      __ptext12 0012  
                    __ptext21 1D82                      __ptext13 0B60                      __ptext30 296C  
                    __ptext22 2C40                      __ptext14 2CCC                      __ptext31 29C2  
                    __ptext23 28A4                      __ptext15 18F4                      __ptext32 2AFA  
                    __ptext24 2742                      __ptext16 0FB0                      __ptext33 2AB2  
                    __ptext25 255A                      __ptext17 27C4                      __ptext34 2C8C  
                    __ptext26 2A6A                      __ptext18 26BE                      __ptext35 2C12  
                    __ptext27 1302                      __ptext19 1ED2                      __ptext36 2C66  
                    __ptext28 2BE4                      __ptext29 2250                      __ptext38 2834  
                    __powers_ FEEB                      _lcd_init 290A                      _lcd_putc 29C2  
                    _lcd_puts 296C              __size_of_sprintf 0B4E              ??_initInterrupts 001B  
      __size_of_lcd_send_byte 0048                 ?_delay_cycles 0001                 __size_of_main 00EE  
           ??_init_adc_no_lib 001B                      int$flags 0064                  _set_pwm1_raw 2BB6  
                    display@C 019F                      display@H 01A0                  ??_setupPorts 001B  
           i2___awmod@divisor 0003             i2___awmod@counter 0005                    _INTCONbits 000FF2  
                    isdigit@c 001D           _read_adc_raw_no_lib 2B7C                      scale@scl 00A1  
                 ??_init_pwm1 001B                      intlevel2 0000                     sprintf@ap 0106  
                   sprintf@cp 0104       __end_of_lcd_send_nibble 2CAE              __tdiv_to_l_@exp1 002B  
            __tdiv_to_l_@cntr 002A                     sprintf@sp 00C2                ??_delay_cycles 001B  
            __tdiv_to_l_@quot 0026              ___lldiv@dividend 001B            __end_of_setupPorts 2CCC  
                 ??_operation 0048          ?_read_adc_raw_no_lib 001B                 _lcd_send_byte 2AB2  
                ?__tdiv_to_l_ 001B                      sprintf@c 011E                      sprintf@f 00C4  
            ___lldiv@quotient 0023                 ___fladd@signs 00B6                  ___fladd@aexp 00B7  
                ___fladd@bexp 00B8         ??_read_adc_raw_no_lib 001D  
