

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jun 23 18:34:30 2024

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    57                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    58  0000                     
    59                           ; Version 1.45
    60                           ; Generated 16/11/2017 GMT
    61                           ; 
    62                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC18F4620 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     
    94                           	psect	idataCOMRAM
    95  002E4E                     __pidataCOMRAM:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _LCD_INIT_STRING
    99  002E4E  28                 	db	40
   100  002E4F  0C                 	db	12
   101  002E50  01                 	db	1
   102  002E51  06                 	db	6
   103                           
   104                           	psect	mediumconst
   105  00FEEA                     __pmediumconst:
   106                           	opt stack 0
   107  00FEEA  00                 	db	0
   108  00FEEB                     __powers_:
   109                           	opt stack 0
   110  00FEEB  0000               	dw	0
   111  00FEED  3F80               	dw	16256
   112  00FEEF  0000               	dw	0
   113  00FEF1  4120               	dw	16672
   114  00FEF3  0000               	dw	0
   115  00FEF5  42C8               	dw	17096
   116  00FEF7  0000               	dw	0
   117  00FEF9  447A               	dw	17530
   118  00FEFB  4000               	dw	16384
   119  00FEFD  461C               	dw	17948
   120  00FEFF  5000               	dw	20480
   121  00FF01  47C3               	dw	18371
   122  00FF03  2400               	dw	9216
   123  00FF05  4974               	dw	18804
   124  00FF07  9680               	dw	38528
   125  00FF09  4B18               	dw	19224
   126  00FF0B  BC20               	dw	48160
   127  00FF0D  4CBE               	dw	19646
   128  00FF0F  6B28               	dw	27432
   129  00FF11  4E6E               	dw	20078
   130  00FF13  02F9               	dw	761
   131  00FF15  5015               	dw	20501
   132  00FF17  78EC               	dw	30956
   133  00FF19  60AD               	dw	24749
   134  00FF1B  F2CA               	dw	62154
   135  00FF1D  7149               	dw	29001
   136  00FF1F                     __end_of__powers_:
   137                           	opt stack 0
   138  00FF1F                     __npowers_:
   139                           	opt stack 0
   140  00FF1F  0000               	dw	0
   141  00FF21  3F80               	dw	16256
   142  00FF23  CCCD               	dw	52429
   143  00FF25  3DCC               	dw	15820
   144  00FF27  D70A               	dw	55050
   145  00FF29  3C23               	dw	15395
   146  00FF2B  126F               	dw	4719
   147  00FF2D  3A83               	dw	14979
   148  00FF2F  B717               	dw	46871
   149  00FF31  38D1               	dw	14545
   150  00FF33  C5AC               	dw	50604
   151  00FF35  3727               	dw	14119
   152  00FF37  37BD               	dw	14269
   153  00FF39  3586               	dw	13702
   154  00FF3B  BF95               	dw	49045
   155  00FF3D  33D6               	dw	13270
   156  00FF3F  CC77               	dw	52343
   157  00FF41  322B               	dw	12843
   158  00FF43  705F               	dw	28767
   159  00FF45  3089               	dw	12425
   160  00FF47  E6FF               	dw	59135
   161  00FF49  2EDB               	dw	11995
   162  00FF4B  E508               	dw	58632
   163  00FF4D  1E3C               	dw	7740
   164  00FF4F  4260               	dw	16992
   165  00FF51  0DA2               	dw	3490
   166  00FF53                     __end_of__npowers_:
   167                           	opt stack 0
   168  00FF53                     _dpowers:
   169                           	opt stack 0
   170  00FF53  0001               	dw	1
   171  00FF55  0000               	dw	0
   172  00FF57  000A               	dw	10
   173  00FF59  0000               	dw	0
   174  00FF5B  0064               	dw	100
   175  00FF5D  0000               	dw	0
   176  00FF5F  03E8               	dw	1000
   177  00FF61  0000               	dw	0
   178  00FF63  2710               	dw	10000
   179  00FF65  0000               	dw	0
   180  00FF67  86A0               	dw	34464
   181  00FF69  0001               	dw	1
   182  00FF6B  4240               	dw	16960
   183  00FF6D  000F               	dw	15
   184  00FF6F  9680               	dw	38528
   185  00FF71  0098               	dw	152
   186  00FF73  E100               	dw	57600
   187  00FF75  05F5               	dw	1525
   188  00FF77  CA00               	dw	51712
   189  00FF79  3B9A               	dw	15258
   190  00FF7B                     __end_of_dpowers:
   191                           	opt stack 0
   192  0000                     _TXREG	set	4013
   193  0000                     _PIR1bits	set	3998
   194  0000                     _RCREG	set	4014
   195  0000                     _RCSTAbits	set	4011
   196  0000                     _RCSTA	set	4011
   197  0000                     _TXSTAbits	set	4012
   198  0000                     _SPBRGH	set	4016
   199  0000                     _SPBRG	set	4015
   200  0000                     _TXSTA	set	4012
   201  0000                     _BAUDCONbits	set	4024
   202  0000                     _CCP1CONbits	set	4029
   203  0000                     _CCPR1L	set	4030
   204  0000                     _TRISCbits	set	3988
   205  0000                     _CCP1CON	set	4029
   206  0000                     _T2CONbits	set	4042
   207  0000                     _T2CON	set	4042
   208  0000                     _PR2	set	4043
   209  0000                     _ADRESL	set	4035
   210  0000                     _ADRESH	set	4036
   211  0000                     _ADCON2	set	4032
   212  0000                     _ADCON0bits	set	4034
   213  0000                     _PORTEbits	set	3972
   214  0000                     _PORTCbits	set	3970
   215  0000                     _PORTBbits	set	3969
   216  0000                     _PIE2bits	set	4000
   217  0000                     _IPR2	set	4002
   218  0000                     _PIR2	set	4001
   219  0000                     _PIE2	set	4000
   220  0000                     _IPR1	set	3999
   221  0000                     _PIR1	set	3998
   222  0000                     _PIE1	set	3997
   223  0000                     _INTCON2bits	set	4081
   224  0000                     _T3CONbits	set	4017
   225  0000                     _T3CON	set	4017
   226  0000                     _PIR2bits	set	4001
   227  0000                     _INTCON3bits	set	4080
   228  0000                     _INTCONbits	set	4082
   229  0000                     _RCONbits	set	4048
   230  0000                     _INTCON	set	4082
   231  0000                     _TRISE	set	3990
   232  0000                     _TRISD	set	3989
   233  0000                     _TRISA	set	3986
   234  0000                     _TRISC	set	3988
   235  0000                     _TRISB	set	3987
   236  0000                     _ADCON1	set	4033
   237  0000                     _ADCON0	set	4034
   238  0000                     _INTCON2	set	4081
   239  00FF7B                     STR_1:
   240  00FF7B  4F                 	db	79	;'O'
   241  00FF7C  46                 	db	70	;'F'
   242  00FF7D  46                 	db	70	;'F'
   243  00FF7E  20                 	db	32
   244  00FF7F  20                 	db	32
   245  00FF80  20                 	db	32
   246  00FF81  20                 	db	32
   247  00FF82  20                 	db	32
   248  00FF83  20                 	db	32
   249  00FF84  20                 	db	32
   250  00FF85  20                 	db	32
   251  00FF86  20                 	db	32
   252  00FF87  20                 	db	32
   253  00FF88  20                 	db	32
   254  00FF89  20                 	db	32
   255  00FF8A  20                 	db	32
   256  00FF8B  20                 	db	32
   257  00FF8C  20                 	db	32
   258  00FF8D  20                 	db	32
   259  00FF8E  20                 	db	32
   260  00FF8F  00                 	db	0
   261  00FF90                     STR_2:
   262  00FF90  43                 	db	67	;'C'
   263  00FF91  6F                 	db	111	;'o'
   264  00FF92  6F                 	db	111	;'o'
   265  00FF93  6C                 	db	108	;'l'
   266  00FF94  20                 	db	32
   267  00FF95  20                 	db	32
   268  00FF96  20                 	db	32
   269  00FF97  20                 	db	32
   270  00FF98  20                 	db	32
   271  00FF99  20                 	db	32
   272  00FF9A  20                 	db	32
   273  00FF9B  20                 	db	32
   274  00FF9C  20                 	db	32
   275  00FF9D  20                 	db	32
   276  00FF9E  20                 	db	32
   277  00FF9F  20                 	db	32
   278  00FFA0  20                 	db	32
   279  00FFA1  20                 	db	32
   280  00FFA2  20                 	db	32
   281  00FFA3  20                 	db	32
   282  00FFA4  00                 	db	0
   283  00FFA5                     STR_3:
   284  00FFA5  48                 	db	72	;'H'
   285  00FFA6  65                 	db	101	;'e'
   286  00FFA7  61                 	db	97	;'a'
   287  00FFA8  74                 	db	116	;'t'
   288  00FFA9  20                 	db	32
   289  00FFAA  20                 	db	32
   290  00FFAB  20                 	db	32
   291  00FFAC  20                 	db	32
   292  00FFAD  20                 	db	32
   293  00FFAE  20                 	db	32
   294  00FFAF  20                 	db	32
   295  00FFB0  20                 	db	32
   296  00FFB1  20                 	db	32
   297  00FFB2  20                 	db	32
   298  00FFB3  20                 	db	32
   299  00FFB4  20                 	db	32
   300  00FFB5  20                 	db	32
   301  00FFB6  20                 	db	32
   302  00FFB7  20                 	db	32
   303  00FFB8  20                 	db	32
   304  00FFB9  00                 	db	0
   305  00FFBA                     STR_4:
   306  00FFBA  41                 	db	65	;'A'
   307  00FFBB  75                 	db	117	;'u'
   308  00FFBC  74                 	db	116	;'t'
   309  00FFBD  6F                 	db	111	;'o'
   310  00FFBE  20                 	db	32
   311  00FFBF  43                 	db	67	;'C'
   312  00FFC0  6F                 	db	111	;'o'
   313  00FFC1  6F                 	db	111	;'o'
   314  00FFC2  6C                 	db	108	;'l'
   315  00FFC3  20                 	db	32
   316  00FFC4  20                 	db	32
   317  00FFC5  20                 	db	32
   318  00FFC6  20                 	db	32
   319  00FFC7  20                 	db	32
   320  00FFC8  20                 	db	32
   321  00FFC9  20                 	db	32
   322  00FFCA  20                 	db	32
   323  00FFCB  20                 	db	32
   324  00FFCC  00                 	db	0
   325  00FFCD                     STR_7:
   326  00FFCD  53                 	db	83	;'S'
   327  00FFCE  50                 	db	80	;'P'
   328  00FFCF  3A                 	db	58	;':'
   329  00FFD0  20                 	db	32
   330  00FFD1  25                 	db	37
   331  00FFD2  34                 	db	52	;'4'
   332  00FFD3  2E                 	db	46
   333  00FFD4  31                 	db	49	;'1'
   334  00FFD5  66                 	db	102	;'f'
   335  00FFD6  43                 	db	67	;'C'
   336  00FFD7  20                 	db	32
   337  00FFD8  00                 	db	0
   338  00FFD9                     STR_9:
   339  00FFD9  48                 	db	72	;'H'
   340  00FFDA  43                 	db	67	;'C'
   341  00FFDB  3A                 	db	58	;':'
   342  00FFDC  20                 	db	32
   343  00FFDD  25                 	db	37
   344  00FFDE  34                 	db	52	;'4'
   345  00FFDF  2E                 	db	46
   346  00FFE0  31                 	db	49	;'1'
   347  00FFE1  66                 	db	102	;'f'
   348  00FFE2  25                 	db	37
   349  00FFE3  25                 	db	37
   350  00FFE4  00                 	db	0
   351  00FFE5                     STR_5:
   352  00FFE5  52                 	db	82	;'R'
   353  00FFE6  54                 	db	84	;'T'
   354  00FFE7  3A                 	db	58	;':'
   355  00FFE8  20                 	db	32
   356  00FFE9  25                 	db	37
   357  00FFEA  34                 	db	52	;'4'
   358  00FFEB  2E                 	db	46
   359  00FFEC  31                 	db	49	;'1'
   360  00FFED  66                 	db	102	;'f'
   361  00FFEE  43                 	db	67	;'C'
   362  00FFEF  00                 	db	0
   363  00FFF0                     STR_8:
   364  00FFF0  48                 	db	72	;'H'
   365  00FFF1  53                 	db	83	;'S'
   366  00FFF2  3A                 	db	58	;':'
   367  00FFF3  20                 	db	32
   368  00FFF4  25                 	db	37
   369  00FFF5  64                 	db	100	;'d'
   370  00FFF6  00                 	db	0
   371  00FFF7                     STR_10:
   372  00FFF7  4D                 	db	77	;'M'
   373  00FFF8  44                 	db	68	;'D'
   374  00FFF9  3A                 	db	58	;':'
   375  00FFFA  00                 	db	0
   376  00FFFB                     STR_6:
   377  00FFFB  48                 	db	72	;'H'
   378  00FFFC  20                 	db	32
   379  00FFFD  43                 	db	67	;'C'
   380  00FFFE  00                 	db	0
   381                           
   382                           ; #config settings
   383  00FFFF  00                 	db	0	; dummy byte at the end
   384  0000                     
   385                           	psect	cinit
   386  002B58                     __pcinit:
   387                           	opt stack 0
   388  002B58                     start_initialization:
   389                           	opt stack 0
   390  002B58                     __initialization:
   391                           	opt stack 0
   392                           
   393                           ; Initialize objects allocated to COMRAM (4 bytes)
   394                           ; load TBLPTR registers with __pidataCOMRAM
   395  002B58  0E4E               	movlw	low __pidataCOMRAM
   396  002B5A  6EF6               	movwf	tblptrl,c
   397  002B5C  0E2E               	movlw	high __pidataCOMRAM
   398  002B5E  6EF7               	movwf	tblptrh,c
   399  002B60  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   400  002B62  6EF8               	movwf	tblptru,c
   401  002B64  EE00  F060         	lfsr	0,__pdataCOMRAM
   402  002B68  EE10 F004          	lfsr	1,4
   403  002B6C                     copy_data0:
   404  002B6C  0009               	tblrd		*+
   405  002B6E  CFF5 FFEE          	movff	tablat,postinc0
   406  002B72  50E5               	movf	postdec1,w,c
   407  002B74  50E1               	movf	fsr1l,w,c
   408  002B76  E1FA               	bnz	copy_data0
   409                           
   410                           ; Clear objects allocated to BANK1 (36 bytes)
   411  002B78  EE01  F082         	lfsr	0,__pbssBANK1
   412  002B7C  0E24               	movlw	36
   413  002B7E                     clear_0:
   414  002B7E  6AEE               	clrf	postinc0,c
   415  002B80  06E8               	decf	wreg,f,c
   416  002B82  E1FD               	bnz	clear_0
   417                           
   418                           ; Clear objects allocated to BANK0 (22 bytes)
   419  002B84  EE00  F0E6         	lfsr	0,__pbssBANK0
   420  002B88  0E16               	movlw	22
   421  002B8A                     clear_1:
   422  002B8A  6AEE               	clrf	postinc0,c
   423  002B8C  06E8               	decf	wreg,f,c
   424  002B8E  E1FD               	bnz	clear_1
   425                           
   426                           ; Clear objects allocated to COMRAM (8 bytes)
   427  002B90  EE00  F058         	lfsr	0,__pbssCOMRAM
   428  002B94  0E08               	movlw	8
   429  002B96                     clear_2:
   430  002B96  6AEE               	clrf	postinc0,c
   431  002B98  06E8               	decf	wreg,f,c
   432  002B9A  E1FD               	bnz	clear_2
   433  002B9C                     end_of_initialization:
   434                           	opt stack 0
   435  002B9C                     __end_of__initialization:
   436                           	opt stack 0
   437  002B9C  9064               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   438  002B9E  9264               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   439  002BA0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   440  002BA2  6EF8               	movwf	tblptru,c
   441  002BA4  0100               	movlb	0
   442  002BA6  EFD9  F012         	goto	_main	;jump to C main() function
   443                           tblptru	equ	0xFF8
   444                           tblptrh	equ	0xFF7
   445                           tblptrl	equ	0xFF6
   446                           tablat	equ	0xFF5
   447                           postinc0	equ	0xFEE
   448                           wreg	equ	0xFE8
   449                           postdec1	equ	0xFE5
   450                           fsr1l	equ	0xFE1
   451                           
   452                           	psect	bssCOMRAM
   453  000058                     __pbssCOMRAM:
   454                           	opt stack 0
   455  000058                     _ft:
   456                           	opt stack 0
   457  000058                     	ds	2
   458  00005A                     _RPS:
   459                           	opt stack 0
   460  00005A                     	ds	2
   461  00005C                     _RPS_count:
   462                           	opt stack 0
   463  00005C                     	ds	2
   464  00005E                     _mode:
   465                           	opt stack 0
   466  00005E                     	ds	1
   467  00005F                     _HS:
   468                           	opt stack 0
   469  00005F                     	ds	1
   470                           tblptru	equ	0xFF8
   471                           tblptrh	equ	0xFF7
   472                           tblptrl	equ	0xFF6
   473                           tablat	equ	0xFF5
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           postdec1	equ	0xFE5
   477                           fsr1l	equ	0xFE1
   478                           
   479                           	psect	dataCOMRAM
   480  000060                     __pdataCOMRAM:
   481                           	opt stack 0
   482  000060                     _LCD_INIT_STRING:
   483                           	opt stack 0
   484  000060                     	ds	4
   485                           tblptru	equ	0xFF8
   486                           tblptrh	equ	0xFF7
   487                           tblptrl	equ	0xFF6
   488                           tablat	equ	0xFF5
   489                           postinc0	equ	0xFEE
   490                           wreg	equ	0xFE8
   491                           postdec1	equ	0xFE5
   492                           fsr1l	equ	0xFE1
   493                           
   494                           	psect	bssBANK0
   495  0000E6                     __pbssBANK0:
   496                           	opt stack 0
   497  0000E6                     _AN:
   498                           	opt stack 0
   499  0000E6                     	ds	12
   500  0000F2                     _sp:
   501                           	opt stack 0
   502  0000F2                     	ds	4
   503  0000F6                     _temp:
   504                           	opt stack 0
   505  0000F6                     	ds	4
   506  0000FA                     _raw_val:
   507                           	opt stack 0
   508  0000FA                     	ds	2
   509                           tblptru	equ	0xFF8
   510                           tblptrh	equ	0xFF7
   511                           tblptrl	equ	0xFF6
   512                           tablat	equ	0xFF5
   513                           postinc0	equ	0xFEE
   514                           wreg	equ	0xFE8
   515                           postdec1	equ	0xFE5
   516                           fsr1l	equ	0xFE1
   517                           
   518                           	psect	bssBANK1
   519  000182                     __pbssBANK1:
   520                           	opt stack 0
   521  000182                     _Buffer:
   522                           	opt stack 0
   523  000182                     	ds	32
   524  0001A2                     _HC:
   525                           	opt stack 0
   526  0001A2                     	ds	4
   527                           tblptru	equ	0xFF8
   528                           tblptrh	equ	0xFF7
   529                           tblptrl	equ	0xFF6
   530                           tablat	equ	0xFF5
   531                           postinc0	equ	0xFEE
   532                           wreg	equ	0xFE8
   533                           postdec1	equ	0xFE5
   534                           fsr1l	equ	0xFE1
   535                           
   536                           	psect	cstackBANK1
   537  000100                     __pcstackBANK1:
   538                           	opt stack 0
   539  000100                     display@LCDP:
   540                           	opt stack 0
   541                           
   542                           ; 64 bytes @ 0x0
   543  000100                     	ds	64
   544  000140                     display@LCD:
   545                           	opt stack 0
   546                           
   547                           ; 64 bytes @ 0x40
   548  000140                     	ds	64
   549  000180                     display@C:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x80
   553  000180                     	ds	1
   554  000181                     display@H:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x81
   558  000181                     	ds	1
   559                           tblptru	equ	0xFF8
   560                           tblptrh	equ	0xFF7
   561                           tblptrl	equ	0xFF6
   562                           tablat	equ	0xFF5
   563                           postinc0	equ	0xFEE
   564                           wreg	equ	0xFE8
   565                           postdec1	equ	0xFE5
   566                           fsr1l	equ	0xFE1
   567                           
   568                           	psect	cstackBANK0
   569  000080                     __pcstackBANK0:
   570                           	opt stack 0
   571  000080                     ___flmul@sign:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x0
   575  000080                     	ds	1
   576  000081                     ___flmul@aexp:
   577                           	opt stack 0
   578                           
   579                           ; 1 bytes @ 0x1
   580  000081                     	ds	1
   581  000082                     ___flmul@grs:
   582                           	opt stack 0
   583                           
   584                           ; 4 bytes @ 0x2
   585  000082                     	ds	4
   586  000086                     ___flmul@bexp:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x6
   590  000086                     	ds	1
   591  000087                     ___flmul@prod:
   592                           	opt stack 0
   593                           
   594                           ; 4 bytes @ 0x7
   595  000087                     	ds	4
   596  00008B                     ___flmul@temp:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0xB
   600  00008B                     	ds	2
   601  00008D                     _fround$1935:
   602                           	opt stack 0
   603  00008D                     _scale$1936:
   604                           	opt stack 0
   605                           
   606                           ; 4 bytes @ 0xD
   607  00008D                     	ds	4
   608  000091                     scale@scl:
   609                           	opt stack 0
   610  000091                     _fround$1934:
   611                           	opt stack 0
   612                           
   613                           ; 4 bytes @ 0x11
   614  000091                     	ds	1
   615  000092                     ?___fltol:
   616                           	opt stack 0
   617  000092                     ___fltol@f1:
   618                           	opt stack 0
   619                           
   620                           ; 4 bytes @ 0x12
   621  000092                     	ds	3
   622  000095                     fround@prec:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0x15
   626  000095                     	ds	1
   627  000096                     ??___fltol:
   628  000096                     ?___fladd:
   629                           	opt stack 0
   630  000096                     ___fladd@b:
   631                           	opt stack 0
   632                           
   633                           ; 4 bytes @ 0x16
   634  000096                     	ds	4
   635  00009A                     ___fltol@sign1:
   636                           	opt stack 0
   637  00009A                     ___fladd@a:
   638                           	opt stack 0
   639                           
   640                           ; 4 bytes @ 0x1A
   641  00009A                     	ds	1
   642  00009B                     ___fltol@exp1:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x1B
   646  00009B                     	ds	3
   647  00009E                     ??___fladd:
   648                           
   649                           ; 1 bytes @ 0x1E
   650  00009E                     	ds	8
   651  0000A6                     ___fladd@signs:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0x26
   655  0000A6                     	ds	1
   656  0000A7                     ___fladd@aexp:
   657                           	opt stack 0
   658                           
   659                           ; 1 bytes @ 0x27
   660  0000A7                     	ds	1
   661  0000A8                     ___fladd@bexp:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0x28
   665  0000A8                     	ds	1
   666  0000A9                     ___fladd@grs:
   667                           	opt stack 0
   668                           
   669                           ; 1 bytes @ 0x29
   670  0000A9                     	ds	1
   671  0000AA                     ?___flsub:
   672                           	opt stack 0
   673  0000AA                     ___flge@ff1:
   674                           	opt stack 0
   675  0000AA                     ___flsub@b:
   676                           	opt stack 0
   677                           
   678                           ; 4 bytes @ 0x2A
   679  0000AA                     	ds	4
   680  0000AE                     ___flge@ff2:
   681                           	opt stack 0
   682  0000AE                     ___flsub@a:
   683                           	opt stack 0
   684                           
   685                           ; 4 bytes @ 0x2E
   686  0000AE                     	ds	4
   687  0000B2                     ??___flge:
   688                           
   689                           ; 1 bytes @ 0x32
   690  0000B2                     	ds	4
   691  0000B6                     ?_sprintf:
   692                           	opt stack 0
   693  0000B6                     sprintf@sp:
   694                           	opt stack 0
   695  0000B6                     operation@CoolError:
   696                           	opt stack 0
   697                           
   698                           ; 4 bytes @ 0x36
   699  0000B6                     	ds	2
   700  0000B8                     sprintf@f:
   701                           	opt stack 0
   702                           
   703                           ; 2 bytes @ 0x38
   704  0000B8                     	ds	2
   705  0000BA                     operation@PWM_percentage_value:
   706                           	opt stack 0
   707                           
   708                           ; 4 bytes @ 0x3A
   709  0000BA                     	ds	4
   710  0000BE                     ??_sprintf:
   711                           
   712                           ; 1 bytes @ 0x3E
   713  0000BE                     	ds	4
   714  0000C2                     _sprintf$1937:
   715                           	opt stack 0
   716                           
   717                           ; 4 bytes @ 0x42
   718  0000C2                     	ds	4
   719  0000C6                     sprintf@cp:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x46
   723  0000C6                     	ds	2
   724  0000C8                     sprintf@ap:
   725                           	opt stack 0
   726                           
   727                           ; 2 bytes @ 0x48
   728  0000C8                     	ds	2
   729  0000CA                     sprintf@len:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x4A
   733  0000CA                     	ds	2
   734  0000CC                     sprintf@flag:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x4C
   738  0000CC                     	ds	2
   739  0000CE                     sprintf@tmpval:
   740                           	opt stack 0
   741                           
   742                           ; 4 bytes @ 0x4E
   743  0000CE                     	ds	4
   744  0000D2                     sprintf@val:
   745                           	opt stack 0
   746                           
   747                           ; 4 bytes @ 0x52
   748  0000D2                     	ds	4
   749  0000D6                     sprintf@exp:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x56
   753  0000D6                     	ds	2
   754  0000D8                     sprintf@width:
   755                           	opt stack 0
   756                           
   757                           ; 2 bytes @ 0x58
   758  0000D8                     	ds	2
   759  0000DA                     sprintf@fval:
   760                           	opt stack 0
   761                           
   762                           ; 4 bytes @ 0x5A
   763  0000DA                     	ds	4
   764  0000DE                     sprintf@prec:
   765                           	opt stack 0
   766                           
   767                           ; 2 bytes @ 0x5E
   768  0000DE                     	ds	2
   769  0000E0                     sprintf@c:
   770                           	opt stack 0
   771                           
   772                           ; 1 bytes @ 0x60
   773  0000E0                     	ds	1
   774  0000E1                     main@voltage:
   775                           	opt stack 0
   776                           
   777                           ; 4 bytes @ 0x61
   778  0000E1                     	ds	4
   779  0000E5                     main@channel:
   780                           	opt stack 0
   781                           
   782                           ; 1 bytes @ 0x65
   783  0000E5                     	ds	1
   784                           tblptru	equ	0xFF8
   785                           tblptrh	equ	0xFF7
   786                           tblptrl	equ	0xFF6
   787                           tablat	equ	0xFF5
   788                           postinc0	equ	0xFEE
   789                           wreg	equ	0xFE8
   790                           postdec1	equ	0xFE5
   791                           fsr1l	equ	0xFE1
   792                           
   793                           	psect	cstackCOMRAM
   794  000001                     __pcstackCOMRAM:
   795                           	opt stack 0
   796  000001                     ?i2___awmod:
   797                           	opt stack 0
   798  000001                     i2___awmod@dividend:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0x0
   802  000001                     	ds	2
   803  000003                     i2___awmod@divisor:
   804                           	opt stack 0
   805                           
   806                           ; 2 bytes @ 0x2
   807  000003                     	ds	2
   808  000005                     i2___awmod@counter:
   809                           	opt stack 0
   810                           
   811                           ; 1 bytes @ 0x4
   812  000005                     	ds	1
   813  000006                     i2___awmod@sign:
   814                           	opt stack 0
   815                           
   816                           ; 1 bytes @ 0x5
   817  000006                     	ds	1
   818  000007                     ??_highIsr:
   819                           
   820                           ; 1 bytes @ 0x6
   821  000007                     	ds	20
   822  00001B                     ??_isdigit:
   823  00001B                     ??_delay_cycles:
   824  00001B                     ?_read_adc_raw_no_lib:
   825                           	opt stack 0
   826  00001B                     ?___wmul:
   827                           	opt stack 0
   828  00001B                     ?___awmod:
   829                           	opt stack 0
   830  00001B                     ?__tdiv_to_l_:
   831                           	opt stack 0
   832  00001B                     ?__div_to_l_:
   833                           	opt stack 0
   834  00001B                     ?___lldiv:
   835                           	opt stack 0
   836  00001B                     delay_ms@n:
   837                           	opt stack 0
   838  00001B                     set_pwm1_raw@raw_value:
   839                           	opt stack 0
   840  00001B                     ___wmul@multiplier:
   841                           	opt stack 0
   842  00001B                     ___awmod@dividend:
   843                           	opt stack 0
   844  00001B                     __div_to_l_@f1:
   845                           	opt stack 0
   846  00001B                     __tdiv_to_l_@f1:
   847                           	opt stack 0
   848  00001B                     ___lldiv@dividend:
   849                           	opt stack 0
   850                           
   851                           ; 4 bytes @ 0x1A
   852  00001B                     	ds	1
   853  00001C                     _isdigit$1561:
   854                           	opt stack 0
   855                           
   856                           ; 1 bytes @ 0x1B
   857  00001C                     	ds	1
   858  00001D                     ??_set_pwm1_raw:
   859  00001D                     ??_read_adc_raw_no_lib:
   860  00001D                     isdigit@c:
   861                           	opt stack 0
   862  00001D                     delay_ms@x:
   863                           	opt stack 0
   864  00001D                     ___wmul@multiplicand:
   865                           	opt stack 0
   866  00001D                     ___awmod@divisor:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x1C
   870  00001D                     	ds	1
   871  00001E                     delay_cycles@n:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x1D
   875  00001E                     	ds	1
   876  00001F                     ___awmod@counter:
   877                           	opt stack 0
   878  00001F                     delay_cycles@x:
   879                           	opt stack 0
   880  00001F                     read_adc_raw_no_lib@raw_value:
   881                           	opt stack 0
   882  00001F                     ___wmul@product:
   883                           	opt stack 0
   884  00001F                     __div_to_l_@f2:
   885                           	opt stack 0
   886  00001F                     __tdiv_to_l_@f2:
   887                           	opt stack 0
   888  00001F                     ___lldiv@divisor:
   889                           	opt stack 0
   890                           
   891                           ; 4 bytes @ 0x1E
   892  00001F                     	ds	1
   893  000020                     ___awmod@sign:
   894                           	opt stack 0
   895                           
   896                           ; 1 bytes @ 0x1F
   897  000020                     	ds	1
   898  000021                     ??_lcd_send_nibble:
   899  000021                     ?___awdiv:
   900                           	opt stack 0
   901  000021                     ?___xxtofl:
   902                           	opt stack 0
   903  000021                     read_adc_raw_no_lib@channel:
   904                           	opt stack 0
   905  000021                     ___awdiv@dividend:
   906                           	opt stack 0
   907  000021                     ___xxtofl@val:
   908                           	opt stack 0
   909                           
   910                           ; 4 bytes @ 0x20
   911  000021                     	ds	1
   912  000022                     lcd_send_nibble@n:
   913                           	opt stack 0
   914                           
   915                           ; 1 bytes @ 0x21
   916  000022                     	ds	1
   917  000023                     ??__tdiv_to_l_:
   918  000023                     lcd_send_byte@n:
   919                           	opt stack 0
   920  000023                     ___awdiv@divisor:
   921                           	opt stack 0
   922  000023                     __div_to_l_@quot:
   923                           	opt stack 0
   924  000023                     ___lldiv@quotient:
   925                           	opt stack 0
   926                           
   927                           ; 4 bytes @ 0x22
   928  000023                     	ds	1
   929  000024                     lcd_send_byte@cm_data:
   930                           	opt stack 0
   931                           
   932                           ; 1 bytes @ 0x23
   933  000024                     	ds	1
   934  000025                     ??___xxtofl:
   935  000025                     lcd_init@i:
   936                           	opt stack 0
   937  000025                     lcd_gotoxy@y:
   938                           	opt stack 0
   939  000025                     ___awdiv@counter:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x24
   943  000025                     	ds	1
   944  000026                     lcd_gotoxy@x:
   945                           	opt stack 0
   946  000026                     ___awdiv@sign:
   947                           	opt stack 0
   948  000026                     __tdiv_to_l_@quot:
   949                           	opt stack 0
   950                           
   951                           ; 4 bytes @ 0x25
   952  000026                     	ds	1
   953  000027                     lcd_gotoxy@address:
   954                           	opt stack 0
   955  000027                     __div_to_l_@cntr:
   956                           	opt stack 0
   957  000027                     ___lldiv@counter:
   958                           	opt stack 0
   959  000027                     ___awdiv@quotient:
   960                           	opt stack 0
   961                           
   962                           ; 2 bytes @ 0x26
   963  000027                     	ds	1
   964  000028                     ?___llmod:
   965                           	opt stack 0
   966  000028                     lcd_putc@c:
   967                           	opt stack 0
   968  000028                     __div_to_l_@exp1:
   969                           	opt stack 0
   970  000028                     ___llmod@dividend:
   971                           	opt stack 0
   972                           
   973                           ; 4 bytes @ 0x27
   974  000028                     	ds	1
   975  000029                     ___xxtofl@sign:
   976                           	opt stack 0
   977  000029                     lcd_puts@s:
   978                           	opt stack 0
   979                           
   980                           ; 2 bytes @ 0x28
   981  000029                     	ds	1
   982  00002A                     __tdiv_to_l_@cntr:
   983                           	opt stack 0
   984  00002A                     ___xxtofl@exp:
   985                           	opt stack 0
   986                           
   987                           ; 1 bytes @ 0x29
   988  00002A                     	ds	1
   989  00002B                     __tdiv_to_l_@exp1:
   990                           	opt stack 0
   991  00002B                     ___xxtofl@arg:
   992                           	opt stack 0
   993                           
   994                           ; 4 bytes @ 0x2A
   995  00002B                     	ds	1
   996  00002C                     ___llmod@divisor:
   997                           	opt stack 0
   998                           
   999                           ; 4 bytes @ 0x2B
  1000  00002C                     	ds	3
  1001  00002F                     ?___fldiv:
  1002                           	opt stack 0
  1003  00002F                     ?___flneg:
  1004                           	opt stack 0
  1005  00002F                     ___flneg@f1:
  1006                           	opt stack 0
  1007  00002F                     ___fldiv@b:
  1008                           	opt stack 0
  1009                           
  1010                           ; 4 bytes @ 0x2E
  1011  00002F                     	ds	1
  1012  000030                     ___llmod@counter:
  1013                           	opt stack 0
  1014                           
  1015                           ; 1 bytes @ 0x2F
  1016  000030                     	ds	3
  1017  000033                     ___fldiv@a:
  1018                           	opt stack 0
  1019                           
  1020                           ; 4 bytes @ 0x32
  1021  000033                     	ds	4
  1022  000037                     ??___fldiv:
  1023                           
  1024                           ; 1 bytes @ 0x36
  1025  000037                     	ds	4
  1026  00003B                     ___fldiv@sign:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x3A
  1030  00003B                     	ds	1
  1031  00003C                     ___fldiv@rem:
  1032                           	opt stack 0
  1033                           
  1034                           ; 4 bytes @ 0x3B
  1035  00003C                     	ds	4
  1036  000040                     ___fldiv@new_exp:
  1037                           	opt stack 0
  1038                           
  1039                           ; 2 bytes @ 0x3F
  1040  000040                     	ds	2
  1041  000042                     ___fldiv@grs:
  1042                           	opt stack 0
  1043                           
  1044                           ; 4 bytes @ 0x41
  1045  000042                     	ds	4
  1046  000046                     ___fldiv@bexp:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x45
  1050  000046                     	ds	1
  1051  000047                     ___fldiv@aexp:
  1052                           	opt stack 0
  1053                           
  1054                           ; 1 bytes @ 0x46
  1055  000047                     	ds	1
  1056  000048                     ?_read_adc_voltage:
  1057                           	opt stack 0
  1058  000048                     ?___flmul:
  1059                           	opt stack 0
  1060  000048                     ___flmul@b:
  1061                           	opt stack 0
  1062                           
  1063                           ; 4 bytes @ 0x47
  1064  000048                     	ds	4
  1065  00004C                     read_adc_voltage@voltage:
  1066                           	opt stack 0
  1067  00004C                     ___flmul@a:
  1068                           	opt stack 0
  1069                           
  1070                           ; 4 bytes @ 0x4B
  1071  00004C                     	ds	4
  1072  000050                     ??___flmul:
  1073  000050                     read_adc_voltage@raw_value:
  1074                           	opt stack 0
  1075                           
  1076                           ; 2 bytes @ 0x4F
  1077  000050                     	ds	2
  1078  000052                     read_adc_voltage@channel:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x51
  1082  000052                     	ds	2
  1083  000054                     ?_fround:
  1084                           	opt stack 0
  1085  000054                     ?_scale:
  1086                           	opt stack 0
  1087                           
  1088                           ; 4 bytes @ 0x53
  1089  000054                     	ds	4
  1090  000058                     tblptru	equ	0xFF8
  1091                           tblptrh	equ	0xFF7
  1092                           tblptrl	equ	0xFF6
  1093                           tablat	equ	0xFF5
  1094                           postinc0	equ	0xFEE
  1095                           wreg	equ	0xFE8
  1096                           postdec1	equ	0xFE5
  1097                           fsr1l	equ	0xFE1
  1098                           
  1099                           ; 1 bytes @ 0x57
  1100 ;;
  1101 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1102 ;;
  1103 ;; *************** function _main *****************
  1104 ;; Defined at:
  1105 ;;		line 279 in file "pwm_asl.c"
  1106 ;; Parameters:    Size  Location     Type
  1107 ;;		None
  1108 ;; Auto vars:     Size  Location     Type
  1109 ;;  voltage         4   97[BANK0 ] float 
  1110 ;;  channel         1  101[BANK0 ] unsigned char 
  1111 ;; Return value:  Size  Location     Type
  1112 ;;                  1    wreg      void 
  1113 ;; Registers used:
  1114 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1115 ;; Tracked objects:
  1116 ;;		On entry : 0/0
  1117 ;;		On exit  : 0/0
  1118 ;;		Unchanged: 0/0
  1119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1121 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1123 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1124 ;;Total ram usage:        5 bytes
  1125 ;; Hardware stack levels required when called:    9
  1126 ;; This function calls:
  1127 ;;		___flmul
  1128 ;;		_delay_ms
  1129 ;;		_display
  1130 ;;		_initInterrupts
  1131 ;;		_init_adc_no_lib
  1132 ;;		_init_pwm1
  1133 ;;		_lcd_init
  1134 ;;		_lcd_putc
  1135 ;;		_operation
  1136 ;;		_read_adc_voltage
  1137 ;;		_setupPorts
  1138 ;; This function is called by:
  1139 ;;		Startup code after reset
  1140 ;; This function uses a non-reentrant model
  1141 ;;
  1142                           
  1143                           	psect	text0
  1144  0025B2                     __ptext0:
  1145                           	opt stack 0
  1146  0025B2                     _main:
  1147                           	opt stack 22
  1148                           
  1149                           ;pwm_asl.c: 280: unsigned char channel;
  1150                           ;pwm_asl.c: 281: float voltage;
  1151                           ;pwm_asl.c: 282: setupPorts();
  1152                           
  1153                           ;incstack = 0
  1154  0025B2  ECF7  F016         	call	_setupPorts	;wreg free
  1155                           
  1156                           ;pwm_asl.c: 283: initInterrupts();
  1157  0025B6  EC3E  F016         	call	_initInterrupts	;wreg free
  1158                           
  1159                           ;pwm_asl.c: 284: lcd_init();
  1160  0025BA  EC25  F015         	call	_lcd_init	;wreg free
  1161                           
  1162                           ;pwm_asl.c: 285: init_adc_no_lib();
  1163  0025BE  EC21  F017         	call	_init_adc_no_lib	;wreg free
  1164                           
  1165                           ;pwm_asl.c: 286: init_pwm1();
  1166  0025C2  EC15  F017         	call	_init_pwm1	;wreg free
  1167                           
  1168                           ;pwm_asl.c: 287: lcd_putc('\f');
  1169  0025C6  0E0C               	movlw	12
  1170  0025C8  EC81  F015         	call	_lcd_putc
  1171                           
  1172                           ;pwm_asl.c: 288: mode = OFF;
  1173  0025CC  0E00               	movlw	0
  1174  0025CE  6E5E               	movwf	_mode,c
  1175                           
  1176                           ;pwm_asl.c: 289: HS = HS_0;
  1177  0025D0  0E00               	movlw	0
  1178  0025D2  6E5F               	movwf	_HS,c
  1179  0025D4                     l143:
  1180  0025D4  0004               	clrwdt		;# 
  1181                           
  1182                           ;pwm_asl.c: 292: delay_ms(200);
  1183  0025D6  0E00               	movlw	0
  1184  0025D8  6E1C               	movwf	delay_ms@n+1,c
  1185  0025DA  0EC8               	movlw	200
  1186  0025DC  6E1B               	movwf	delay_ms@n,c
  1187  0025DE  ECD3  F016         	call	_delay_ms	;wreg free
  1188                           
  1189                           ;pwm_asl.c: 293: for (channel = 0; channel < 3; channel++) {
  1190  0025E2  0E00               	movlw	0
  1191  0025E4  0100               	movlb	0	; () banked
  1192  0025E6  6FE5               	movwf	main@channel& (0+255),b
  1193  0025E8                     l5131:
  1194                           
  1195                           ; BSR set to: 0
  1196  0025E8  0E02               	movlw	2
  1197  0025EA  65E5               	cpfsgt	main@channel& (0+255),b
  1198  0025EC  D001               	goto	l144
  1199  0025EE  D01E               	goto	u5590
  1200  0025F0                     l144:
  1201                           
  1202                           ; BSR set to: 0
  1203                           ;pwm_asl.c: 294: voltage = read_adc_voltage((unsigned char) channel);
  1204                           
  1205                           ; BSR set to: 0
  1206  0025F0  51E5               	movf	main@channel& (0+255),w,b
  1207  0025F2  EC00  F014         	call	_read_adc_voltage
  1208  0025F6  C048  F0E1         	movff	?_read_adc_voltage,main@voltage
  1209  0025FA  C049  F0E2         	movff	?_read_adc_voltage+1,main@voltage+1
  1210  0025FE  C04A  F0E3         	movff	?_read_adc_voltage+2,main@voltage+2
  1211  002602  C04B  F0E4         	movff	?_read_adc_voltage+3,main@voltage+3
  1212                           
  1213                           ;pwm_asl.c: 295: AN[channel] = voltage;
  1214  002606  0100               	movlb	0	; () banked
  1215  002608  51E5               	movf	main@channel& (0+255),w,b
  1216  00260A  0D04               	mullw	4
  1217  00260C  0EE6               	movlw	low _AN
  1218  00260E  24F3               	addwf	prodl,w,c
  1219  002610  6ED9               	movwf	fsr2l,c
  1220  002612  0E00               	movlw	high _AN
  1221  002614  20F4               	addwfc	prodh,w,c
  1222  002616  6EDA               	movwf	fsr2h,c
  1223  002618  C0E1  FFDE         	movff	main@voltage,postinc2
  1224  00261C  C0E2  FFDE         	movff	main@voltage+1,postinc2
  1225  002620  C0E3  FFDE         	movff	main@voltage+2,postinc2
  1226  002624  C0E4  FFDE         	movff	main@voltage+3,postinc2
  1227                           
  1228                           ; BSR set to: 0
  1229  002628  2BE5               	incf	main@channel& (0+255),f,b
  1230  00262A  D7DE               	goto	l5131
  1231  00262C                     u5590:
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;pwm_asl.c: 296: }
  1235                           ;pwm_asl.c: 297: sp=AN[0]*20;
  1236                           
  1237                           ; BSR set to: 0
  1238  00262C  C0E6  F048         	movff	_AN,___flmul@b
  1239  002630  C0E7  F049         	movff	_AN+1,___flmul@b+1
  1240  002634  C0E8  F04A         	movff	_AN+2,___flmul@b+2
  1241  002638  C0E9  F04B         	movff	_AN+3,___flmul@b+3
  1242  00263C  0E00               	movlw	0
  1243  00263E  6E4C               	movwf	___flmul@a,c
  1244  002640  0E00               	movlw	0
  1245  002642  6E4D               	movwf	___flmul@a+1,c
  1246  002644  0EA0               	movlw	160
  1247  002646  6E4E               	movwf	___flmul@a+2,c
  1248  002648  0E41               	movlw	65
  1249  00264A  6E4F               	movwf	___flmul@a+3,c
  1250  00264C  EC84  F007         	call	___flmul	;wreg free
  1251  002650  C048  F0F2         	movff	?___flmul,_sp
  1252  002654  C049  F0F3         	movff	?___flmul+1,_sp+1
  1253  002658  C04A  F0F4         	movff	?___flmul+2,_sp+2
  1254  00265C  C04B  F0F5         	movff	?___flmul+3,_sp+3
  1255                           
  1256                           ;pwm_asl.c: 298: temp=AN[2]*100.0;
  1257  002660  C0EE  F048         	movff	_AN+8,___flmul@b
  1258  002664  C0EF  F049         	movff	_AN+9,___flmul@b+1
  1259  002668  C0F0  F04A         	movff	_AN+10,___flmul@b+2
  1260  00266C  C0F1  F04B         	movff	_AN+11,___flmul@b+3
  1261  002670  0E00               	movlw	0
  1262  002672  6E4C               	movwf	___flmul@a,c
  1263  002674  0E00               	movlw	0
  1264  002676  6E4D               	movwf	___flmul@a+1,c
  1265  002678  0EC8               	movlw	200
  1266  00267A  6E4E               	movwf	___flmul@a+2,c
  1267  00267C  0E42               	movlw	66
  1268  00267E  6E4F               	movwf	___flmul@a+3,c
  1269  002680  EC84  F007         	call	___flmul	;wreg free
  1270  002684  C048  F0F6         	movff	?___flmul,_temp
  1271  002688  C049  F0F7         	movff	?___flmul+1,_temp+1
  1272  00268C  C04A  F0F8         	movff	?___flmul+2,_temp+2
  1273  002690  C04B  F0F9         	movff	?___flmul+3,_temp+3
  1274                           
  1275                           ;pwm_asl.c: 299: operation();
  1276  002694  ECCC  F00A         	call	_operation	;wreg free
  1277                           
  1278                           ;pwm_asl.c: 300: display();
  1279  002698  ECF9  F00E         	call	_display	;wreg free
  1280  00269C  D79B               	goto	l143
  1281  00269E                     __end_of_main:
  1282                           	opt stack 0
  1283                           tblptru	equ	0xFF8
  1284                           tblptrh	equ	0xFF7
  1285                           tblptrl	equ	0xFF6
  1286                           tablat	equ	0xFF5
  1287                           prodh	equ	0xFF4
  1288                           prodl	equ	0xFF3
  1289                           postinc0	equ	0xFEE
  1290                           wreg	equ	0xFE8
  1291                           postdec1	equ	0xFE5
  1292                           fsr1l	equ	0xFE1
  1293                           postinc2	equ	0xFDE
  1294                           fsr2h	equ	0xFDA
  1295                           fsr2l	equ	0xFD9
  1296                           
  1297 ;; *************** function _setupPorts *****************
  1298 ;; Defined at:
  1299 ;;		line 103 in file "pwm_asl.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;		None
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		wreg, status,2
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1317 ;;Total ram usage:        0 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; Hardware stack levels required when called:    2
  1320 ;; This function calls:
  1321 ;;		Nothing
  1322 ;; This function is called by:
  1323 ;;		_main
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327                           	psect	text1
  1328  002DEE                     __ptext1:
  1329                           	opt stack 0
  1330  002DEE                     _setupPorts:
  1331                           	opt stack 28
  1332                           
  1333                           ;pwm_asl.c: 104: INTCON2 =0 ;
  1334                           
  1335                           ;incstack = 0
  1336  002DEE  0E00               	movlw	0
  1337  002DF0  6EF1               	movwf	intcon2,c	;volatile
  1338                           
  1339                           ;pwm_asl.c: 105: ADCON0 = 0;
  1340  002DF2  0E00               	movlw	0
  1341  002DF4  6EC2               	movwf	4034,c	;volatile
  1342                           
  1343                           ;pwm_asl.c: 106: ADCON1 = 0b00001100;
  1344  002DF6  0E0C               	movlw	12
  1345  002DF8  6EC1               	movwf	4033,c	;volatile
  1346                           
  1347                           ;pwm_asl.c: 107: TRISB = 0xFF;
  1348  002DFA  6893               	setf	3987,c	;volatile
  1349                           
  1350                           ;pwm_asl.c: 108: TRISC = 0x80;
  1351  002DFC  0E80               	movlw	128
  1352  002DFE  6E94               	movwf	3988,c	;volatile
  1353                           
  1354                           ;pwm_asl.c: 109: TRISA = 0xFF;
  1355  002E00  6892               	setf	3986,c	;volatile
  1356                           
  1357                           ;pwm_asl.c: 110: TRISD = 0x00;
  1358  002E02  0E00               	movlw	0
  1359  002E04  6E95               	movwf	3989,c	;volatile
  1360                           
  1361                           ;pwm_asl.c: 111: TRISE = 0x00;
  1362  002E06  0E00               	movlw	0
  1363  002E08  6E96               	movwf	3990,c	;volatile
  1364  002E0A  0012               	return		;funcret
  1365  002E0C                     __end_of_setupPorts:
  1366                           	opt stack 0
  1367                           tblptru	equ	0xFF8
  1368                           tblptrh	equ	0xFF7
  1369                           tblptrl	equ	0xFF6
  1370                           tablat	equ	0xFF5
  1371                           prodh	equ	0xFF4
  1372                           prodl	equ	0xFF3
  1373                           intcon2	equ	0xFF1
  1374                           postinc0	equ	0xFEE
  1375                           wreg	equ	0xFE8
  1376                           postdec1	equ	0xFE5
  1377                           fsr1l	equ	0xFE1
  1378                           postinc2	equ	0xFDE
  1379                           fsr2h	equ	0xFDA
  1380                           fsr2l	equ	0xFD9
  1381                           
  1382 ;; *************** function _read_adc_voltage *****************
  1383 ;; Defined at:
  1384 ;;		line 48 in file "my_adc.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;  channel         1    wreg     unsigned char 
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;  channel         1   81[COMRAM] unsigned char 
  1389 ;;  voltage         4   75[COMRAM] float 
  1390 ;;  raw_value       2   79[COMRAM] int 
  1391 ;; Return value:  Size  Location     Type
  1392 ;;                  4   71[COMRAM] float 
  1393 ;; Registers used:
  1394 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1395 ;; Tracked objects:
  1396 ;;		On entry : 0/0
  1397 ;;		On exit  : 0/0
  1398 ;;		Unchanged: 0/0
  1399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1400 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1401 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1403 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1404 ;;Total ram usage:       11 bytes
  1405 ;; Hardware stack levels used:    1
  1406 ;; Hardware stack levels required when called:    3
  1407 ;; This function calls:
  1408 ;;		___fldiv
  1409 ;;		___wmul
  1410 ;;		___xxtofl
  1411 ;;		_read_adc_raw_no_lib
  1412 ;; This function is called by:
  1413 ;;		_main
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417                           	psect	text2
  1418  002800                     __ptext2:
  1419                           	opt stack 0
  1420  002800                     _read_adc_voltage:
  1421                           	opt stack 27
  1422                           
  1423                           ;incstack = 0
  1424                           ;read_adc_voltage@channel stored from wreg
  1425  002800  6E52               	movwf	read_adc_voltage@channel,c
  1426                           
  1427                           ;my_adc.c: 49: int raw_value;
  1428                           ;my_adc.c: 50: float voltage;
  1429                           ;my_adc.c: 51: raw_value = read_adc_raw_no_lib(channel);
  1430  002802  5052               	movf	read_adc_voltage@channel,w,c
  1431  002804  EC5E  F016         	call	_read_adc_raw_no_lib
  1432  002808  C01B  F050         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  1433  00280C  C01C  F051         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  1434                           
  1435                           ;my_adc.c: 52: voltage = (raw_value * 5) / 1023.0;
  1436  002810  C050  F01B         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  1437  002814  C051  F01C         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  1438  002818  0E00               	movlw	0
  1439  00281A  6E1E               	movwf	___wmul@multiplicand+1,c
  1440  00281C  0E05               	movlw	5
  1441  00281E  6E1D               	movwf	___wmul@multiplicand,c
  1442  002820  ECC0  F016         	call	___wmul	;wreg free
  1443  002824  C01B  F021         	movff	?___wmul,___xxtofl@val
  1444  002828  C01C  F022         	movff	?___wmul+1,___xxtofl@val+1
  1445  00282C  0E00               	movlw	0
  1446  00282E  BE22               	btfsc	___xxtofl@val+1,7,c
  1447  002830  0EFF               	movlw	-1
  1448  002832  6E23               	movwf	___xxtofl@val+2,c
  1449  002834  6E24               	movwf	___xxtofl@val+3,c
  1450  002836  0E01               	movlw	1
  1451  002838  ECF5  F00F         	call	___xxtofl
  1452  00283C  C021  F02F         	movff	?___xxtofl,___fldiv@b
  1453  002840  C022  F030         	movff	?___xxtofl+1,___fldiv@b+1
  1454  002844  C023  F031         	movff	?___xxtofl+2,___fldiv@b+2
  1455  002848  C024  F032         	movff	?___xxtofl+3,___fldiv@b+3
  1456  00284C  0E00               	movlw	0
  1457  00284E  6E33               	movwf	___fldiv@a,c
  1458  002850  0EC0               	movlw	192
  1459  002852  6E34               	movwf	___fldiv@a+1,c
  1460  002854  0E7F               	movlw	127
  1461  002856  6E35               	movwf	___fldiv@a+2,c
  1462  002858  0E44               	movlw	68
  1463  00285A  6E36               	movwf	___fldiv@a+3,c
  1464  00285C  EC56  F00C         	call	___fldiv	;wreg free
  1465  002860  C02F  F04C         	movff	?___fldiv,read_adc_voltage@voltage
  1466  002864  C030  F04D         	movff	?___fldiv+1,read_adc_voltage@voltage+1
  1467  002868  C031  F04E         	movff	?___fldiv+2,read_adc_voltage@voltage+2
  1468  00286C  C032  F04F         	movff	?___fldiv+3,read_adc_voltage@voltage+3
  1469                           
  1470                           ;my_adc.c: 53: return voltage;
  1471  002870  C04C  F048         	movff	read_adc_voltage@voltage,?_read_adc_voltage
  1472  002874  C04D  F049         	movff	read_adc_voltage@voltage+1,?_read_adc_voltage+1
  1473  002878  C04E  F04A         	movff	read_adc_voltage@voltage+2,?_read_adc_voltage+2
  1474  00287C  C04F  F04B         	movff	read_adc_voltage@voltage+3,?_read_adc_voltage+3
  1475  002880  0012               	return	
  1476  002882                     __end_of_read_adc_voltage:
  1477                           	opt stack 0
  1478                           tblptru	equ	0xFF8
  1479                           tblptrh	equ	0xFF7
  1480                           tblptrl	equ	0xFF6
  1481                           tablat	equ	0xFF5
  1482                           prodh	equ	0xFF4
  1483                           prodl	equ	0xFF3
  1484                           intcon2	equ	0xFF1
  1485                           postinc0	equ	0xFEE
  1486                           wreg	equ	0xFE8
  1487                           postdec1	equ	0xFE5
  1488                           fsr1l	equ	0xFE1
  1489                           postinc2	equ	0xFDE
  1490                           fsr2h	equ	0xFDA
  1491                           fsr2l	equ	0xFD9
  1492                           
  1493 ;; *************** function _operation *****************
  1494 ;; Defined at:
  1495 ;;		line 166 in file "pwm_asl.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;		None
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;  PWM_percenta    4   58[BANK0 ] float 
  1500 ;;  CoolError       4   54[BANK0 ] float 
  1501 ;; Return value:  Size  Location     Type
  1502 ;;                  1    wreg      void 
  1503 ;; Registers used:
  1504 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1505 ;; Tracked objects:
  1506 ;;		On entry : 0/0
  1507 ;;		On exit  : 0/0
  1508 ;;		Unchanged: 0/0
  1509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1511 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1513 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1514 ;;Total ram usage:        8 bytes
  1515 ;; Hardware stack levels used:    1
  1516 ;; Hardware stack levels required when called:    3
  1517 ;; This function calls:
  1518 ;;		___fladd
  1519 ;;		___fldiv
  1520 ;;		___flge
  1521 ;;		___flmul
  1522 ;;		___flneg
  1523 ;;		___fltol
  1524 ;;		___xxtofl
  1525 ;;		_delay_ms
  1526 ;;		_read_adc_raw_no_lib
  1527 ;;		_set_pwm1_raw
  1528 ;; This function is called by:
  1529 ;;		_main
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533                           	psect	text3
  1534  001598                     __ptext3:
  1535                           	opt stack 0
  1536  001598                     _operation:
  1537                           	opt stack 27
  1538                           
  1539                           ;pwm_asl.c: 167: float CoolError;
  1540                           ;pwm_asl.c: 168: switch(mode) {
  1541                           
  1542                           ;incstack = 0
  1543  001598  D17B               	goto	l117
  1544  00159A                     l118:
  1545                           
  1546                           ;pwm_asl.c: 170: if(PORTBbits.RB3==0){
  1547  00159A  B681               	btfsc	3969,3,c	;volatile
  1548  00159C  0012               	return	
  1549                           
  1550                           ;pwm_asl.c: 171: delay_ms(250);
  1551  00159E  0E00               	movlw	0
  1552  0015A0  6E1C               	movwf	delay_ms@n+1,c
  1553  0015A2  0EFA               	movlw	250
  1554  0015A4  6E1B               	movwf	delay_ms@n,c
  1555  0015A6  ECD3  F016         	call	_delay_ms	;wreg free
  1556                           
  1557                           ;pwm_asl.c: 172: if(PORTBbits.RB3==0)
  1558  0015AA  B681               	btfsc	3969,3,c	;volatile
  1559  0015AC  0012               	return	
  1560                           
  1561                           ;pwm_asl.c: 173: {
  1562                           ;pwm_asl.c: 174: set_pwm1_raw(0);
  1563  0015AE  0E00               	movlw	0
  1564  0015B0  6E1C               	movwf	set_pwm1_raw@raw_value+1,c
  1565  0015B2  0E00               	movlw	0
  1566  0015B4  6E1B               	movwf	set_pwm1_raw@raw_value,c
  1567  0015B6  EC7B  F016         	call	_set_pwm1_raw	;wreg free
  1568                           
  1569                           ;pwm_asl.c: 175: PORTCbits.RC2=0;
  1570  0015BA  9482               	bcf	3970,2,c	;volatile
  1571                           
  1572                           ;pwm_asl.c: 176: HC=0;
  1573  0015BC  0E00               	movlw	0
  1574  0015BE  0101               	movlb	1	; () banked
  1575  0015C0  6FA2               	movwf	_HC& (0+255),b
  1576  0015C2  0E00               	movlw	0
  1577  0015C4  6FA3               	movwf	(_HC+1)& (0+255),b
  1578  0015C6  0E00               	movlw	0
  1579  0015C8  6FA4               	movwf	(_HC+2)& (0+255),b
  1580  0015CA  0E00               	movlw	0
  1581  0015CC  6FA5               	movwf	(_HC+3)& (0+255),b
  1582                           
  1583                           ; BSR set to: 1
  1584                           ;pwm_asl.c: 177: PIE2bits.CCP2IE = 0;
  1585  0015CE  90A0               	bcf	4000,0,c	;volatile
  1586                           
  1587                           ; BSR set to: 1
  1588                           ;pwm_asl.c: 178: }
  1589                           ;pwm_asl.c: 179: }
  1590                           ;pwm_asl.c: 180: break;
  1591                           
  1592                           ; BSR set to: 1
  1593  0015D0  0012               	return	
  1594  0015D2                     
  1595                           ;pwm_asl.c: 183: HC =(AN[1]/5.0)*100.0;
  1596                           
  1597                           ; BSR set to: 1
  1598  0015D2  0E00               	movlw	0
  1599  0015D4  6E33               	movwf	___fldiv@a,c
  1600  0015D6  0E00               	movlw	0
  1601  0015D8  6E34               	movwf	___fldiv@a+1,c
  1602  0015DA  0EA0               	movlw	160
  1603  0015DC  6E35               	movwf	___fldiv@a+2,c
  1604  0015DE  0E40               	movlw	64
  1605  0015E0  6E36               	movwf	___fldiv@a+3,c
  1606  0015E2  C0EA  F02F         	movff	_AN+4,___fldiv@b
  1607  0015E6  C0EB  F030         	movff	_AN+5,___fldiv@b+1
  1608  0015EA  C0EC  F031         	movff	_AN+6,___fldiv@b+2
  1609  0015EE  C0ED  F032         	movff	_AN+7,___fldiv@b+3
  1610  0015F2  EC56  F00C         	call	___fldiv	;wreg free
  1611  0015F6  C02F  F048         	movff	?___fldiv,___flmul@b
  1612  0015FA  C030  F049         	movff	?___fldiv+1,___flmul@b+1
  1613  0015FE  C031  F04A         	movff	?___fldiv+2,___flmul@b+2
  1614  001602  C032  F04B         	movff	?___fldiv+3,___flmul@b+3
  1615  001606  0E00               	movlw	0
  1616  001608  6E4C               	movwf	___flmul@a,c
  1617  00160A  0E00               	movlw	0
  1618  00160C  6E4D               	movwf	___flmul@a+1,c
  1619  00160E  0EC8               	movlw	200
  1620  001610  6E4E               	movwf	___flmul@a+2,c
  1621  001612  0E42               	movlw	66
  1622  001614  6E4F               	movwf	___flmul@a+3,c
  1623  001616  EC84  F007         	call	___flmul	;wreg free
  1624  00161A  C048  F1A2         	movff	?___flmul,_HC
  1625  00161E  C049  F1A3         	movff	?___flmul+1,_HC+1
  1626  001622  C04A  F1A4         	movff	?___flmul+2,_HC+2
  1627  001626  C04B  F1A5         	movff	?___flmul+3,_HC+3
  1628                           
  1629                           ;pwm_asl.c: 184: raw_val = read_adc_raw_no_lib(1);
  1630  00162A  0E01               	movlw	1
  1631  00162C  EC5E  F016         	call	_read_adc_raw_no_lib
  1632  001630  C01B  F0FA         	movff	?_read_adc_raw_no_lib,_raw_val
  1633  001634  C01C  F0FB         	movff	?_read_adc_raw_no_lib+1,_raw_val+1
  1634                           
  1635                           ;pwm_asl.c: 185: set_pwm1_raw(raw_val);
  1636  001638  C0FA  F01B         	movff	_raw_val,set_pwm1_raw@raw_value
  1637  00163C  C0FB  F01C         	movff	_raw_val+1,set_pwm1_raw@raw_value+1
  1638  001640  EC7B  F016         	call	_set_pwm1_raw	;wreg free
  1639                           
  1640                           ;pwm_asl.c: 186: break;
  1641  001644  0012               	return	
  1642  001646                     
  1643                           ;pwm_asl.c: 189: HC =(AN[1]/5.0)*100.0;
  1644  001646  0E00               	movlw	0
  1645  001648  6E33               	movwf	___fldiv@a,c
  1646  00164A  0E00               	movlw	0
  1647  00164C  6E34               	movwf	___fldiv@a+1,c
  1648  00164E  0EA0               	movlw	160
  1649  001650  6E35               	movwf	___fldiv@a+2,c
  1650  001652  0E40               	movlw	64
  1651  001654  6E36               	movwf	___fldiv@a+3,c
  1652  001656  C0EA  F02F         	movff	_AN+4,___fldiv@b
  1653  00165A  C0EB  F030         	movff	_AN+5,___fldiv@b+1
  1654  00165E  C0EC  F031         	movff	_AN+6,___fldiv@b+2
  1655  001662  C0ED  F032         	movff	_AN+7,___fldiv@b+3
  1656  001666  EC56  F00C         	call	___fldiv	;wreg free
  1657  00166A  C02F  F048         	movff	?___fldiv,___flmul@b
  1658  00166E  C030  F049         	movff	?___fldiv+1,___flmul@b+1
  1659  001672  C031  F04A         	movff	?___fldiv+2,___flmul@b+2
  1660  001676  C032  F04B         	movff	?___fldiv+3,___flmul@b+3
  1661  00167A  0E00               	movlw	0
  1662  00167C  6E4C               	movwf	___flmul@a,c
  1663  00167E  0E00               	movlw	0
  1664  001680  6E4D               	movwf	___flmul@a+1,c
  1665  001682  0EC8               	movlw	200
  1666  001684  6E4E               	movwf	___flmul@a+2,c
  1667  001686  0E42               	movlw	66
  1668  001688  6E4F               	movwf	___flmul@a+3,c
  1669  00168A  EC84  F007         	call	___flmul	;wreg free
  1670  00168E  C048  F1A2         	movff	?___flmul,_HC
  1671  001692  C049  F1A3         	movff	?___flmul+1,_HC+1
  1672  001696  C04A  F1A4         	movff	?___flmul+2,_HC+2
  1673  00169A  C04B  F1A5         	movff	?___flmul+3,_HC+3
  1674                           
  1675                           ;pwm_asl.c: 191: break;
  1676  00169E  0012               	return	
  1677  0016A0                     
  1678                           ;pwm_asl.c: 194: CoolError = temp - sp;
  1679  0016A0  C0F2  F02F         	movff	_sp,___flneg@f1
  1680  0016A4  C0F3  F030         	movff	_sp+1,___flneg@f1+1
  1681  0016A8  C0F4  F031         	movff	_sp+2,___flneg@f1+2
  1682  0016AC  C0F5  F032         	movff	_sp+3,___flneg@f1+3
  1683  0016B0  EC92  F016         	call	___flneg	;wreg free
  1684  0016B4  C02F  F096         	movff	?___flneg,___fladd@b
  1685  0016B8  C030  F097         	movff	?___flneg+1,___fladd@b+1
  1686  0016BC  C031  F098         	movff	?___flneg+2,___fladd@b+2
  1687  0016C0  C032  F099         	movff	?___flneg+3,___fladd@b+3
  1688  0016C4  C0F6  F09A         	movff	_temp,___fladd@a
  1689  0016C8  C0F7  F09B         	movff	_temp+1,___fladd@a+1
  1690  0016CC  C0F8  F09C         	movff	_temp+2,___fladd@a+2
  1691  0016D0  C0F9  F09D         	movff	_temp+3,___fladd@a+3
  1692  0016D4  EC2D  F009         	call	___fladd	;wreg free
  1693  0016D8  C096  F0B6         	movff	?___fladd,operation@CoolError
  1694  0016DC  C097  F0B7         	movff	?___fladd+1,operation@CoolError+1
  1695  0016E0  C098  F0B8         	movff	?___fladd+2,operation@CoolError+2
  1696  0016E4  C099  F0B9         	movff	?___fladd+3,operation@CoolError+3
  1697                           
  1698                           ;pwm_asl.c: 195: if (CoolError > 0) {
  1699  0016E8  0E00               	movlw	0
  1700  0016EA  0100               	movlb	0	; () banked
  1701  0016EC  6FAA               	movwf	___flge@ff1& (0+255),b
  1702  0016EE  0E00               	movlw	0
  1703  0016F0  6FAB               	movwf	(___flge@ff1+1)& (0+255),b
  1704  0016F2  0E00               	movlw	0
  1705  0016F4  6FAC               	movwf	(___flge@ff1+2)& (0+255),b
  1706  0016F6  0E00               	movlw	0
  1707  0016F8  6FAD               	movwf	(___flge@ff1+3)& (0+255),b
  1708  0016FA  C0B6  F0AE         	movff	operation@CoolError,___flge@ff2
  1709  0016FE  C0B7  F0AF         	movff	operation@CoolError+1,___flge@ff2+1
  1710  001702  C0B8  F0B0         	movff	operation@CoolError+2,___flge@ff2+2
  1711  001706  C0B9  F0B1         	movff	operation@CoolError+3,___flge@ff2+3
  1712  00170A  ECCA  F011         	call	___flge	;wreg free
  1713  00170E  0100               	movlb	0	; () banked
  1714  001710  B0D8               	btfsc	status,0,c
  1715  001712  D073               	goto	l125
  1716                           
  1717                           ; BSR set to: 0
  1718                           ;pwm_asl.c: 196: float PWM_percentage_value = CoolError * 10;
  1719  001714  C0B6  F048         	movff	operation@CoolError,___flmul@b
  1720  001718  C0B7  F049         	movff	operation@CoolError+1,___flmul@b+1
  1721  00171C  C0B8  F04A         	movff	operation@CoolError+2,___flmul@b+2
  1722  001720  C0B9  F04B         	movff	operation@CoolError+3,___flmul@b+3
  1723  001724  0E00               	movlw	0
  1724  001726  6E4C               	movwf	___flmul@a,c
  1725  001728  0E00               	movlw	0
  1726  00172A  6E4D               	movwf	___flmul@a+1,c
  1727  00172C  0E20               	movlw	32
  1728  00172E  6E4E               	movwf	___flmul@a+2,c
  1729  001730  0E41               	movlw	65
  1730  001732  6E4F               	movwf	___flmul@a+3,c
  1731  001734  EC84  F007         	call	___flmul	;wreg free
  1732  001738  C048  F0BA         	movff	?___flmul,operation@PWM_percentage_value
  1733  00173C  C049  F0BB         	movff	?___flmul+1,operation@PWM_percentage_value+1
  1734  001740  C04A  F0BC         	movff	?___flmul+2,operation@PWM_percentage_value+2
  1735  001744  C04B  F0BD         	movff	?___flmul+3,operation@PWM_percentage_value+3
  1736                           
  1737                           ;pwm_asl.c: 197: if (PWM_percentage_value < 25) {
  1738  001748  C0BA  F0AA         	movff	operation@PWM_percentage_value,___flge@ff1
  1739  00174C  C0BB  F0AB         	movff	operation@PWM_percentage_value+1,___flge@ff1+1
  1740  001750  C0BC  F0AC         	movff	operation@PWM_percentage_value+2,___flge@ff1+2
  1741  001754  C0BD  F0AD         	movff	operation@PWM_percentage_value+3,___flge@ff1+3
  1742  001758  0E00               	movlw	0
  1743  00175A  0100               	movlb	0	; () banked
  1744  00175C  6FAE               	movwf	___flge@ff2& (0+255),b
  1745  00175E  0E00               	movlw	0
  1746  001760  6FAF               	movwf	(___flge@ff2+1)& (0+255),b
  1747  001762  0EC8               	movlw	200
  1748  001764  6FB0               	movwf	(___flge@ff2+2)& (0+255),b
  1749  001766  0E41               	movlw	65
  1750  001768  6FB1               	movwf	(___flge@ff2+3)& (0+255),b
  1751  00176A  ECCA  F011         	call	___flge	;wreg free
  1752  00176E  0100               	movlb	0	; () banked
  1753  001770  B0D8               	btfsc	status,0,c
  1754  001772  D008               	goto	l126
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;pwm_asl.c: 198: PWM_percentage_value = 25;
  1758  001774  0E00               	movlw	0
  1759  001776  6FBA               	movwf	operation@PWM_percentage_value& (0+255),b
  1760  001778  0E00               	movlw	0
  1761  00177A  6FBB               	movwf	(operation@PWM_percentage_value+1)& (0+255),b
  1762  00177C  0EC8               	movlw	200
  1763  00177E  6FBC               	movwf	(operation@PWM_percentage_value+2)& (0+255),b
  1764  001780  0E41               	movlw	65
  1765  001782  6FBD               	movwf	(operation@PWM_percentage_value+3)& (0+255),b
  1766  001784                     l126:
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;pwm_asl.c: 199: }
  1770                           ;pwm_asl.c: 200: raw_val = (int)(PWM_percentage_value * 1023.0 / 100.0);
  1771                           
  1772                           ; BSR set to: 0
  1773  001784  0E00               	movlw	0
  1774  001786  6E33               	movwf	___fldiv@a,c
  1775  001788  0E00               	movlw	0
  1776  00178A  6E34               	movwf	___fldiv@a+1,c
  1777  00178C  0EC8               	movlw	200
  1778  00178E  6E35               	movwf	___fldiv@a+2,c
  1779  001790  0E42               	movlw	66
  1780  001792  6E36               	movwf	___fldiv@a+3,c
  1781  001794  0E00               	movlw	0
  1782  001796  6E4C               	movwf	___flmul@a,c
  1783  001798  0EC0               	movlw	192
  1784  00179A  6E4D               	movwf	___flmul@a+1,c
  1785  00179C  0E7F               	movlw	127
  1786  00179E  6E4E               	movwf	___flmul@a+2,c
  1787  0017A0  0E44               	movlw	68
  1788  0017A2  6E4F               	movwf	___flmul@a+3,c
  1789  0017A4  C0BA  F048         	movff	operation@PWM_percentage_value,___flmul@b
  1790  0017A8  C0BB  F049         	movff	operation@PWM_percentage_value+1,___flmul@b+1
  1791  0017AC  C0BC  F04A         	movff	operation@PWM_percentage_value+2,___flmul@b+2
  1792  0017B0  C0BD  F04B         	movff	operation@PWM_percentage_value+3,___flmul@b+3
  1793  0017B4  EC84  F007         	call	___flmul	;wreg free
  1794  0017B8  C048  F02F         	movff	?___flmul,___fldiv@b
  1795  0017BC  C049  F030         	movff	?___flmul+1,___fldiv@b+1
  1796  0017C0  C04A  F031         	movff	?___flmul+2,___fldiv@b+2
  1797  0017C4  C04B  F032         	movff	?___flmul+3,___fldiv@b+3
  1798  0017C8  EC56  F00C         	call	___fldiv	;wreg free
  1799  0017CC  C02F  F092         	movff	?___fldiv,___fltol@f1
  1800  0017D0  C030  F093         	movff	?___fldiv+1,___fltol@f1+1
  1801  0017D4  C031  F094         	movff	?___fldiv+2,___fltol@f1+2
  1802  0017D8  C032  F095         	movff	?___fldiv+3,___fltol@f1+3
  1803  0017DC  EC4F  F013         	call	___fltol	;wreg free
  1804  0017E0  C092  F0FA         	movff	?___fltol,_raw_val
  1805  0017E4  C093  F0FB         	movff	?___fltol+1,_raw_val+1
  1806                           
  1807                           ;pwm_asl.c: 201: set_pwm1_raw(raw_val);
  1808  0017E8  C0FA  F01B         	movff	_raw_val,set_pwm1_raw@raw_value
  1809  0017EC  C0FB  F01C         	movff	_raw_val+1,set_pwm1_raw@raw_value+1
  1810  0017F0  EC7B  F016         	call	_set_pwm1_raw	;wreg free
  1811                           
  1812                           ;pwm_asl.c: 202: PORTCbits.RC5 = 0;
  1813  0017F4  9A82               	bcf	3970,5,c	;volatile
  1814                           
  1815                           ;pwm_asl.c: 203: PIE2bits.CCP2IE = 0;
  1816  0017F6  90A0               	bcf	4000,0,c	;volatile
  1817                           
  1818                           ;pwm_asl.c: 204: } else if (temp < (sp - HS)) {
  1819  0017F8  0012               	return	
  1820  0017FA                     l125:
  1821  0017FA  C0F6  F0AA         	movff	_temp,___flge@ff1
  1822  0017FE  C0F7  F0AB         	movff	_temp+1,___flge@ff1+1
  1823  001802  C0F8  F0AC         	movff	_temp+2,___flge@ff1+2
  1824  001806  C0F9  F0AD         	movff	_temp+3,___flge@ff1+3
  1825  00180A  C0F2  F09A         	movff	_sp,___fladd@a
  1826  00180E  C0F3  F09B         	movff	_sp+1,___fladd@a+1
  1827  001812  C0F4  F09C         	movff	_sp+2,___fladd@a+2
  1828  001816  C0F5  F09D         	movff	_sp+3,___fladd@a+3
  1829  00181A  505F               	movf	_HS,w,c
  1830  00181C  6E21               	movwf	___xxtofl@val,c
  1831  00181E  6A22               	clrf	___xxtofl@val+1,c
  1832  001820  6A23               	clrf	___xxtofl@val+2,c
  1833  001822  6A24               	clrf	___xxtofl@val+3,c
  1834  001824  0E00               	movlw	0
  1835  001826  ECF5  F00F         	call	___xxtofl
  1836  00182A  C021  F02F         	movff	?___xxtofl,___flneg@f1
  1837  00182E  C022  F030         	movff	?___xxtofl+1,___flneg@f1+1
  1838  001832  C023  F031         	movff	?___xxtofl+2,___flneg@f1+2
  1839  001836  C024  F032         	movff	?___xxtofl+3,___flneg@f1+3
  1840  00183A  EC92  F016         	call	___flneg	;wreg free
  1841  00183E  C02F  F096         	movff	?___flneg,___fladd@b
  1842  001842  C030  F097         	movff	?___flneg+1,___fladd@b+1
  1843  001846  C031  F098         	movff	?___flneg+2,___fladd@b+2
  1844  00184A  C032  F099         	movff	?___flneg+3,___fladd@b+3
  1845  00184E  EC2D  F009         	call	___fladd	;wreg free
  1846  001852  C096  F0AE         	movff	?___fladd,___flge@ff2
  1847  001856  C097  F0AF         	movff	?___fladd+1,___flge@ff2+1
  1848  00185A  C098  F0B0         	movff	?___fladd+2,___flge@ff2+2
  1849  00185E  C099  F0B1         	movff	?___fladd+3,___flge@ff2+3
  1850  001862  ECCA  F011         	call	___flge	;wreg free
  1851  001866  0100               	movlb	0	; () banked
  1852  001868  B0D8               	btfsc	status,0,c
  1853  00186A  0012               	return	
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;pwm_asl.c: 205: set_pwm1_raw(0);
  1857  00186C  0E00               	movlw	0
  1858  00186E  6E1C               	movwf	set_pwm1_raw@raw_value+1,c
  1859  001870  0E00               	movlw	0
  1860  001872  6E1B               	movwf	set_pwm1_raw@raw_value,c
  1861  001874  EC7B  F016         	call	_set_pwm1_raw	;wreg free
  1862                           
  1863                           ;pwm_asl.c: 206: PORTCbits.RC2 = 0;
  1864  001878  9482               	bcf	3970,2,c	;volatile
  1865                           
  1866                           ;pwm_asl.c: 207: HC = 50.0;
  1867  00187A  0E00               	movlw	0
  1868  00187C  0101               	movlb	1	; () banked
  1869  00187E  6FA2               	movwf	_HC& (0+255),b
  1870  001880  0E00               	movlw	0
  1871  001882  6FA3               	movwf	(_HC+1)& (0+255),b
  1872  001884  0E48               	movlw	72
  1873  001886  6FA4               	movwf	(_HC+2)& (0+255),b
  1874  001888  0E42               	movlw	66
  1875  00188A  6FA5               	movwf	(_HC+3)& (0+255),b
  1876                           
  1877                           ; BSR set to: 1
  1878                           ;pwm_asl.c: 208: PIE2bits.CCP2IE = 1;
  1879  00188C  80A0               	bsf	4000,0,c	;volatile
  1880                           
  1881                           ; BSR set to: 1
  1882                           ;pwm_asl.c: 211: }
  1883                           
  1884                           ; BSR set to: 1
  1885                           ;pwm_asl.c: 209: }
  1886                           ;pwm_asl.c: 210: break;
  1887                           
  1888                           ; BSR set to: 1
  1889  00188E  0012               	return	
  1890  001890                     l117:
  1891                           
  1892                           ; BSR set to: 1
  1893  001890  505E               	movf	_mode,w,c
  1894                           
  1895                           ; Switch size 1, requested type "space"
  1896                           ; Number of cases is 4, Range of values is 0 to 3
  1897                           ; switch strategies available:
  1898                           ; Name         Instructions Cycles
  1899                           ; simple_byte           13     7 (average)
  1900                           ;	Chosen strategy is simple_byte
  1901  001892  0A00               	xorlw	0	; case 0
  1902  001894  B4D8               	btfsc	status,2,c
  1903  001896  D681               	goto	l118
  1904  001898  0A01               	xorlw	1	; case 1
  1905  00189A  B4D8               	btfsc	status,2,c
  1906  00189C  D69A               	goto	l122
  1907  00189E  0A03               	xorlw	3	; case 2
  1908  0018A0  B4D8               	btfsc	status,2,c
  1909  0018A2  D6D1               	goto	l123
  1910  0018A4  0A01               	xorlw	1	; case 3
  1911  0018A6  A4D8               	btfss	status,2,c
  1912  0018A8  0012               	return	
  1913  0018AA  D6FA               	goto	l124
  1914  0018AC                     __end_of_operation:
  1915                           	opt stack 0
  1916                           tblptru	equ	0xFF8
  1917                           tblptrh	equ	0xFF7
  1918                           tblptrl	equ	0xFF6
  1919                           tablat	equ	0xFF5
  1920                           prodh	equ	0xFF4
  1921                           prodl	equ	0xFF3
  1922                           intcon2	equ	0xFF1
  1923                           postinc0	equ	0xFEE
  1924                           wreg	equ	0xFE8
  1925                           postdec1	equ	0xFE5
  1926                           fsr1l	equ	0xFE1
  1927                           postinc2	equ	0xFDE
  1928                           fsr2h	equ	0xFDA
  1929                           fsr2l	equ	0xFD9
  1930                           status	equ	0xFD8
  1931                           
  1932 ;; *************** function _set_pwm1_raw *****************
  1933 ;; Defined at:
  1934 ;;		line 17 in file "my_pwm.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;  raw_value       2   26[COMRAM] unsigned int 
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;		None
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  1    wreg      void 
  1941 ;; Registers used:
  1942 ;;		wreg, status,2, status,0
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1948 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1950 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1951 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;Total ram usage:        4 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:    2
  1955 ;; This function calls:
  1956 ;;		Nothing
  1957 ;; This function is called by:
  1958 ;;		_operation
  1959 ;;		_set_pwm1_percent
  1960 ;;		_set_pwm1_voltage
  1961 ;;		_set_pwm1_general
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           	psect	text4
  1966  002CF6                     __ptext4:
  1967                           	opt stack 0
  1968  002CF6                     _set_pwm1_raw:
  1969                           	opt stack 27
  1970                           
  1971                           ;my_pwm.c: 19: CCPR1L = (raw_value >> 2) & 0x00FF;
  1972                           
  1973                           ;incstack = 0
  1974  002CF6  C01B  F01D         	movff	set_pwm1_raw@raw_value,??_set_pwm1_raw
  1975  002CFA  C01C  F01E         	movff	set_pwm1_raw@raw_value+1,??_set_pwm1_raw+1
  1976  002CFE  90D8               	bcf	status,0,c
  1977  002D00  321E               	rrcf	??_set_pwm1_raw+1,f,c
  1978  002D02  321D               	rrcf	??_set_pwm1_raw,f,c
  1979  002D04  90D8               	bcf	status,0,c
  1980  002D06  321E               	rrcf	??_set_pwm1_raw+1,f,c
  1981  002D08  321D               	rrcf	??_set_pwm1_raw,f,c
  1982  002D0A  501D               	movf	??_set_pwm1_raw,w,c
  1983  002D0C  6EBE               	movwf	4030,c	;volatile
  1984                           
  1985                           ;my_pwm.c: 20: CCP1CONbits.DC1B = raw_value & 0x0003;
  1986  002D0E  C01B  F01D         	movff	set_pwm1_raw@raw_value,??_set_pwm1_raw
  1987  002D12  0E03               	movlw	3
  1988  002D14  161D               	andwf	??_set_pwm1_raw,f,c
  1989  002D16  3A1D               	swapf	??_set_pwm1_raw,f,c
  1990  002D18  50BD               	movf	4029,w,c	;volatile
  1991  002D1A  181D               	xorwf	??_set_pwm1_raw,w,c
  1992  002D1C  0BCF               	andlw	-49
  1993  002D1E  181D               	xorwf	??_set_pwm1_raw,w,c
  1994  002D20  6EBD               	movwf	4029,c	;volatile
  1995  002D22  0012               	return		;funcret
  1996  002D24                     __end_of_set_pwm1_raw:
  1997                           	opt stack 0
  1998                           tblptru	equ	0xFF8
  1999                           tblptrh	equ	0xFF7
  2000                           tblptrl	equ	0xFF6
  2001                           tablat	equ	0xFF5
  2002                           prodh	equ	0xFF4
  2003                           prodl	equ	0xFF3
  2004                           intcon2	equ	0xFF1
  2005                           postinc0	equ	0xFEE
  2006                           wreg	equ	0xFE8
  2007                           postdec1	equ	0xFE5
  2008                           fsr1l	equ	0xFE1
  2009                           postinc2	equ	0xFDE
  2010                           fsr2h	equ	0xFDA
  2011                           fsr2l	equ	0xFD9
  2012                           status	equ	0xFD8
  2013                           
  2014 ;; *************** function _read_adc_raw_no_lib *****************
  2015 ;; Defined at:
  2016 ;;		line 32 in file "my_adc.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;  channel         1    wreg     unsigned char 
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;  channel         1   32[COMRAM] unsigned char 
  2021 ;;  raw_value       2   30[COMRAM] int 
  2022 ;; Return value:  Size  Location     Type
  2023 ;;                  2   26[COMRAM] int 
  2024 ;; Registers used:
  2025 ;;		wreg, status,2, status,0
  2026 ;; Tracked objects:
  2027 ;;		On entry : 0/0
  2028 ;;		On exit  : 0/0
  2029 ;;		Unchanged: 0/0
  2030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2031 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2032 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2033 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2034 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2035 ;;Total ram usage:        7 bytes
  2036 ;; Hardware stack levels used:    1
  2037 ;; Hardware stack levels required when called:    2
  2038 ;; This function calls:
  2039 ;;		Nothing
  2040 ;; This function is called by:
  2041 ;;		_operation
  2042 ;;		_read_adc_voltage
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           	psect	text5
  2047  002CBC                     __ptext5:
  2048                           	opt stack 0
  2049  002CBC                     _read_adc_raw_no_lib:
  2050                           	opt stack 27
  2051                           
  2052                           ;incstack = 0
  2053                           ;read_adc_raw_no_lib@channel stored from wreg
  2054  002CBC  6E21               	movwf	read_adc_raw_no_lib@channel,c
  2055                           
  2056                           ;my_adc.c: 33: int raw_value;
  2057                           ;my_adc.c: 34: ADCON0bits.CHS = channel;
  2058  002CBE  C021  F01D         	movff	read_adc_raw_no_lib@channel,??_read_adc_raw_no_lib
  2059  002CC2  461D               	rlncf	??_read_adc_raw_no_lib,f,c
  2060  002CC4  461D               	rlncf	??_read_adc_raw_no_lib,f,c
  2061  002CC6  50C2               	movf	4034,w,c	;volatile
  2062  002CC8  181D               	xorwf	??_read_adc_raw_no_lib,w,c
  2063  002CCA  0BC3               	andlw	-61
  2064  002CCC  181D               	xorwf	??_read_adc_raw_no_lib,w,c
  2065  002CCE  6EC2               	movwf	4034,c	;volatile
  2066                           
  2067                           ;my_adc.c: 37: ADCON0bits.GO = 1;
  2068  002CD0  82C2               	bsf	4034,1,c	;volatile
  2069  002CD2  B2C2               	btfsc	4034,1,c	;volatile
  2070  002CD4  D7FE               	goto	l230
  2071                           
  2072                           ;my_adc.c: 41: raw_value = ADRESH << 8 | ADRESL;
  2073  002CD6  50C3               	movf	4035,w,c	;volatile
  2074  002CD8  CFC4 F01D          	movff	4036,??_read_adc_raw_no_lib	;volatile
  2075  002CDC  6A1E               	clrf	(??_read_adc_raw_no_lib+1)& (0+255),c
  2076  002CDE  C01D  F01E         	movff	??_read_adc_raw_no_lib,??_read_adc_raw_no_lib+1
  2077  002CE2  6A1D               	clrf	??_read_adc_raw_no_lib,c
  2078  002CE4  101D               	iorwf	??_read_adc_raw_no_lib,w,c
  2079  002CE6  6E1F               	movwf	read_adc_raw_no_lib@raw_value,c
  2080  002CE8  501E               	movf	??_read_adc_raw_no_lib+1,w,c
  2081  002CEA  6E20               	movwf	read_adc_raw_no_lib@raw_value+1,c
  2082                           
  2083                           ;my_adc.c: 45: return raw_value;
  2084  002CEC  C01F  F01B         	movff	read_adc_raw_no_lib@raw_value,?_read_adc_raw_no_lib
  2085  002CF0  C020  F01C         	movff	read_adc_raw_no_lib@raw_value+1,?_read_adc_raw_no_lib+1
  2086  002CF4  0012               	return	
  2087  002CF6                     __end_of_read_adc_raw_no_lib:
  2088                           	opt stack 0
  2089                           tblptru	equ	0xFF8
  2090                           tblptrh	equ	0xFF7
  2091                           tblptrl	equ	0xFF6
  2092                           tablat	equ	0xFF5
  2093                           prodh	equ	0xFF4
  2094                           prodl	equ	0xFF3
  2095                           intcon2	equ	0xFF1
  2096                           postinc0	equ	0xFEE
  2097                           wreg	equ	0xFE8
  2098                           postdec1	equ	0xFE5
  2099                           fsr1l	equ	0xFE1
  2100                           postinc2	equ	0xFDE
  2101                           fsr2h	equ	0xFDA
  2102                           fsr2l	equ	0xFD9
  2103                           status	equ	0xFD8
  2104                           
  2105 ;; *************** function ___fldiv *****************
  2106 ;; Defined at:
  2107 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcdiv.c"
  2108 ;; Parameters:    Size  Location     Type
  2109 ;;  b               4   46[COMRAM] int 
  2110 ;;  a               4   50[COMRAM] int 
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;  grs             4   65[COMRAM] unsigned long 
  2113 ;;  rem             4   59[COMRAM] unsigned long 
  2114 ;;  new_exp         2   63[COMRAM] int 
  2115 ;;  aexp            1   70[COMRAM] unsigned char 
  2116 ;;  bexp            1   69[COMRAM] unsigned char 
  2117 ;;  sign            1   58[COMRAM] unsigned char 
  2118 ;; Return value:  Size  Location     Type
  2119 ;;                  4   46[COMRAM] unsigned char 
  2120 ;; Registers used:
  2121 ;;		wreg, status,2, status,0
  2122 ;; Tracked objects:
  2123 ;;		On entry : 0/0
  2124 ;;		On exit  : 0/0
  2125 ;;		Unchanged: 0/0
  2126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2127 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2128 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2129 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2130 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2131 ;;Total ram usage:       25 bytes
  2132 ;; Hardware stack levels used:    1
  2133 ;; Hardware stack levels required when called:    2
  2134 ;; This function calls:
  2135 ;;		Nothing
  2136 ;; This function is called by:
  2137 ;;		_operation
  2138 ;;		_read_adc_voltage
  2139 ;;		_set_pwm1_percent
  2140 ;;		_set_pwm1_voltage
  2141 ;;		_set_pwm1_general
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           	psect	text6
  2146  0018AC                     __ptext6:
  2147                           	opt stack 0
  2148  0018AC                     ___fldiv:
  2149                           	opt stack 27
  2150                           
  2151                           ;incstack = 0
  2152  0018AC  5032               	movf	___fldiv@b+3,w,c
  2153  0018AE  0B80               	andlw	128
  2154  0018B0  6E3B               	movwf	___fldiv@sign,c
  2155  0018B2  5032               	movf	___fldiv@b+3,w,c
  2156  0018B4  2432               	addwf	___fldiv@b+3,w,c
  2157  0018B6  6E46               	movwf	___fldiv@bexp,c
  2158  0018B8  BE31               	btfsc	___fldiv@b+2,7,c
  2159  0018BA  8046               	bsf	___fldiv@bexp,0,c
  2160  0018BC  5046               	movf	___fldiv@bexp,w,c
  2161  0018BE  B4D8               	btfsc	status,2,c
  2162  0018C0  D00D               	goto	l971
  2163  0018C2  2846               	incf	___fldiv@bexp,w,c
  2164  0018C4  A4D8               	btfss	status,2,c
  2165  0018C6  D008               	goto	l972
  2166  0018C8  0E00               	movlw	0
  2167  0018CA  6E2F               	movwf	___fldiv@b,c
  2168  0018CC  0E00               	movlw	0
  2169  0018CE  6E30               	movwf	___fldiv@b+1,c
  2170  0018D0  0E00               	movlw	0
  2171  0018D2  6E31               	movwf	___fldiv@b+2,c
  2172  0018D4  0E00               	movlw	0
  2173  0018D6  6E32               	movwf	___fldiv@b+3,c
  2174  0018D8                     l972:
  2175  0018D8  8E31               	bsf	___fldiv@b+2,7,c
  2176  0018DA  D006               	goto	L1
  2177  0018DC                     l971:
  2178  0018DC  0E00               	movlw	0
  2179  0018DE  6E2F               	movwf	___fldiv@b,c
  2180  0018E0  0E00               	movlw	0
  2181  0018E2  6E30               	movwf	___fldiv@b+1,c
  2182  0018E4  0E00               	movlw	0
  2183  0018E6  6E31               	movwf	___fldiv@b+2,c
  2184  0018E8                     L1:
  2185  0018E8  0E00               	movlw	0
  2186  0018EA  6E32               	movwf	___fldiv@b+3,c
  2187  0018EC  5036               	movf	___fldiv@a+3,w,c
  2188  0018EE  0B80               	andlw	128
  2189  0018F0  1A3B               	xorwf	___fldiv@sign,f,c
  2190  0018F2  5036               	movf	___fldiv@a+3,w,c
  2191  0018F4  2436               	addwf	___fldiv@a+3,w,c
  2192  0018F6  6E47               	movwf	___fldiv@aexp,c
  2193  0018F8  BE35               	btfsc	___fldiv@a+2,7,c
  2194  0018FA  8047               	bsf	___fldiv@aexp,0,c
  2195  0018FC  5047               	movf	___fldiv@aexp,w,c
  2196  0018FE  B4D8               	btfsc	status,2,c
  2197  001900  D00D               	goto	l975
  2198  001902  2847               	incf	___fldiv@aexp,w,c
  2199  001904  A4D8               	btfss	status,2,c
  2200  001906  D008               	goto	l976
  2201  001908  0E00               	movlw	0
  2202  00190A  6E33               	movwf	___fldiv@a,c
  2203  00190C  0E00               	movlw	0
  2204  00190E  6E34               	movwf	___fldiv@a+1,c
  2205  001910  0E00               	movlw	0
  2206  001912  6E35               	movwf	___fldiv@a+2,c
  2207  001914  0E00               	movlw	0
  2208  001916  6E36               	movwf	___fldiv@a+3,c
  2209  001918                     l976:
  2210  001918  8E35               	bsf	___fldiv@a+2,7,c
  2211  00191A  D006               	goto	L2
  2212  00191C                     l975:
  2213  00191C  0E00               	movlw	0
  2214  00191E  6E33               	movwf	___fldiv@a,c
  2215  001920  0E00               	movlw	0
  2216  001922  6E34               	movwf	___fldiv@a+1,c
  2217  001924  0E00               	movlw	0
  2218  001926  6E35               	movwf	___fldiv@a+2,c
  2219  001928                     L2:
  2220  001928  0E00               	movlw	0
  2221  00192A  6E36               	movwf	___fldiv@a+3,c
  2222  00192C  5033               	movf	___fldiv@a,w,c
  2223  00192E  1034               	iorwf	___fldiv@a+1,w,c
  2224  001930  1035               	iorwf	___fldiv@a+2,w,c
  2225  001932  1036               	iorwf	___fldiv@a+3,w,c
  2226  001934  A4D8               	btfss	status,2,c
  2227  001936  D015               	goto	l978
  2228  001938  0E00               	movlw	0
  2229  00193A  6E2F               	movwf	___fldiv@b,c
  2230  00193C  0E00               	movlw	0
  2231  00193E  6E30               	movwf	___fldiv@b+1,c
  2232  001940  0E00               	movlw	0
  2233  001942  6E31               	movwf	___fldiv@b+2,c
  2234  001944  0E00               	movlw	0
  2235  001946  6E32               	movwf	___fldiv@b+3,c
  2236  001948  0E80               	movlw	128
  2237  00194A  1231               	iorwf	___fldiv@b+2,f,c
  2238  00194C  0E7F               	movlw	127
  2239  00194E  1232               	iorwf	___fldiv@b+3,f,c
  2240  001950  C02F  F02F         	movff	___fldiv@b,?___fldiv
  2241  001954  C030  F030         	movff	___fldiv@b+1,?___fldiv+1
  2242  001958  C031  F031         	movff	___fldiv@b+2,?___fldiv+2
  2243  00195C  C032  F032         	movff	___fldiv@b+3,?___fldiv+3
  2244  001960  0012               	return	
  2245  001962                     l978:
  2246  001962  5046               	movf	___fldiv@bexp,w,c
  2247  001964  A4D8               	btfss	status,2,c
  2248  001966  D011               	goto	l980
  2249  001968  0E00               	movlw	0
  2250  00196A  6E2F               	movwf	___fldiv@b,c
  2251  00196C  0E00               	movlw	0
  2252  00196E  6E30               	movwf	___fldiv@b+1,c
  2253  001970  0E00               	movlw	0
  2254  001972  6E31               	movwf	___fldiv@b+2,c
  2255  001974  0E00               	movlw	0
  2256  001976  6E32               	movwf	___fldiv@b+3,c
  2257  001978  C02F  F02F         	movff	___fldiv@b,?___fldiv
  2258  00197C  C030  F030         	movff	___fldiv@b+1,?___fldiv+1
  2259  001980  C031  F031         	movff	___fldiv@b+2,?___fldiv+2
  2260  001984  C032  F032         	movff	___fldiv@b+3,?___fldiv+3
  2261  001988  0012               	return	
  2262  00198A                     l980:
  2263  00198A  5047               	movf	___fldiv@aexp,w,c
  2264  00198C  6E37               	movwf	??___fldiv& (0+255),c
  2265  00198E  6A38               	clrf	(??___fldiv+1)& (0+255),c
  2266  001990  1E37               	comf	??___fldiv,f,c
  2267  001992  1E38               	comf	??___fldiv+1,f,c
  2268  001994  4A37               	infsnz	??___fldiv,f,c
  2269  001996  2A38               	incf	??___fldiv+1,f,c
  2270  001998  5046               	movf	___fldiv@bexp,w,c
  2271  00199A  6E39               	movwf	(??___fldiv+2)& (0+255),c
  2272  00199C  6A3A               	clrf	(??___fldiv+3)& (0+255),c
  2273  00199E  5037               	movf	??___fldiv,w,c
  2274  0019A0  2639               	addwf	??___fldiv+2,f,c
  2275  0019A2  5038               	movf	??___fldiv+1,w,c
  2276  0019A4  223A               	addwfc	??___fldiv+3,f,c
  2277  0019A6  0E7F               	movlw	127
  2278  0019A8  2439               	addwf	??___fldiv+2,w,c
  2279  0019AA  6E40               	movwf	___fldiv@new_exp,c
  2280  0019AC  0E00               	movlw	0
  2281  0019AE  203A               	addwfc	??___fldiv+3,w,c
  2282  0019B0  6E41               	movwf	___fldiv@new_exp+1,c
  2283  0019B2  C02F  F03C         	movff	___fldiv@b,___fldiv@rem
  2284  0019B6  C030  F03D         	movff	___fldiv@b+1,___fldiv@rem+1
  2285  0019BA  C031  F03E         	movff	___fldiv@b+2,___fldiv@rem+2
  2286  0019BE  C032  F03F         	movff	___fldiv@b+3,___fldiv@rem+3
  2287  0019C2  0E00               	movlw	0
  2288  0019C4  6E2F               	movwf	___fldiv@b,c
  2289  0019C6  0E00               	movlw	0
  2290  0019C8  6E30               	movwf	___fldiv@b+1,c
  2291  0019CA  0E00               	movlw	0
  2292  0019CC  6E31               	movwf	___fldiv@b+2,c
  2293  0019CE  0E00               	movlw	0
  2294  0019D0  6E32               	movwf	___fldiv@b+3,c
  2295  0019D2  0E00               	movlw	0
  2296  0019D4  6E42               	movwf	___fldiv@grs,c
  2297  0019D6  0E00               	movlw	0
  2298  0019D8  6E43               	movwf	___fldiv@grs+1,c
  2299  0019DA  0E00               	movlw	0
  2300  0019DC  6E44               	movwf	___fldiv@grs+2,c
  2301  0019DE  0E00               	movlw	0
  2302  0019E0  6E45               	movwf	___fldiv@grs+3,c
  2303  0019E2  0E00               	movlw	0
  2304  0019E4  6E47               	movwf	___fldiv@aexp,c
  2305  0019E6  D028               	goto	l981
  2306  0019E8  5047               	movf	___fldiv@aexp,w,c
  2307  0019EA  B4D8               	btfsc	status,2,c
  2308  0019EC  D011               	goto	l983
  2309  0019EE  90D8               	bcf	status,0,c
  2310  0019F0  363C               	rlcf	___fldiv@rem,f,c
  2311  0019F2  363D               	rlcf	___fldiv@rem+1,f,c
  2312  0019F4  363E               	rlcf	___fldiv@rem+2,f,c
  2313  0019F6  363F               	rlcf	___fldiv@rem+3,f,c
  2314  0019F8  90D8               	bcf	status,0,c
  2315  0019FA  362F               	rlcf	___fldiv@b,f,c
  2316  0019FC  3630               	rlcf	___fldiv@b+1,f,c
  2317  0019FE  3631               	rlcf	___fldiv@b+2,f,c
  2318  001A00  3632               	rlcf	___fldiv@b+3,f,c
  2319  001A02  BE45               	btfsc	___fldiv@grs+3,7,c
  2320  001A04  802F               	bsf	___fldiv@b,0,c
  2321  001A06  90D8               	bcf	status,0,c
  2322  001A08  3642               	rlcf	___fldiv@grs,f,c
  2323  001A0A  3643               	rlcf	___fldiv@grs+1,f,c
  2324  001A0C  3644               	rlcf	___fldiv@grs+2,f,c
  2325  001A0E  3645               	rlcf	___fldiv@grs+3,f,c
  2326  001A10                     l983:
  2327  001A10  5033               	movf	___fldiv@a,w,c
  2328  001A12  5C3C               	subwf	___fldiv@rem,w,c
  2329  001A14  5034               	movf	___fldiv@a+1,w,c
  2330  001A16  583D               	subwfb	___fldiv@rem+1,w,c
  2331  001A18  5035               	movf	___fldiv@a+2,w,c
  2332  001A1A  583E               	subwfb	___fldiv@rem+2,w,c
  2333  001A1C  5036               	movf	___fldiv@a+3,w,c
  2334  001A1E  583F               	subwfb	___fldiv@rem+3,w,c
  2335  001A20  A0D8               	btfss	status,0,c
  2336  001A22  D009               	goto	l985
  2337  001A24  8C45               	bsf	___fldiv@grs+3,6,c
  2338  001A26  5033               	movf	___fldiv@a,w,c
  2339  001A28  5E3C               	subwf	___fldiv@rem,f,c
  2340  001A2A  5034               	movf	___fldiv@a+1,w,c
  2341  001A2C  5A3D               	subwfb	___fldiv@rem+1,f,c
  2342  001A2E  5035               	movf	___fldiv@a+2,w,c
  2343  001A30  5A3E               	subwfb	___fldiv@rem+2,f,c
  2344  001A32  5036               	movf	___fldiv@a+3,w,c
  2345  001A34  5A3F               	subwfb	___fldiv@rem+3,f,c
  2346  001A36                     l985:
  2347  001A36  2A47               	incf	___fldiv@aexp,f,c
  2348  001A38                     l981:
  2349  001A38  0E19               	movlw	25
  2350  001A3A  6447               	cpfsgt	___fldiv@aexp,c
  2351  001A3C  D7D5               	goto	l982
  2352  001A3E  503C               	movf	___fldiv@rem,w,c
  2353  001A40  103D               	iorwf	___fldiv@rem+1,w,c
  2354  001A42  103E               	iorwf	___fldiv@rem+2,w,c
  2355  001A44  103F               	iorwf	___fldiv@rem+3,w,c
  2356  001A46  B4D8               	btfsc	status,2,c
  2357  001A48  D011               	goto	l988
  2358  001A4A  8042               	bsf	___fldiv@grs,0,c
  2359  001A4C  D00F               	goto	l988
  2360  001A4E  90D8               	bcf	status,0,c
  2361  001A50  362F               	rlcf	___fldiv@b,f,c
  2362  001A52  3630               	rlcf	___fldiv@b+1,f,c
  2363  001A54  3631               	rlcf	___fldiv@b+2,f,c
  2364  001A56  3632               	rlcf	___fldiv@b+3,f,c
  2365  001A58  BE45               	btfsc	___fldiv@grs+3,7,c
  2366  001A5A  802F               	bsf	___fldiv@b,0,c
  2367  001A5C  90D8               	bcf	status,0,c
  2368  001A5E  3642               	rlcf	___fldiv@grs,f,c
  2369  001A60  3643               	rlcf	___fldiv@grs+1,f,c
  2370  001A62  3644               	rlcf	___fldiv@grs+2,f,c
  2371  001A64  3645               	rlcf	___fldiv@grs+3,f,c
  2372  001A66  0640               	decf	___fldiv@new_exp,f,c
  2373  001A68  A0D8               	btfss	status,0,c
  2374  001A6A  0641               	decf	___fldiv@new_exp+1,f,c
  2375  001A6C                     l988:
  2376  001A6C  AE31               	btfss	___fldiv@b+2,7,c
  2377  001A6E  D7EF               	goto	l989
  2378  001A70  0E00               	movlw	0
  2379  001A72  6E47               	movwf	___fldiv@aexp,c
  2380  001A74  AE45               	btfss	___fldiv@grs+3,7,c
  2381  001A76  D016               	goto	l995
  2382  001A78  0EFF               	movlw	255
  2383  001A7A  1442               	andwf	___fldiv@grs,w,c
  2384  001A7C  6E37               	movwf	??___fldiv& (0+255),c
  2385  001A7E  0EFF               	movlw	255
  2386  001A80  1443               	andwf	___fldiv@grs+1,w,c
  2387  001A82  6E38               	movwf	(??___fldiv+1)& (0+255),c
  2388  001A84  0EFF               	movlw	255
  2389  001A86  1444               	andwf	___fldiv@grs+2,w,c
  2390  001A88  6E39               	movwf	(??___fldiv+2)& (0+255),c
  2391  001A8A  0E7F               	movlw	127
  2392  001A8C  1445               	andwf	___fldiv@grs+3,w,c
  2393  001A8E  6E3A               	movwf	(??___fldiv+3)& (0+255),c
  2394  001A90  5037               	movf	??___fldiv,w,c
  2395  001A92  1038               	iorwf	??___fldiv+1,w,c
  2396  001A94  1039               	iorwf	??___fldiv+2,w,c
  2397  001A96  103A               	iorwf	??___fldiv+3,w,c
  2398  001A98  A4D8               	btfss	status,2,c
  2399  001A9A  D002               	goto	u4420
  2400  001A9C  A02F               	btfss	___fldiv@b,0,c
  2401  001A9E  D002               	goto	l995
  2402  001AA0                     u4420:
  2403  001AA0  0E01               	movlw	1
  2404  001AA2  6E47               	movwf	___fldiv@aexp,c
  2405  001AA4                     l995:
  2406  001AA4  5047               	movf	___fldiv@aexp,w,c
  2407  001AA6  B4D8               	btfsc	status,2,c
  2408  001AA8  D01F               	goto	l997
  2409  001AAA  0E01               	movlw	1
  2410  001AAC  262F               	addwf	___fldiv@b,f,c
  2411  001AAE  0E00               	movlw	0
  2412  001AB0  2230               	addwfc	___fldiv@b+1,f,c
  2413  001AB2  2231               	addwfc	___fldiv@b+2,f,c
  2414  001AB4  2232               	addwfc	___fldiv@b+3,f,c
  2415  001AB6  A032               	btfss	___fldiv@b+3,0,c
  2416  001AB8  D017               	goto	l997
  2417  001ABA  C02F  F037         	movff	___fldiv@b,??___fldiv
  2418  001ABE  C030  F038         	movff	___fldiv@b+1,??___fldiv+1
  2419  001AC2  C031  F039         	movff	___fldiv@b+2,??___fldiv+2
  2420  001AC6  C032  F03A         	movff	___fldiv@b+3,??___fldiv+3
  2421  001ACA  343A               	rlcf	??___fldiv+3,w,c
  2422  001ACC  323A               	rrcf	??___fldiv+3,f,c
  2423  001ACE  3239               	rrcf	??___fldiv+2,f,c
  2424  001AD0  3238               	rrcf	??___fldiv+1,f,c
  2425  001AD2  3237               	rrcf	??___fldiv,f,c
  2426  001AD4  C037  F02F         	movff	??___fldiv,___fldiv@b
  2427  001AD8  C038  F030         	movff	??___fldiv+1,___fldiv@b+1
  2428  001ADC  C039  F031         	movff	??___fldiv+2,___fldiv@b+2
  2429  001AE0  C03A  F032         	movff	??___fldiv+3,___fldiv@b+3
  2430  001AE4  4A40               	infsnz	___fldiv@new_exp,f,c
  2431  001AE6  2A41               	incf	___fldiv@new_exp+1,f,c
  2432  001AE8                     l997:
  2433  001AE8  BE41               	btfsc	___fldiv@new_exp+1,7,c
  2434  001AEA  D010               	goto	l998
  2435  001AEC  5041               	movf	___fldiv@new_exp+1,w,c
  2436  001AEE  E103               	bnz	u4450
  2437  001AF0  2840               	incf	___fldiv@new_exp,w,c
  2438  001AF2  A0D8               	btfss	status,0,c
  2439  001AF4  D00B               	goto	l998
  2440  001AF6                     u4450:
  2441  001AF6  0E00               	movlw	0
  2442  001AF8  6E41               	movwf	___fldiv@new_exp+1,c
  2443  001AFA  6840               	setf	___fldiv@new_exp,c
  2444  001AFC  0E00               	movlw	0
  2445  001AFE  6E2F               	movwf	___fldiv@b,c
  2446  001B00  0E00               	movlw	0
  2447  001B02  6E30               	movwf	___fldiv@b+1,c
  2448  001B04  0E00               	movlw	0
  2449  001B06  6E31               	movwf	___fldiv@b+2,c
  2450  001B08  0E00               	movlw	0
  2451  001B0A  6E32               	movwf	___fldiv@b+3,c
  2452  001B0C                     l998:
  2453  001B0C  BE41               	btfsc	___fldiv@new_exp+1,7,c
  2454  001B0E  D005               	goto	u4460
  2455  001B10  5041               	movf	___fldiv@new_exp+1,w,c
  2456  001B12  E111               	bnz	l4119
  2457  001B14  0440               	decf	___fldiv@new_exp,w,c
  2458  001B16  B0D8               	btfsc	status,0,c
  2459  001B18  D00E               	goto	l999
  2460  001B1A                     u4460:
  2461  001B1A  0E00               	movlw	0
  2462  001B1C  6E41               	movwf	___fldiv@new_exp+1,c
  2463  001B1E  0E00               	movlw	0
  2464  001B20  6E40               	movwf	___fldiv@new_exp,c
  2465  001B22  0E00               	movlw	0
  2466  001B24  6E2F               	movwf	___fldiv@b,c
  2467  001B26  0E00               	movlw	0
  2468  001B28  6E30               	movwf	___fldiv@b+1,c
  2469  001B2A  0E00               	movlw	0
  2470  001B2C  6E31               	movwf	___fldiv@b+2,c
  2471  001B2E  0E00               	movlw	0
  2472  001B30  6E32               	movwf	___fldiv@b+3,c
  2473  001B32  0E00               	movlw	0
  2474  001B34  6E3B               	movwf	___fldiv@sign,c
  2475  001B36                     l999:
  2476  001B36                     l4119:
  2477  001B36  C040  F046         	movff	___fldiv@new_exp,___fldiv@bexp
  2478  001B3A  A046               	btfss	___fldiv@bexp,0,c
  2479  001B3C  D002               	goto	l1000
  2480  001B3E  8E31               	bsf	___fldiv@b+2,7,c
  2481  001B40  D001               	goto	l1001
  2482  001B42                     l1000:
  2483  001B42  9E31               	bcf	___fldiv@b+2,7,c
  2484  001B44                     l1001:
  2485  001B44  90D8               	bcf	status,0,c
  2486  001B46  3046               	rrcf	___fldiv@bexp,w,c
  2487  001B48  6E32               	movwf	___fldiv@b+3,c
  2488  001B4A  503B               	movf	___fldiv@sign,w,c
  2489  001B4C  1232               	iorwf	___fldiv@b+3,f,c
  2490  001B4E  C02F  F02F         	movff	___fldiv@b,?___fldiv
  2491  001B52  C030  F030         	movff	___fldiv@b+1,?___fldiv+1
  2492  001B56  C031  F031         	movff	___fldiv@b+2,?___fldiv+2
  2493  001B5A  C032  F032         	movff	___fldiv@b+3,?___fldiv+3
  2494  001B5E  0012               	return	
  2495  001B60                     __end_of___fldiv:
  2496                           	opt stack 0
  2497                           tblptru	equ	0xFF8
  2498                           tblptrh	equ	0xFF7
  2499                           tblptrl	equ	0xFF6
  2500                           tablat	equ	0xFF5
  2501                           prodh	equ	0xFF4
  2502                           prodl	equ	0xFF3
  2503                           intcon2	equ	0xFF1
  2504                           postinc0	equ	0xFEE
  2505                           wreg	equ	0xFE8
  2506                           postdec1	equ	0xFE5
  2507                           fsr1l	equ	0xFE1
  2508                           postinc2	equ	0xFDE
  2509                           fsr2h	equ	0xFDA
  2510                           fsr2l	equ	0xFD9
  2511                           status	equ	0xFD8
  2512                           
  2513 ;; *************** function _lcd_init *****************
  2514 ;; Defined at:
  2515 ;;		line 56 in file "lcd_x8.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;		None
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;  i               1   36[COMRAM] unsigned char 
  2520 ;; Return value:  Size  Location     Type
  2521 ;;                  1    wreg      void 
  2522 ;; Registers used:
  2523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2524 ;; Tracked objects:
  2525 ;;		On entry : 0/0
  2526 ;;		On exit  : 0/0
  2527 ;;		Unchanged: 0/0
  2528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2530 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2532 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2533 ;;Total ram usage:        1 bytes
  2534 ;; Hardware stack levels used:    1
  2535 ;; Hardware stack levels required when called:    5
  2536 ;; This function calls:
  2537 ;;		_delay_ms
  2538 ;;		_lcd_send_byte
  2539 ;;		_lcd_send_nibble
  2540 ;; This function is called by:
  2541 ;;		_main
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545                           	psect	text7
  2546  002A4A                     __ptext7:
  2547                           	opt stack 0
  2548  002A4A                     _lcd_init:
  2549                           	opt stack 25
  2550                           
  2551                           ;lcd_x8.c: 58: unsigned char i;
  2552                           ;lcd_x8.c: 61: PORTEbits.RE2 = 0;
  2553                           
  2554                           ;incstack = 0
  2555  002A4A  9484               	bcf	3972,2,c	;volatile
  2556                           
  2557                           ;lcd_x8.c: 63: PORTEbits.RE1 = 0;
  2558  002A4C  9284               	bcf	3972,1,c	;volatile
  2559                           
  2560                           ;lcd_x8.c: 65: delay_ms(25);
  2561  002A4E  0E00               	movlw	0
  2562  002A50  6E1C               	movwf	delay_ms@n+1,c
  2563  002A52  0E19               	movlw	25
  2564  002A54  6E1B               	movwf	delay_ms@n,c
  2565  002A56  ECD3  F016         	call	_delay_ms	;wreg free
  2566                           
  2567                           ;lcd_x8.c: 66: for (i = 1; i <= 3; ++i) {
  2568  002A5A  0E01               	movlw	1
  2569  002A5C  6E25               	movwf	lcd_init@i,c
  2570  002A5E                     l4299:
  2571  002A5E  0E03               	movlw	3
  2572  002A60  6425               	cpfsgt	lcd_init@i,c
  2573  002A62  D001               	goto	l179
  2574  002A64  D00B               	goto	u4540
  2575  002A66                     l179:
  2576                           
  2577                           ;lcd_x8.c: 67: lcd_send_nibble(3);
  2578  002A66  0E03               	movlw	3
  2579  002A68  ECE6  F016         	call	_lcd_send_nibble
  2580                           
  2581                           ;lcd_x8.c: 69: delay_ms(6);
  2582  002A6C  0E00               	movlw	0
  2583  002A6E  6E1C               	movwf	delay_ms@n+1,c
  2584  002A70  0E06               	movlw	6
  2585  002A72  6E1B               	movwf	delay_ms@n,c
  2586  002A74  ECD3  F016         	call	_delay_ms	;wreg free
  2587  002A78  2A25               	incf	lcd_init@i,f,c
  2588  002A7A  D7F1               	goto	l4299
  2589  002A7C                     u4540:
  2590                           
  2591                           ;lcd_x8.c: 70: }
  2592                           ;lcd_x8.c: 72: lcd_send_nibble(2);
  2593  002A7C  0E02               	movlw	2
  2594  002A7E  ECE6  F016         	call	_lcd_send_nibble
  2595                           
  2596                           ;lcd_x8.c: 74: for (i = 0; i <= 3; ++i)
  2597  002A82  0E00               	movlw	0
  2598  002A84  6E25               	movwf	lcd_init@i,c
  2599  002A86                     l4313:
  2600  002A86  0E03               	movlw	3
  2601  002A88  6425               	cpfsgt	lcd_init@i,c
  2602  002A8A  D001               	goto	l181
  2603  002A8C  0012               	return	
  2604  002A8E                     l181:
  2605                           
  2606                           ;lcd_x8.c: 75: lcd_send_byte(0, LCD_INIT_STRING[i]);
  2607  002A8E  5025               	movf	lcd_init@i,w,c
  2608  002A90  0D01               	mullw	1
  2609  002A92  0E60               	movlw	low _LCD_INIT_STRING
  2610  002A94  24F3               	addwf	prodl,w,c
  2611  002A96  6ED9               	movwf	fsr2l,c
  2612  002A98  0E00               	movlw	high _LCD_INIT_STRING
  2613  002A9A  20F4               	addwfc	prodh,w,c
  2614  002A9C  6EDA               	movwf	fsr2h,c
  2615  002A9E  50DF               	movf	indf2,w,c
  2616  002AA0  6E23               	movwf	lcd_send_byte@n,c
  2617  002AA2  0E00               	movlw	0
  2618  002AA4  ECF9  F015         	call	_lcd_send_byte
  2619  002AA8  2A25               	incf	lcd_init@i,f,c
  2620  002AAA  D7ED               	goto	l4313
  2621  002AAC                     __end_of_lcd_init:
  2622                           	opt stack 0
  2623                           tblptru	equ	0xFF8
  2624                           tblptrh	equ	0xFF7
  2625                           tblptrl	equ	0xFF6
  2626                           tablat	equ	0xFF5
  2627                           prodh	equ	0xFF4
  2628                           prodl	equ	0xFF3
  2629                           intcon2	equ	0xFF1
  2630                           postinc0	equ	0xFEE
  2631                           wreg	equ	0xFE8
  2632                           postdec1	equ	0xFE5
  2633                           fsr1l	equ	0xFE1
  2634                           indf2	equ	0xFDF
  2635                           postinc2	equ	0xFDE
  2636                           fsr2h	equ	0xFDA
  2637                           fsr2l	equ	0xFD9
  2638                           status	equ	0xFD8
  2639                           
  2640 ;; *************** function _init_pwm1 *****************
  2641 ;; Defined at:
  2642 ;;		line 5 in file "my_pwm.c"
  2643 ;; Parameters:    Size  Location     Type
  2644 ;;		None
  2645 ;; Auto vars:     Size  Location     Type
  2646 ;;		None
  2647 ;; Return value:  Size  Location     Type
  2648 ;;                  1    wreg      void 
  2649 ;; Registers used:
  2650 ;;		wreg, status,2
  2651 ;; Tracked objects:
  2652 ;;		On entry : 0/0
  2653 ;;		On exit  : 0/0
  2654 ;;		Unchanged: 0/0
  2655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2660 ;;Total ram usage:        0 bytes
  2661 ;; Hardware stack levels used:    1
  2662 ;; Hardware stack levels required when called:    2
  2663 ;; This function calls:
  2664 ;;		Nothing
  2665 ;; This function is called by:
  2666 ;;		_main
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           	psect	text8
  2671  002E2A                     __ptext8:
  2672                           	opt stack 0
  2673  002E2A                     _init_pwm1:
  2674                           	opt stack 28
  2675                           
  2676                           ;my_pwm.c: 9: PR2 = 255;
  2677                           
  2678                           ;incstack = 0
  2679  002E2A  68CB               	setf	4043,c	;volatile
  2680                           
  2681                           ;my_pwm.c: 10: T2CON = 0;
  2682  002E2C  0E00               	movlw	0
  2683  002E2E  6ECA               	movwf	4042,c	;volatile
  2684                           
  2685                           ;my_pwm.c: 11: T2CONbits.T2CKPS = 0b10;
  2686  002E30  50CA               	movf	4042,w,c	;volatile
  2687  002E32  0BFC               	andlw	-4
  2688  002E34  0902               	iorlw	2
  2689  002E36  6ECA               	movwf	4042,c	;volatile
  2690                           
  2691                           ;my_pwm.c: 12: CCP1CON = 0x0C;
  2692  002E38  0E0C               	movlw	12
  2693  002E3A  6EBD               	movwf	4029,c	;volatile
  2694                           
  2695                           ;my_pwm.c: 14: T2CONbits.TMR2ON = 1;
  2696  002E3C  84CA               	bsf	4042,2,c	;volatile
  2697                           
  2698                           ;my_pwm.c: 15: TRISCbits.RC2 =0;
  2699  002E3E  9494               	bcf	3988,2,c	;volatile
  2700  002E40  0012               	return		;funcret
  2701  002E42                     __end_of_init_pwm1:
  2702                           	opt stack 0
  2703                           tblptru	equ	0xFF8
  2704                           tblptrh	equ	0xFF7
  2705                           tblptrl	equ	0xFF6
  2706                           tablat	equ	0xFF5
  2707                           prodh	equ	0xFF4
  2708                           prodl	equ	0xFF3
  2709                           intcon2	equ	0xFF1
  2710                           postinc0	equ	0xFEE
  2711                           wreg	equ	0xFE8
  2712                           postdec1	equ	0xFE5
  2713                           fsr1l	equ	0xFE1
  2714                           indf2	equ	0xFDF
  2715                           postinc2	equ	0xFDE
  2716                           fsr2h	equ	0xFDA
  2717                           fsr2l	equ	0xFD9
  2718                           status	equ	0xFD8
  2719                           
  2720 ;; *************** function _init_adc_no_lib *****************
  2721 ;; Defined at:
  2722 ;;		line 11 in file "my_adc.c"
  2723 ;; Parameters:    Size  Location     Type
  2724 ;;		None
  2725 ;; Auto vars:     Size  Location     Type
  2726 ;;		None
  2727 ;; Return value:  Size  Location     Type
  2728 ;;                  1    wreg      void 
  2729 ;; Registers used:
  2730 ;;		wreg, status,2
  2731 ;; Tracked objects:
  2732 ;;		On entry : 0/0
  2733 ;;		On exit  : 0/0
  2734 ;;		Unchanged: 0/0
  2735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2740 ;;Total ram usage:        0 bytes
  2741 ;; Hardware stack levels used:    1
  2742 ;; Hardware stack levels required when called:    2
  2743 ;; This function calls:
  2744 ;;		Nothing
  2745 ;; This function is called by:
  2746 ;;		_main
  2747 ;; This function uses a non-reentrant model
  2748 ;;
  2749                           
  2750                           	psect	text9
  2751  002E42                     __ptext9:
  2752                           	opt stack 0
  2753  002E42                     _init_adc_no_lib:
  2754                           	opt stack 28
  2755                           
  2756                           ;my_adc.c: 14: ADCON0 = 0;
  2757                           
  2758                           ;incstack = 0
  2759  002E42  0E00               	movlw	0
  2760  002E44  6EC2               	movwf	4034,c	;volatile
  2761                           
  2762                           ;my_adc.c: 15: ADCON0bits.ADON = 1;
  2763  002E46  80C2               	bsf	4034,0,c	;volatile
  2764                           
  2765                           ;my_adc.c: 18: ADCON2 = 0b10001001;
  2766  002E48  0E89               	movlw	137
  2767  002E4A  6EC0               	movwf	4032,c	;volatile
  2768  002E4C  0012               	return		;funcret
  2769  002E4E                     __end_of_init_adc_no_lib:
  2770                           	opt stack 0
  2771                           tblptru	equ	0xFF8
  2772                           tblptrh	equ	0xFF7
  2773                           tblptrl	equ	0xFF6
  2774                           tablat	equ	0xFF5
  2775                           prodh	equ	0xFF4
  2776                           prodl	equ	0xFF3
  2777                           intcon2	equ	0xFF1
  2778                           postinc0	equ	0xFEE
  2779                           wreg	equ	0xFE8
  2780                           postdec1	equ	0xFE5
  2781                           fsr1l	equ	0xFE1
  2782                           indf2	equ	0xFDF
  2783                           postinc2	equ	0xFDE
  2784                           fsr2h	equ	0xFDA
  2785                           fsr2l	equ	0xFD9
  2786                           status	equ	0xFD8
  2787                           
  2788 ;; *************** function _initInterrupts *****************
  2789 ;; Defined at:
  2790 ;;		line 114 in file "pwm_asl.c"
  2791 ;; Parameters:    Size  Location     Type
  2792 ;;		None
  2793 ;; Auto vars:     Size  Location     Type
  2794 ;;		None
  2795 ;; Return value:  Size  Location     Type
  2796 ;;                  1    wreg      void 
  2797 ;; Registers used:
  2798 ;;		wreg, status,2
  2799 ;; Tracked objects:
  2800 ;;		On entry : 0/0
  2801 ;;		On exit  : 0/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2808 ;;Total ram usage:        0 bytes
  2809 ;; Hardware stack levels used:    1
  2810 ;; Hardware stack levels required when called:    2
  2811 ;; This function calls:
  2812 ;;		Nothing
  2813 ;; This function is called by:
  2814 ;;		_main
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           	psect	text10
  2819  002C7C                     __ptext10:
  2820                           	opt stack 0
  2821  002C7C                     _initInterrupts:
  2822                           	opt stack 28
  2823                           
  2824                           ;pwm_asl.c: 115: INTCON = 0;
  2825                           
  2826                           ;incstack = 0
  2827  002C7C  0E00               	movlw	0
  2828  002C7E  6EF2               	movwf	intcon,c	;volatile
  2829                           
  2830                           ;pwm_asl.c: 116: RCONbits.IPEN = 0;
  2831  002C80  9ED0               	bcf	4048,7,c	;volatile
  2832                           
  2833                           ;pwm_asl.c: 119: INTCONbits.INT0IF = 0;
  2834  002C82  92F2               	bcf	intcon,1,c	;volatile
  2835                           
  2836                           ;pwm_asl.c: 120: INTCON3bits.INT2IF = 0;
  2837  002C84  92F0               	bcf	intcon3,1,c	;volatile
  2838                           
  2839                           ;pwm_asl.c: 121: PIR2bits.TMR3IF = 0;
  2840  002C86  92A1               	bcf	4001,1,c	;volatile
  2841                           
  2842                           ;pwm_asl.c: 124: INTCONbits.INT0IE = 1;
  2843  002C88  88F2               	bsf	intcon,4,c	;volatile
  2844                           
  2845                           ;pwm_asl.c: 125: INTCON3bits.INT2IE = 1;
  2846  002C8A  88F0               	bsf	intcon3,4,c	;volatile
  2847                           
  2848                           ;pwm_asl.c: 126: T3CON = 0;
  2849  002C8C  0E00               	movlw	0
  2850  002C8E  6EB1               	movwf	4017,c	;volatile
  2851                           
  2852                           ;pwm_asl.c: 127: T3CONbits.TMR3ON = 1;
  2853  002C90  80B1               	bsf	4017,0,c	;volatile
  2854                           
  2855                           ;pwm_asl.c: 128: INTCON2 = 0;
  2856  002C92  0E00               	movlw	0
  2857  002C94  6EF1               	movwf	intcon2,c	;volatile
  2858                           
  2859                           ;pwm_asl.c: 129: INTCON2bits.INTEDG2 = 1;
  2860  002C96  88F1               	bsf	intcon2,4,c	;volatile
  2861                           
  2862                           ;pwm_asl.c: 130: INTCON2bits.INTEDG0= 1;
  2863  002C98  8CF1               	bsf	intcon2,6,c	;volatile
  2864                           
  2865                           ;pwm_asl.c: 131: PIE1 = 0;
  2866  002C9A  0E00               	movlw	0
  2867  002C9C  6E9D               	movwf	3997,c	;volatile
  2868                           
  2869                           ;pwm_asl.c: 132: PIR1 = 0;
  2870  002C9E  0E00               	movlw	0
  2871  002CA0  6E9E               	movwf	3998,c	;volatile
  2872                           
  2873                           ;pwm_asl.c: 133: IPR1 = 0;
  2874  002CA2  0E00               	movlw	0
  2875  002CA4  6E9F               	movwf	3999,c	;volatile
  2876                           
  2877                           ;pwm_asl.c: 134: PIE2 = 0;
  2878  002CA6  0E00               	movlw	0
  2879  002CA8  6EA0               	movwf	4000,c	;volatile
  2880                           
  2881                           ;pwm_asl.c: 135: PIE2 = 0;
  2882  002CAA  0E00               	movlw	0
  2883  002CAC  6EA0               	movwf	4000,c	;volatile
  2884                           
  2885                           ;pwm_asl.c: 136: PIR2 = 0;
  2886  002CAE  0E00               	movlw	0
  2887  002CB0  6EA1               	movwf	4001,c	;volatile
  2888                           
  2889                           ;pwm_asl.c: 137: IPR2 = 0;
  2890  002CB2  0E00               	movlw	0
  2891  002CB4  6EA2               	movwf	4002,c	;volatile
  2892                           
  2893                           ;pwm_asl.c: 138: PIE2bits.CCP2IE = 1;
  2894  002CB6  80A0               	bsf	4000,0,c	;volatile
  2895                           
  2896                           ;pwm_asl.c: 139: INTCONbits.GIE = 1;
  2897  002CB8  8EF2               	bsf	intcon,7,c	;volatile
  2898  002CBA  0012               	return		;funcret
  2899  002CBC                     __end_of_initInterrupts:
  2900                           	opt stack 0
  2901                           tblptru	equ	0xFF8
  2902                           tblptrh	equ	0xFF7
  2903                           tblptrl	equ	0xFF6
  2904                           tablat	equ	0xFF5
  2905                           prodh	equ	0xFF4
  2906                           prodl	equ	0xFF3
  2907                           intcon	equ	0xFF2
  2908                           intcon2	equ	0xFF1
  2909                           intcon3	equ	0xFF0
  2910                           postinc0	equ	0xFEE
  2911                           wreg	equ	0xFE8
  2912                           postdec1	equ	0xFE5
  2913                           fsr1l	equ	0xFE1
  2914                           indf2	equ	0xFDF
  2915                           postinc2	equ	0xFDE
  2916                           fsr2h	equ	0xFDA
  2917                           fsr2l	equ	0xFD9
  2918                           status	equ	0xFD8
  2919                           
  2920 ;; *************** function _display *****************
  2921 ;; Defined at:
  2922 ;;		line 214 in file "pwm_asl.c"
  2923 ;; Parameters:    Size  Location     Type
  2924 ;;		None
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;  LCD            64   64[BANK1 ] unsigned char [64]
  2927 ;;  LCDP           64    0[BANK1 ] unsigned char [64]
  2928 ;;  H               1  129[BANK1 ] unsigned char 
  2929 ;;  C               1  128[BANK1 ] unsigned char 
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  1    wreg      void 
  2932 ;; Registers used:
  2933 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;      Locals:         0       0     130       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2942 ;;      Totals:         0       0     130       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;Total ram usage:      130 bytes
  2944 ;; Hardware stack levels used:    1
  2945 ;; Hardware stack levels required when called:    8
  2946 ;; This function calls:
  2947 ;;		_lcd_gotoxy
  2948 ;;		_lcd_putc
  2949 ;;		_lcd_puts
  2950 ;;		_sprintf
  2951 ;; This function is called by:
  2952 ;;		_main
  2953 ;; This function uses a non-reentrant model
  2954 ;;
  2955                           
  2956                           	psect	text11
  2957  001DF2                     __ptext11:
  2958                           	opt stack 0
  2959  001DF2                     _display:
  2960                           	opt stack 22
  2961                           
  2962                           ;pwm_asl.c: 215: char LCD[64];
  2963                           ;pwm_asl.c: 216: char LCDP[64];
  2964                           ;pwm_asl.c: 217: unsigned char C, H;
  2965                           ;pwm_asl.c: 218: switch(mode) {
  2966                           
  2967                           ;incstack = 0
  2968  001DF2  D03C               	goto	l132
  2969  001DF4                     
  2970                           ;pwm_asl.c: 220: sprintf(LCDP, "OFF                 ");
  2971  001DF4  0E00               	movlw	low display@LCDP
  2972  001DF6  0100               	movlb	0	; () banked
  2973  001DF8  6FB6               	movwf	sprintf@sp& (0+255),b
  2974  001DFA  0E01               	movlw	high display@LCDP
  2975  001DFC  6FB7               	movwf	(sprintf@sp+1)& (0+255),b
  2976  001DFE  0E7B               	movlw	low STR_1
  2977  001E00  6FB8               	movwf	sprintf@f& (0+255),b
  2978  001E02  0EFF               	movlw	high STR_1
  2979  001E04  6FB9               	movwf	(sprintf@f+1)& (0+255),b
  2980  001E06  EC09  F000         	call	_sprintf	;wreg free
  2981  001E0A                     l5041:
  2982                           
  2983                           ;pwm_asl.c: 221: H = 'N';
  2984  001E0A  0E4E               	movlw	78
  2985  001E0C  D02C               	goto	L5
  2986  001E0E                     
  2987                           ;pwm_asl.c: 226: sprintf(LCDP, "Cool                ");
  2988                           
  2989                           ; BSR set to: 1
  2990  001E0E  0E00               	movlw	low display@LCDP
  2991  001E10  0100               	movlb	0	; () banked
  2992  001E12  6FB6               	movwf	sprintf@sp& (0+255),b
  2993  001E14  0E01               	movlw	high display@LCDP
  2994  001E16  6FB7               	movwf	(sprintf@sp+1)& (0+255),b
  2995  001E18  0E90               	movlw	low STR_2
  2996  001E1A  6FB8               	movwf	sprintf@f& (0+255),b
  2997  001E1C  0EFF               	movlw	high STR_2
  2998  001E1E  6FB9               	movwf	(sprintf@f+1)& (0+255),b
  2999  001E20  EC09  F000         	call	_sprintf	;wreg free
  3000                           
  3001                           ;pwm_asl.c: 227: H = 'N';
  3002  001E24  0E4E               	movlw	78
  3003  001E26  0101               	movlb	1	; () banked
  3004  001E28  6F81               	movwf	display@H& (0+255),b
  3005                           
  3006                           ; BSR set to: 1
  3007                           ;pwm_asl.c: 228: C = 'Y';
  3008  001E2A  0E59               	movlw	89
  3009  001E2C  D00E               	goto	L4
  3010  001E2E                     
  3011                           ;pwm_asl.c: 232: sprintf(LCDP, "Heat                ");
  3012                           
  3013                           ; BSR set to: 1
  3014  001E2E  0E00               	movlw	low display@LCDP
  3015  001E30  0100               	movlb	0	; () banked
  3016  001E32  6FB6               	movwf	sprintf@sp& (0+255),b
  3017  001E34  0E01               	movlw	high display@LCDP
  3018  001E36  6FB7               	movwf	(sprintf@sp+1)& (0+255),b
  3019  001E38  0EA5               	movlw	low STR_3
  3020  001E3A  6FB8               	movwf	sprintf@f& (0+255),b
  3021  001E3C  0EFF               	movlw	high STR_3
  3022  001E3E  6FB9               	movwf	(sprintf@f+1)& (0+255),b
  3023  001E40  EC09  F000         	call	_sprintf	;wreg free
  3024                           
  3025                           ;pwm_asl.c: 233: H = 'Y';
  3026  001E44  0E59               	movlw	89
  3027  001E46  D00F               	goto	L5
  3028  001E48                     l5055:
  3029                           
  3030                           ; BSR set to: 1
  3031                           ;pwm_asl.c: 234: C = 'N';
  3032  001E48  0E4E               	movlw	78
  3033  001E4A                     L4:
  3034  001E4A  6F80               	movwf	display@C& (0+255),b
  3035                           
  3036                           ;pwm_asl.c: 235: break;
  3037  001E4C  D01C               	goto	l134
  3038  001E4E                     
  3039                           ;pwm_asl.c: 238: sprintf(LCDP, "Auto Cool         ");
  3040                           
  3041                           ; BSR set to: 1
  3042  001E4E  0E00               	movlw	low display@LCDP
  3043  001E50  0100               	movlb	0	; () banked
  3044  001E52  6FB6               	movwf	sprintf@sp& (0+255),b
  3045  001E54  0E01               	movlw	high display@LCDP
  3046  001E56  6FB7               	movwf	(sprintf@sp+1)& (0+255),b
  3047  001E58  0EBA               	movlw	low STR_4
  3048  001E5A  6FB8               	movwf	sprintf@f& (0+255),b
  3049  001E5C  0EFF               	movlw	high STR_4
  3050  001E5E  6FB9               	movwf	(sprintf@f+1)& (0+255),b
  3051  001E60  EC09  F000         	call	_sprintf	;wreg free
  3052  001E64  D7D2               	goto	l5041
  3053  001E66                     L5:
  3054  001E66  0101               	movlb	1	; () banked
  3055  001E68  6F81               	movwf	display@H& (0+255),b
  3056  001E6A  D7EE               	goto	l5055
  3057  001E6C                     l132:
  3058                           
  3059                           ; BSR set to: 1
  3060  001E6C  505E               	movf	_mode,w,c
  3061                           
  3062                           ; Switch size 1, requested type "space"
  3063                           ; Number of cases is 4, Range of values is 0 to 3
  3064                           ; switch strategies available:
  3065                           ; Name         Instructions Cycles
  3066                           ; simple_byte           13     7 (average)
  3067                           ;	Chosen strategy is simple_byte
  3068  001E6E  0A00               	xorlw	0	; case 0
  3069  001E70  B4D8               	btfsc	status,2,c
  3070  001E72  D7C0               	goto	l133
  3071  001E74  0A01               	xorlw	1	; case 1
  3072  001E76  B4D8               	btfsc	status,2,c
  3073  001E78  D7CA               	goto	l135
  3074  001E7A  0A03               	xorlw	3	; case 2
  3075  001E7C  B4D8               	btfsc	status,2,c
  3076  001E7E  D7D7               	goto	l136
  3077  001E80  0A01               	xorlw	1	; case 3
  3078  001E82  B4D8               	btfsc	status,2,c
  3079  001E84  D7E4               	goto	l137
  3080  001E86                     l134:
  3081                           
  3082                           ;pwm_asl.c: 245: lcd_gotoxy(1, 1);
  3083  001E86  0E01               	movlw	1
  3084  001E88  6E25               	movwf	lcd_gotoxy@y,c
  3085  001E8A  0E01               	movlw	1
  3086  001E8C  EC1D  F016         	call	_lcd_gotoxy
  3087                           
  3088                           ;pwm_asl.c: 246: sprintf(LCD, "RT: %4.1fC", temp);
  3089  001E90  0E40               	movlw	low display@LCD
  3090  001E92  0100               	movlb	0	; () banked
  3091  001E94  6FB6               	movwf	sprintf@sp& (0+255),b
  3092  001E96  0E01               	movlw	high display@LCD
  3093  001E98  6FB7               	movwf	(sprintf@sp+1)& (0+255),b
  3094  001E9A  0EE5               	movlw	low STR_5
  3095  001E9C  6FB8               	movwf	sprintf@f& (0+255),b
  3096  001E9E  0EFF               	movlw	high STR_5
  3097  001EA0  6FB9               	movwf	(sprintf@f+1)& (0+255),b
  3098  001EA2  C0F6  F0BA         	movff	_temp,?_sprintf+4
  3099  001EA6  C0F7  F0BB         	movff	_temp+1,?_sprintf+5
  3100  001EAA  C0F8  F0BC         	movff	_temp+2,?_sprintf+6
  3101  001EAE  C0F9  F0BD         	movff	_temp+3,?_sprintf+7
  3102  001EB2  EC09  F000         	call	_sprintf	;wreg free
  3103                           
  3104                           ;pwm_asl.c: 247: lcd_puts(LCD);
  3105  001EB6  0E40               	movlw	low display@LCD
  3106  001EB8  6E29               	movwf	lcd_puts@s,c
  3107  001EBA  0E01               	movlw	high display@LCD
  3108  001EBC  6E2A               	movwf	lcd_puts@s+1,c
  3109  001EBE  EC56  F015         	call	_lcd_puts	;wreg free
  3110                           
  3111                           ;pwm_asl.c: 249: lcd_gotoxy(14, 1);
  3112  001EC2  0E01               	movlw	1
  3113  001EC4  6E25               	movwf	lcd_gotoxy@y,c
  3114  001EC6  0E0E               	movlw	14
  3115  001EC8  EC1D  F016         	call	_lcd_gotoxy
  3116                           
  3117                           ;pwm_asl.c: 250: lcd_puts("H C");
  3118  001ECC  0EFB               	movlw	low STR_6
  3119  001ECE  6E29               	movwf	lcd_puts@s,c
  3120  001ED0  0EFF               	movlw	high STR_6
  3121  001ED2  6E2A               	movwf	lcd_puts@s+1,c
  3122  001ED4  EC56  F015         	call	_lcd_puts	;wreg free
  3123                           
  3124                           ;pwm_asl.c: 252: lcd_gotoxy(1, 2);
  3125  001ED8  0E02               	movlw	2
  3126  001EDA  6E25               	movwf	lcd_gotoxy@y,c
  3127  001EDC  0E01               	movlw	1
  3128  001EDE  EC1D  F016         	call	_lcd_gotoxy
  3129                           
  3130                           ;pwm_asl.c: 253: sprintf(LCD, "SP: %4.1fC ", sp);
  3131  001EE2  0E40               	movlw	low display@LCD
  3132  001EE4  0100               	movlb	0	; () banked
  3133  001EE6  6FB6               	movwf	sprintf@sp& (0+255),b
  3134  001EE8  0E01               	movlw	high display@LCD
  3135  001EEA  6FB7               	movwf	(sprintf@sp+1)& (0+255),b
  3136  001EEC  0ECD               	movlw	low STR_7
  3137  001EEE  6FB8               	movwf	sprintf@f& (0+255),b
  3138  001EF0  0EFF               	movlw	high STR_7
  3139  001EF2  6FB9               	movwf	(sprintf@f+1)& (0+255),b
  3140  001EF4  C0F2  F0BA         	movff	_sp,?_sprintf+4
  3141  001EF8  C0F3  F0BB         	movff	_sp+1,?_sprintf+5
  3142  001EFC  C0F4  F0BC         	movff	_sp+2,?_sprintf+6
  3143  001F00  C0F5  F0BD         	movff	_sp+3,?_sprintf+7
  3144  001F04  EC09  F000         	call	_sprintf	;wreg free
  3145                           
  3146                           ;pwm_asl.c: 254: lcd_puts(LCD);
  3147  001F08  0E40               	movlw	low display@LCD
  3148  001F0A  6E29               	movwf	lcd_puts@s,c
  3149  001F0C  0E01               	movlw	high display@LCD
  3150  001F0E  6E2A               	movwf	lcd_puts@s+1,c
  3151  001F10  EC56  F015         	call	_lcd_puts	;wreg free
  3152                           
  3153                           ;pwm_asl.c: 256: lcd_gotoxy(14, 2);
  3154  001F14  0E02               	movlw	2
  3155  001F16  6E25               	movwf	lcd_gotoxy@y,c
  3156  001F18  0E0E               	movlw	14
  3157  001F1A  EC1D  F016         	call	_lcd_gotoxy
  3158                           
  3159                           ;pwm_asl.c: 257: lcd_putc(H);
  3160  001F1E  0101               	movlb	1	; () banked
  3161  001F20  5181               	movf	display@H& (0+255),w,b
  3162  001F22  EC81  F015         	call	_lcd_putc
  3163                           
  3164                           ;pwm_asl.c: 258: lcd_gotoxy(16, 2);
  3165  001F26  0E02               	movlw	2
  3166  001F28  6E25               	movwf	lcd_gotoxy@y,c
  3167  001F2A  0E10               	movlw	16
  3168  001F2C  EC1D  F016         	call	_lcd_gotoxy
  3169                           
  3170                           ;pwm_asl.c: 259: lcd_putc(C);
  3171  001F30  0101               	movlb	1	; () banked
  3172  001F32  5180               	movf	display@C& (0+255),w,b
  3173  001F34  EC81  F015         	call	_lcd_putc
  3174                           
  3175                           ;pwm_asl.c: 261: lcd_gotoxy(1, 3);
  3176  001F38  0E03               	movlw	3
  3177  001F3A  6E25               	movwf	lcd_gotoxy@y,c
  3178  001F3C  0E01               	movlw	1
  3179  001F3E  EC1D  F016         	call	_lcd_gotoxy
  3180                           
  3181                           ;pwm_asl.c: 262: sprintf(LCD, "HS: %d", HS);
  3182  001F42  0E40               	movlw	low display@LCD
  3183  001F44  0100               	movlb	0	; () banked
  3184  001F46  6FB6               	movwf	sprintf@sp& (0+255),b
  3185  001F48  0E01               	movlw	high display@LCD
  3186  001F4A  6FB7               	movwf	(sprintf@sp+1)& (0+255),b
  3187  001F4C  0EF0               	movlw	low STR_8
  3188  001F4E  6FB8               	movwf	sprintf@f& (0+255),b
  3189  001F50  0EFF               	movlw	high STR_8
  3190  001F52  6FB9               	movwf	(sprintf@f+1)& (0+255),b
  3191  001F54  C05F  F0BA         	movff	_HS,?_sprintf+4
  3192  001F58  6BBB               	clrf	(?_sprintf+5)& (0+255),b
  3193  001F5A  EC09  F000         	call	_sprintf	;wreg free
  3194                           
  3195                           ;pwm_asl.c: 263: lcd_puts(LCD);
  3196  001F5E  0E40               	movlw	low display@LCD
  3197  001F60  6E29               	movwf	lcd_puts@s,c
  3198  001F62  0E01               	movlw	high display@LCD
  3199  001F64  6E2A               	movwf	lcd_puts@s+1,c
  3200  001F66  EC56  F015         	call	_lcd_puts	;wreg free
  3201                           
  3202                           ;pwm_asl.c: 265: lcd_gotoxy(8, 3);
  3203  001F6A  0E03               	movlw	3
  3204  001F6C  6E25               	movwf	lcd_gotoxy@y,c
  3205  001F6E  0E08               	movlw	8
  3206  001F70  EC1D  F016         	call	_lcd_gotoxy
  3207                           
  3208                           ;pwm_asl.c: 266: sprintf(LCD, "HC: %4.1f%%", HC);
  3209  001F74  0E40               	movlw	low display@LCD
  3210  001F76  0100               	movlb	0	; () banked
  3211  001F78  6FB6               	movwf	sprintf@sp& (0+255),b
  3212  001F7A  0E01               	movlw	high display@LCD
  3213  001F7C  6FB7               	movwf	(sprintf@sp+1)& (0+255),b
  3214  001F7E  0ED9               	movlw	low STR_9
  3215  001F80  6FB8               	movwf	sprintf@f& (0+255),b
  3216  001F82  0EFF               	movlw	high STR_9
  3217  001F84  6FB9               	movwf	(sprintf@f+1)& (0+255),b
  3218  001F86  C1A2  F0BA         	movff	_HC,?_sprintf+4
  3219  001F8A  C1A3  F0BB         	movff	_HC+1,?_sprintf+5
  3220  001F8E  C1A4  F0BC         	movff	_HC+2,?_sprintf+6
  3221  001F92  C1A5  F0BD         	movff	_HC+3,?_sprintf+7
  3222  001F96  EC09  F000         	call	_sprintf	;wreg free
  3223                           
  3224                           ;pwm_asl.c: 267: lcd_puts(LCD);
  3225  001F9A  0E40               	movlw	low display@LCD
  3226  001F9C  6E29               	movwf	lcd_puts@s,c
  3227  001F9E  0E01               	movlw	high display@LCD
  3228  001FA0  6E2A               	movwf	lcd_puts@s+1,c
  3229  001FA2  EC56  F015         	call	_lcd_puts	;wreg free
  3230                           
  3231                           ;pwm_asl.c: 270: lcd_gotoxy(1, 4);
  3232  001FA6  0E04               	movlw	4
  3233  001FA8  6E25               	movwf	lcd_gotoxy@y,c
  3234  001FAA  0E01               	movlw	1
  3235  001FAC  EC1D  F016         	call	_lcd_gotoxy
  3236                           
  3237                           ;pwm_asl.c: 271: sprintf(LCD, "MD:");
  3238  001FB0  0E40               	movlw	low display@LCD
  3239  001FB2  0100               	movlb	0	; () banked
  3240  001FB4  6FB6               	movwf	sprintf@sp& (0+255),b
  3241  001FB6  0E01               	movlw	high display@LCD
  3242  001FB8  6FB7               	movwf	(sprintf@sp+1)& (0+255),b
  3243  001FBA  0EF7               	movlw	low STR_10
  3244  001FBC  6FB8               	movwf	sprintf@f& (0+255),b
  3245  001FBE  0EFF               	movlw	high STR_10
  3246  001FC0  6FB9               	movwf	(sprintf@f+1)& (0+255),b
  3247  001FC2  EC09  F000         	call	_sprintf	;wreg free
  3248                           
  3249                           ;pwm_asl.c: 272: lcd_puts(LCD);
  3250  001FC6  0E40               	movlw	low display@LCD
  3251  001FC8  6E29               	movwf	lcd_puts@s,c
  3252  001FCA  0E01               	movlw	high display@LCD
  3253  001FCC  6E2A               	movwf	lcd_puts@s+1,c
  3254  001FCE  EC56  F015         	call	_lcd_puts	;wreg free
  3255                           
  3256                           ;pwm_asl.c: 274: lcd_gotoxy(5, 4);
  3257  001FD2  0E04               	movlw	4
  3258  001FD4  6E25               	movwf	lcd_gotoxy@y,c
  3259  001FD6  0E05               	movlw	5
  3260  001FD8  EC1D  F016         	call	_lcd_gotoxy
  3261                           
  3262                           ;pwm_asl.c: 275: lcd_puts(LCDP);
  3263  001FDC  0E00               	movlw	low display@LCDP
  3264  001FDE  6E29               	movwf	lcd_puts@s,c
  3265  001FE0  0E01               	movlw	high display@LCDP
  3266  001FE2  6E2A               	movwf	lcd_puts@s+1,c
  3267  001FE4  EC56  F015         	call	_lcd_puts	;wreg free
  3268  001FE8  0012               	return		;funcret
  3269  001FEA                     __end_of_display:
  3270                           	opt stack 0
  3271                           tblptru	equ	0xFF8
  3272                           tblptrh	equ	0xFF7
  3273                           tblptrl	equ	0xFF6
  3274                           tablat	equ	0xFF5
  3275                           prodh	equ	0xFF4
  3276                           prodl	equ	0xFF3
  3277                           intcon	equ	0xFF2
  3278                           intcon2	equ	0xFF1
  3279                           intcon3	equ	0xFF0
  3280                           postinc0	equ	0xFEE
  3281                           wreg	equ	0xFE8
  3282                           postdec1	equ	0xFE5
  3283                           fsr1l	equ	0xFE1
  3284                           indf2	equ	0xFDF
  3285                           postinc2	equ	0xFDE
  3286                           fsr2h	equ	0xFDA
  3287                           fsr2l	equ	0xFD9
  3288                           status	equ	0xFD8
  3289                           
  3290 ;; *************** function _sprintf *****************
  3291 ;; Defined at:
  3292 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;  sp              2   54[BANK0 ] PTR unsigned char 
  3295 ;;		 -> display@LCD(64), display@LCDP(64), 
  3296 ;;  f               2   56[BANK0 ] PTR const unsigned char 
  3297 ;;		 -> STR_10(4), STR_9(12), STR_8(7), STR_7(12), 
  3298 ;;		 -> STR_5(11), STR_4(19), STR_3(21), STR_2(21), 
  3299 ;;		 -> STR_1(21), 
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;  fval            4   90[BANK0 ] PTR const unsigned char 
  3302 ;;  val             4   82[BANK0 ] unsigned long 
  3303 ;;  tmpval          4   78[BANK0 ] struct .
  3304 ;;  prec            2   94[BANK0 ] int 
  3305 ;;  width           2   88[BANK0 ] int 
  3306 ;;  exp             2   86[BANK0 ] int 
  3307 ;;  flag            2   76[BANK0 ] unsigned short 
  3308 ;;  len             2   74[BANK0 ] unsigned int 
  3309 ;;  ap              2   72[BANK0 ] PTR void [1]
  3310 ;;		 -> ?_sprintf(2), 
  3311 ;;  cp              2   70[BANK0 ] PTR const unsigned char 
  3312 ;;		 -> sprintf@c(1), 
  3313 ;;  c               1   96[BANK0 ] char 
  3314 ;;  d               1    0        unsigned char 
  3315 ;; Return value:  Size  Location     Type
  3316 ;;                  2   54[BANK0 ] int 
  3317 ;; Registers used:
  3318 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3319 ;; Tracked objects:
  3320 ;;		On entry : 0/0
  3321 ;;		On exit  : 0/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3324 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;      Locals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;      Totals:         0      43       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3328 ;;Total ram usage:       43 bytes
  3329 ;; Hardware stack levels used:    1
  3330 ;; Hardware stack levels required when called:    4
  3331 ;; This function calls:
  3332 ;;		___awdiv
  3333 ;;		___fladd
  3334 ;;		___flge
  3335 ;;		___flmul
  3336 ;;		___flneg
  3337 ;;		___flsub
  3338 ;;		___fltol
  3339 ;;		___lldiv
  3340 ;;		___llmod
  3341 ;;		___wmul
  3342 ;;		___xxtofl
  3343 ;;		__div_to_l_
  3344 ;;		__tdiv_to_l_
  3345 ;;		_fround
  3346 ;;		_isdigit
  3347 ;;		_scale
  3348 ;; This function is called by:
  3349 ;;		_display
  3350 ;; This function uses a non-reentrant model
  3351 ;;
  3352                           
  3353                           	psect	text12
  3354  000012                     __ptext12:
  3355                           	opt stack 0
  3356  000012                     _sprintf:
  3357                           	opt stack 25
  3358                           
  3359                           ;doprnt.c: 494: va_list ap;
  3360                           ;doprnt.c: 499: signed char c;
  3361                           ;doprnt.c: 501: int width;
  3362                           ;doprnt.c: 504: int prec;
  3363                           ;doprnt.c: 508: unsigned short flag;
  3364                           ;doprnt.c: 515: char d;
  3365                           ;doprnt.c: 516: double fval;
  3366                           ;doprnt.c: 517: int exp;
  3367                           ;doprnt.c: 523: union {
  3368                           ;doprnt.c: 524: unsigned long vd;
  3369                           ;doprnt.c: 525: double integ;
  3370                           ;doprnt.c: 526: } tmpval;
  3371                           ;doprnt.c: 528: unsigned long val;
  3372                           ;doprnt.c: 529: unsigned len;
  3373                           ;doprnt.c: 530: const char * cp;
  3374                           ;doprnt.c: 533: *ap = __va_start();
  3375                           
  3376                           ;incstack = 0
  3377  000012  0EBA               	movlw	low (?_sprintf+4)
  3378  000014  0100               	movlb	0	; () banked
  3379  000016  6FC8               	movwf	sprintf@ap& (0+255),b
  3380  000018  0E00               	movlw	high (?_sprintf+4)
  3381  00001A  6FC9               	movwf	(sprintf@ap+1)& (0+255),b
  3382                           
  3383                           ;doprnt.c: 536: while(c = *f++) {
  3384  00001C  EF48  F005         	goto	u5510
  3385  000020                     
  3386                           ; BSR set to: 0
  3387                           ;doprnt.c: 538: if(c != '%')
  3388                           
  3389                           ; BSR set to: 0
  3390  000020  0E25               	movlw	37
  3391  000022  19E0               	xorwf	sprintf@c& (0+255),w,b
  3392  000024  B4D8               	btfsc	status,2,c
  3393  000026  D00A               	goto	l350
  3394                           
  3395                           ; BSR set to: 0
  3396                           ;doprnt.c: 540: {
  3397                           ;doprnt.c: 541: ((*sp++ = (c)));
  3398  000028  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  3399  00002C  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  3400  000030  C0E0  FFDF         	movff	sprintf@c,indf2
  3401                           
  3402                           ; BSR set to: 0
  3403  000034  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  3404  000036  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  3405                           
  3406                           ;doprnt.c: 542: continue;
  3407  000038  EF48  F005         	goto	u5510
  3408  00003C                     l350:
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;doprnt.c: 543: }
  3412                           ;doprnt.c: 546: width = 0;
  3413                           
  3414                           ; BSR set to: 0
  3415  00003C  0E00               	movlw	0
  3416  00003E  6FD9               	movwf	(sprintf@width+1)& (0+255),b
  3417  000040  0E00               	movlw	0
  3418  000042  6FD8               	movwf	sprintf@width& (0+255),b
  3419                           
  3420                           ;doprnt.c: 548: flag = 0;
  3421  000044  0E00               	movlw	0
  3422  000046  6FCD               	movwf	(sprintf@flag+1)& (0+255),b
  3423  000048  0E00               	movlw	0
  3424  00004A  6FCC               	movwf	sprintf@flag& (0+255),b
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3428  00004C  C0B8  FFF6         	movff	sprintf@f,tblptrl
  3429  000050  C0B9  FFF7         	movff	sprintf@f+1,tblptrh
  3430  000054                     	if	0	;tblptru may be non-zero
  3431  000054                     	endif
  3432  000054                     	if	0	;tblptru may be non-zero
  3433  000054                     	endif
  3434  000054  0008               	tblrd		*
  3435  000056  50F5               	movf	tablat,w,c
  3436  000058  EC06  F017         	call	_isdigit
  3437  00005C  A0D8               	btfss	status,0,c
  3438  00005E  D034               	goto	u5010
  3439                           
  3440                           ;doprnt.c: 598: width = 0;
  3441  000060  0E00               	movlw	0
  3442  000062  0100               	movlb	0	; () banked
  3443  000064  6FD9               	movwf	(sprintf@width+1)& (0+255),b
  3444  000066  0E00               	movlw	0
  3445  000068  6FD8               	movwf	sprintf@width& (0+255),b
  3446  00006A                     
  3447                           ;doprnt.c: 600: width *= 10;
  3448                           
  3449                           ; BSR set to: 0
  3450  00006A  C0D8  F01B         	movff	sprintf@width,___wmul@multiplier
  3451  00006E  C0D9  F01C         	movff	sprintf@width+1,___wmul@multiplier+1
  3452  000072  0E00               	movlw	0
  3453  000074  6E1E               	movwf	___wmul@multiplicand+1,c
  3454  000076  0E0A               	movlw	10
  3455  000078  6E1D               	movwf	___wmul@multiplicand,c
  3456  00007A  ECC0  F016         	call	___wmul	;wreg free
  3457  00007E  C01B  F0D8         	movff	?___wmul,sprintf@width
  3458  000082  C01C  F0D9         	movff	?___wmul+1,sprintf@width+1
  3459                           
  3460                           ;doprnt.c: 601: width += *f++ - '0';
  3461  000086  0ED0               	movlw	208
  3462  000088  0100               	movlb	0	; () banked
  3463  00008A  6FBE               	movwf	??_sprintf& (0+255),b
  3464  00008C  0EFF               	movlw	255
  3465  00008E  6FBF               	movwf	(??_sprintf+1)& (0+255),b
  3466  000090  C0B8  FFF6         	movff	sprintf@f,tblptrl
  3467  000094  C0B9  FFF7         	movff	sprintf@f+1,tblptrh
  3468  000098                     	if	0	;tblptru may be non-zero
  3469  000098                     	endif
  3470  000098                     	if	0	;tblptru may be non-zero
  3471  000098                     	endif
  3472  000098  0008               	tblrd		*
  3473  00009A  50F5               	movf	tablat,w,c
  3474  00009C  6FC0               	movwf	(??_sprintf+2)& (0+255),b
  3475  00009E  6BC1               	clrf	(??_sprintf+3)& (0+255),b
  3476  0000A0  51BE               	movf	??_sprintf& (0+255),w,b
  3477  0000A2  27C0               	addwf	(??_sprintf+2)& (0+255),f,b
  3478  0000A4  51BF               	movf	(??_sprintf+1)& (0+255),w,b
  3479  0000A6  23C1               	addwfc	(??_sprintf+3)& (0+255),f,b
  3480  0000A8  51C0               	movf	(??_sprintf+2)& (0+255),w,b
  3481  0000AA  27D8               	addwf	sprintf@width& (0+255),f,b
  3482  0000AC  51C1               	movf	(??_sprintf+3)& (0+255),w,b
  3483  0000AE  23D9               	addwfc	(sprintf@width+1)& (0+255),f,b
  3484                           
  3485                           ; BSR set to: 0
  3486  0000B0  4BB8               	infsnz	sprintf@f& (0+255),f,b
  3487  0000B2  2BB9               	incf	(sprintf@f+1)& (0+255),f,b
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3491  0000B4  C0B8  FFF6         	movff	sprintf@f,tblptrl
  3492  0000B8  C0B9  FFF7         	movff	sprintf@f+1,tblptrh
  3493  0000BC                     	if	0	;tblptru may be non-zero
  3494  0000BC                     	endif
  3495  0000BC                     	if	0	;tblptru may be non-zero
  3496  0000BC                     	endif
  3497  0000BC  0008               	tblrd		*
  3498  0000BE  50F5               	movf	tablat,w,c
  3499  0000C0  EC06  F017         	call	_isdigit
  3500  0000C4  B0D8               	btfsc	status,0,c
  3501  0000C6  D7D1               	goto	l352
  3502  0000C8                     u5010:
  3503                           
  3504                           ;doprnt.c: 608: }
  3505                           ;doprnt.c: 611: if(*f == '.') {
  3506  0000C8  C0B8  FFF6         	movff	sprintf@f,tblptrl
  3507  0000CC  C0B9  FFF7         	movff	sprintf@f+1,tblptrh
  3508  0000D0                     	if	0	;tblptru may be non-zero
  3509  0000D0                     	endif
  3510  0000D0                     	if	0	;tblptru may be non-zero
  3511  0000D0                     	endif
  3512  0000D0  0008               	tblrd		*
  3513  0000D2  50F5               	movf	tablat,w,c
  3514  0000D4  0A2E               	xorlw	46
  3515  0000D6  A4D8               	btfss	status,2,c
  3516  0000D8  D030               	goto	l354
  3517                           
  3518                           ;doprnt.c: 612: flag |= 0x4000;
  3519  0000DA  0100               	movlb	0	; () banked
  3520  0000DC  8DCD               	bsf	(sprintf@flag+1)& (0+255),6,b
  3521                           
  3522                           ;doprnt.c: 613: f++;
  3523  0000DE  4BB8               	infsnz	sprintf@f& (0+255),f,b
  3524  0000E0  2BB9               	incf	(sprintf@f+1)& (0+255),f,b
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;doprnt.c: 620: {
  3528                           ;doprnt.c: 621: prec = 0;
  3529  0000E2  0E00               	movlw	0
  3530  0000E4  6FDF               	movwf	(sprintf@prec+1)& (0+255),b
  3531  0000E6  0E00               	movlw	0
  3532  0000E8  6FDE               	movwf	sprintf@prec& (0+255),b
  3533                           
  3534                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3535  0000EA  D01C               	goto	l355
  3536  0000EC                     
  3537                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3538                           
  3539                           ; BSR set to: 0
  3540  0000EC  C0DE  F01B         	movff	sprintf@prec,___wmul@multiplier
  3541  0000F0  C0DF  F01C         	movff	sprintf@prec+1,___wmul@multiplier+1
  3542  0000F4  0E00               	movlw	0
  3543  0000F6  6E1E               	movwf	___wmul@multiplicand+1,c
  3544  0000F8  0E0A               	movlw	10
  3545  0000FA  6E1D               	movwf	___wmul@multiplicand,c
  3546  0000FC  ECC0  F016         	call	___wmul	;wreg free
  3547  000100  C0B8  FFF6         	movff	sprintf@f,tblptrl
  3548  000104  C0B9  FFF7         	movff	sprintf@f+1,tblptrh
  3549  000108                     	if	0	;tblptru may be non-zero
  3550  000108                     	endif
  3551  000108                     	if	0	;tblptru may be non-zero
  3552  000108                     	endif
  3553  000108  0008               	tblrd		*
  3554  00010A  50F5               	movf	tablat,w,c
  3555  00010C  261B               	addwf	?___wmul,f,c
  3556  00010E  0E00               	movlw	0
  3557  000110  221C               	addwfc	?___wmul+1,f,c
  3558  000112  0ED0               	movlw	208
  3559  000114  241B               	addwf	?___wmul,w,c
  3560  000116  0100               	movlb	0	; () banked
  3561  000118  6FDE               	movwf	sprintf@prec& (0+255),b
  3562  00011A  0EFF               	movlw	255
  3563  00011C  201C               	addwfc	?___wmul+1,w,c
  3564  00011E  6FDF               	movwf	(sprintf@prec+1)& (0+255),b
  3565                           
  3566                           ; BSR set to: 0
  3567  000120  4BB8               	infsnz	sprintf@f& (0+255),f,b
  3568  000122  2BB9               	incf	(sprintf@f+1)& (0+255),f,b
  3569  000124                     l355:
  3570                           
  3571                           ; BSR set to: 0
  3572                           
  3573                           ; BSR set to: 0
  3574  000124  C0B8  FFF6         	movff	sprintf@f,tblptrl
  3575  000128  C0B9  FFF7         	movff	sprintf@f+1,tblptrh
  3576  00012C                     	if	0	;tblptru may be non-zero
  3577  00012C                     	endif
  3578  00012C                     	if	0	;tblptru may be non-zero
  3579  00012C                     	endif
  3580  00012C  0008               	tblrd		*
  3581  00012E  50F5               	movf	tablat,w,c
  3582  000130  EC06  F017         	call	_isdigit
  3583  000134  A0D8               	btfss	status,0,c
  3584  000136  D05A               	goto	l359
  3585  000138  D7D9               	goto	l356
  3586  00013A                     l354:
  3587                           
  3588                           ;doprnt.c: 626: prec = 0;
  3589  00013A  0E00               	movlw	0
  3590  00013C  0100               	movlb	0	; () banked
  3591  00013E  6FDF               	movwf	(sprintf@prec+1)& (0+255),b
  3592  000140  0E00               	movlw	0
  3593  000142  6FDE               	movwf	sprintf@prec& (0+255),b
  3594                           
  3595                           ; BSR set to: 0
  3596                           ;doprnt.c: 628: flag |= 0x1000;
  3597  000144  89CD               	bsf	(sprintf@flag+1)& (0+255),4,b
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;doprnt.c: 630: }
  3601                           ;doprnt.c: 635: switch(c = *f++) {
  3602  000146  D052               	goto	l359
  3603  000148                     
  3604                           ; BSR set to: 0
  3605                           ;doprnt.c: 663: flag |= 0x400;
  3606                           
  3607                           ; BSR set to: 0
  3608  000148  85CD               	bsf	(sprintf@flag+1)& (0+255),2,b
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;doprnt.c: 698: case 'i':
  3612                           ;doprnt.c: 699: break;
  3613                           
  3614                           ; BSR set to: 0
  3615                           
  3616                           ;doprnt.c: 697: case 'd':
  3617                           
  3618                           ;doprnt.c: 664: break;
  3619  00014A  D068               	goto	l363
  3620  00014C                     
  3621                           ; BSR set to: 0
  3622                           ;doprnt.c: 753: if(prec && prec < len)
  3623                           
  3624                           ; BSR set to: 0
  3625  00014C  51DE               	movf	sprintf@prec& (0+255),w,b
  3626  00014E  11DF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3627  000150  B4D8               	btfsc	status,2,c
  3628  000152  D00A               	goto	l367
  3629                           
  3630                           ; BSR set to: 0
  3631  000154  51CA               	movf	sprintf@len& (0+255),w,b
  3632  000156  5DDE               	subwf	sprintf@prec& (0+255),w,b
  3633  000158  51CB               	movf	(sprintf@len+1)& (0+255),w,b
  3634  00015A  59DF               	subwfb	(sprintf@prec+1)& (0+255),w,b
  3635  00015C  B0D8               	btfsc	status,0,c
  3636  00015E  D004               	goto	l367
  3637                           
  3638                           ; BSR set to: 0
  3639                           ;doprnt.c: 754: len = prec;
  3640  000160  C0DE  F0CA         	movff	sprintf@prec,sprintf@len
  3641  000164  C0DF  F0CB         	movff	sprintf@prec+1,sprintf@len+1
  3642  000168                     l367:
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;doprnt.c: 757: if(width > len)
  3646                           
  3647                           ; BSR set to: 0
  3648  000168  51D8               	movf	sprintf@width& (0+255),w,b
  3649  00016A  5DCA               	subwf	sprintf@len& (0+255),w,b
  3650  00016C  51D9               	movf	(sprintf@width+1)& (0+255),w,b
  3651  00016E  59CB               	subwfb	(sprintf@len+1)& (0+255),w,b
  3652  000170  B0D8               	btfsc	status,0,c
  3653  000172  D005               	goto	l368
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;doprnt.c: 758: width -= len;
  3657  000174  51CA               	movf	sprintf@len& (0+255),w,b
  3658  000176  5FD8               	subwf	sprintf@width& (0+255),f,b
  3659  000178  51CB               	movf	(sprintf@len+1)& (0+255),w,b
  3660  00017A  5BD9               	subwfb	(sprintf@width+1)& (0+255),f,b
  3661  00017C  D00D               	goto	l370
  3662  00017E                     l368:
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;doprnt.c: 759: else
  3666                           ;doprnt.c: 760: width = 0;
  3667                           
  3668                           ; BSR set to: 0
  3669  00017E  0E00               	movlw	0
  3670  000180  6FD9               	movwf	(sprintf@width+1)& (0+255),b
  3671  000182  0E00               	movlw	0
  3672  000184  6FD8               	movwf	sprintf@width& (0+255),b
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;doprnt.c: 764: while(width--)
  3676  000186  D008               	goto	l370
  3677  000188                     l4713:
  3678                           
  3679                           ; BSR set to: 0
  3680                           ;doprnt.c: 765: ((*sp++ = (' ')));
  3681  000188  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  3682  00018C  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  3683  000190  0E20               	movlw	32
  3684  000192  6EDF               	movwf	indf2,c
  3685                           
  3686                           ; BSR set to: 0
  3687  000194  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  3688  000196  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  3689  000198                     l370:
  3690                           
  3691                           ; BSR set to: 0
  3692                           
  3693                           ; BSR set to: 0
  3694  000198  07D8               	decf	sprintf@width& (0+255),f,b
  3695  00019A  A0D8               	btfss	status,0,c
  3696  00019C  07D9               	decf	(sprintf@width+1)& (0+255),f,b
  3697  00019E  29D8               	incf	sprintf@width& (0+255),w,b
  3698  0001A0  E1F3               	bnz	l4713
  3699  0001A2  29D9               	incf	(sprintf@width+1)& (0+255),w,b
  3700  0001A4  B4D8               	btfsc	status,2,c
  3701  0001A6  D00F               	goto	l373
  3702  0001A8  D7EF               	goto	l371
  3703  0001AA                     l4719:
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  3707  0001AA  C0C6  FFD9         	movff	sprintf@cp,fsr2l
  3708  0001AE  C0C7  FFDA         	movff	sprintf@cp+1,fsr2h
  3709  0001B2  C0B6  FFE1         	movff	sprintf@sp,fsr1l
  3710  0001B6  C0B7  FFE2         	movff	sprintf@sp+1,fsr1h
  3711  0001BA  CFDF FFE7          	movff	indf2,indf1
  3712                           
  3713                           ; BSR set to: 0
  3714  0001BE  4BC6               	infsnz	sprintf@cp& (0+255),f,b
  3715  0001C0  2BC7               	incf	(sprintf@cp+1)& (0+255),f,b
  3716                           
  3717                           ; BSR set to: 0
  3718  0001C2  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  3719  0001C4  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  3720  0001C6                     l373:
  3721                           
  3722                           ; BSR set to: 0
  3723                           
  3724                           ; BSR set to: 0
  3725  0001C6  07CA               	decf	sprintf@len& (0+255),f,b
  3726  0001C8  A0D8               	btfss	status,0,c
  3727  0001CA  07CB               	decf	(sprintf@len+1)& (0+255),f,b
  3728  0001CC  29CA               	incf	sprintf@len& (0+255),w,b
  3729  0001CE  E1ED               	bnz	l4719
  3730  0001D0  29CB               	incf	(sprintf@len+1)& (0+255),w,b
  3731  0001D2  B4D8               	btfsc	status,2,c
  3732  0001D4  EF48  F005         	goto	u5510
  3733  0001D8  D7E8               	goto	l374
  3734  0001DA                     
  3735                           ; BSR set to: 0
  3736                           ;doprnt.c: 805: cp = (char *)&c;
  3737                           
  3738                           ; BSR set to: 0
  3739  0001DA  0EE0               	movlw	low sprintf@c
  3740  0001DC  6FC6               	movwf	sprintf@cp& (0+255),b
  3741  0001DE  0E00               	movlw	high sprintf@c
  3742  0001E0  6FC7               	movwf	(sprintf@cp+1)& (0+255),b
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;doprnt.c: 806: len = 1;
  3746  0001E2  0E00               	movlw	0
  3747  0001E4  6FCB               	movwf	(sprintf@len+1)& (0+255),b
  3748  0001E6  0E01               	movlw	1
  3749  0001E8  6FCA               	movwf	sprintf@len& (0+255),b
  3750                           
  3751                           ;doprnt.c: 807: goto dostring;
  3752  0001EA  D7B0               	goto	l366
  3753  0001EC                     l359:
  3754                           
  3755                           ; BSR set to: 0
  3756  0001EC  C0B8  FFF6         	movff	sprintf@f,tblptrl
  3757  0001F0  C0B9  FFF7         	movff	sprintf@f+1,tblptrh
  3758  0001F4  0100               	movlb	0	; () banked
  3759  0001F6  4BB8               	infsnz	sprintf@f& (0+255),f,b
  3760  0001F8  2BB9               	incf	(sprintf@f+1)& (0+255),f,b
  3761  0001FA                     	if	0	;tblptru may be non-zero
  3762  0001FA                     	endif
  3763  0001FA                     	if	0	;tblptru may be non-zero
  3764  0001FA                     	endif
  3765  0001FA  0008               	tblrd		*
  3766  0001FC  CFF5 F0E0          	movff	tablat,sprintf@c
  3767  000200  51E0               	movf	sprintf@c& (0+255),w,b
  3768                           
  3769                           ; Switch size 1, requested type "space"
  3770                           ; Number of cases is 4, Range of values is 0 to 105
  3771                           ; switch strategies available:
  3772                           ; Name         Instructions Cycles
  3773                           ; simple_byte           13     7 (average)
  3774                           ;	Chosen strategy is simple_byte
  3775  000202  0A00               	xorlw	0	; case 0
  3776  000204  B4D8               	btfsc	status,2,c
  3777  000206  EF55  F005         	goto	u5520
  3778  00020A  0A64               	xorlw	100	; case 100
  3779  00020C  B4D8               	btfsc	status,2,c
  3780  00020E  D006               	goto	l363
  3781  000210  0A02               	xorlw	2	; case 102
  3782  000212  B4D8               	btfsc	status,2,c
  3783  000214  D799               	goto	l362
  3784  000216  0A0F               	xorlw	15	; case 105
  3785  000218  A4D8               	btfss	status,2,c
  3786  00021A  D7DF               	goto	l376
  3787  00021C                     l363:
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;doprnt.c: 825: if(flag & (0x700)) {
  3791                           
  3792                           ; BSR set to: 0
  3793  00021C  0E07               	movlw	7
  3794  00021E  15CD               	andwf	(sprintf@flag+1)& (0+255),w,b
  3795  000220  B4D8               	btfsc	status,2,c
  3796  000222  D325               	goto	l377
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;doprnt.c: 827: if(flag & 0x1000)
  3800  000224  A9CD               	btfss	(sprintf@flag+1)& (0+255),4,b
  3801  000226  D004               	goto	l378
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;doprnt.c: 829: prec = 6;
  3805  000228  0E00               	movlw	0
  3806  00022A  6FDF               	movwf	(sprintf@prec+1)& (0+255),b
  3807  00022C  0E06               	movlw	6
  3808  00022E  6FDE               	movwf	sprintf@prec& (0+255),b
  3809  000230                     l378:
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3813                           
  3814                           ; BSR set to: 0
  3815  000230  C0C8  FFD9         	movff	sprintf@ap,fsr2l
  3816  000234  C0C9  FFDA         	movff	sprintf@ap+1,fsr2h
  3817  000238  CFDE F0DA          	movff	postinc2,sprintf@fval
  3818  00023C  CFDE F0DB          	movff	postinc2,sprintf@fval+1
  3819  000240  CFDE F0DC          	movff	postinc2,sprintf@fval+2
  3820  000244  CFDE F0DD          	movff	postinc2,sprintf@fval+3
  3821                           
  3822                           ; BSR set to: 0
  3823  000248  0E04               	movlw	4
  3824  00024A  27C8               	addwf	sprintf@ap& (0+255),f,b
  3825  00024C  0E00               	movlw	0
  3826  00024E  23C9               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3827                           
  3828                           ; BSR set to: 0
  3829                           ;doprnt.c: 831: if(fval < 0.0) {
  3830  000250  AFDD               	btfss	(sprintf@fval+3)& (0+255),7,b
  3831  000252  D015               	goto	l379
  3832                           
  3833                           ; BSR set to: 0
  3834                           ;doprnt.c: 832: fval = -fval;
  3835  000254  C0DA  F02F         	movff	sprintf@fval,___flneg@f1
  3836  000258  C0DB  F030         	movff	sprintf@fval+1,___flneg@f1+1
  3837  00025C  C0DC  F031         	movff	sprintf@fval+2,___flneg@f1+2
  3838  000260  C0DD  F032         	movff	sprintf@fval+3,___flneg@f1+3
  3839  000264  EC92  F016         	call	___flneg	;wreg free
  3840  000268  C02F  F0DA         	movff	?___flneg,sprintf@fval
  3841  00026C  C030  F0DB         	movff	?___flneg+1,sprintf@fval+1
  3842  000270  C031  F0DC         	movff	?___flneg+2,sprintf@fval+2
  3843  000274  C032  F0DD         	movff	?___flneg+3,sprintf@fval+3
  3844                           
  3845                           ;doprnt.c: 833: flag |= 0x03;
  3846  000278  0E03               	movlw	3
  3847  00027A  0100               	movlb	0	; () banked
  3848  00027C  13CC               	iorwf	sprintf@flag& (0+255),f,b
  3849  00027E                     l379:
  3850                           
  3851                           ; BSR set to: 0
  3852                           ;doprnt.c: 834: }
  3853                           ;doprnt.c: 835: exp = 0;
  3854                           
  3855                           ; BSR set to: 0
  3856  00027E  0E00               	movlw	0
  3857  000280  6FD7               	movwf	(sprintf@exp+1)& (0+255),b
  3858  000282  0E00               	movlw	0
  3859  000284  6FD6               	movwf	sprintf@exp& (0+255),b
  3860                           
  3861                           ; BSR set to: 0
  3862                           ;doprnt.c: 836: if( fval!=0) {
  3863  000286  51DA               	movf	sprintf@fval& (0+255),w,b
  3864  000288  11DB               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3865  00028A  11DC               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3866  00028C  11DD               	iorwf	(sprintf@fval+3)& (0+255),w,b
  3867  00028E  B4D8               	btfsc	status,2,c
  3868  000290  D083               	goto	l384
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;doprnt.c: 837: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
  3872  000292  35DC               	rlcf	(sprintf@fval+2)& (0+255),w,b
  3873  000294  35DD               	rlcf	(sprintf@fval+3)& (0+255),w,b
  3874  000296  0F82               	addlw	130
  3875  000298  6FD6               	movwf	sprintf@exp& (0+255),b
  3876  00029A  6BD7               	clrf	(sprintf@exp+1)& (0+255),b
  3877  00029C  0EFF               	movlw	255
  3878  00029E  23D7               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;doprnt.c: 838: exp--;
  3882  0002A0  07D6               	decf	sprintf@exp& (0+255),f,b
  3883  0002A2  A0D8               	btfss	status,0,c
  3884  0002A4  07D7               	decf	(sprintf@exp+1)& (0+255),f,b
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;doprnt.c: 839: exp *= 3;
  3888  0002A6  C0D6  F01B         	movff	sprintf@exp,___wmul@multiplier
  3889  0002AA  C0D7  F01C         	movff	sprintf@exp+1,___wmul@multiplier+1
  3890  0002AE  0E00               	movlw	0
  3891  0002B0  6E1E               	movwf	___wmul@multiplicand+1,c
  3892  0002B2  0E03               	movlw	3
  3893  0002B4  6E1D               	movwf	___wmul@multiplicand,c
  3894  0002B6  ECC0  F016         	call	___wmul	;wreg free
  3895  0002BA  C01B  F0D6         	movff	?___wmul,sprintf@exp
  3896  0002BE  C01C  F0D7         	movff	?___wmul+1,sprintf@exp+1
  3897                           
  3898                           ;doprnt.c: 840: exp /= 10;
  3899  0002C2  C0D6  F021         	movff	sprintf@exp,___awdiv@dividend
  3900  0002C6  C0D7  F022         	movff	sprintf@exp+1,___awdiv@dividend+1
  3901  0002CA  0E00               	movlw	0
  3902  0002CC  6E24               	movwf	___awdiv@divisor+1,c
  3903  0002CE  0E0A               	movlw	10
  3904  0002D0  6E23               	movwf	___awdiv@divisor,c
  3905  0002D2  ECBE  F013         	call	___awdiv	;wreg free
  3906  0002D6  C021  F0D6         	movff	?___awdiv,sprintf@exp
  3907  0002DA  C022  F0D7         	movff	?___awdiv+1,sprintf@exp+1
  3908                           
  3909                           ;doprnt.c: 841: if(exp < 0)
  3910  0002DE  0100               	movlb	0	; () banked
  3911  0002E0  AFD7               	btfss	(sprintf@exp+1)& (0+255),7,b
  3912  0002E2  D003               	goto	l381
  3913                           
  3914                           ; BSR set to: 0
  3915                           ;doprnt.c: 842: exp--;
  3916  0002E4  07D6               	decf	sprintf@exp& (0+255),f,b
  3917  0002E6  A0D8               	btfss	status,0,c
  3918  0002E8  07D7               	decf	(sprintf@exp+1)& (0+255),f,b
  3919  0002EA                     l381:
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3923                           
  3924                           ; BSR set to: 0
  3925  0002EA  51D6               	movf	sprintf@exp& (0+255),w,b
  3926  0002EC  0800               	sublw	0
  3927  0002EE  EC5C  F005         	call	_scale
  3928  0002F2  C054  F0CE         	movff	?_scale,sprintf@tmpval
  3929  0002F6  C055  F0CF         	movff	?_scale+1,sprintf@tmpval+1
  3930  0002FA  C056  F0D0         	movff	?_scale+2,sprintf@tmpval+2
  3931  0002FE  C057  F0D1         	movff	?_scale+3,sprintf@tmpval+3
  3932                           
  3933                           ;doprnt.c: 847: tmpval.integ *= fval;
  3934  000302  C0CE  F048         	movff	sprintf@tmpval,___flmul@b
  3935  000306  C0CF  F049         	movff	sprintf@tmpval+1,___flmul@b+1
  3936  00030A  C0D0  F04A         	movff	sprintf@tmpval+2,___flmul@b+2
  3937  00030E  C0D1  F04B         	movff	sprintf@tmpval+3,___flmul@b+3
  3938  000312  C0DA  F04C         	movff	sprintf@fval,___flmul@a
  3939  000316  C0DB  F04D         	movff	sprintf@fval+1,___flmul@a+1
  3940  00031A  C0DC  F04E         	movff	sprintf@fval+2,___flmul@a+2
  3941  00031E  C0DD  F04F         	movff	sprintf@fval+3,___flmul@a+3
  3942  000322  EC84  F007         	call	___flmul	;wreg free
  3943  000326  C048  F0CE         	movff	?___flmul,sprintf@tmpval
  3944  00032A  C049  F0CF         	movff	?___flmul+1,sprintf@tmpval+1
  3945  00032E  C04A  F0D0         	movff	?___flmul+2,sprintf@tmpval+2
  3946  000332  C04B  F0D1         	movff	?___flmul+3,sprintf@tmpval+3
  3947                           
  3948                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3949  000336  C0CE  F0AA         	movff	sprintf@tmpval,___flge@ff1
  3950  00033A  C0CF  F0AB         	movff	sprintf@tmpval+1,___flge@ff1+1
  3951  00033E  C0D0  F0AC         	movff	sprintf@tmpval+2,___flge@ff1+2
  3952  000342  C0D1  F0AD         	movff	sprintf@tmpval+3,___flge@ff1+3
  3953  000346  0E00               	movlw	0
  3954  000348  0100               	movlb	0	; () banked
  3955  00034A  6FAE               	movwf	___flge@ff2& (0+255),b
  3956  00034C  0E00               	movlw	0
  3957  00034E  6FAF               	movwf	(___flge@ff2+1)& (0+255),b
  3958  000350  0E80               	movlw	128
  3959  000352  6FB0               	movwf	(___flge@ff2+2)& (0+255),b
  3960  000354  0E3F               	movlw	63
  3961  000356  6FB1               	movwf	(___flge@ff2+3)& (0+255),b
  3962  000358  ECCA  F011         	call	___flge	;wreg free
  3963  00035C  0100               	movlb	0	; () banked
  3964  00035E  B0D8               	btfsc	status,0,c
  3965  000360  D004               	goto	l382
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;doprnt.c: 849: exp--;
  3969  000362  07D6               	decf	sprintf@exp& (0+255),f,b
  3970  000364  A0D8               	btfss	status,0,c
  3971  000366  07D7               	decf	(sprintf@exp+1)& (0+255),f,b
  3972  000368  D017               	goto	l384
  3973  00036A                     l382:
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3977                           
  3978                           ; BSR set to: 0
  3979  00036A  C0CE  F0AA         	movff	sprintf@tmpval,___flge@ff1
  3980  00036E  C0CF  F0AB         	movff	sprintf@tmpval+1,___flge@ff1+1
  3981  000372  C0D0  F0AC         	movff	sprintf@tmpval+2,___flge@ff1+2
  3982  000376  C0D1  F0AD         	movff	sprintf@tmpval+3,___flge@ff1+3
  3983  00037A  0E00               	movlw	0
  3984  00037C  6FAE               	movwf	___flge@ff2& (0+255),b
  3985  00037E  0E00               	movlw	0
  3986  000380  6FAF               	movwf	(___flge@ff2+1)& (0+255),b
  3987  000382  0E20               	movlw	32
  3988  000384  6FB0               	movwf	(___flge@ff2+2)& (0+255),b
  3989  000386  0E41               	movlw	65
  3990  000388  6FB1               	movwf	(___flge@ff2+3)& (0+255),b
  3991  00038A  ECCA  F011         	call	___flge	;wreg free
  3992  00038E  0100               	movlb	0	; () banked
  3993  000390  A0D8               	btfss	status,0,c
  3994  000392  D002               	goto	l384
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;doprnt.c: 851: exp++;
  3998  000394  4BD6               	infsnz	sprintf@exp& (0+255),f,b
  3999  000396  2BD7               	incf	(sprintf@exp+1)& (0+255),f,b
  4000  000398                     l384:
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;doprnt.c: 852: }
  4004                           ;doprnt.c: 1112: if(prec <= 12)
  4005                           
  4006                           ; BSR set to: 0
  4007                           
  4008                           ; BSR set to: 0
  4009                           
  4010                           ; BSR set to: 0
  4011  000398  BFDF               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4012  00039A  D006               	goto	u5160
  4013  00039C  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  4014  00039E  E121               	bnz	l4783
  4015  0003A0  0E0D               	movlw	13
  4016  0003A2  5DDE               	subwf	sprintf@prec& (0+255),w,b
  4017  0003A4  B0D8               	btfsc	status,0,c
  4018  0003A6  D01D               	goto	l385
  4019  0003A8                     u5160:
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;doprnt.c: 1113: fval += fround(prec);
  4023  0003A8  C0DA  F096         	movff	sprintf@fval,___fladd@b
  4024  0003AC  C0DB  F097         	movff	sprintf@fval+1,___fladd@b+1
  4025  0003B0  C0DC  F098         	movff	sprintf@fval+2,___fladd@b+2
  4026  0003B4  C0DD  F099         	movff	sprintf@fval+3,___fladd@b+3
  4027  0003B8  51DE               	movf	sprintf@prec& (0+255),w,b
  4028  0003BA  ECB0  F00D         	call	_fround
  4029  0003BE  C054  F09A         	movff	?_fround,___fladd@a
  4030  0003C2  C055  F09B         	movff	?_fround+1,___fladd@a+1
  4031  0003C6  C056  F09C         	movff	?_fround+2,___fladd@a+2
  4032  0003CA  C057  F09D         	movff	?_fround+3,___fladd@a+3
  4033  0003CE  EC2D  F009         	call	___fladd	;wreg free
  4034  0003D2  C096  F0DA         	movff	?___fladd,sprintf@fval
  4035  0003D6  C097  F0DB         	movff	?___fladd+1,sprintf@fval+1
  4036  0003DA  C098  F0DC         	movff	?___fladd+2,sprintf@fval+2
  4037  0003DE  C099  F0DD         	movff	?___fladd+3,sprintf@fval+3
  4038  0003E2                     l385:
  4039  0003E2                     l4783:
  4040                           
  4041                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4042  0003E2  0100               	movlb	0	; () banked
  4043  0003E4  BFD7               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4044  0003E6  D006               	goto	u5170
  4045  0003E8  51D7               	movf	(sprintf@exp+1)& (0+255),w,b
  4046  0003EA  E122               	bnz	l4791
  4047  0003EC  0E0A               	movlw	10
  4048  0003EE  5DD6               	subwf	sprintf@exp& (0+255),w,b
  4049  0003F0  B0D8               	btfsc	status,0,c
  4050  0003F2  D01E               	goto	u5200
  4051  0003F4                     u5170:
  4052                           
  4053                           ; BSR set to: 0
  4054  0003F4  51DA               	movf	sprintf@fval& (0+255),w,b
  4055  0003F6  11DB               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4056  0003F8  11DC               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4057  0003FA  11DD               	iorwf	(sprintf@fval+3)& (0+255),w,b
  4058  0003FC  B4D8               	btfsc	status,2,c
  4059  0003FE  D062               	goto	l386
  4060                           
  4061                           ; BSR set to: 0
  4062  000400  C0DA  F092         	movff	sprintf@fval,___fltol@f1
  4063  000404  C0DB  F093         	movff	sprintf@fval+1,___fltol@f1+1
  4064  000408  C0DC  F094         	movff	sprintf@fval+2,___fltol@f1+2
  4065  00040C  C0DD  F095         	movff	sprintf@fval+3,___fltol@f1+3
  4066  000410  EC4F  F013         	call	___fltol	;wreg free
  4067  000414  0100               	movlb	0	; () banked
  4068  000416  5192               	movf	?___fltol& (0+255),w,b
  4069  000418  1193               	iorwf	(?___fltol+1)& (0+255),w,b
  4070  00041A  1194               	iorwf	(?___fltol+2)& (0+255),w,b
  4071  00041C  1195               	iorwf	(?___fltol+3)& (0+255),w,b
  4072  00041E  B4D8               	btfsc	status,2,c
  4073                           
  4074                           ; BSR set to: 0
  4075  000420  BFD7               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4076  000422  D050               	goto	l386
  4077  000424  51D7               	movf	(sprintf@exp+1)& (0+255),w,b
  4078  000426  E104               	bnz	l4791
  4079  000428  0E02               	movlw	2
  4080  00042A  5DD6               	subwf	sprintf@exp& (0+255),w,b
  4081  00042C  A0D8               	btfss	status,0,c
  4082  00042E  D04A               	goto	l386
  4083  000430                     u5200:
  4084  000430                     l4791:
  4085                           
  4086                           ; BSR set to: 0
  4087                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  4088  000430  C0CE  F0AA         	movff	sprintf@tmpval,___flge@ff1
  4089  000434  C0CF  F0AB         	movff	sprintf@tmpval+1,___flge@ff1+1
  4090  000438  C0D0  F0AC         	movff	sprintf@tmpval+2,___flge@ff1+2
  4091  00043C  C0D1  F0AD         	movff	sprintf@tmpval+3,___flge@ff1+3
  4092  000440  0E5F               	movlw	95
  4093  000442  6FAE               	movwf	___flge@ff2& (0+255),b
  4094  000444  0E70               	movlw	112
  4095  000446  6FAF               	movwf	(___flge@ff2+1)& (0+255),b
  4096  000448  0E89               	movlw	137
  4097  00044A  6FB0               	movwf	(___flge@ff2+2)& (0+255),b
  4098  00044C  0E40               	movlw	64
  4099  00044E  6FB1               	movwf	(___flge@ff2+3)& (0+255),b
  4100  000450  ECCA  F011         	call	___flge	;wreg free
  4101  000454  0100               	movlb	0	; () banked
  4102  000456  B0D8               	btfsc	status,0,c
  4103  000458  D002               	goto	l389
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4107  00045A  0EF7               	movlw	247
  4108  00045C  D001               	goto	L6
  4109  00045E                     l389:
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4113                           
  4114                           ; BSR set to: 0
  4115  00045E  0EF8               	movlw	248
  4116  000460                     L6:
  4117  000460  27D6               	addwf	sprintf@exp& (0+255),f,b
  4118  000462  0EFF               	movlw	255
  4119  000464  23D7               	addwfc	(sprintf@exp+1)& (0+255),f,b
  4120                           
  4121                           ; BSR set to: 0
  4122                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  4123                           
  4124                           ; BSR set to: 0
  4125  000466  51D6               	movf	sprintf@exp& (0+255),w,b
  4126  000468  EC5C  F005         	call	_scale
  4127  00046C  C054  F0CE         	movff	?_scale,sprintf@tmpval
  4128  000470  C055  F0CF         	movff	?_scale+1,sprintf@tmpval+1
  4129  000474  C056  F0D0         	movff	?_scale+2,sprintf@tmpval+2
  4130  000478  C057  F0D1         	movff	?_scale+3,sprintf@tmpval+3
  4131  00047C  C0DA  F01B         	movff	sprintf@fval,__div_to_l_@f1
  4132  000480  C0DB  F01C         	movff	sprintf@fval+1,__div_to_l_@f1+1
  4133  000484  C0DC  F01D         	movff	sprintf@fval+2,__div_to_l_@f1+2
  4134  000488  C0DD  F01E         	movff	sprintf@fval+3,__div_to_l_@f1+3
  4135  00048C  C0CE  F01F         	movff	sprintf@tmpval,__div_to_l_@f2
  4136  000490  C0CF  F020         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  4137  000494  C0D0  F021         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  4138  000498  C0D1  F022         	movff	sprintf@tmpval+3,__div_to_l_@f2+3
  4139  00049C  EC36  F011         	call	__div_to_l_	;wreg free
  4140  0004A0  C01B  F0D2         	movff	?__div_to_l_,sprintf@val
  4141  0004A4  C01C  F0D3         	movff	?__div_to_l_+1,sprintf@val+1
  4142  0004A8  C01D  F0D4         	movff	?__div_to_l_+2,sprintf@val+2
  4143  0004AC  C01E  F0D5         	movff	?__div_to_l_+3,sprintf@val+3
  4144                           
  4145                           ;doprnt.c: 1129: fval = 0.0;
  4146  0004B0  0E00               	movlw	0
  4147  0004B2  0100               	movlb	0	; () banked
  4148  0004B4  6FDA               	movwf	sprintf@fval& (0+255),b
  4149  0004B6  0E00               	movlw	0
  4150  0004B8  6FDB               	movwf	(sprintf@fval+1)& (0+255),b
  4151  0004BA  0E00               	movlw	0
  4152  0004BC  6FDC               	movwf	(sprintf@fval+2)& (0+255),b
  4153  0004BE  0E00               	movlw	0
  4154  0004C0  6FDD               	movwf	(sprintf@fval+3)& (0+255),b
  4155                           
  4156                           ;doprnt.c: 1130: } else {
  4157  0004C2  D03C               	goto	l395
  4158  0004C4                     l386:
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;doprnt.c: 1131: val = (unsigned long)fval;
  4162                           
  4163                           ; BSR set to: 0
  4164  0004C4  C0DA  F092         	movff	sprintf@fval,___fltol@f1
  4165  0004C8  C0DB  F093         	movff	sprintf@fval+1,___fltol@f1+1
  4166  0004CC  C0DC  F094         	movff	sprintf@fval+2,___fltol@f1+2
  4167  0004D0  C0DD  F095         	movff	sprintf@fval+3,___fltol@f1+3
  4168  0004D4  EC4F  F013         	call	___fltol	;wreg free
  4169  0004D8  C092  F0D2         	movff	?___fltol,sprintf@val
  4170  0004DC  C093  F0D3         	movff	?___fltol+1,sprintf@val+1
  4171  0004E0  C094  F0D4         	movff	?___fltol+2,sprintf@val+2
  4172  0004E4  C095  F0D5         	movff	?___fltol+3,sprintf@val+3
  4173                           
  4174                           ;doprnt.c: 1132: fval -= (double)val;
  4175  0004E8  C0DA  F0AA         	movff	sprintf@fval,___flsub@b
  4176  0004EC  C0DB  F0AB         	movff	sprintf@fval+1,___flsub@b+1
  4177  0004F0  C0DC  F0AC         	movff	sprintf@fval+2,___flsub@b+2
  4178  0004F4  C0DD  F0AD         	movff	sprintf@fval+3,___flsub@b+3
  4179  0004F8  C0D2  F021         	movff	sprintf@val,___xxtofl@val
  4180  0004FC  C0D3  F022         	movff	sprintf@val+1,___xxtofl@val+1
  4181  000500  C0D4  F023         	movff	sprintf@val+2,___xxtofl@val+2
  4182  000504  C0D5  F024         	movff	sprintf@val+3,___xxtofl@val+3
  4183  000508  0E00               	movlw	0
  4184  00050A  ECF5  F00F         	call	___xxtofl
  4185  00050E  C021  F0AE         	movff	?___xxtofl,___flsub@a
  4186  000512  C022  F0AF         	movff	?___xxtofl+1,___flsub@a+1
  4187  000516  C023  F0B0         	movff	?___xxtofl+2,___flsub@a+2
  4188  00051A  C024  F0B1         	movff	?___xxtofl+3,___flsub@a+3
  4189  00051E  ECD5  F015         	call	___flsub	;wreg free
  4190  000522  C0AA  F0DA         	movff	?___flsub,sprintf@fval
  4191  000526  C0AB  F0DB         	movff	?___flsub+1,sprintf@fval+1
  4192  00052A  C0AC  F0DC         	movff	?___flsub+2,sprintf@fval+2
  4193  00052E  C0AD  F0DD         	movff	?___flsub+3,sprintf@fval+3
  4194                           
  4195                           ;doprnt.c: 1133: exp = 0;
  4196  000532  0E00               	movlw	0
  4197  000534  0100               	movlb	0	; () banked
  4198  000536  6FD7               	movwf	(sprintf@exp+1)& (0+255),b
  4199  000538  0E00               	movlw	0
  4200  00053A  6FD6               	movwf	sprintf@exp& (0+255),b
  4201  00053C                     l395:
  4202                           
  4203                           ; BSR set to: 0
  4204                           ;doprnt.c: 1134: }
  4205                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4206                           
  4207                           ; BSR set to: 0
  4208  00053C  0E01               	movlw	1
  4209  00053E  6FE0               	movwf	sprintf@c& (0+255),b
  4210  000540                     l4811:
  4211                           
  4212                           ; BSR set to: 0
  4213  000540  0E0A               	movlw	10
  4214  000542  19E0               	xorwf	sprintf@c& (0+255),w,b
  4215  000544  B4D8               	btfsc	status,2,c
  4216  000546  D018               	goto	u5240
  4217                           
  4218                           ; BSR set to: 0
  4219                           ;doprnt.c: 1137: if(val < dpowers[c])
  4220                           
  4221                           ; BSR set to: 0
  4222                           
  4223                           ; BSR set to: 0
  4224  000548  51E0               	movf	sprintf@c& (0+255),w,b
  4225  00054A  0D04               	mullw	4
  4226  00054C  0E53               	movlw	low _dpowers
  4227  00054E  24F3               	addwf	prodl,w,c
  4228  000550  6EF6               	movwf	tblptrl,c
  4229  000552  0EFF               	movlw	high _dpowers
  4230  000554  20F4               	addwfc	prodh,w,c
  4231  000556  6EF7               	movwf	tblptrh,c
  4232  000558                     	if	0	;There are less than 3 active tblptr bytes
  4233  000558                     	endif
  4234  000558  0009               	tblrd		*+
  4235  00055A  50F5               	movf	tablat,w,c
  4236  00055C  5DD2               	subwf	sprintf@val& (0+255),w,b
  4237  00055E  0009               	tblrd		*+
  4238  000560  50F5               	movf	tablat,w,c
  4239  000562  59D3               	subwfb	(sprintf@val+1)& (0+255),w,b
  4240  000564  0009               	tblrd		*+
  4241  000566  50F5               	movf	tablat,w,c
  4242  000568  59D4               	subwfb	(sprintf@val+2)& (0+255),w,b
  4243  00056A  0009               	tblrd		*+
  4244  00056C  50F5               	movf	tablat,w,c
  4245  00056E  59D5               	subwfb	(sprintf@val+3)& (0+255),w,b
  4246  000570  A0D8               	btfss	status,0,c
  4247  000572  D002               	goto	u5240
  4248                           
  4249                           ; BSR set to: 0
  4250                           
  4251                           ; BSR set to: 0
  4252                           
  4253                           ; BSR set to: 0
  4254                           ;doprnt.c: 1138: break;
  4255  000574  2BE0               	incf	sprintf@c& (0+255),f,b
  4256  000576  D7E4               	goto	l4811
  4257  000578                     u5240:
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;doprnt.c: 1142: width -= prec + c + exp;
  4261                           
  4262                           ; BSR set to: 0
  4263  000578  C0E0  F0BE         	movff	sprintf@c,??_sprintf
  4264  00057C  6BBF               	clrf	(??_sprintf+1)& (0+255),b
  4265  00057E  BFBE               	btfsc	??_sprintf& (0+255),7,b
  4266  000580  07BF               	decf	(??_sprintf+1)& (0+255),f,b
  4267  000582  51DE               	movf	sprintf@prec& (0+255),w,b
  4268  000584  27BE               	addwf	??_sprintf& (0+255),f,b
  4269  000586  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  4270  000588  23BF               	addwfc	(??_sprintf+1)& (0+255),f,b
  4271  00058A  51D6               	movf	sprintf@exp& (0+255),w,b
  4272  00058C  27BE               	addwf	??_sprintf& (0+255),f,b
  4273  00058E  51D7               	movf	(sprintf@exp+1)& (0+255),w,b
  4274  000590  23BF               	addwfc	(??_sprintf+1)& (0+255),f,b
  4275  000592  51BE               	movf	??_sprintf& (0+255),w,b
  4276  000594  5FD8               	subwf	sprintf@width& (0+255),f,b
  4277  000596  51BF               	movf	(??_sprintf+1)& (0+255),w,b
  4278  000598  5BD9               	subwfb	(sprintf@width+1)& (0+255),f,b
  4279                           
  4280                           ;doprnt.c: 1143: if(
  4281                           ;doprnt.c: 1147: prec)
  4282  00059A  51DE               	movf	sprintf@prec& (0+255),w,b
  4283  00059C  11DF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4284  00059E  B4D8               	btfsc	status,2,c
  4285  0005A0  D003               	goto	l399
  4286                           
  4287                           ; BSR set to: 0
  4288                           ;doprnt.c: 1148: width--;
  4289  0005A2  07D8               	decf	sprintf@width& (0+255),f,b
  4290  0005A4  A0D8               	btfss	status,0,c
  4291  0005A6  07D9               	decf	(sprintf@width+1)& (0+255),f,b
  4292  0005A8                     l399:
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;doprnt.c: 1149: if(flag & 0x03)
  4296                           
  4297                           ; BSR set to: 0
  4298  0005A8  0E03               	movlw	3
  4299  0005AA  15CC               	andwf	sprintf@flag& (0+255),w,b
  4300  0005AC  6FBE               	movwf	??_sprintf& (0+255),b
  4301  0005AE  0E00               	movlw	0
  4302  0005B0  15CD               	andwf	(sprintf@flag+1)& (0+255),w,b
  4303  0005B2  6FBF               	movwf	(??_sprintf+1)& (0+255),b
  4304  0005B4  51BE               	movf	??_sprintf& (0+255),w,b
  4305  0005B6  11BF               	iorwf	(??_sprintf+1)& (0+255),w,b
  4306  0005B8  B4D8               	btfsc	status,2,c
  4307  0005BA  D00C               	goto	l401
  4308  0005BC  D008               	goto	l4835
  4309  0005BE                     l4831:
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  4313  0005BE  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4314  0005C2  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4315  0005C6  0E20               	movlw	32
  4316  0005C8  6EDF               	movwf	indf2,c
  4317                           
  4318                           ; BSR set to: 0
  4319  0005CA  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  4320  0005CC  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  4321  0005CE                     l4835:
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;doprnt.c: 1182: width--;
  4325  0005CE  07D8               	decf	sprintf@width& (0+255),f,b
  4326  0005D0  A0D8               	btfss	status,0,c
  4327  0005D2  07D9               	decf	(sprintf@width+1)& (0+255),f,b
  4328  0005D4                     l401:
  4329                           
  4330                           ; BSR set to: 0
  4331                           
  4332                           ; BSR set to: 0
  4333  0005D4  BFD9               	btfsc	(sprintf@width+1)& (0+255),7,b
  4334  0005D6  D005               	goto	u5270
  4335  0005D8  51D9               	movf	(sprintf@width+1)& (0+255),w,b
  4336  0005DA  E1F1               	bnz	l4831
  4337  0005DC  05D8               	decf	sprintf@width& (0+255),w,b
  4338  0005DE  B0D8               	btfsc	status,0,c
  4339  0005E0  D7EE               	goto	l402
  4340  0005E2                     u5270:
  4341                           
  4342                           ; BSR set to: 0
  4343                           ;doprnt.c: 1183: }
  4344                           ;doprnt.c: 1188: if(flag & 0x03)
  4345                           
  4346                           ; BSR set to: 0
  4347  0005E2  0E03               	movlw	3
  4348  0005E4  15CC               	andwf	sprintf@flag& (0+255),w,b
  4349  0005E6  6FBE               	movwf	??_sprintf& (0+255),b
  4350  0005E8  0E00               	movlw	0
  4351  0005EA  15CD               	andwf	(sprintf@flag+1)& (0+255),w,b
  4352  0005EC  6FBF               	movwf	(??_sprintf+1)& (0+255),b
  4353  0005EE  51BE               	movf	??_sprintf& (0+255),w,b
  4354  0005F0  11BF               	iorwf	(??_sprintf+1)& (0+255),w,b
  4355  0005F2  B4D8               	btfsc	status,2,c
  4356  0005F4  D050               	goto	l405
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  4360  0005F6  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4361  0005FA  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4362  0005FE  0E2D               	movlw	45
  4363  000600  D047               	goto	L7
  4364  000602                     
  4365                           ; BSR set to: 0
  4366                           ;doprnt.c: 1200: {
  4367                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4368                           
  4369                           ; BSR set to: 0
  4370  000602  C0D2  F01B         	movff	sprintf@val,___lldiv@dividend
  4371  000606  C0D3  F01C         	movff	sprintf@val+1,___lldiv@dividend+1
  4372  00060A  C0D4  F01D         	movff	sprintf@val+2,___lldiv@dividend+2
  4373  00060E  C0D5  F01E         	movff	sprintf@val+3,___lldiv@dividend+3
  4374  000612  51E0               	movf	sprintf@c& (0+255),w,b
  4375  000614  0D04               	mullw	4
  4376  000616  0E53               	movlw	low _dpowers
  4377  000618  24F3               	addwf	prodl,w,c
  4378  00061A  6EF6               	movwf	tblptrl,c
  4379  00061C  0EFF               	movlw	high _dpowers
  4380  00061E  20F4               	addwfc	prodh,w,c
  4381  000620  6EF7               	movwf	tblptrh,c
  4382  000622                     	if	0	;There are less than 3 active tblptr bytes
  4383  000622                     	endif
  4384  000622  0009               	tblrd		*+
  4385  000624  CFF5 F01F          	movff	tablat,___lldiv@divisor
  4386  000628  0009               	tblrd		*+
  4387  00062A  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  4388  00062E  0009               	tblrd		*+
  4389  000630  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  4390  000634  000A               	tblrd		*-
  4391  000636  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  4392  00063A  EC41  F014         	call	___lldiv	;wreg free
  4393  00063E  C01B  F0CE         	movff	?___lldiv,sprintf@tmpval
  4394  000642  C01C  F0CF         	movff	?___lldiv+1,sprintf@tmpval+1
  4395  000646  C01D  F0D0         	movff	?___lldiv+2,sprintf@tmpval+2
  4396  00064A  C01E  F0D1         	movff	?___lldiv+3,sprintf@tmpval+3
  4397                           
  4398                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4399  00064E  C0CE  F028         	movff	sprintf@tmpval,___llmod@dividend
  4400  000652  C0CF  F029         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4401  000656  C0D0  F02A         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4402  00065A  C0D1  F02B         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4403  00065E  0E0A               	movlw	10
  4404  000660  6E2C               	movwf	___llmod@divisor,c
  4405  000662  0E00               	movlw	0
  4406  000664  6E2D               	movwf	___llmod@divisor+1,c
  4407  000666  0E00               	movlw	0
  4408  000668  6E2E               	movwf	___llmod@divisor+2,c
  4409  00066A  0E00               	movlw	0
  4410  00066C  6E2F               	movwf	___llmod@divisor+3,c
  4411  00066E  ECF2  F014         	call	___llmod	;wreg free
  4412  000672  C028  F0CE         	movff	?___llmod,sprintf@tmpval
  4413  000676  C029  F0CF         	movff	?___llmod+1,sprintf@tmpval+1
  4414  00067A  C02A  F0D0         	movff	?___llmod+2,sprintf@tmpval+2
  4415  00067E  C02B  F0D1         	movff	?___llmod+3,sprintf@tmpval+3
  4416                           
  4417                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  4418  000682  0100               	movlb	0	; () banked
  4419  000684  51CE               	movf	sprintf@tmpval& (0+255),w,b
  4420  000686  0F30               	addlw	48
  4421  000688  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4422  00068C  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4423  000690                     L7:
  4424  000690  6EDF               	movwf	indf2,c
  4425                           
  4426                           ; BSR set to: 0
  4427  000692  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  4428  000694  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  4429  000696                     l405:
  4430                           
  4431                           ; BSR set to: 0
  4432                           
  4433                           ; BSR set to: 0
  4434  000696  07E0               	decf	sprintf@c& (0+255),f,b
  4435  000698  29E0               	incf	sprintf@c& (0+255),w,b
  4436  00069A  B4D8               	btfsc	status,2,c
  4437  00069C  D00C               	goto	l408
  4438  00069E  D7B1               	goto	l406
  4439  0006A0                     l4855:
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  4443  0006A0  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4444  0006A4  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4445  0006A8  0E30               	movlw	48
  4446  0006AA  6EDF               	movwf	indf2,c
  4447                           
  4448                           ; BSR set to: 0
  4449  0006AC  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  4450  0006AE  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;doprnt.c: 1209: exp--;
  4454  0006B0  07D6               	decf	sprintf@exp& (0+255),f,b
  4455  0006B2  A0D8               	btfss	status,0,c
  4456  0006B4  07D7               	decf	(sprintf@exp+1)& (0+255),f,b
  4457  0006B6                     l408:
  4458                           
  4459                           ; BSR set to: 0
  4460                           
  4461                           ; BSR set to: 0
  4462  0006B6  BFD7               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4463  0006B8  D005               	goto	u5300
  4464  0006BA  51D7               	movf	(sprintf@exp+1)& (0+255),w,b
  4465  0006BC  E1F1               	bnz	l4855
  4466  0006BE  05D6               	decf	sprintf@exp& (0+255),w,b
  4467  0006C0  B0D8               	btfsc	status,0,c
  4468  0006C2  D7EE               	goto	l409
  4469  0006C4                     u5300:
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;doprnt.c: 1210: }
  4473                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4474                           
  4475                           ; BSR set to: 0
  4476  0006C4  BFDF               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4477  0006C6  D009               	goto	l411
  4478  0006C8  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  4479  0006CA  E104               	bnz	u5310
  4480  0006CC  0E09               	movlw	9
  4481  0006CE  5DDE               	subwf	sprintf@prec& (0+255),w,b
  4482  0006D0  A0D8               	btfss	status,0,c
  4483  0006D2  D003               	goto	l411
  4484  0006D4                     u5310:
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4488  0006D4  0E08               	movlw	8
  4489  0006D6  6FE0               	movwf	sprintf@c& (0+255),b
  4490  0006D8  D002               	goto	l412
  4491  0006DA                     l411:
  4492                           
  4493                           ; BSR set to: 0
  4494                           ;doprnt.c: 1213: else
  4495                           ;doprnt.c: 1214: c = prec;
  4496  0006DA  C0DE  F0E0         	movff	sprintf@prec,sprintf@c
  4497  0006DE                     l412:
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;doprnt.c: 1215: prec -= c;
  4501                           
  4502                           ; BSR set to: 0
  4503  0006DE  51E0               	movf	sprintf@c& (0+255),w,b
  4504  0006E0  5FDE               	subwf	sprintf@prec& (0+255),f,b
  4505  0006E2  0E00               	movlw	0
  4506  0006E4  BFE0               	btfsc	sprintf@c& (0+255),7,b
  4507  0006E6  0EFF               	movlw	255
  4508  0006E8  5BDF               	subwfb	(sprintf@prec+1)& (0+255),f,b
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;doprnt.c: 1219: if(c)
  4512  0006EA  51E0               	movf	sprintf@c& (0+255),w,b
  4513  0006EC  B4D8               	btfsc	status,2,c
  4514  0006EE  D008               	goto	l413
  4515                           
  4516                           ; BSR set to: 0
  4517                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  4518  0006F0  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4519  0006F4  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4520  0006F8  0E2E               	movlw	46
  4521  0006FA  6EDF               	movwf	indf2,c
  4522                           
  4523                           ; BSR set to: 0
  4524  0006FC  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  4525  0006FE  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  4526  000700                     l413:
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4530                           
  4531                           ; BSR set to: 0
  4532  000700  51E0               	movf	sprintf@c& (0+255),w,b
  4533  000702  EC5C  F005         	call	_scale
  4534  000706  C054  F0C2         	movff	?_scale,_sprintf$1937
  4535  00070A  C055  F0C3         	movff	?_scale+1,_sprintf$1937+1
  4536  00070E  C056  F0C4         	movff	?_scale+2,_sprintf$1937+2
  4537  000712  C057  F0C5         	movff	?_scale+3,_sprintf$1937+3
  4538                           
  4539                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4540  000716  C0DA  F04C         	movff	sprintf@fval,___flmul@a
  4541  00071A  C0DB  F04D         	movff	sprintf@fval+1,___flmul@a+1
  4542  00071E  C0DC  F04E         	movff	sprintf@fval+2,___flmul@a+2
  4543  000722  C0DD  F04F         	movff	sprintf@fval+3,___flmul@a+3
  4544  000726  C0C2  F048         	movff	_sprintf$1937,___flmul@b
  4545  00072A  C0C3  F049         	movff	_sprintf$1937+1,___flmul@b+1
  4546  00072E  C0C4  F04A         	movff	_sprintf$1937+2,___flmul@b+2
  4547  000732  C0C5  F04B         	movff	_sprintf$1937+3,___flmul@b+3
  4548  000736  EC84  F007         	call	___flmul	;wreg free
  4549  00073A  C048  F092         	movff	?___flmul,___fltol@f1
  4550  00073E  C049  F093         	movff	?___flmul+1,___fltol@f1+1
  4551  000742  C04A  F094         	movff	?___flmul+2,___fltol@f1+2
  4552  000746  C04B  F095         	movff	?___flmul+3,___fltol@f1+3
  4553  00074A  EC4F  F013         	call	___fltol	;wreg free
  4554  00074E  C092  F0D2         	movff	?___fltol,sprintf@val
  4555  000752  C093  F0D3         	movff	?___fltol+1,sprintf@val+1
  4556  000756  C094  F0D4         	movff	?___fltol+2,sprintf@val+2
  4557  00075A  C095  F0D5         	movff	?___fltol+3,sprintf@val+3
  4558                           
  4559                           ;doprnt.c: 1228: while(c--) {
  4560  00075E  D071               	goto	l414
  4561  000760                     
  4562                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4563  000760  C0D2  F01B         	movff	sprintf@val,___lldiv@dividend
  4564  000764  C0D3  F01C         	movff	sprintf@val+1,___lldiv@dividend+1
  4565  000768  C0D4  F01D         	movff	sprintf@val+2,___lldiv@dividend+2
  4566  00076C  C0D5  F01E         	movff	sprintf@val+3,___lldiv@dividend+3
  4567  000770  0100               	movlb	0	; () banked
  4568  000772  51E0               	movf	sprintf@c& (0+255),w,b
  4569  000774  0D04               	mullw	4
  4570  000776  0E53               	movlw	low _dpowers
  4571  000778  24F3               	addwf	prodl,w,c
  4572  00077A  6EF6               	movwf	tblptrl,c
  4573  00077C  0EFF               	movlw	high _dpowers
  4574  00077E  20F4               	addwfc	prodh,w,c
  4575  000780  6EF7               	movwf	tblptrh,c
  4576  000782                     	if	0	;There are less than 3 active tblptr bytes
  4577  000782                     	endif
  4578  000782  0009               	tblrd		*+
  4579  000784  CFF5 F01F          	movff	tablat,___lldiv@divisor
  4580  000788  0009               	tblrd		*+
  4581  00078A  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  4582  00078E  0009               	tblrd		*+
  4583  000790  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  4584  000794  000A               	tblrd		*-
  4585  000796  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  4586  00079A  EC41  F014         	call	___lldiv	;wreg free
  4587  00079E  C01B  F0CE         	movff	?___lldiv,sprintf@tmpval
  4588  0007A2  C01C  F0CF         	movff	?___lldiv+1,sprintf@tmpval+1
  4589  0007A6  C01D  F0D0         	movff	?___lldiv+2,sprintf@tmpval+2
  4590  0007AA  C01E  F0D1         	movff	?___lldiv+3,sprintf@tmpval+3
  4591                           
  4592                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4593  0007AE  C0CE  F028         	movff	sprintf@tmpval,___llmod@dividend
  4594  0007B2  C0CF  F029         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4595  0007B6  C0D0  F02A         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4596  0007BA  C0D1  F02B         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4597  0007BE  0E0A               	movlw	10
  4598  0007C0  6E2C               	movwf	___llmod@divisor,c
  4599  0007C2  0E00               	movlw	0
  4600  0007C4  6E2D               	movwf	___llmod@divisor+1,c
  4601  0007C6  0E00               	movlw	0
  4602  0007C8  6E2E               	movwf	___llmod@divisor+2,c
  4603  0007CA  0E00               	movlw	0
  4604  0007CC  6E2F               	movwf	___llmod@divisor+3,c
  4605  0007CE  ECF2  F014         	call	___llmod	;wreg free
  4606  0007D2  C028  F0CE         	movff	?___llmod,sprintf@tmpval
  4607  0007D6  C029  F0CF         	movff	?___llmod+1,sprintf@tmpval+1
  4608  0007DA  C02A  F0D0         	movff	?___llmod+2,sprintf@tmpval+2
  4609  0007DE  C02B  F0D1         	movff	?___llmod+3,sprintf@tmpval+3
  4610                           
  4611                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4612  0007E2  0100               	movlb	0	; () banked
  4613  0007E4  51CE               	movf	sprintf@tmpval& (0+255),w,b
  4614  0007E6  0F30               	addlw	48
  4615  0007E8  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4616  0007EC  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4617  0007F0  6EDF               	movwf	indf2,c
  4618                           
  4619                           ; BSR set to: 0
  4620  0007F2  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  4621  0007F4  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;doprnt.c: 1232: val %= dpowers[c];
  4625  0007F6  C0D2  F028         	movff	sprintf@val,___llmod@dividend
  4626  0007FA  C0D3  F029         	movff	sprintf@val+1,___llmod@dividend+1
  4627  0007FE  C0D4  F02A         	movff	sprintf@val+2,___llmod@dividend+2
  4628  000802  C0D5  F02B         	movff	sprintf@val+3,___llmod@dividend+3
  4629  000806  51E0               	movf	sprintf@c& (0+255),w,b
  4630  000808  0D04               	mullw	4
  4631  00080A  0E53               	movlw	low _dpowers
  4632  00080C  24F3               	addwf	prodl,w,c
  4633  00080E  6EF6               	movwf	tblptrl,c
  4634  000810  0EFF               	movlw	high _dpowers
  4635  000812  20F4               	addwfc	prodh,w,c
  4636  000814  6EF7               	movwf	tblptrh,c
  4637  000816                     	if	0	;There are less than 3 active tblptr bytes
  4638  000816                     	endif
  4639  000816  0009               	tblrd		*+
  4640  000818  CFF5 F02C          	movff	tablat,___llmod@divisor
  4641  00081C  0009               	tblrd		*+
  4642  00081E  CFF5 F02D          	movff	tablat,___llmod@divisor+1
  4643  000822  0009               	tblrd		*+
  4644  000824  CFF5 F02E          	movff	tablat,___llmod@divisor+2
  4645  000828  000A               	tblrd		*-
  4646  00082A  CFF5 F02F          	movff	tablat,___llmod@divisor+3
  4647  00082E  ECF2  F014         	call	___llmod	;wreg free
  4648  000832  C028  F0D2         	movff	?___llmod,sprintf@val
  4649  000836  C029  F0D3         	movff	?___llmod+1,sprintf@val+1
  4650  00083A  C02A  F0D4         	movff	?___llmod+2,sprintf@val+2
  4651  00083E  C02B  F0D5         	movff	?___llmod+3,sprintf@val+3
  4652  000842                     l414:
  4653  000842  0100               	movlb	0	; () banked
  4654  000844  07E0               	decf	sprintf@c& (0+255),f,b
  4655  000846  29E0               	incf	sprintf@c& (0+255),w,b
  4656  000848  B4D8               	btfsc	status,2,c
  4657  00084A  D00C               	goto	l417
  4658  00084C  D789               	goto	l415
  4659  00084E                     
  4660                           ; BSR set to: 0
  4661                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4662                           
  4663                           ; BSR set to: 0
  4664  00084E  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4665  000852  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4666  000856  0E30               	movlw	48
  4667  000858  6EDF               	movwf	indf2,c
  4668                           
  4669                           ; BSR set to: 0
  4670  00085A  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  4671  00085C  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  4672                           
  4673                           ; BSR set to: 0
  4674                           ;doprnt.c: 1237: prec--;
  4675  00085E  07DE               	decf	sprintf@prec& (0+255),f,b
  4676  000860  A0D8               	btfss	status,0,c
  4677  000862  07DF               	decf	(sprintf@prec+1)& (0+255),f,b
  4678  000864                     l417:
  4679                           
  4680                           ; BSR set to: 0
  4681                           
  4682                           ; BSR set to: 0
  4683  000864  51DE               	movf	sprintf@prec& (0+255),w,b
  4684  000866  11DF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4685  000868  B4D8               	btfsc	status,2,c
  4686  00086A  D112               	goto	u5510
  4687  00086C  D7F0               	goto	l418
  4688  00086E                     l377:
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;doprnt.c: 1246: }
  4692                           ;doprnt.c: 1253: {
  4693                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4694                           
  4695                           ; BSR set to: 0
  4696  00086E  C0C8  FFD9         	movff	sprintf@ap,fsr2l
  4697  000872  C0C9  FFDA         	movff	sprintf@ap+1,fsr2h
  4698  000876  CFDE F0D2          	movff	postinc2,sprintf@val
  4699  00087A  CFDD F0D3          	movff	postdec2,sprintf@val+1
  4700  00087E  0E00               	movlw	0
  4701  000880  BFD3               	btfsc	(sprintf@val+1)& (0+255),7,b
  4702  000882  0EFF               	movlw	-1
  4703  000884  6FD4               	movwf	(sprintf@val+2)& (0+255),b
  4704  000886  6FD5               	movwf	(sprintf@val+3)& (0+255),b
  4705                           
  4706                           ; BSR set to: 0
  4707  000888  0E02               	movlw	2
  4708  00088A  27C8               	addwf	sprintf@ap& (0+255),f,b
  4709  00088C  0E00               	movlw	0
  4710  00088E  23C9               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4711                           
  4712                           ; BSR set to: 0
  4713                           ;doprnt.c: 1261: if((long)val < 0) {
  4714  000890  AFD5               	btfss	(sprintf@val+3)& (0+255),7,b
  4715  000892  D00A               	goto	l420
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;doprnt.c: 1262: flag |= 0x03;
  4719  000894  0E03               	movlw	3
  4720  000896  13CC               	iorwf	sprintf@flag& (0+255),f,b
  4721                           
  4722                           ; BSR set to: 0
  4723                           ;doprnt.c: 1263: val = -val;
  4724  000898  1FD5               	comf	(sprintf@val+3)& (0+255),f,b
  4725  00089A  1FD4               	comf	(sprintf@val+2)& (0+255),f,b
  4726  00089C  1FD3               	comf	(sprintf@val+1)& (0+255),f,b
  4727  00089E  6DD2               	negf	sprintf@val& (0+255),b
  4728  0008A0  0E00               	movlw	0
  4729  0008A2  23D3               	addwfc	(sprintf@val+1)& (0+255),f,b
  4730  0008A4  23D4               	addwfc	(sprintf@val+2)& (0+255),f,b
  4731  0008A6  23D5               	addwfc	(sprintf@val+3)& (0+255),f,b
  4732  0008A8                     l420:
  4733                           
  4734                           ; BSR set to: 0
  4735                           ;doprnt.c: 1264: }
  4736                           ;doprnt.c: 1266: }
  4737                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4738                           
  4739                           ; BSR set to: 0
  4740  0008A8  51DE               	movf	sprintf@prec& (0+255),w,b
  4741  0008AA  11DF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4742  0008AC  A4D8               	btfss	status,2,c
  4743  0008AE  D008               	goto	l421
  4744                           
  4745                           ; BSR set to: 0
  4746  0008B0  51D2               	movf	sprintf@val& (0+255),w,b
  4747  0008B2  11D3               	iorwf	(sprintf@val+1)& (0+255),w,b
  4748  0008B4  11D4               	iorwf	(sprintf@val+2)& (0+255),w,b
  4749  0008B6  11D5               	iorwf	(sprintf@val+3)& (0+255),w,b
  4750  0008B8  A4D8               	btfss	status,2,c
  4751  0008BA  D002               	goto	l421
  4752                           
  4753                           ; BSR set to: 0
  4754                           ;doprnt.c: 1291: prec++;
  4755  0008BC  4BDE               	infsnz	sprintf@prec& (0+255),f,b
  4756  0008BE  2BDF               	incf	(sprintf@prec+1)& (0+255),f,b
  4757  0008C0                     l421:
  4758                           
  4759                           ; BSR set to: 0
  4760                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4761                           
  4762                           ; BSR set to: 0
  4763  0008C0  0E01               	movlw	1
  4764  0008C2  6FE0               	movwf	sprintf@c& (0+255),b
  4765  0008C4                     l4917:
  4766                           
  4767                           ; BSR set to: 0
  4768  0008C4  0E0A               	movlw	10
  4769  0008C6  19E0               	xorwf	sprintf@c& (0+255),w,b
  4770  0008C8  B4D8               	btfsc	status,2,c
  4771  0008CA  D018               	goto	u5400
  4772                           
  4773                           ; BSR set to: 0
  4774                           ;doprnt.c: 1306: if(val < dpowers[c])
  4775                           
  4776                           ; BSR set to: 0
  4777                           
  4778                           ; BSR set to: 0
  4779  0008CC  51E0               	movf	sprintf@c& (0+255),w,b
  4780  0008CE  0D04               	mullw	4
  4781  0008D0  0E53               	movlw	low _dpowers
  4782  0008D2  24F3               	addwf	prodl,w,c
  4783  0008D4  6EF6               	movwf	tblptrl,c
  4784  0008D6  0EFF               	movlw	high _dpowers
  4785  0008D8  20F4               	addwfc	prodh,w,c
  4786  0008DA  6EF7               	movwf	tblptrh,c
  4787  0008DC                     	if	0	;There are less than 3 active tblptr bytes
  4788  0008DC                     	endif
  4789  0008DC  0009               	tblrd		*+
  4790  0008DE  50F5               	movf	tablat,w,c
  4791  0008E0  5DD2               	subwf	sprintf@val& (0+255),w,b
  4792  0008E2  0009               	tblrd		*+
  4793  0008E4  50F5               	movf	tablat,w,c
  4794  0008E6  59D3               	subwfb	(sprintf@val+1)& (0+255),w,b
  4795  0008E8  0009               	tblrd		*+
  4796  0008EA  50F5               	movf	tablat,w,c
  4797  0008EC  59D4               	subwfb	(sprintf@val+2)& (0+255),w,b
  4798  0008EE  0009               	tblrd		*+
  4799  0008F0  50F5               	movf	tablat,w,c
  4800  0008F2  59D5               	subwfb	(sprintf@val+3)& (0+255),w,b
  4801  0008F4  A0D8               	btfss	status,0,c
  4802  0008F6  D002               	goto	u5400
  4803                           
  4804                           ; BSR set to: 0
  4805                           
  4806                           ; BSR set to: 0
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;doprnt.c: 1307: break;
  4810  0008F8  2BE0               	incf	sprintf@c& (0+255),f,b
  4811  0008FA  D7E4               	goto	l4917
  4812  0008FC                     u5400:
  4813                           
  4814                           ; BSR set to: 0
  4815                           ;doprnt.c: 1339: if(c < prec)
  4816                           
  4817                           ; BSR set to: 0
  4818  0008FC  0E80               	movlw	128
  4819  0008FE  BFE0               	btfsc	sprintf@c& (0+255),7,b
  4820  000900  0E7F               	movlw	127
  4821  000902  6FBE               	movwf	??_sprintf& (0+255),b
  4822  000904  51DE               	movf	sprintf@prec& (0+255),w,b
  4823  000906  5DE0               	subwf	sprintf@c& (0+255),w,b
  4824  000908  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  4825  00090A  0A80               	xorlw	128
  4826  00090C  59BE               	subwfb	??_sprintf& (0+255),w,b
  4827  00090E  B0D8               	btfsc	status,0,c
  4828  000910  D003               	goto	l425
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;doprnt.c: 1340: c = prec;
  4832  000912  C0DE  F0E0         	movff	sprintf@prec,sprintf@c
  4833  000916  D010               	goto	l427
  4834  000918                     l425:
  4835                           
  4836                           ; BSR set to: 0
  4837                           ;doprnt.c: 1341: else if(prec < c)
  4838                           
  4839                           ; BSR set to: 0
  4840  000918  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  4841  00091A  0A80               	xorlw	128
  4842  00091C  6FBE               	movwf	??_sprintf& (0+255),b
  4843  00091E  51E0               	movf	sprintf@c& (0+255),w,b
  4844  000920  5DDE               	subwf	sprintf@prec& (0+255),w,b
  4845  000922  0E80               	movlw	128
  4846  000924  BFE0               	btfsc	sprintf@c& (0+255),7,b
  4847  000926  0E7F               	movlw	127
  4848  000928  59BE               	subwfb	??_sprintf& (0+255),w,b
  4849  00092A  B0D8               	btfsc	status,0,c
  4850  00092C  D005               	goto	l427
  4851                           
  4852                           ; BSR set to: 0
  4853                           ;doprnt.c: 1342: prec = c;
  4854  00092E  51E0               	movf	sprintf@c& (0+255),w,b
  4855  000930  6FDE               	movwf	sprintf@prec& (0+255),b
  4856  000932  6BDF               	clrf	(sprintf@prec+1)& (0+255),b
  4857  000934  BFDE               	btfsc	sprintf@prec& (0+255),7,b
  4858  000936  07DF               	decf	(sprintf@prec+1)& (0+255),f,b
  4859  000938                     l427:
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4863                           
  4864                           ; BSR set to: 0
  4865                           
  4866                           ; BSR set to: 0
  4867  000938  51D8               	movf	sprintf@width& (0+255),w,b
  4868  00093A  11D9               	iorwf	(sprintf@width+1)& (0+255),w,b
  4869  00093C  B4D8               	btfsc	status,2,c
  4870  00093E  D00D               	goto	l428
  4871                           
  4872                           ; BSR set to: 0
  4873  000940  0E03               	movlw	3
  4874  000942  15CC               	andwf	sprintf@flag& (0+255),w,b
  4875  000944  6FBE               	movwf	??_sprintf& (0+255),b
  4876  000946  0E00               	movlw	0
  4877  000948  15CD               	andwf	(sprintf@flag+1)& (0+255),w,b
  4878  00094A  6FBF               	movwf	(??_sprintf+1)& (0+255),b
  4879  00094C  51BE               	movf	??_sprintf& (0+255),w,b
  4880  00094E  11BF               	iorwf	(??_sprintf+1)& (0+255),w,b
  4881  000950  B4D8               	btfsc	status,2,c
  4882  000952  D003               	goto	l428
  4883                           
  4884                           ; BSR set to: 0
  4885                           ;doprnt.c: 1346: width--;
  4886  000954  07D8               	decf	sprintf@width& (0+255),f,b
  4887  000956  A0D8               	btfss	status,0,c
  4888  000958  07D9               	decf	(sprintf@width+1)& (0+255),f,b
  4889  00095A                     l428:
  4890                           
  4891                           ; BSR set to: 0
  4892                           ;doprnt.c: 1348: if(flag & 0x4000) {
  4893                           
  4894                           ; BSR set to: 0
  4895  00095A  ADCD               	btfss	(sprintf@flag+1)& (0+255),6,b
  4896  00095C  D013               	goto	l431
  4897                           
  4898                           ; BSR set to: 0
  4899                           ;doprnt.c: 1349: if(width > prec)
  4900  00095E  51D8               	movf	sprintf@width& (0+255),w,b
  4901  000960  5DDE               	subwf	sprintf@prec& (0+255),w,b
  4902  000962  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  4903  000964  0A80               	xorlw	128
  4904  000966  6FBE               	movwf	??_sprintf& (0+255),b
  4905  000968  51D9               	movf	(sprintf@width+1)& (0+255),w,b
  4906  00096A  0A80               	xorlw	128
  4907  00096C  59BE               	subwfb	??_sprintf& (0+255),w,b
  4908  00096E  B0D8               	btfsc	status,0,c
  4909  000970  D005               	goto	l430
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;doprnt.c: 1350: width -= prec;
  4913  000972  51DE               	movf	sprintf@prec& (0+255),w,b
  4914  000974  5FD8               	subwf	sprintf@width& (0+255),f,b
  4915  000976  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  4916  000978  5BD9               	subwfb	(sprintf@width+1)& (0+255),f,b
  4917  00097A  D004               	goto	l431
  4918  00097C                     l430:
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;doprnt.c: 1351: else
  4922                           ;doprnt.c: 1352: width = 0;
  4923                           
  4924                           ; BSR set to: 0
  4925  00097C  0E00               	movlw	0
  4926  00097E  6FD9               	movwf	(sprintf@width+1)& (0+255),b
  4927  000980  0E00               	movlw	0
  4928  000982  6FD8               	movwf	sprintf@width& (0+255),b
  4929  000984                     l431:
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;doprnt.c: 1353: }
  4933                           ;doprnt.c: 1381: if(width > c)
  4934                           
  4935                           ; BSR set to: 0
  4936                           
  4937                           ; BSR set to: 0
  4938  000984  0E80               	movlw	128
  4939  000986  BFE0               	btfsc	sprintf@c& (0+255),7,b
  4940  000988  0E7F               	movlw	127
  4941  00098A  6FBE               	movwf	??_sprintf& (0+255),b
  4942  00098C  51D8               	movf	sprintf@width& (0+255),w,b
  4943  00098E  5DE0               	subwf	sprintf@c& (0+255),w,b
  4944  000990  51D9               	movf	(sprintf@width+1)& (0+255),w,b
  4945  000992  0A80               	xorlw	128
  4946  000994  59BE               	subwfb	??_sprintf& (0+255),w,b
  4947  000996  B0D8               	btfsc	status,0,c
  4948  000998  D007               	goto	l432
  4949                           
  4950                           ; BSR set to: 0
  4951                           ;doprnt.c: 1382: width -= c;
  4952  00099A  51E0               	movf	sprintf@c& (0+255),w,b
  4953  00099C  5FD8               	subwf	sprintf@width& (0+255),f,b
  4954  00099E  0E00               	movlw	0
  4955  0009A0  BFE0               	btfsc	sprintf@c& (0+255),7,b
  4956  0009A2  0EFF               	movlw	255
  4957  0009A4  5BD9               	subwfb	(sprintf@width+1)& (0+255),f,b
  4958  0009A6  D004               	goto	l433
  4959  0009A8                     l432:
  4960                           
  4961                           ; BSR set to: 0
  4962                           ;doprnt.c: 1383: else
  4963                           ;doprnt.c: 1384: width = 0;
  4964                           
  4965                           ; BSR set to: 0
  4966  0009A8  0E00               	movlw	0
  4967  0009AA  6FD9               	movwf	(sprintf@width+1)& (0+255),b
  4968  0009AC  0E00               	movlw	0
  4969  0009AE  6FD8               	movwf	sprintf@width& (0+255),b
  4970  0009B0                     l433:
  4971                           
  4972                           ; BSR set to: 0
  4973                           ;doprnt.c: 1422: {
  4974                           ;doprnt.c: 1424: if(width
  4975                           ;doprnt.c: 1428: )
  4976                           
  4977                           ; BSR set to: 0
  4978  0009B0  51D8               	movf	sprintf@width& (0+255),w,b
  4979  0009B2  11D9               	iorwf	(sprintf@width+1)& (0+255),w,b
  4980  0009B4  B4D8               	btfsc	status,2,c
  4981  0009B6  D00F               	goto	u5490
  4982  0009B8                     u5480:
  4983                           
  4984                           ; BSR set to: 0
  4985                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4986                           
  4987                           ; BSR set to: 0
  4988                           
  4989                           ;doprnt.c: 1429: do
  4990  0009B8  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4991  0009BC  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4992  0009C0  0E20               	movlw	32
  4993  0009C2  6EDF               	movwf	indf2,c
  4994                           
  4995                           ; BSR set to: 0
  4996  0009C4  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  4997  0009C6  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;doprnt.c: 1431: while(--width);
  5001  0009C8  07D8               	decf	sprintf@width& (0+255),f,b
  5002  0009CA  A0D8               	btfss	status,0,c
  5003  0009CC  07D9               	decf	(sprintf@width+1)& (0+255),f,b
  5004  0009CE  51D8               	movf	sprintf@width& (0+255),w,b
  5005  0009D0  11D9               	iorwf	(sprintf@width+1)& (0+255),w,b
  5006  0009D2  A4D8               	btfss	status,2,c
  5007  0009D4  D7F1               	goto	u5480
  5008  0009D6                     u5490:
  5009                           
  5010                           ; BSR set to: 0
  5011                           ;doprnt.c: 1438: if(flag & 0x03)
  5012                           
  5013                           ; BSR set to: 0
  5014                           
  5015                           ; BSR set to: 0
  5016  0009D6  0E03               	movlw	3
  5017  0009D8  15CC               	andwf	sprintf@flag& (0+255),w,b
  5018  0009DA  6FBE               	movwf	??_sprintf& (0+255),b
  5019  0009DC  0E00               	movlw	0
  5020  0009DE  15CD               	andwf	(sprintf@flag+1)& (0+255),w,b
  5021  0009E0  6FBF               	movwf	(??_sprintf+1)& (0+255),b
  5022  0009E2  51BE               	movf	??_sprintf& (0+255),w,b
  5023  0009E4  11BF               	iorwf	(??_sprintf+1)& (0+255),w,b
  5024  0009E6  B4D8               	btfsc	status,2,c
  5025  0009E8  D04B               	goto	l438
  5026                           
  5027                           ; BSR set to: 0
  5028                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5029  0009EA  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  5030  0009EE  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  5031  0009F2  0E2D               	movlw	45
  5032  0009F4  6EDF               	movwf	indf2,c
  5033  0009F6  D042               	goto	l4975
  5034  0009F8                     l4971:
  5035                           
  5036                           ; BSR set to: 0
  5037                           ;doprnt.c: 1478: {
  5038                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5039  0009F8  C0DE  F0BE         	movff	sprintf@prec,??_sprintf
  5040  0009FC  C0DF  F0BF         	movff	sprintf@prec+1,??_sprintf+1
  5041  000A00  90D8               	bcf	status,0,c
  5042  000A02  37BE               	rlcf	??_sprintf& (0+255),f,b
  5043  000A04  37BF               	rlcf	(??_sprintf+1)& (0+255),f,b
  5044  000A06  90D8               	bcf	status,0,c
  5045  000A08  37BE               	rlcf	??_sprintf& (0+255),f,b
  5046  000A0A  37BF               	rlcf	(??_sprintf+1)& (0+255),f,b
  5047  000A0C  0E53               	movlw	low _dpowers
  5048  000A0E  25BE               	addwf	??_sprintf& (0+255),w,b
  5049  000A10  6EF6               	movwf	tblptrl,c
  5050  000A12  0EFF               	movlw	high _dpowers
  5051  000A14  21BF               	addwfc	(??_sprintf+1)& (0+255),w,b
  5052  000A16  6EF7               	movwf	tblptrh,c
  5053  000A18                     	if	0	;There are less than 3 active tblptr bytes
  5054  000A18                     	endif
  5055  000A18  0009               	tblrd		*+
  5056  000A1A  CFF5 F01F          	movff	tablat,___lldiv@divisor
  5057  000A1E  0009               	tblrd		*+
  5058  000A20  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  5059  000A24  0009               	tblrd		*+
  5060  000A26  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  5061  000A2A  000A               	tblrd		*-
  5062  000A2C  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  5063  000A30  C0D2  F01B         	movff	sprintf@val,___lldiv@dividend
  5064  000A34  C0D3  F01C         	movff	sprintf@val+1,___lldiv@dividend+1
  5065  000A38  C0D4  F01D         	movff	sprintf@val+2,___lldiv@dividend+2
  5066  000A3C  C0D5  F01E         	movff	sprintf@val+3,___lldiv@dividend+3
  5067  000A40  EC41  F014         	call	___lldiv	;wreg free
  5068  000A44  C01B  F028         	movff	?___lldiv,___llmod@dividend
  5069  000A48  C01C  F029         	movff	?___lldiv+1,___llmod@dividend+1
  5070  000A4C  C01D  F02A         	movff	?___lldiv+2,___llmod@dividend+2
  5071  000A50  C01E  F02B         	movff	?___lldiv+3,___llmod@dividend+3
  5072  000A54  0E0A               	movlw	10
  5073  000A56  6E2C               	movwf	___llmod@divisor,c
  5074  000A58  0E00               	movlw	0
  5075  000A5A  6E2D               	movwf	___llmod@divisor+1,c
  5076  000A5C  0E00               	movlw	0
  5077  000A5E  6E2E               	movwf	___llmod@divisor+2,c
  5078  000A60  0E00               	movlw	0
  5079  000A62  6E2F               	movwf	___llmod@divisor+3,c
  5080  000A64  ECF2  F014         	call	___llmod	;wreg free
  5081  000A68  5028               	movf	?___llmod,w,c
  5082  000A6A  0F30               	addlw	48
  5083  000A6C  0100               	movlb	0	; () banked
  5084  000A6E  6FE0               	movwf	sprintf@c& (0+255),b
  5085                           
  5086                           ; BSR set to: 0
  5087                           ;doprnt.c: 1523: }
  5088                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5089  000A70  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  5090  000A74  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  5091  000A78  C0E0  FFDF         	movff	sprintf@c,indf2
  5092  000A7C                     l4975:
  5093                           
  5094                           ; BSR set to: 0
  5095  000A7C  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  5096  000A7E  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  5097  000A80                     l438:
  5098                           
  5099                           ; BSR set to: 0
  5100                           
  5101                           ; BSR set to: 0
  5102  000A80  07DE               	decf	sprintf@prec& (0+255),f,b
  5103  000A82  A0D8               	btfss	status,0,c
  5104  000A84  07DF               	decf	(sprintf@prec+1)& (0+255),f,b
  5105  000A86  29DE               	incf	sprintf@prec& (0+255),w,b
  5106  000A88  E1B7               	bnz	l4971
  5107  000A8A  29DF               	incf	(sprintf@prec+1)& (0+255),w,b
  5108  000A8C  A4D8               	btfss	status,2,c
  5109  000A8E  D7B4               	goto	l439
  5110  000A90                     u5510:
  5111                           
  5112                           ; BSR set to: 0
  5113                           
  5114                           ; BSR set to: 0
  5115                           
  5116                           ; BSR set to: 0
  5117  000A90  C0B8  FFF6         	movff	sprintf@f,tblptrl
  5118  000A94  C0B9  FFF7         	movff	sprintf@f+1,tblptrh
  5119  000A98  4BB8               	infsnz	sprintf@f& (0+255),f,b
  5120  000A9A  2BB9               	incf	(sprintf@f+1)& (0+255),f,b
  5121  000A9C                     	if	0	;tblptru may be non-zero
  5122  000A9C                     	endif
  5123  000A9C                     	if	0	;tblptru may be non-zero
  5124  000A9C                     	endif
  5125  000A9C  0008               	tblrd		*
  5126  000A9E  CFF5 F0E0          	movff	tablat,sprintf@c
  5127  000AA2  51E0               	movf	sprintf@c& (0+255),w,b
  5128  000AA4  A4D8               	btfss	status,2,c
  5129  000AA6  EF10  F000         	goto	l349
  5130  000AAA                     u5520:
  5131                           
  5132                           ; BSR set to: 0
  5133                           ;doprnt.c: 1538: *sp = 0;
  5134                           
  5135                           ; BSR set to: 0
  5136                           
  5137                           ;doprnt.c: 1525: }
  5138                           ;doprnt.c: 1533: }
  5139                           ;doprnt.c: 1535: alldone:
  5140                           
  5141                           ; BSR set to: 0
  5142  000AAA  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  5143  000AAE  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  5144  000AB2  0E00               	movlw	0
  5145  000AB4  6EDF               	movwf	indf2,c
  5146  000AB6  0012               	return	
  5147  000AB8                     __end_of_sprintf:
  5148                           	opt stack 0
  5149                           tblptru	equ	0xFF8
  5150                           tblptrh	equ	0xFF7
  5151                           tblptrl	equ	0xFF6
  5152                           tablat	equ	0xFF5
  5153                           prodh	equ	0xFF4
  5154                           prodl	equ	0xFF3
  5155                           intcon	equ	0xFF2
  5156                           intcon2	equ	0xFF1
  5157                           intcon3	equ	0xFF0
  5158                           postinc0	equ	0xFEE
  5159                           wreg	equ	0xFE8
  5160                           indf1	equ	0xFE7
  5161                           postdec1	equ	0xFE5
  5162                           fsr1h	equ	0xFE2
  5163                           fsr1l	equ	0xFE1
  5164                           indf2	equ	0xFDF
  5165                           postinc2	equ	0xFDE
  5166                           postdec2	equ	0xFDD
  5167                           fsr2h	equ	0xFDA
  5168                           fsr2l	equ	0xFD9
  5169                           status	equ	0xFD8
  5170                           
  5171 ;; *************** function _scale *****************
  5172 ;; Defined at:
  5173 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;  scl             1    wreg     char 
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;  scl             1   17[BANK0 ] char 
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  4   83[COMRAM] char 
  5180 ;; Registers used:
  5181 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5187 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5188 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5190 ;;      Totals:         4       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;Total ram usage:        9 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    3
  5194 ;; This function calls:
  5195 ;;		___awdiv
  5196 ;;		___awmod
  5197 ;;		___flmul
  5198 ;; This function is called by:
  5199 ;;		_sprintf
  5200 ;; This function uses a non-reentrant model
  5201 ;;
  5202                           
  5203                           	psect	text13
  5204  000AB8                     __ptext13:
  5205                           	opt stack 0
  5206  000AB8                     _scale:
  5207                           	opt stack 25
  5208                           
  5209                           ; BSR set to: 0
  5210                           ;incstack = 0
  5211                           ;scale@scl stored from wreg
  5212  000AB8  0100               	movlb	0	; () banked
  5213  000ABA  6F91               	movwf	scale@scl& (0+255),b
  5214                           
  5215                           ;doprnt.c: 428: if(scl < 0) {
  5216  000ABC  0100               	movlb	0	; () banked
  5217  000ABE  AF91               	btfss	scale@scl& (0+255),7,b
  5218  000AC0  D112               	goto	l338
  5219                           
  5220                           ; BSR set to: 0
  5221                           ;doprnt.c: 429: scl = -scl;
  5222  000AC2  6D91               	negf	scale@scl& (0+255),b
  5223                           
  5224                           ;doprnt.c: 430: if(scl>=110)
  5225  000AC4  5191               	movf	scale@scl& (0+255),w,b
  5226  000AC6  0A80               	xorlw	128
  5227  000AC8  0F12               	addlw	-238
  5228  000ACA  A0D8               	btfss	status,0,c
  5229  000ACC  D09A               	goto	l339
  5230                           
  5231                           ; BSR set to: 0
  5232                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5233  000ACE  0E00               	movlw	0
  5234  000AD0  6E24               	movwf	___awdiv@divisor+1,c
  5235  000AD2  0E0A               	movlw	10
  5236  000AD4  6E23               	movwf	___awdiv@divisor,c
  5237  000AD6  0E00               	movlw	0
  5238  000AD8  6E1E               	movwf	___awmod@divisor+1,c
  5239  000ADA  0E64               	movlw	100
  5240  000ADC  6E1D               	movwf	___awmod@divisor,c
  5241  000ADE  5191               	movf	scale@scl& (0+255),w,b
  5242  000AE0  6E1B               	movwf	___awmod@dividend,c
  5243  000AE2  6A1C               	clrf	___awmod@dividend+1,c
  5244  000AE4  BE1B               	btfsc	___awmod@dividend,7,c
  5245  000AE6  061C               	decf	___awmod@dividend+1,f,c
  5246  000AE8  EC82  F014         	call	___awmod	;wreg free
  5247  000AEC  C01B  F021         	movff	?___awmod,___awdiv@dividend
  5248  000AF0  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  5249  000AF4  ECBE  F013         	call	___awdiv	;wreg free
  5250  000AF8  90D8               	bcf	status,0,c
  5251  000AFA  3621               	rlcf	?___awdiv,f,c
  5252  000AFC  3622               	rlcf	?___awdiv+1,f,c
  5253  000AFE  90D8               	bcf	status,0,c
  5254  000B00  3621               	rlcf	?___awdiv,f,c
  5255  000B02  3622               	rlcf	?___awdiv+1,f,c
  5256  000B04  0E24               	movlw	36
  5257  000B06  2621               	addwf	?___awdiv,f,c
  5258  000B08  0E00               	movlw	0
  5259  000B0A  2222               	addwfc	?___awdiv+1,f,c
  5260  000B0C  0E1F               	movlw	low __npowers_
  5261  000B0E  2421               	addwf	?___awdiv,w,c
  5262  000B10  6EF6               	movwf	tblptrl,c
  5263  000B12  0EFF               	movlw	high __npowers_
  5264  000B14  2022               	addwfc	?___awdiv+1,w,c
  5265  000B16  6EF7               	movwf	tblptrh,c
  5266  000B18                     	if	0	;There are less than 3 active tblptr bytes
  5267  000B18                     	endif
  5268  000B18  0009               	tblrd		*+
  5269  000B1A  CFF5 F04C          	movff	tablat,___flmul@a
  5270  000B1E  0009               	tblrd		*+
  5271  000B20  CFF5 F04D          	movff	tablat,___flmul@a+1
  5272  000B24  0009               	tblrd		*+
  5273  000B26  CFF5 F04E          	movff	tablat,___flmul@a+2
  5274  000B2A  000A               	tblrd		*-
  5275  000B2C  CFF5 F04F          	movff	tablat,___flmul@a+3
  5276  000B30  0E00               	movlw	0
  5277  000B32  6E24               	movwf	___awdiv@divisor+1,c
  5278  000B34  0E64               	movlw	100
  5279  000B36  6E23               	movwf	___awdiv@divisor,c
  5280  000B38  0100               	movlb	0	; () banked
  5281  000B3A  5191               	movf	scale@scl& (0+255),w,b
  5282  000B3C  6E21               	movwf	___awdiv@dividend,c
  5283  000B3E  6A22               	clrf	___awdiv@dividend+1,c
  5284  000B40  BE21               	btfsc	___awdiv@dividend,7,c
  5285  000B42  0622               	decf	___awdiv@dividend+1,f,c
  5286  000B44  ECBE  F013         	call	___awdiv	;wreg free
  5287  000B48  90D8               	bcf	status,0,c
  5288  000B4A  3621               	rlcf	?___awdiv,f,c
  5289  000B4C  3622               	rlcf	?___awdiv+1,f,c
  5290  000B4E  90D8               	bcf	status,0,c
  5291  000B50  3621               	rlcf	?___awdiv,f,c
  5292  000B52  3622               	rlcf	?___awdiv+1,f,c
  5293  000B54  0E48               	movlw	72
  5294  000B56  2621               	addwf	?___awdiv,f,c
  5295  000B58  0E00               	movlw	0
  5296  000B5A  2222               	addwfc	?___awdiv+1,f,c
  5297  000B5C  0E1F               	movlw	low __npowers_
  5298  000B5E  2421               	addwf	?___awdiv,w,c
  5299  000B60  6EF6               	movwf	tblptrl,c
  5300  000B62  0EFF               	movlw	high __npowers_
  5301  000B64  2022               	addwfc	?___awdiv+1,w,c
  5302  000B66  6EF7               	movwf	tblptrh,c
  5303  000B68                     	if	0	;There are less than 3 active tblptr bytes
  5304  000B68                     	endif
  5305  000B68  0009               	tblrd		*+
  5306  000B6A  CFF5 F048          	movff	tablat,___flmul@b
  5307  000B6E  0009               	tblrd		*+
  5308  000B70  CFF5 F049          	movff	tablat,___flmul@b+1
  5309  000B74  0009               	tblrd		*+
  5310  000B76  CFF5 F04A          	movff	tablat,___flmul@b+2
  5311  000B7A  000A               	tblrd		*-
  5312  000B7C  CFF5 F04B          	movff	tablat,___flmul@b+3
  5313  000B80  EC84  F007         	call	___flmul	;wreg free
  5314  000B84  C048  F08D         	movff	?___flmul,_scale$1936
  5315  000B88  C049  F08E         	movff	?___flmul+1,_scale$1936+1
  5316  000B8C  C04A  F08F         	movff	?___flmul+2,_scale$1936+2
  5317  000B90  C04B  F090         	movff	?___flmul+3,_scale$1936+3
  5318                           
  5319                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5320  000B94  C08D  F048         	movff	_scale$1936,___flmul@b
  5321  000B98  C08E  F049         	movff	_scale$1936+1,___flmul@b+1
  5322  000B9C  C08F  F04A         	movff	_scale$1936+2,___flmul@b+2
  5323  000BA0  C090  F04B         	movff	_scale$1936+3,___flmul@b+3
  5324  000BA4  0E00               	movlw	0
  5325  000BA6  6E1E               	movwf	___awmod@divisor+1,c
  5326  000BA8  0E0A               	movlw	10
  5327  000BAA  6E1D               	movwf	___awmod@divisor,c
  5328  000BAC  0100               	movlb	0	; () banked
  5329  000BAE  5191               	movf	scale@scl& (0+255),w,b
  5330  000BB0  6E1B               	movwf	___awmod@dividend,c
  5331  000BB2  6A1C               	clrf	___awmod@dividend+1,c
  5332  000BB4  BE1B               	btfsc	___awmod@dividend,7,c
  5333  000BB6  061C               	decf	___awmod@dividend+1,f,c
  5334  000BB8  EC82  F014         	call	___awmod	;wreg free
  5335  000BBC  90D8               	bcf	status,0,c
  5336  000BBE  361B               	rlcf	?___awmod,f,c
  5337  000BC0  361C               	rlcf	?___awmod+1,f,c
  5338  000BC2  90D8               	bcf	status,0,c
  5339  000BC4  361B               	rlcf	?___awmod,f,c
  5340  000BC6  361C               	rlcf	?___awmod+1,f,c
  5341  000BC8  0E1F               	movlw	low __npowers_
  5342  000BCA  241B               	addwf	?___awmod,w,c
  5343  000BCC  6EF6               	movwf	tblptrl,c
  5344  000BCE  0EFF               	movlw	high __npowers_
  5345  000BD0  201C               	addwfc	?___awmod+1,w,c
  5346  000BD2  6EF7               	movwf	tblptrh,c
  5347  000BD4                     	if	0	;There are less than 3 active tblptr bytes
  5348  000BD4                     	endif
  5349  000BD4  0009               	tblrd		*+
  5350  000BD6  CFF5 F04C          	movff	tablat,___flmul@a
  5351  000BDA  0009               	tblrd		*+
  5352  000BDC  CFF5 F04D          	movff	tablat,___flmul@a+1
  5353  000BE0  0009               	tblrd		*+
  5354  000BE2  CFF5 F04E          	movff	tablat,___flmul@a+2
  5355  000BE6  000A               	tblrd		*-
  5356  000BE8  CFF5 F04F          	movff	tablat,___flmul@a+3
  5357  000BEC  EC84  F007         	call	___flmul	;wreg free
  5358  000BF0  C048  F054         	movff	?___flmul,?_scale
  5359  000BF4  C049  F055         	movff	?___flmul+1,?_scale+1
  5360  000BF8  C04A  F056         	movff	?___flmul+2,?_scale+2
  5361  000BFC  C04B  F057         	movff	?___flmul+3,?_scale+3
  5362  000C00  0012               	return	
  5363  000C02                     l339:
  5364                           
  5365                           ;doprnt.c: 432: else if(scl > 10)
  5366  000C02  0100               	movlb	0	; () banked
  5367  000C04  5191               	movf	scale@scl& (0+255),w,b
  5368  000C06  0A80               	xorlw	128
  5369  000C08  0F75               	addlw	-139
  5370  000C0A  A0D8               	btfss	status,0,c
  5371  000C0C  D056               	goto	l342
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5375  000C0E  0E00               	movlw	0
  5376  000C10  6E24               	movwf	___awdiv@divisor+1,c
  5377  000C12  0E0A               	movlw	10
  5378  000C14  6E23               	movwf	___awdiv@divisor,c
  5379  000C16  5191               	movf	scale@scl& (0+255),w,b
  5380  000C18  6E21               	movwf	___awdiv@dividend,c
  5381  000C1A  6A22               	clrf	___awdiv@dividend+1,c
  5382  000C1C  BE21               	btfsc	___awdiv@dividend,7,c
  5383  000C1E  0622               	decf	___awdiv@dividend+1,f,c
  5384  000C20  ECBE  F013         	call	___awdiv	;wreg free
  5385  000C24  90D8               	bcf	status,0,c
  5386  000C26  3621               	rlcf	?___awdiv,f,c
  5387  000C28  3622               	rlcf	?___awdiv+1,f,c
  5388  000C2A  90D8               	bcf	status,0,c
  5389  000C2C  3621               	rlcf	?___awdiv,f,c
  5390  000C2E  3622               	rlcf	?___awdiv+1,f,c
  5391  000C30  0E24               	movlw	36
  5392  000C32  2621               	addwf	?___awdiv,f,c
  5393  000C34  0E00               	movlw	0
  5394  000C36  2222               	addwfc	?___awdiv+1,f,c
  5395  000C38  0E1F               	movlw	low __npowers_
  5396  000C3A  2421               	addwf	?___awdiv,w,c
  5397  000C3C  6EF6               	movwf	tblptrl,c
  5398  000C3E  0EFF               	movlw	high __npowers_
  5399  000C40  2022               	addwfc	?___awdiv+1,w,c
  5400  000C42  6EF7               	movwf	tblptrh,c
  5401  000C44                     	if	0	;There are less than 3 active tblptr bytes
  5402  000C44                     	endif
  5403  000C44  0009               	tblrd		*+
  5404  000C46  CFF5 F048          	movff	tablat,___flmul@b
  5405  000C4A  0009               	tblrd		*+
  5406  000C4C  CFF5 F049          	movff	tablat,___flmul@b+1
  5407  000C50  0009               	tblrd		*+
  5408  000C52  CFF5 F04A          	movff	tablat,___flmul@b+2
  5409  000C56  000A               	tblrd		*-
  5410  000C58  CFF5 F04B          	movff	tablat,___flmul@b+3
  5411  000C5C  0E00               	movlw	0
  5412  000C5E  6E1E               	movwf	___awmod@divisor+1,c
  5413  000C60  0E0A               	movlw	10
  5414  000C62  6E1D               	movwf	___awmod@divisor,c
  5415  000C64  0100               	movlb	0	; () banked
  5416  000C66  5191               	movf	scale@scl& (0+255),w,b
  5417  000C68  6E1B               	movwf	___awmod@dividend,c
  5418  000C6A  6A1C               	clrf	___awmod@dividend+1,c
  5419  000C6C  BE1B               	btfsc	___awmod@dividend,7,c
  5420  000C6E  061C               	decf	___awmod@dividend+1,f,c
  5421  000C70  EC82  F014         	call	___awmod	;wreg free
  5422  000C74  90D8               	bcf	status,0,c
  5423  000C76  361B               	rlcf	?___awmod,f,c
  5424  000C78  361C               	rlcf	?___awmod+1,f,c
  5425  000C7A  90D8               	bcf	status,0,c
  5426  000C7C  361B               	rlcf	?___awmod,f,c
  5427  000C7E  361C               	rlcf	?___awmod+1,f,c
  5428  000C80  0E1F               	movlw	low __npowers_
  5429  000C82  241B               	addwf	?___awmod,w,c
  5430  000C84  6EF6               	movwf	tblptrl,c
  5431  000C86  0EFF               	movlw	high __npowers_
  5432  000C88  201C               	addwfc	?___awmod+1,w,c
  5433  000C8A  6EF7               	movwf	tblptrh,c
  5434  000C8C                     	if	0	;There are less than 3 active tblptr bytes
  5435  000C8C                     	endif
  5436  000C8C  0009               	tblrd		*+
  5437  000C8E  CFF5 F04C          	movff	tablat,___flmul@a
  5438  000C92  0009               	tblrd		*+
  5439  000C94  CFF5 F04D          	movff	tablat,___flmul@a+1
  5440  000C98  0009               	tblrd		*+
  5441  000C9A  CFF5 F04E          	movff	tablat,___flmul@a+2
  5442  000C9E  000A               	tblrd		*-
  5443  000CA0  CFF5 F04F          	movff	tablat,___flmul@a+3
  5444  000CA4  EC84  F007         	call	___flmul	;wreg free
  5445  000CA8  C048  F054         	movff	?___flmul,?_scale
  5446  000CAC  C049  F055         	movff	?___flmul+1,?_scale+1
  5447  000CB0  C04A  F056         	movff	?___flmul+2,?_scale+2
  5448  000CB4  C04B  F057         	movff	?___flmul+3,?_scale+3
  5449  000CB8  0012               	return	
  5450  000CBA                     l342:
  5451                           
  5452                           ;doprnt.c: 434: return _npowers_[scl];
  5453  000CBA  0100               	movlb	0	; () banked
  5454  000CBC  5191               	movf	scale@scl& (0+255),w,b
  5455  000CBE  0D04               	mullw	4
  5456  000CC0  0E1F               	movlw	low __npowers_
  5457  000CC2  24F3               	addwf	prodl,w,c
  5458  000CC4  6EF6               	movwf	tblptrl,c
  5459  000CC6  0EFF               	movlw	high __npowers_
  5460  000CC8  20F4               	addwfc	prodh,w,c
  5461  000CCA  6EF7               	movwf	tblptrh,c
  5462  000CCC                     	if	0	;There are less than 3 active tblptr bytes
  5463  000CCC                     	endif
  5464  000CCC  0009               	tblrd		*+
  5465  000CCE  CFF5 F054          	movff	tablat,?_scale
  5466  000CD2  0009               	tblrd		*+
  5467  000CD4  CFF5 F055          	movff	tablat,?_scale+1
  5468  000CD8  0009               	tblrd		*+
  5469  000CDA  CFF5 F056          	movff	tablat,?_scale+2
  5470  000CDE  000A               	tblrd		*-
  5471  000CE0  CFF5 F057          	movff	tablat,?_scale+3
  5472                           
  5473                           ; BSR set to: 0
  5474  000CE4  0012               	return	
  5475  000CE6                     l338:
  5476                           
  5477                           ; BSR set to: 0
  5478                           ;doprnt.c: 435: }
  5479                           ;doprnt.c: 436: if(scl>=110)
  5480                           
  5481                           ; BSR set to: 0
  5482  000CE6  5191               	movf	scale@scl& (0+255),w,b
  5483  000CE8  0A80               	xorlw	128
  5484  000CEA  0F12               	addlw	-238
  5485  000CEC  A0D8               	btfss	status,0,c
  5486  000CEE  D09A               	goto	l343
  5487                           
  5488                           ; BSR set to: 0
  5489                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5490  000CF0  0E00               	movlw	0
  5491  000CF2  6E24               	movwf	___awdiv@divisor+1,c
  5492  000CF4  0E0A               	movlw	10
  5493  000CF6  6E23               	movwf	___awdiv@divisor,c
  5494  000CF8  0E00               	movlw	0
  5495  000CFA  6E1E               	movwf	___awmod@divisor+1,c
  5496  000CFC  0E64               	movlw	100
  5497  000CFE  6E1D               	movwf	___awmod@divisor,c
  5498  000D00  5191               	movf	scale@scl& (0+255),w,b
  5499  000D02  6E1B               	movwf	___awmod@dividend,c
  5500  000D04  6A1C               	clrf	___awmod@dividend+1,c
  5501  000D06  BE1B               	btfsc	___awmod@dividend,7,c
  5502  000D08  061C               	decf	___awmod@dividend+1,f,c
  5503  000D0A  EC82  F014         	call	___awmod	;wreg free
  5504  000D0E  C01B  F021         	movff	?___awmod,___awdiv@dividend
  5505  000D12  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  5506  000D16  ECBE  F013         	call	___awdiv	;wreg free
  5507  000D1A  90D8               	bcf	status,0,c
  5508  000D1C  3621               	rlcf	?___awdiv,f,c
  5509  000D1E  3622               	rlcf	?___awdiv+1,f,c
  5510  000D20  90D8               	bcf	status,0,c
  5511  000D22  3621               	rlcf	?___awdiv,f,c
  5512  000D24  3622               	rlcf	?___awdiv+1,f,c
  5513  000D26  0E24               	movlw	36
  5514  000D28  2621               	addwf	?___awdiv,f,c
  5515  000D2A  0E00               	movlw	0
  5516  000D2C  2222               	addwfc	?___awdiv+1,f,c
  5517  000D2E  0EEB               	movlw	low __powers_
  5518  000D30  2421               	addwf	?___awdiv,w,c
  5519  000D32  6EF6               	movwf	tblptrl,c
  5520  000D34  0EFE               	movlw	high __powers_
  5521  000D36  2022               	addwfc	?___awdiv+1,w,c
  5522  000D38  6EF7               	movwf	tblptrh,c
  5523  000D3A                     	if	0	;There are less than 3 active tblptr bytes
  5524  000D3A                     	endif
  5525  000D3A  0009               	tblrd		*+
  5526  000D3C  CFF5 F04C          	movff	tablat,___flmul@a
  5527  000D40  0009               	tblrd		*+
  5528  000D42  CFF5 F04D          	movff	tablat,___flmul@a+1
  5529  000D46  0009               	tblrd		*+
  5530  000D48  CFF5 F04E          	movff	tablat,___flmul@a+2
  5531  000D4C  000A               	tblrd		*-
  5532  000D4E  CFF5 F04F          	movff	tablat,___flmul@a+3
  5533  000D52  0E00               	movlw	0
  5534  000D54  6E24               	movwf	___awdiv@divisor+1,c
  5535  000D56  0E64               	movlw	100
  5536  000D58  6E23               	movwf	___awdiv@divisor,c
  5537  000D5A  0100               	movlb	0	; () banked
  5538  000D5C  5191               	movf	scale@scl& (0+255),w,b
  5539  000D5E  6E21               	movwf	___awdiv@dividend,c
  5540  000D60  6A22               	clrf	___awdiv@dividend+1,c
  5541  000D62  BE21               	btfsc	___awdiv@dividend,7,c
  5542  000D64  0622               	decf	___awdiv@dividend+1,f,c
  5543  000D66  ECBE  F013         	call	___awdiv	;wreg free
  5544  000D6A  90D8               	bcf	status,0,c
  5545  000D6C  3621               	rlcf	?___awdiv,f,c
  5546  000D6E  3622               	rlcf	?___awdiv+1,f,c
  5547  000D70  90D8               	bcf	status,0,c
  5548  000D72  3621               	rlcf	?___awdiv,f,c
  5549  000D74  3622               	rlcf	?___awdiv+1,f,c
  5550  000D76  0E48               	movlw	72
  5551  000D78  2621               	addwf	?___awdiv,f,c
  5552  000D7A  0E00               	movlw	0
  5553  000D7C  2222               	addwfc	?___awdiv+1,f,c
  5554  000D7E  0EEB               	movlw	low __powers_
  5555  000D80  2421               	addwf	?___awdiv,w,c
  5556  000D82  6EF6               	movwf	tblptrl,c
  5557  000D84  0EFE               	movlw	high __powers_
  5558  000D86  2022               	addwfc	?___awdiv+1,w,c
  5559  000D88  6EF7               	movwf	tblptrh,c
  5560  000D8A                     	if	0	;There are less than 3 active tblptr bytes
  5561  000D8A                     	endif
  5562  000D8A  0009               	tblrd		*+
  5563  000D8C  CFF5 F048          	movff	tablat,___flmul@b
  5564  000D90  0009               	tblrd		*+
  5565  000D92  CFF5 F049          	movff	tablat,___flmul@b+1
  5566  000D96  0009               	tblrd		*+
  5567  000D98  CFF5 F04A          	movff	tablat,___flmul@b+2
  5568  000D9C  000A               	tblrd		*-
  5569  000D9E  CFF5 F04B          	movff	tablat,___flmul@b+3
  5570  000DA2  EC84  F007         	call	___flmul	;wreg free
  5571  000DA6  C048  F08D         	movff	?___flmul,_scale$1936
  5572  000DAA  C049  F08E         	movff	?___flmul+1,_scale$1936+1
  5573  000DAE  C04A  F08F         	movff	?___flmul+2,_scale$1936+2
  5574  000DB2  C04B  F090         	movff	?___flmul+3,_scale$1936+3
  5575                           
  5576                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5577  000DB6  C08D  F048         	movff	_scale$1936,___flmul@b
  5578  000DBA  C08E  F049         	movff	_scale$1936+1,___flmul@b+1
  5579  000DBE  C08F  F04A         	movff	_scale$1936+2,___flmul@b+2
  5580  000DC2  C090  F04B         	movff	_scale$1936+3,___flmul@b+3
  5581  000DC6  0E00               	movlw	0
  5582  000DC8  6E1E               	movwf	___awmod@divisor+1,c
  5583  000DCA  0E0A               	movlw	10
  5584  000DCC  6E1D               	movwf	___awmod@divisor,c
  5585  000DCE  0100               	movlb	0	; () banked
  5586  000DD0  5191               	movf	scale@scl& (0+255),w,b
  5587  000DD2  6E1B               	movwf	___awmod@dividend,c
  5588  000DD4  6A1C               	clrf	___awmod@dividend+1,c
  5589  000DD6  BE1B               	btfsc	___awmod@dividend,7,c
  5590  000DD8  061C               	decf	___awmod@dividend+1,f,c
  5591  000DDA  EC82  F014         	call	___awmod	;wreg free
  5592  000DDE  90D8               	bcf	status,0,c
  5593  000DE0  361B               	rlcf	?___awmod,f,c
  5594  000DE2  361C               	rlcf	?___awmod+1,f,c
  5595  000DE4  90D8               	bcf	status,0,c
  5596  000DE6  361B               	rlcf	?___awmod,f,c
  5597  000DE8  361C               	rlcf	?___awmod+1,f,c
  5598  000DEA  0EEB               	movlw	low __powers_
  5599  000DEC  241B               	addwf	?___awmod,w,c
  5600  000DEE  6EF6               	movwf	tblptrl,c
  5601  000DF0  0EFE               	movlw	high __powers_
  5602  000DF2  201C               	addwfc	?___awmod+1,w,c
  5603  000DF4  6EF7               	movwf	tblptrh,c
  5604  000DF6                     	if	0	;There are less than 3 active tblptr bytes
  5605  000DF6                     	endif
  5606  000DF6  0009               	tblrd		*+
  5607  000DF8  CFF5 F04C          	movff	tablat,___flmul@a
  5608  000DFC  0009               	tblrd		*+
  5609  000DFE  CFF5 F04D          	movff	tablat,___flmul@a+1
  5610  000E02  0009               	tblrd		*+
  5611  000E04  CFF5 F04E          	movff	tablat,___flmul@a+2
  5612  000E08  000A               	tblrd		*-
  5613  000E0A  CFF5 F04F          	movff	tablat,___flmul@a+3
  5614  000E0E  EC84  F007         	call	___flmul	;wreg free
  5615  000E12  C048  F054         	movff	?___flmul,?_scale
  5616  000E16  C049  F055         	movff	?___flmul+1,?_scale+1
  5617  000E1A  C04A  F056         	movff	?___flmul+2,?_scale+2
  5618  000E1E  C04B  F057         	movff	?___flmul+3,?_scale+3
  5619  000E22  0012               	return	
  5620  000E24                     l343:
  5621                           
  5622                           ;doprnt.c: 438: else if(scl > 10)
  5623  000E24  0100               	movlb	0	; () banked
  5624  000E26  5191               	movf	scale@scl& (0+255),w,b
  5625  000E28  0A80               	xorlw	128
  5626  000E2A  0F75               	addlw	-139
  5627  000E2C  A0D8               	btfss	status,0,c
  5628  000E2E  D056               	goto	l345
  5629                           
  5630                           ; BSR set to: 0
  5631                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5632  000E30  0E00               	movlw	0
  5633  000E32  6E24               	movwf	___awdiv@divisor+1,c
  5634  000E34  0E0A               	movlw	10
  5635  000E36  6E23               	movwf	___awdiv@divisor,c
  5636  000E38  5191               	movf	scale@scl& (0+255),w,b
  5637  000E3A  6E21               	movwf	___awdiv@dividend,c
  5638  000E3C  6A22               	clrf	___awdiv@dividend+1,c
  5639  000E3E  BE21               	btfsc	___awdiv@dividend,7,c
  5640  000E40  0622               	decf	___awdiv@dividend+1,f,c
  5641  000E42  ECBE  F013         	call	___awdiv	;wreg free
  5642  000E46  90D8               	bcf	status,0,c
  5643  000E48  3621               	rlcf	?___awdiv,f,c
  5644  000E4A  3622               	rlcf	?___awdiv+1,f,c
  5645  000E4C  90D8               	bcf	status,0,c
  5646  000E4E  3621               	rlcf	?___awdiv,f,c
  5647  000E50  3622               	rlcf	?___awdiv+1,f,c
  5648  000E52  0E24               	movlw	36
  5649  000E54  2621               	addwf	?___awdiv,f,c
  5650  000E56  0E00               	movlw	0
  5651  000E58  2222               	addwfc	?___awdiv+1,f,c
  5652  000E5A  0EEB               	movlw	low __powers_
  5653  000E5C  2421               	addwf	?___awdiv,w,c
  5654  000E5E  6EF6               	movwf	tblptrl,c
  5655  000E60  0EFE               	movlw	high __powers_
  5656  000E62  2022               	addwfc	?___awdiv+1,w,c
  5657  000E64  6EF7               	movwf	tblptrh,c
  5658  000E66                     	if	0	;There are less than 3 active tblptr bytes
  5659  000E66                     	endif
  5660  000E66  0009               	tblrd		*+
  5661  000E68  CFF5 F048          	movff	tablat,___flmul@b
  5662  000E6C  0009               	tblrd		*+
  5663  000E6E  CFF5 F049          	movff	tablat,___flmul@b+1
  5664  000E72  0009               	tblrd		*+
  5665  000E74  CFF5 F04A          	movff	tablat,___flmul@b+2
  5666  000E78  000A               	tblrd		*-
  5667  000E7A  CFF5 F04B          	movff	tablat,___flmul@b+3
  5668  000E7E  0E00               	movlw	0
  5669  000E80  6E1E               	movwf	___awmod@divisor+1,c
  5670  000E82  0E0A               	movlw	10
  5671  000E84  6E1D               	movwf	___awmod@divisor,c
  5672  000E86  0100               	movlb	0	; () banked
  5673  000E88  5191               	movf	scale@scl& (0+255),w,b
  5674  000E8A  6E1B               	movwf	___awmod@dividend,c
  5675  000E8C  6A1C               	clrf	___awmod@dividend+1,c
  5676  000E8E  BE1B               	btfsc	___awmod@dividend,7,c
  5677  000E90  061C               	decf	___awmod@dividend+1,f,c
  5678  000E92  EC82  F014         	call	___awmod	;wreg free
  5679  000E96  90D8               	bcf	status,0,c
  5680  000E98  361B               	rlcf	?___awmod,f,c
  5681  000E9A  361C               	rlcf	?___awmod+1,f,c
  5682  000E9C  90D8               	bcf	status,0,c
  5683  000E9E  361B               	rlcf	?___awmod,f,c
  5684  000EA0  361C               	rlcf	?___awmod+1,f,c
  5685  000EA2  0EEB               	movlw	low __powers_
  5686  000EA4  241B               	addwf	?___awmod,w,c
  5687  000EA6  6EF6               	movwf	tblptrl,c
  5688  000EA8  0EFE               	movlw	high __powers_
  5689  000EAA  201C               	addwfc	?___awmod+1,w,c
  5690  000EAC  6EF7               	movwf	tblptrh,c
  5691  000EAE                     	if	0	;There are less than 3 active tblptr bytes
  5692  000EAE                     	endif
  5693  000EAE  0009               	tblrd		*+
  5694  000EB0  CFF5 F04C          	movff	tablat,___flmul@a
  5695  000EB4  0009               	tblrd		*+
  5696  000EB6  CFF5 F04D          	movff	tablat,___flmul@a+1
  5697  000EBA  0009               	tblrd		*+
  5698  000EBC  CFF5 F04E          	movff	tablat,___flmul@a+2
  5699  000EC0  000A               	tblrd		*-
  5700  000EC2  CFF5 F04F          	movff	tablat,___flmul@a+3
  5701  000EC6  EC84  F007         	call	___flmul	;wreg free
  5702  000ECA  C048  F054         	movff	?___flmul,?_scale
  5703  000ECE  C049  F055         	movff	?___flmul+1,?_scale+1
  5704  000ED2  C04A  F056         	movff	?___flmul+2,?_scale+2
  5705  000ED6  C04B  F057         	movff	?___flmul+3,?_scale+3
  5706  000EDA  0012               	return	
  5707  000EDC                     l345:
  5708                           
  5709                           ;doprnt.c: 440: return _powers_[scl];
  5710  000EDC  0100               	movlb	0	; () banked
  5711  000EDE  5191               	movf	scale@scl& (0+255),w,b
  5712  000EE0  0D04               	mullw	4
  5713  000EE2  0EEB               	movlw	low __powers_
  5714  000EE4  24F3               	addwf	prodl,w,c
  5715  000EE6  6EF6               	movwf	tblptrl,c
  5716  000EE8  0EFE               	movlw	high __powers_
  5717  000EEA  20F4               	addwfc	prodh,w,c
  5718  000EEC  6EF7               	movwf	tblptrh,c
  5719  000EEE                     	if	0	;There are less than 3 active tblptr bytes
  5720  000EEE                     	endif
  5721  000EEE  0009               	tblrd		*+
  5722  000EF0  CFF5 F054          	movff	tablat,?_scale
  5723  000EF4  0009               	tblrd		*+
  5724  000EF6  CFF5 F055          	movff	tablat,?_scale+1
  5725  000EFA  0009               	tblrd		*+
  5726  000EFC  CFF5 F056          	movff	tablat,?_scale+2
  5727  000F00  000A               	tblrd		*-
  5728  000F02  CFF5 F057          	movff	tablat,?_scale+3
  5729  000F06  0012               	return	
  5730  000F08                     __end_of_scale:
  5731                           	opt stack 0
  5732                           tblptru	equ	0xFF8
  5733                           tblptrh	equ	0xFF7
  5734                           tblptrl	equ	0xFF6
  5735                           tablat	equ	0xFF5
  5736                           prodh	equ	0xFF4
  5737                           prodl	equ	0xFF3
  5738                           intcon	equ	0xFF2
  5739                           intcon2	equ	0xFF1
  5740                           intcon3	equ	0xFF0
  5741                           postinc0	equ	0xFEE
  5742                           wreg	equ	0xFE8
  5743                           indf1	equ	0xFE7
  5744                           postdec1	equ	0xFE5
  5745                           fsr1h	equ	0xFE2
  5746                           fsr1l	equ	0xFE1
  5747                           indf2	equ	0xFDF
  5748                           postinc2	equ	0xFDE
  5749                           postdec2	equ	0xFDD
  5750                           fsr2h	equ	0xFDA
  5751                           fsr2l	equ	0xFD9
  5752                           status	equ	0xFD8
  5753                           
  5754 ;; *************** function _isdigit *****************
  5755 ;; Defined at:
  5756 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  5757 ;; Parameters:    Size  Location     Type
  5758 ;;  c               1    wreg     unsigned char 
  5759 ;; Auto vars:     Size  Location     Type
  5760 ;;  c               1   28[COMRAM] unsigned char 
  5761 ;; Return value:  Size  Location     Type
  5762 ;;		None               void
  5763 ;; Registers used:
  5764 ;;		wreg, status,2, status,0
  5765 ;; Tracked objects:
  5766 ;;		On entry : 0/0
  5767 ;;		On exit  : 0/0
  5768 ;;		Unchanged: 0/0
  5769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5771 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5772 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5773 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5774 ;;Total ram usage:        3 bytes
  5775 ;; Hardware stack levels used:    1
  5776 ;; Hardware stack levels required when called:    2
  5777 ;; This function calls:
  5778 ;;		Nothing
  5779 ;; This function is called by:
  5780 ;;		_sprintf
  5781 ;; This function uses a non-reentrant model
  5782 ;;
  5783                           
  5784                           	psect	text14
  5785  002E0C                     __ptext14:
  5786                           	opt stack 0
  5787  002E0C                     _isdigit:
  5788                           	opt stack 26
  5789                           
  5790                           ;incstack = 0
  5791                           ;isdigit@c stored from wreg
  5792  002E0C  6E1D               	movwf	isdigit@c,c
  5793  002E0E  0E00               	movlw	0
  5794  002E10  6E1C               	movwf	_isdigit$1561,c
  5795  002E12  0E3A               	movlw	58
  5796  002E14  601D               	cpfslt	isdigit@c,c
  5797  002E16  D005               	goto	l806
  5798  002E18  0E2F               	movlw	47
  5799  002E1A  641D               	cpfsgt	isdigit@c,c
  5800  002E1C  D002               	goto	l806
  5801  002E1E  0E01               	movlw	1
  5802  002E20  6E1C               	movwf	_isdigit$1561,c
  5803  002E22                     l806:
  5804  002E22  C01C  F01B         	movff	_isdigit$1561,??_isdigit
  5805  002E26  301B               	rrcf	??_isdigit,w,c
  5806  002E28  0012               	return	
  5807  002E2A                     __end_of_isdigit:
  5808                           	opt stack 0
  5809                           tblptru	equ	0xFF8
  5810                           tblptrh	equ	0xFF7
  5811                           tblptrl	equ	0xFF6
  5812                           tablat	equ	0xFF5
  5813                           prodh	equ	0xFF4
  5814                           prodl	equ	0xFF3
  5815                           intcon	equ	0xFF2
  5816                           intcon2	equ	0xFF1
  5817                           intcon3	equ	0xFF0
  5818                           postinc0	equ	0xFEE
  5819                           wreg	equ	0xFE8
  5820                           indf1	equ	0xFE7
  5821                           postdec1	equ	0xFE5
  5822                           fsr1h	equ	0xFE2
  5823                           fsr1l	equ	0xFE1
  5824                           indf2	equ	0xFDF
  5825                           postinc2	equ	0xFDE
  5826                           postdec2	equ	0xFDD
  5827                           fsr2h	equ	0xFDA
  5828                           fsr2l	equ	0xFD9
  5829                           status	equ	0xFD8
  5830                           
  5831 ;; *************** function _fround *****************
  5832 ;; Defined at:
  5833 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  5834 ;; Parameters:    Size  Location     Type
  5835 ;;  prec            1    wreg     unsigned char 
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;  prec            1   21[BANK0 ] unsigned char 
  5838 ;; Return value:  Size  Location     Type
  5839 ;;                  4   83[COMRAM] unsigned char 
  5840 ;; Registers used:
  5841 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5842 ;; Tracked objects:
  5843 ;;		On entry : 0/0
  5844 ;;		On exit  : 0/0
  5845 ;;		Unchanged: 0/0
  5846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5847 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5848 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5850 ;;      Totals:         4       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5851 ;;Total ram usage:       13 bytes
  5852 ;; Hardware stack levels used:    1
  5853 ;; Hardware stack levels required when called:    3
  5854 ;; This function calls:
  5855 ;;		___awdiv
  5856 ;;		___awmod
  5857 ;;		___flmul
  5858 ;; This function is called by:
  5859 ;;		_sprintf
  5860 ;; This function uses a non-reentrant model
  5861 ;;
  5862                           
  5863                           	psect	text15
  5864  001B60                     __ptext15:
  5865                           	opt stack 0
  5866  001B60                     _fround:
  5867                           	opt stack 25
  5868                           
  5869                           ;incstack = 0
  5870                           ;fround@prec stored from wreg
  5871  001B60  0100               	movlb	0	; () banked
  5872  001B62  6F95               	movwf	fround@prec& (0+255),b
  5873                           
  5874                           ;doprnt.c: 413: if(prec>=110)
  5875  001B64  0E6D               	movlw	109
  5876  001B66  0100               	movlb	0	; () banked
  5877  001B68  6595               	cpfsgt	fround@prec& (0+255),b
  5878  001B6A  D0AC               	goto	l332
  5879                           
  5880                           ; BSR set to: 0
  5881                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5882  001B6C  0E00               	movlw	0
  5883  001B6E  6E24               	movwf	___awdiv@divisor+1,c
  5884  001B70  0E0A               	movlw	10
  5885  001B72  6E23               	movwf	___awdiv@divisor,c
  5886  001B74  0E00               	movlw	0
  5887  001B76  6E1E               	movwf	___awmod@divisor+1,c
  5888  001B78  0E64               	movlw	100
  5889  001B7A  6E1D               	movwf	___awmod@divisor,c
  5890  001B7C  C095  F01B         	movff	fround@prec,___awmod@dividend
  5891  001B80  6A1C               	clrf	___awmod@dividend+1,c
  5892  001B82  EC82  F014         	call	___awmod	;wreg free
  5893  001B86  C01B  F021         	movff	?___awmod,___awdiv@dividend
  5894  001B8A  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  5895  001B8E  ECBE  F013         	call	___awdiv	;wreg free
  5896  001B92  90D8               	bcf	status,0,c
  5897  001B94  3621               	rlcf	?___awdiv,f,c
  5898  001B96  3622               	rlcf	?___awdiv+1,f,c
  5899  001B98  90D8               	bcf	status,0,c
  5900  001B9A  3621               	rlcf	?___awdiv,f,c
  5901  001B9C  3622               	rlcf	?___awdiv+1,f,c
  5902  001B9E  0E24               	movlw	36
  5903  001BA0  2621               	addwf	?___awdiv,f,c
  5904  001BA2  0E00               	movlw	0
  5905  001BA4  2222               	addwfc	?___awdiv+1,f,c
  5906  001BA6  0E1F               	movlw	low __npowers_
  5907  001BA8  2421               	addwf	?___awdiv,w,c
  5908  001BAA  6EF6               	movwf	tblptrl,c
  5909  001BAC  0EFF               	movlw	high __npowers_
  5910  001BAE  2022               	addwfc	?___awdiv+1,w,c
  5911  001BB0  6EF7               	movwf	tblptrh,c
  5912  001BB2                     	if	0	;There are less than 3 active tblptr bytes
  5913  001BB2                     	endif
  5914  001BB2  0009               	tblrd		*+
  5915  001BB4  CFF5 F04C          	movff	tablat,___flmul@a
  5916  001BB8  0009               	tblrd		*+
  5917  001BBA  CFF5 F04D          	movff	tablat,___flmul@a+1
  5918  001BBE  0009               	tblrd		*+
  5919  001BC0  CFF5 F04E          	movff	tablat,___flmul@a+2
  5920  001BC4  000A               	tblrd		*-
  5921  001BC6  CFF5 F04F          	movff	tablat,___flmul@a+3
  5922  001BCA  0E00               	movlw	0
  5923  001BCC  6E24               	movwf	___awdiv@divisor+1,c
  5924  001BCE  0E64               	movlw	100
  5925  001BD0  6E23               	movwf	___awdiv@divisor,c
  5926  001BD2  C095  F021         	movff	fround@prec,___awdiv@dividend
  5927  001BD6  6A22               	clrf	___awdiv@dividend+1,c
  5928  001BD8  ECBE  F013         	call	___awdiv	;wreg free
  5929  001BDC  90D8               	bcf	status,0,c
  5930  001BDE  3621               	rlcf	?___awdiv,f,c
  5931  001BE0  3622               	rlcf	?___awdiv+1,f,c
  5932  001BE2  90D8               	bcf	status,0,c
  5933  001BE4  3621               	rlcf	?___awdiv,f,c
  5934  001BE6  3622               	rlcf	?___awdiv+1,f,c
  5935  001BE8  0E48               	movlw	72
  5936  001BEA  2621               	addwf	?___awdiv,f,c
  5937  001BEC  0E00               	movlw	0
  5938  001BEE  2222               	addwfc	?___awdiv+1,f,c
  5939  001BF0  0E1F               	movlw	low __npowers_
  5940  001BF2  2421               	addwf	?___awdiv,w,c
  5941  001BF4  6EF6               	movwf	tblptrl,c
  5942  001BF6  0EFF               	movlw	high __npowers_
  5943  001BF8  2022               	addwfc	?___awdiv+1,w,c
  5944  001BFA  6EF7               	movwf	tblptrh,c
  5945  001BFC                     	if	0	;There are less than 3 active tblptr bytes
  5946  001BFC                     	endif
  5947  001BFC  0009               	tblrd		*+
  5948  001BFE  CFF5 F048          	movff	tablat,___flmul@b
  5949  001C02  0009               	tblrd		*+
  5950  001C04  CFF5 F049          	movff	tablat,___flmul@b+1
  5951  001C08  0009               	tblrd		*+
  5952  001C0A  CFF5 F04A          	movff	tablat,___flmul@b+2
  5953  001C0E  000A               	tblrd		*-
  5954  001C10  CFF5 F04B          	movff	tablat,___flmul@b+3
  5955  001C14  EC84  F007         	call	___flmul	;wreg free
  5956  001C18  C048  F091         	movff	?___flmul,_fround$1934
  5957  001C1C  C049  F092         	movff	?___flmul+1,_fround$1934+1
  5958  001C20  C04A  F093         	movff	?___flmul+2,_fround$1934+2
  5959  001C24  C04B  F094         	movff	?___flmul+3,_fround$1934+3
  5960                           
  5961                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5962  001C28  0E00               	movlw	0
  5963  001C2A  6E1E               	movwf	___awmod@divisor+1,c
  5964  001C2C  0E0A               	movlw	10
  5965  001C2E  6E1D               	movwf	___awmod@divisor,c
  5966  001C30  C095  F01B         	movff	fround@prec,___awmod@dividend
  5967  001C34  6A1C               	clrf	___awmod@dividend+1,c
  5968  001C36  EC82  F014         	call	___awmod	;wreg free
  5969  001C3A  90D8               	bcf	status,0,c
  5970  001C3C  361B               	rlcf	?___awmod,f,c
  5971  001C3E  361C               	rlcf	?___awmod+1,f,c
  5972  001C40  90D8               	bcf	status,0,c
  5973  001C42  361B               	rlcf	?___awmod,f,c
  5974  001C44  361C               	rlcf	?___awmod+1,f,c
  5975  001C46  0E1F               	movlw	low __npowers_
  5976  001C48  241B               	addwf	?___awmod,w,c
  5977  001C4A  6EF6               	movwf	tblptrl,c
  5978  001C4C  0EFF               	movlw	high __npowers_
  5979  001C4E  201C               	addwfc	?___awmod+1,w,c
  5980  001C50  6EF7               	movwf	tblptrh,c
  5981  001C52                     	if	0	;There are less than 3 active tblptr bytes
  5982  001C52                     	endif
  5983  001C52  0009               	tblrd		*+
  5984  001C54  CFF5 F04C          	movff	tablat,___flmul@a
  5985  001C58  0009               	tblrd		*+
  5986  001C5A  CFF5 F04D          	movff	tablat,___flmul@a+1
  5987  001C5E  0009               	tblrd		*+
  5988  001C60  CFF5 F04E          	movff	tablat,___flmul@a+2
  5989  001C64  000A               	tblrd		*-
  5990  001C66  CFF5 F04F          	movff	tablat,___flmul@a+3
  5991  001C6A  C091  F048         	movff	_fround$1934,___flmul@b
  5992  001C6E  C092  F049         	movff	_fround$1934+1,___flmul@b+1
  5993  001C72  C093  F04A         	movff	_fround$1934+2,___flmul@b+2
  5994  001C76  C094  F04B         	movff	_fround$1934+3,___flmul@b+3
  5995  001C7A  EC84  F007         	call	___flmul	;wreg free
  5996  001C7E  C048  F08D         	movff	?___flmul,_fround$1935
  5997  001C82  C049  F08E         	movff	?___flmul+1,_fround$1935+1
  5998  001C86  C04A  F08F         	movff	?___flmul+2,_fround$1935+2
  5999  001C8A  C04B  F090         	movff	?___flmul+3,_fround$1935+3
  6000                           
  6001                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6002  001C8E  C08D  F048         	movff	_fround$1935,___flmul@b
  6003  001C92  C08E  F049         	movff	_fround$1935+1,___flmul@b+1
  6004  001C96  C08F  F04A         	movff	_fround$1935+2,___flmul@b+2
  6005  001C9A  C090  F04B         	movff	_fround$1935+3,___flmul@b+3
  6006  001C9E  0E00               	movlw	0
  6007  001CA0  6E4C               	movwf	___flmul@a,c
  6008  001CA2  0E00               	movlw	0
  6009  001CA4  6E4D               	movwf	___flmul@a+1,c
  6010  001CA6  0E00               	movlw	0
  6011  001CA8  6E4E               	movwf	___flmul@a+2,c
  6012  001CAA  0E3F               	movlw	63
  6013  001CAC  6E4F               	movwf	___flmul@a+3,c
  6014  001CAE  EC84  F007         	call	___flmul	;wreg free
  6015  001CB2  C048  F054         	movff	?___flmul,?_fround
  6016  001CB6  C049  F055         	movff	?___flmul+1,?_fround+1
  6017  001CBA  C04A  F056         	movff	?___flmul+2,?_fround+2
  6018  001CBE  C04B  F057         	movff	?___flmul+3,?_fround+3
  6019  001CC2  0012               	return	
  6020  001CC4                     l332:
  6021                           
  6022                           ;doprnt.c: 415: else if(prec > 10)
  6023  001CC4  0E0A               	movlw	10
  6024  001CC6  0100               	movlb	0	; () banked
  6025  001CC8  6595               	cpfsgt	fround@prec& (0+255),b
  6026  001CCA  D06B               	goto	l335
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6030  001CCC  0E00               	movlw	0
  6031  001CCE  6E1E               	movwf	___awmod@divisor+1,c
  6032  001CD0  0E0A               	movlw	10
  6033  001CD2  6E1D               	movwf	___awmod@divisor,c
  6034  001CD4  C095  F01B         	movff	fround@prec,___awmod@dividend
  6035  001CD8  6A1C               	clrf	___awmod@dividend+1,c
  6036  001CDA  EC82  F014         	call	___awmod	;wreg free
  6037  001CDE  90D8               	bcf	status,0,c
  6038  001CE0  361B               	rlcf	?___awmod,f,c
  6039  001CE2  361C               	rlcf	?___awmod+1,f,c
  6040  001CE4  90D8               	bcf	status,0,c
  6041  001CE6  361B               	rlcf	?___awmod,f,c
  6042  001CE8  361C               	rlcf	?___awmod+1,f,c
  6043  001CEA  0E1F               	movlw	low __npowers_
  6044  001CEC  241B               	addwf	?___awmod,w,c
  6045  001CEE  6EF6               	movwf	tblptrl,c
  6046  001CF0  0EFF               	movlw	high __npowers_
  6047  001CF2  201C               	addwfc	?___awmod+1,w,c
  6048  001CF4  6EF7               	movwf	tblptrh,c
  6049  001CF6                     	if	0	;There are less than 3 active tblptr bytes
  6050  001CF6                     	endif
  6051  001CF6  0009               	tblrd		*+
  6052  001CF8  CFF5 F04C          	movff	tablat,___flmul@a
  6053  001CFC  0009               	tblrd		*+
  6054  001CFE  CFF5 F04D          	movff	tablat,___flmul@a+1
  6055  001D02  0009               	tblrd		*+
  6056  001D04  CFF5 F04E          	movff	tablat,___flmul@a+2
  6057  001D08  000A               	tblrd		*-
  6058  001D0A  CFF5 F04F          	movff	tablat,___flmul@a+3
  6059  001D0E  0E00               	movlw	0
  6060  001D10  6E24               	movwf	___awdiv@divisor+1,c
  6061  001D12  0E0A               	movlw	10
  6062  001D14  6E23               	movwf	___awdiv@divisor,c
  6063  001D16  C095  F021         	movff	fround@prec,___awdiv@dividend
  6064  001D1A  6A22               	clrf	___awdiv@dividend+1,c
  6065  001D1C  ECBE  F013         	call	___awdiv	;wreg free
  6066  001D20  90D8               	bcf	status,0,c
  6067  001D22  3621               	rlcf	?___awdiv,f,c
  6068  001D24  3622               	rlcf	?___awdiv+1,f,c
  6069  001D26  90D8               	bcf	status,0,c
  6070  001D28  3621               	rlcf	?___awdiv,f,c
  6071  001D2A  3622               	rlcf	?___awdiv+1,f,c
  6072  001D2C  0E24               	movlw	36
  6073  001D2E  2621               	addwf	?___awdiv,f,c
  6074  001D30  0E00               	movlw	0
  6075  001D32  2222               	addwfc	?___awdiv+1,f,c
  6076  001D34  0E1F               	movlw	low __npowers_
  6077  001D36  2421               	addwf	?___awdiv,w,c
  6078  001D38  6EF6               	movwf	tblptrl,c
  6079  001D3A  0EFF               	movlw	high __npowers_
  6080  001D3C  2022               	addwfc	?___awdiv+1,w,c
  6081  001D3E  6EF7               	movwf	tblptrh,c
  6082  001D40                     	if	0	;There are less than 3 active tblptr bytes
  6083  001D40                     	endif
  6084  001D40  0009               	tblrd		*+
  6085  001D42  CFF5 F048          	movff	tablat,___flmul@b
  6086  001D46  0009               	tblrd		*+
  6087  001D48  CFF5 F049          	movff	tablat,___flmul@b+1
  6088  001D4C  0009               	tblrd		*+
  6089  001D4E  CFF5 F04A          	movff	tablat,___flmul@b+2
  6090  001D52  000A               	tblrd		*-
  6091  001D54  CFF5 F04B          	movff	tablat,___flmul@b+3
  6092  001D58  EC84  F007         	call	___flmul	;wreg free
  6093  001D5C  C048  F091         	movff	?___flmul,_fround$1934
  6094  001D60  C049  F092         	movff	?___flmul+1,_fround$1934+1
  6095  001D64  C04A  F093         	movff	?___flmul+2,_fround$1934+2
  6096  001D68  C04B  F094         	movff	?___flmul+3,_fround$1934+3
  6097                           
  6098                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6099  001D6C  C091  F048         	movff	_fround$1934,___flmul@b
  6100  001D70  C092  F049         	movff	_fround$1934+1,___flmul@b+1
  6101  001D74  C093  F04A         	movff	_fround$1934+2,___flmul@b+2
  6102  001D78  C094  F04B         	movff	_fround$1934+3,___flmul@b+3
  6103  001D7C  0E00               	movlw	0
  6104  001D7E  6E4C               	movwf	___flmul@a,c
  6105  001D80  0E00               	movlw	0
  6106  001D82  6E4D               	movwf	___flmul@a+1,c
  6107  001D84  0E00               	movlw	0
  6108  001D86  6E4E               	movwf	___flmul@a+2,c
  6109  001D88  0E3F               	movlw	63
  6110  001D8A  6E4F               	movwf	___flmul@a+3,c
  6111  001D8C  EC84  F007         	call	___flmul	;wreg free
  6112  001D90  C048  F054         	movff	?___flmul,?_fround
  6113  001D94  C049  F055         	movff	?___flmul+1,?_fround+1
  6114  001D98  C04A  F056         	movff	?___flmul+2,?_fround+2
  6115  001D9C  C04B  F057         	movff	?___flmul+3,?_fround+3
  6116  001DA0  0012               	return	
  6117  001DA2                     l335:
  6118                           
  6119                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6120  001DA2  0100               	movlb	0	; () banked
  6121  001DA4  5195               	movf	fround@prec& (0+255),w,b
  6122  001DA6  0D04               	mullw	4
  6123  001DA8  0E1F               	movlw	low __npowers_
  6124  001DAA  24F3               	addwf	prodl,w,c
  6125  001DAC  6EF6               	movwf	tblptrl,c
  6126  001DAE  0EFF               	movlw	high __npowers_
  6127  001DB0  20F4               	addwfc	prodh,w,c
  6128  001DB2  6EF7               	movwf	tblptrh,c
  6129  001DB4                     	if	0	;There are less than 3 active tblptr bytes
  6130  001DB4                     	endif
  6131  001DB4  0009               	tblrd		*+
  6132  001DB6  CFF5 F048          	movff	tablat,___flmul@b
  6133  001DBA  0009               	tblrd		*+
  6134  001DBC  CFF5 F049          	movff	tablat,___flmul@b+1
  6135  001DC0  0009               	tblrd		*+
  6136  001DC2  CFF5 F04A          	movff	tablat,___flmul@b+2
  6137  001DC6  000A               	tblrd		*-
  6138  001DC8  CFF5 F04B          	movff	tablat,___flmul@b+3
  6139  001DCC  0E00               	movlw	0
  6140  001DCE  6E4C               	movwf	___flmul@a,c
  6141  001DD0  0E00               	movlw	0
  6142  001DD2  6E4D               	movwf	___flmul@a+1,c
  6143  001DD4  0E00               	movlw	0
  6144  001DD6  6E4E               	movwf	___flmul@a+2,c
  6145  001DD8  0E3F               	movlw	63
  6146  001DDA  6E4F               	movwf	___flmul@a+3,c
  6147  001DDC  EC84  F007         	call	___flmul	;wreg free
  6148  001DE0  C048  F054         	movff	?___flmul,?_fround
  6149  001DE4  C049  F055         	movff	?___flmul+1,?_fround+1
  6150  001DE8  C04A  F056         	movff	?___flmul+2,?_fround+2
  6151  001DEC  C04B  F057         	movff	?___flmul+3,?_fround+3
  6152  001DF0  0012               	return	
  6153  001DF2                     __end_of_fround:
  6154                           	opt stack 0
  6155                           tblptru	equ	0xFF8
  6156                           tblptrh	equ	0xFF7
  6157                           tblptrl	equ	0xFF6
  6158                           tablat	equ	0xFF5
  6159                           prodh	equ	0xFF4
  6160                           prodl	equ	0xFF3
  6161                           intcon	equ	0xFF2
  6162                           intcon2	equ	0xFF1
  6163                           intcon3	equ	0xFF0
  6164                           postinc0	equ	0xFEE
  6165                           wreg	equ	0xFE8
  6166                           indf1	equ	0xFE7
  6167                           postdec1	equ	0xFE5
  6168                           fsr1h	equ	0xFE2
  6169                           fsr1l	equ	0xFE1
  6170                           indf2	equ	0xFDF
  6171                           postinc2	equ	0xFDE
  6172                           postdec2	equ	0xFDD
  6173                           fsr2h	equ	0xFDA
  6174                           fsr2l	equ	0xFD9
  6175                           status	equ	0xFD8
  6176                           
  6177 ;; *************** function ___flmul *****************
  6178 ;; Defined at:
  6179 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcmul.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;  b               4   71[COMRAM] unsigned char 
  6182 ;;  a               4   75[COMRAM] unsigned char 
  6183 ;; Auto vars:     Size  Location     Type
  6184 ;;  prod            4    7[BANK0 ] struct .
  6185 ;;  grs             4    2[BANK0 ] unsigned long 
  6186 ;;  temp            2   11[BANK0 ] struct .
  6187 ;;  bexp            1    6[BANK0 ] unsigned char 
  6188 ;;  aexp            1    1[BANK0 ] unsigned char 
  6189 ;;  sign            1    0[BANK0 ] unsigned char 
  6190 ;; Return value:  Size  Location     Type
  6191 ;;                  4   71[COMRAM] unsigned char 
  6192 ;; Registers used:
  6193 ;;		wreg, status,2, status,0, prodl, prodh
  6194 ;; Tracked objects:
  6195 ;;		On entry : 0/0
  6196 ;;		On exit  : 0/0
  6197 ;;		Unchanged: 0/0
  6198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6199 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6200 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6201 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6202 ;;      Totals:        12      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6203 ;;Total ram usage:       25 bytes
  6204 ;; Hardware stack levels used:    1
  6205 ;; Hardware stack levels required when called:    2
  6206 ;; This function calls:
  6207 ;;		Nothing
  6208 ;; This function is called by:
  6209 ;;		_operation
  6210 ;;		_main
  6211 ;;		_fround
  6212 ;;		_scale
  6213 ;;		_sprintf
  6214 ;;		_set_pwm1_percent
  6215 ;;		_set_pwm1_voltage
  6216 ;;		_set_pwm1_general
  6217 ;; This function uses a non-reentrant model
  6218 ;;
  6219                           
  6220                           	psect	text16
  6221  000F08                     __ptext16:
  6222                           	opt stack 0
  6223  000F08                     ___flmul:
  6224                           	opt stack 27
  6225                           
  6226                           ;incstack = 0
  6227  000F08  504B               	movf	___flmul@b+3,w,c
  6228  000F0A  0B80               	andlw	128
  6229  000F0C  0100               	movlb	0	; () banked
  6230  000F0E  6F80               	movwf	___flmul@sign& (0+255),b
  6231  000F10  504B               	movf	___flmul@b+3,w,c
  6232  000F12  244B               	addwf	___flmul@b+3,w,c
  6233  000F14  6F86               	movwf	___flmul@bexp& (0+255),b
  6234                           
  6235                           ; BSR set to: 0
  6236  000F16  BE4A               	btfsc	___flmul@b+2,7,c
  6237                           
  6238                           ; BSR set to: 0
  6239  000F18  8186               	bsf	___flmul@bexp& (0+255),0,b
  6240                           
  6241                           ; BSR set to: 0
  6242                           
  6243                           ; BSR set to: 0
  6244  000F1A  5186               	movf	___flmul@bexp& (0+255),w,b
  6245  000F1C  B4D8               	btfsc	status,2,c
  6246  000F1E  D00D               	goto	l1005
  6247                           
  6248                           ; BSR set to: 0
  6249  000F20  2986               	incf	___flmul@bexp& (0+255),w,b
  6250  000F22  A4D8               	btfss	status,2,c
  6251  000F24  D008               	goto	l1006
  6252                           
  6253                           ; BSR set to: 0
  6254  000F26  0E00               	movlw	0
  6255  000F28  6E48               	movwf	___flmul@b,c
  6256  000F2A  0E00               	movlw	0
  6257  000F2C  6E49               	movwf	___flmul@b+1,c
  6258  000F2E  0E00               	movlw	0
  6259  000F30  6E4A               	movwf	___flmul@b+2,c
  6260  000F32  0E00               	movlw	0
  6261  000F34  6E4B               	movwf	___flmul@b+3,c
  6262  000F36                     l1006:
  6263                           
  6264                           ; BSR set to: 0
  6265                           
  6266                           ; BSR set to: 0
  6267  000F36  8E4A               	bsf	___flmul@b+2,7,c
  6268  000F38  D008               	goto	l1007
  6269  000F3A                     l1005:
  6270                           
  6271                           ; BSR set to: 0
  6272                           
  6273                           ; BSR set to: 0
  6274  000F3A  0E00               	movlw	0
  6275  000F3C  6E48               	movwf	___flmul@b,c
  6276  000F3E  0E00               	movlw	0
  6277  000F40  6E49               	movwf	___flmul@b+1,c
  6278  000F42  0E00               	movlw	0
  6279  000F44  6E4A               	movwf	___flmul@b+2,c
  6280  000F46  0E00               	movlw	0
  6281  000F48  6E4B               	movwf	___flmul@b+3,c
  6282  000F4A                     l1007:
  6283                           
  6284                           ; BSR set to: 0
  6285                           
  6286                           ; BSR set to: 0
  6287  000F4A  504F               	movf	___flmul@a+3,w,c
  6288  000F4C  0B80               	andlw	128
  6289  000F4E  1B80               	xorwf	___flmul@sign& (0+255),f,b
  6290                           
  6291                           ; BSR set to: 0
  6292  000F50  504F               	movf	___flmul@a+3,w,c
  6293  000F52  244F               	addwf	___flmul@a+3,w,c
  6294  000F54  6F81               	movwf	___flmul@aexp& (0+255),b
  6295                           
  6296                           ; BSR set to: 0
  6297  000F56  BE4E               	btfsc	___flmul@a+2,7,c
  6298                           
  6299                           ; BSR set to: 0
  6300  000F58  8181               	bsf	___flmul@aexp& (0+255),0,b
  6301                           
  6302                           ; BSR set to: 0
  6303                           
  6304                           ; BSR set to: 0
  6305  000F5A  5181               	movf	___flmul@aexp& (0+255),w,b
  6306  000F5C  B4D8               	btfsc	status,2,c
  6307  000F5E  D00D               	goto	l1009
  6308                           
  6309                           ; BSR set to: 0
  6310  000F60  2981               	incf	___flmul@aexp& (0+255),w,b
  6311  000F62  A4D8               	btfss	status,2,c
  6312  000F64  D008               	goto	l1010
  6313                           
  6314                           ; BSR set to: 0
  6315  000F66  0E00               	movlw	0
  6316  000F68  6E4C               	movwf	___flmul@a,c
  6317  000F6A  0E00               	movlw	0
  6318  000F6C  6E4D               	movwf	___flmul@a+1,c
  6319  000F6E  0E00               	movlw	0
  6320  000F70  6E4E               	movwf	___flmul@a+2,c
  6321  000F72  0E00               	movlw	0
  6322  000F74  6E4F               	movwf	___flmul@a+3,c
  6323  000F76                     l1010:
  6324                           
  6325                           ; BSR set to: 0
  6326                           
  6327                           ; BSR set to: 0
  6328  000F76  8E4E               	bsf	___flmul@a+2,7,c
  6329  000F78  D008               	goto	l1011
  6330  000F7A                     l1009:
  6331                           
  6332                           ; BSR set to: 0
  6333                           
  6334                           ; BSR set to: 0
  6335  000F7A  0E00               	movlw	0
  6336  000F7C  6E4C               	movwf	___flmul@a,c
  6337  000F7E  0E00               	movlw	0
  6338  000F80  6E4D               	movwf	___flmul@a+1,c
  6339  000F82  0E00               	movlw	0
  6340  000F84  6E4E               	movwf	___flmul@a+2,c
  6341  000F86  0E00               	movlw	0
  6342  000F88  6E4F               	movwf	___flmul@a+3,c
  6343  000F8A                     l1011:
  6344                           
  6345                           ; BSR set to: 0
  6346  000F8A  5181               	movf	___flmul@aexp& (0+255),w,b
  6347  000F8C  B4D8               	btfsc	status,2,c
  6348  000F8E  D003               	goto	u4800
  6349                           
  6350                           ; BSR set to: 0
  6351  000F90  5186               	movf	___flmul@bexp& (0+255),w,b
  6352  000F92  A4D8               	btfss	status,2,c
  6353  000F94  D009               	goto	l1012
  6354  000F96                     u4800:
  6355                           
  6356                           ; BSR set to: 0
  6357                           
  6358                           ; BSR set to: 0
  6359  000F96  0E00               	movlw	0
  6360  000F98  6E48               	movwf	?___flmul,c
  6361  000F9A  0E00               	movlw	0
  6362  000F9C  6E49               	movwf	?___flmul+1,c
  6363  000F9E  0E00               	movlw	0
  6364  000FA0  6E4A               	movwf	?___flmul+2,c
  6365  000FA2  0E00               	movlw	0
  6366  000FA4  6E4B               	movwf	?___flmul+3,c
  6367                           
  6368                           ; BSR set to: 0
  6369  000FA6  0012               	return	
  6370  000FA8                     l1012:
  6371                           
  6372                           ; BSR set to: 0
  6373                           
  6374                           ; BSR set to: 0
  6375  000FA8  504E               	movf	___flmul@a+2,w,c
  6376  000FAA  0248               	mulwf	___flmul@b,c
  6377  000FAC  CFF3 F08B          	movff	prodl,___flmul@temp
  6378  000FB0  CFF4 F08C          	movff	prodh,___flmul@temp+1
  6379                           
  6380                           ; BSR set to: 0
  6381  000FB4  518B               	movf	___flmul@temp& (0+255),w,b
  6382  000FB6  6F82               	movwf	___flmul@grs& (0+255),b
  6383  000FB8  6B83               	clrf	(___flmul@grs+1)& (0+255),b
  6384  000FBA  6B84               	clrf	(___flmul@grs+2)& (0+255),b
  6385  000FBC  6B85               	clrf	(___flmul@grs+3)& (0+255),b
  6386                           
  6387                           ; BSR set to: 0
  6388  000FBE  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6389  000FC0  6F87               	movwf	___flmul@prod& (0+255),b
  6390  000FC2  6B88               	clrf	(___flmul@prod+1)& (0+255),b
  6391  000FC4  6B89               	clrf	(___flmul@prod+2)& (0+255),b
  6392  000FC6  6B8A               	clrf	(___flmul@prod+3)& (0+255),b
  6393  000FC8  504D               	movf	___flmul@a+1,w,c
  6394  000FCA  0249               	mulwf	___flmul@b+1,c
  6395  000FCC  CFF3 F08B          	movff	prodl,___flmul@temp
  6396  000FD0  CFF4 F08C          	movff	prodh,___flmul@temp+1
  6397                           
  6398                           ; BSR set to: 0
  6399  000FD4  518B               	movf	___flmul@temp& (0+255),w,b
  6400  000FD6  2782               	addwf	___flmul@grs& (0+255),f,b
  6401  000FD8  0E00               	movlw	0
  6402  000FDA  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  6403  000FDC  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  6404  000FDE  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  6405                           
  6406                           ; BSR set to: 0
  6407  000FE0  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6408  000FE2  2787               	addwf	___flmul@prod& (0+255),f,b
  6409  000FE4  0E00               	movlw	0
  6410  000FE6  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6411  000FE8  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6412  000FEA  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6413  000FEC  504C               	movf	___flmul@a,w,c
  6414  000FEE  024A               	mulwf	___flmul@b+2,c
  6415  000FF0  CFF3 F08B          	movff	prodl,___flmul@temp
  6416  000FF4  CFF4 F08C          	movff	prodh,___flmul@temp+1
  6417                           
  6418                           ; BSR set to: 0
  6419  000FF8  518B               	movf	___flmul@temp& (0+255),w,b
  6420  000FFA  2782               	addwf	___flmul@grs& (0+255),f,b
  6421  000FFC  0E00               	movlw	0
  6422  000FFE  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  6423  001000  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  6424  001002  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  6425                           
  6426                           ; BSR set to: 0
  6427  001004  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6428  001006  2787               	addwf	___flmul@prod& (0+255),f,b
  6429  001008  0E00               	movlw	0
  6430  00100A  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6431  00100C  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6432  00100E  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6433                           
  6434                           ; BSR set to: 0
  6435  001010  C084  F085         	movff	___flmul@grs+2,___flmul@grs+3
  6436  001014  C083  F084         	movff	___flmul@grs+1,___flmul@grs+2
  6437  001018  C082  F083         	movff	___flmul@grs,___flmul@grs+1
  6438  00101C  6B82               	clrf	___flmul@grs& (0+255),b
  6439                           
  6440                           ; BSR set to: 0
  6441  00101E  504C               	movf	___flmul@a,w,c
  6442  001020  0249               	mulwf	___flmul@b+1,c
  6443  001022  CFF3 F08B          	movff	prodl,___flmul@temp
  6444  001026  CFF4 F08C          	movff	prodh,___flmul@temp+1
  6445                           
  6446                           ; BSR set to: 0
  6447  00102A  518B               	movf	___flmul@temp& (0+255),w,b
  6448  00102C  2782               	addwf	___flmul@grs& (0+255),f,b
  6449  00102E  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6450  001030  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  6451  001032  0E00               	movlw	0
  6452  001034  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  6453  001036  0E00               	movlw	0
  6454  001038  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  6455                           
  6456                           ; BSR set to: 0
  6457  00103A  504D               	movf	___flmul@a+1,w,c
  6458  00103C  0248               	mulwf	___flmul@b,c
  6459  00103E  CFF3 F08B          	movff	prodl,___flmul@temp
  6460  001042  CFF4 F08C          	movff	prodh,___flmul@temp+1
  6461                           
  6462                           ; BSR set to: 0
  6463  001046  518B               	movf	___flmul@temp& (0+255),w,b
  6464  001048  2782               	addwf	___flmul@grs& (0+255),f,b
  6465  00104A  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6466  00104C  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  6467  00104E  0E00               	movlw	0
  6468  001050  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  6469  001052  0E00               	movlw	0
  6470  001054  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  6471                           
  6472                           ; BSR set to: 0
  6473  001056  C084  F085         	movff	___flmul@grs+2,___flmul@grs+3
  6474  00105A  C083  F084         	movff	___flmul@grs+1,___flmul@grs+2
  6475  00105E  C082  F083         	movff	___flmul@grs,___flmul@grs+1
  6476  001062  6B82               	clrf	___flmul@grs& (0+255),b
  6477  001064  504C               	movf	___flmul@a,w,c
  6478  001066  0248               	mulwf	___flmul@b,c
  6479  001068  CFF3 F08B          	movff	prodl,___flmul@temp
  6480  00106C  CFF4 F08C          	movff	prodh,___flmul@temp+1
  6481                           
  6482                           ; BSR set to: 0
  6483  001070  518B               	movf	___flmul@temp& (0+255),w,b
  6484  001072  2782               	addwf	___flmul@grs& (0+255),f,b
  6485  001074  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6486  001076  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  6487  001078  0E00               	movlw	0
  6488  00107A  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  6489  00107C  0E00               	movlw	0
  6490  00107E  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  6491                           
  6492                           ; BSR set to: 0
  6493  001080  504E               	movf	___flmul@a+2,w,c
  6494  001082  0249               	mulwf	___flmul@b+1,c
  6495  001084  CFF3 F08B          	movff	prodl,___flmul@temp
  6496  001088  CFF4 F08C          	movff	prodh,___flmul@temp+1
  6497  00108C  518B               	movf	___flmul@temp& (0+255),w,b
  6498  00108E  2787               	addwf	___flmul@prod& (0+255),f,b
  6499  001090  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6500  001092  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6501  001094  0E00               	movlw	0
  6502  001096  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6503  001098  0E00               	movlw	0
  6504  00109A  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6505                           
  6506                           ; BSR set to: 0
  6507  00109C  504D               	movf	___flmul@a+1,w,c
  6508  00109E  024A               	mulwf	___flmul@b+2,c
  6509  0010A0  CFF3 F08B          	movff	prodl,___flmul@temp
  6510  0010A4  CFF4 F08C          	movff	prodh,___flmul@temp+1
  6511                           
  6512                           ; BSR set to: 0
  6513  0010A8  518B               	movf	___flmul@temp& (0+255),w,b
  6514  0010AA  2787               	addwf	___flmul@prod& (0+255),f,b
  6515  0010AC  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6516  0010AE  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6517  0010B0  0E00               	movlw	0
  6518  0010B2  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6519  0010B4  0E00               	movlw	0
  6520  0010B6  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6521  0010B8  504E               	movf	___flmul@a+2,w,c
  6522  0010BA  024A               	mulwf	___flmul@b+2,c
  6523  0010BC  CFF3 F08B          	movff	prodl,___flmul@temp
  6524  0010C0  CFF4 F08C          	movff	prodh,___flmul@temp+1
  6525                           
  6526                           ; BSR set to: 0
  6527  0010C4  518B               	movf	___flmul@temp& (0+255),w,b
  6528  0010C6  6E50               	movwf	??___flmul& (0+255),c
  6529  0010C8  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6530  0010CA  6E51               	movwf	(??___flmul+1)& (0+255),c
  6531  0010CC  6A52               	clrf	(??___flmul+2)& (0+255),c
  6532  0010CE  6A53               	clrf	(??___flmul+3)& (0+255),c
  6533  0010D0  C052  F053         	movff	??___flmul+2,??___flmul+3
  6534  0010D4  C051  F052         	movff	??___flmul+1,??___flmul+2
  6535  0010D8  C050  F051         	movff	??___flmul,??___flmul+1
  6536  0010DC  6A50               	clrf	??___flmul,c
  6537  0010DE  5050               	movf	??___flmul,w,c
  6538  0010E0  2787               	addwf	___flmul@prod& (0+255),f,b
  6539  0010E2  5051               	movf	??___flmul+1,w,c
  6540  0010E4  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6541  0010E6  5052               	movf	??___flmul+2,w,c
  6542  0010E8  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6543  0010EA  5053               	movf	??___flmul+3,w,c
  6544  0010EC  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6545                           
  6546                           ; BSR set to: 0
  6547  0010EE  C082  F050         	movff	___flmul@grs,??___flmul
  6548  0010F2  C083  F051         	movff	___flmul@grs+1,??___flmul+1
  6549  0010F6  C084  F052         	movff	___flmul@grs+2,??___flmul+2
  6550  0010FA  C085  F053         	movff	___flmul@grs+3,??___flmul+3
  6551  0010FE  0E19               	movlw	25
  6552  001100  D005               	goto	u4810
  6553  001102                     u4815:
  6554  001102  90D8               	bcf	status,0,c
  6555  001104  3253               	rrcf	??___flmul+3,f,c
  6556  001106  3252               	rrcf	??___flmul+2,f,c
  6557  001108  3251               	rrcf	??___flmul+1,f,c
  6558  00110A  3250               	rrcf	??___flmul,f,c
  6559  00110C                     u4810:
  6560  00110C  2EE8               	decfsz	wreg,f,c
  6561  00110E  D7F9               	goto	u4815
  6562  001110  5050               	movf	??___flmul,w,c
  6563  001112  2787               	addwf	___flmul@prod& (0+255),f,b
  6564  001114  5051               	movf	??___flmul+1,w,c
  6565  001116  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6566  001118  5052               	movf	??___flmul+2,w,c
  6567  00111A  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6568  00111C  5053               	movf	??___flmul+3,w,c
  6569  00111E  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6570                           
  6571                           ; BSR set to: 0
  6572  001120  C084  F085         	movff	___flmul@grs+2,___flmul@grs+3
  6573  001124  C083  F084         	movff	___flmul@grs+1,___flmul@grs+2
  6574  001128  C082  F083         	movff	___flmul@grs,___flmul@grs+1
  6575  00112C  6B82               	clrf	___flmul@grs& (0+255),b
  6576                           
  6577                           ; BSR set to: 0
  6578  00112E  5181               	movf	___flmul@aexp& (0+255),w,b
  6579  001130  C086  F050         	movff	___flmul@bexp,??___flmul
  6580  001134  6A51               	clrf	(??___flmul+1)& (0+255),c
  6581  001136  2650               	addwf	??___flmul,f,c
  6582  001138  0E00               	movlw	0
  6583  00113A  2251               	addwfc	??___flmul+1,f,c
  6584  00113C  0E82               	movlw	130
  6585  00113E  2450               	addwf	??___flmul,w,c
  6586  001140  6F8B               	movwf	___flmul@temp& (0+255),b
  6587  001142  0EFF               	movlw	255
  6588  001144  2051               	addwfc	??___flmul+1,w,c
  6589  001146  6F8C               	movwf	(___flmul@temp+1)& (0+255),b
  6590  001148  D00F               	goto	l1016
  6591  00114A                     
  6592                           ; BSR set to: 0
  6593                           
  6594                           ; BSR set to: 0
  6595  00114A  90D8               	bcf	status,0,c
  6596  00114C  3787               	rlcf	___flmul@prod& (0+255),f,b
  6597  00114E  3788               	rlcf	(___flmul@prod+1)& (0+255),f,b
  6598  001150  3789               	rlcf	(___flmul@prod+2)& (0+255),f,b
  6599  001152  378A               	rlcf	(___flmul@prod+3)& (0+255),f,b
  6600                           
  6601                           ; BSR set to: 0
  6602  001154  BF85               	btfsc	(___flmul@grs+3)& (0+255),7,b
  6603                           
  6604                           ; BSR set to: 0
  6605  001156  8187               	bsf	___flmul@prod& (0+255),0,b
  6606                           
  6607                           ; BSR set to: 0
  6608  001158  90D8               	bcf	status,0,c
  6609  00115A  3782               	rlcf	___flmul@grs& (0+255),f,b
  6610  00115C  3783               	rlcf	(___flmul@grs+1)& (0+255),f,b
  6611  00115E  3784               	rlcf	(___flmul@grs+2)& (0+255),f,b
  6612  001160  3785               	rlcf	(___flmul@grs+3)& (0+255),f,b
  6613  001162  078B               	decf	___flmul@temp& (0+255),f,b
  6614  001164  A0D8               	btfss	status,0,c
  6615  001166  078C               	decf	(___flmul@temp+1)& (0+255),f,b
  6616  001168                     l1016:
  6617                           
  6618                           ; BSR set to: 0
  6619                           
  6620                           ; BSR set to: 0
  6621  001168  AF89               	btfss	(___flmul@prod+2)& (0+255),7,b
  6622  00116A  D7EF               	goto	l1017
  6623                           
  6624                           ; BSR set to: 0
  6625                           
  6626                           ; BSR set to: 0
  6627  00116C  0E00               	movlw	0
  6628  00116E  6F81               	movwf	___flmul@aexp& (0+255),b
  6629                           
  6630                           ; BSR set to: 0
  6631  001170  AF85               	btfss	(___flmul@grs+3)& (0+255),7,b
  6632  001172  D016               	goto	l1023
  6633                           
  6634                           ; BSR set to: 0
  6635  001174  0EFF               	movlw	255
  6636  001176  1582               	andwf	___flmul@grs& (0+255),w,b
  6637  001178  6E50               	movwf	??___flmul& (0+255),c
  6638  00117A  0EFF               	movlw	255
  6639  00117C  1583               	andwf	(___flmul@grs+1)& (0+255),w,b
  6640  00117E  6E51               	movwf	(??___flmul+1)& (0+255),c
  6641  001180  0EFF               	movlw	255
  6642  001182  1584               	andwf	(___flmul@grs+2)& (0+255),w,b
  6643  001184  6E52               	movwf	(??___flmul+2)& (0+255),c
  6644  001186  0E7F               	movlw	127
  6645  001188  1585               	andwf	(___flmul@grs+3)& (0+255),w,b
  6646  00118A  6E53               	movwf	(??___flmul+3)& (0+255),c
  6647  00118C  5050               	movf	??___flmul,w,c
  6648  00118E  1051               	iorwf	??___flmul+1,w,c
  6649  001190  1052               	iorwf	??___flmul+2,w,c
  6650  001192  1053               	iorwf	??___flmul+3,w,c
  6651  001194  A4D8               	btfss	status,2,c
  6652  001196  D002               	goto	u4860
  6653                           
  6654                           ; BSR set to: 0
  6655                           
  6656                           ; BSR set to: 0
  6657  001198  A187               	btfss	___flmul@prod& (0+255),0,b
  6658  00119A  D002               	goto	l1023
  6659  00119C                     u4860:
  6660                           
  6661                           ; BSR set to: 0
  6662  00119C  0E01               	movlw	1
  6663  00119E  6F81               	movwf	___flmul@aexp& (0+255),b
  6664  0011A0                     l1023:
  6665                           
  6666                           ; BSR set to: 0
  6667                           
  6668                           ; BSR set to: 0
  6669                           
  6670                           ; BSR set to: 0
  6671  0011A0  5181               	movf	___flmul@aexp& (0+255),w,b
  6672  0011A2  B4D8               	btfsc	status,2,c
  6673  0011A4  D01F               	goto	l1025
  6674                           
  6675                           ; BSR set to: 0
  6676  0011A6  0E01               	movlw	1
  6677  0011A8  2787               	addwf	___flmul@prod& (0+255),f,b
  6678  0011AA  0E00               	movlw	0
  6679  0011AC  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6680  0011AE  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6681  0011B0  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6682                           
  6683                           ; BSR set to: 0
  6684  0011B2  A18A               	btfss	(___flmul@prod+3)& (0+255),0,b
  6685  0011B4  D017               	goto	l1025
  6686                           
  6687                           ; BSR set to: 0
  6688  0011B6  C087  F050         	movff	___flmul@prod,??___flmul
  6689  0011BA  C088  F051         	movff	___flmul@prod+1,??___flmul+1
  6690  0011BE  C089  F052         	movff	___flmul@prod+2,??___flmul+2
  6691  0011C2  C08A  F053         	movff	___flmul@prod+3,??___flmul+3
  6692  0011C6  3453               	rlcf	??___flmul+3,w,c
  6693  0011C8  3253               	rrcf	??___flmul+3,f,c
  6694  0011CA  3252               	rrcf	??___flmul+2,f,c
  6695  0011CC  3251               	rrcf	??___flmul+1,f,c
  6696  0011CE  3250               	rrcf	??___flmul,f,c
  6697  0011D0  C050  F087         	movff	??___flmul,___flmul@prod
  6698  0011D4  C051  F088         	movff	??___flmul+1,___flmul@prod+1
  6699  0011D8  C052  F089         	movff	??___flmul+2,___flmul@prod+2
  6700  0011DC  C053  F08A         	movff	??___flmul+3,___flmul@prod+3
  6701                           
  6702                           ; BSR set to: 0
  6703  0011E0  4B8B               	infsnz	___flmul@temp& (0+255),f,b
  6704  0011E2  2B8C               	incf	(___flmul@temp+1)& (0+255),f,b
  6705  0011E4                     l1025:
  6706                           
  6707                           ; BSR set to: 0
  6708                           
  6709                           ; BSR set to: 0
  6710                           
  6711                           ; BSR set to: 0
  6712  0011E4  BF8C               	btfsc	(___flmul@temp+1)& (0+255),7,b
  6713  0011E6  D00D               	goto	l1026
  6714  0011E8  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6715  0011EA  E103               	bnz	u4890
  6716  0011EC  298B               	incf	___flmul@temp& (0+255),w,b
  6717  0011EE  A0D8               	btfss	status,0,c
  6718  0011F0  D008               	goto	l1026
  6719  0011F2                     u4890:
  6720                           
  6721                           ; BSR set to: 0
  6722  0011F2  0E00               	movlw	0
  6723  0011F4  6F87               	movwf	___flmul@prod& (0+255),b
  6724  0011F6  0E00               	movlw	0
  6725  0011F8  6F88               	movwf	(___flmul@prod+1)& (0+255),b
  6726  0011FA  0E80               	movlw	128
  6727  0011FC  6F89               	movwf	(___flmul@prod+2)& (0+255),b
  6728  0011FE  0E7F               	movlw	127
  6729  001200  D020               	goto	L8
  6730  001202                     l1026:
  6731                           
  6732                           ; BSR set to: 0
  6733                           
  6734                           ; BSR set to: 0
  6735  001202  BF8C               	btfsc	(___flmul@temp+1)& (0+255),7,b
  6736  001204  D005               	goto	u4900
  6737  001206  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6738  001208  E10E               	bnz	l1028
  6739  00120A  058B               	decf	___flmul@temp& (0+255),w,b
  6740  00120C  B0D8               	btfsc	status,0,c
  6741  00120E  D00B               	goto	l1028
  6742  001210                     u4900:
  6743                           
  6744                           ; BSR set to: 0
  6745  001210  0E00               	movlw	0
  6746  001212  6F87               	movwf	___flmul@prod& (0+255),b
  6747  001214  0E00               	movlw	0
  6748  001216  6F88               	movwf	(___flmul@prod+1)& (0+255),b
  6749  001218  0E00               	movlw	0
  6750  00121A  6F89               	movwf	(___flmul@prod+2)& (0+255),b
  6751  00121C  0E00               	movlw	0
  6752  00121E  6F8A               	movwf	(___flmul@prod+3)& (0+255),b
  6753  001220  0E00               	movlw	0
  6754  001222  6F80               	movwf	___flmul@sign& (0+255),b
  6755  001224  D00F               	goto	l1029
  6756  001226                     l1028:
  6757                           
  6758                           ; BSR set to: 0
  6759  001226  C08B  F086         	movff	___flmul@temp,___flmul@bexp
  6760                           
  6761                           ; BSR set to: 0
  6762  00122A  0EFF               	movlw	255
  6763  00122C  1787               	andwf	___flmul@prod& (0+255),f,b
  6764  00122E  0EFF               	movlw	255
  6765  001230  1788               	andwf	(___flmul@prod+1)& (0+255),f,b
  6766  001232  0E7F               	movlw	127
  6767  001234  1789               	andwf	(___flmul@prod+2)& (0+255),f,b
  6768  001236  0E00               	movlw	0
  6769  001238  178A               	andwf	(___flmul@prod+3)& (0+255),f,b
  6770                           
  6771                           ; BSR set to: 0
  6772  00123A  B186               	btfsc	___flmul@bexp& (0+255),0,b
  6773                           
  6774                           ; BSR set to: 0
  6775  00123C  8F89               	bsf	(___flmul@prod+2)& (0+255),7,b
  6776                           
  6777                           ; BSR set to: 0
  6778                           
  6779                           ; BSR set to: 0
  6780  00123E  90D8               	bcf	status,0,c
  6781  001240  3186               	rrcf	___flmul@bexp& (0+255),w,b
  6782  001242                     L8:
  6783  001242  6F8A               	movwf	(___flmul@prod+3)& (0+255),b
  6784  001244                     l1029:
  6785                           
  6786                           ; BSR set to: 0
  6787                           
  6788                           ; BSR set to: 0
  6789                           
  6790                           ; BSR set to: 0
  6791  001244  5180               	movf	___flmul@sign& (0+255),w,b
  6792  001246  138A               	iorwf	(___flmul@prod+3)& (0+255),f,b
  6793                           
  6794                           ; BSR set to: 0
  6795  001248  C087  F048         	movff	___flmul@prod,?___flmul
  6796  00124C  C088  F049         	movff	___flmul@prod+1,?___flmul+1
  6797  001250  C089  F04A         	movff	___flmul@prod+2,?___flmul+2
  6798  001254  C08A  F04B         	movff	___flmul@prod+3,?___flmul+3
  6799  001258  0012               	return	
  6800  00125A                     __end_of___flmul:
  6801                           	opt stack 0
  6802                           tblptru	equ	0xFF8
  6803                           tblptrh	equ	0xFF7
  6804                           tblptrl	equ	0xFF6
  6805                           tablat	equ	0xFF5
  6806                           prodh	equ	0xFF4
  6807                           prodl	equ	0xFF3
  6808                           intcon	equ	0xFF2
  6809                           intcon2	equ	0xFF1
  6810                           intcon3	equ	0xFF0
  6811                           postinc0	equ	0xFEE
  6812                           wreg	equ	0xFE8
  6813                           indf1	equ	0xFE7
  6814                           postdec1	equ	0xFE5
  6815                           fsr1h	equ	0xFE2
  6816                           fsr1l	equ	0xFE1
  6817                           indf2	equ	0xFDF
  6818                           postinc2	equ	0xFDE
  6819                           postdec2	equ	0xFDD
  6820                           fsr2h	equ	0xFDA
  6821                           fsr2l	equ	0xFD9
  6822                           status	equ	0xFD8
  6823                           
  6824 ;; *************** function ___awmod *****************
  6825 ;; Defined at:
  6826 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  6827 ;; Parameters:    Size  Location     Type
  6828 ;;  dividend        2   26[COMRAM] int 
  6829 ;;  divisor         2   28[COMRAM] int 
  6830 ;; Auto vars:     Size  Location     Type
  6831 ;;  sign            1   31[COMRAM] unsigned char 
  6832 ;;  counter         1   30[COMRAM] unsigned char 
  6833 ;; Return value:  Size  Location     Type
  6834 ;;                  2   26[COMRAM] int 
  6835 ;; Registers used:
  6836 ;;		wreg, status,2, status,0
  6837 ;; Tracked objects:
  6838 ;;		On entry : 0/0
  6839 ;;		On exit  : 0/0
  6840 ;;		Unchanged: 0/0
  6841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6842 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6843 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6845 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6846 ;;Total ram usage:        6 bytes
  6847 ;; Hardware stack levels used:    1
  6848 ;; Hardware stack levels required when called:    2
  6849 ;; This function calls:
  6850 ;;		Nothing
  6851 ;; This function is called by:
  6852 ;;		_fround
  6853 ;;		_scale
  6854 ;; This function uses a non-reentrant model
  6855 ;;
  6856                           
  6857                           	psect	text17
  6858  002904                     __ptext17:
  6859                           	opt stack 0
  6860  002904                     ___awmod:
  6861                           	opt stack 25
  6862                           
  6863                           ; BSR set to: 0
  6864                           ;incstack = 0
  6865  002904  0E00               	movlw	0
  6866  002906  6E20               	movwf	___awmod@sign,c
  6867  002908  AE1C               	btfss	___awmod@dividend+1,7,c
  6868  00290A  D006               	goto	l623
  6869  00290C  6C1B               	negf	___awmod@dividend,c
  6870  00290E  1E1C               	comf	___awmod@dividend+1,f,c
  6871  002910  B0D8               	btfsc	status,0,c
  6872  002912  2A1C               	incf	___awmod@dividend+1,f,c
  6873  002914  0E01               	movlw	1
  6874  002916  6E20               	movwf	___awmod@sign,c
  6875  002918                     l623:
  6876  002918  AE1E               	btfss	___awmod@divisor+1,7,c
  6877  00291A  D004               	goto	l624
  6878  00291C  6C1D               	negf	___awmod@divisor,c
  6879  00291E  1E1E               	comf	___awmod@divisor+1,f,c
  6880  002920  B0D8               	btfsc	status,0,c
  6881  002922  2A1E               	incf	___awmod@divisor+1,f,c
  6882  002924                     l624:
  6883  002924  501D               	movf	___awmod@divisor,w,c
  6884  002926  101E               	iorwf	___awmod@divisor+1,w,c
  6885  002928  B4D8               	btfsc	status,2,c
  6886  00292A  D018               	goto	l631
  6887  00292C  0E01               	movlw	1
  6888  00292E  6E1F               	movwf	___awmod@counter,c
  6889  002930  D004               	goto	l626
  6890  002932  90D8               	bcf	status,0,c
  6891  002934  361D               	rlcf	___awmod@divisor,f,c
  6892  002936  361E               	rlcf	___awmod@divisor+1,f,c
  6893  002938  2A1F               	incf	___awmod@counter,f,c
  6894  00293A                     l626:
  6895  00293A  AE1E               	btfss	___awmod@divisor+1,7,c
  6896  00293C  D7FA               	goto	l627
  6897  00293E                     u3100:
  6898  00293E  501D               	movf	___awmod@divisor,w,c
  6899  002940  5C1B               	subwf	___awmod@dividend,w,c
  6900  002942  501E               	movf	___awmod@divisor+1,w,c
  6901  002944  581C               	subwfb	___awmod@dividend+1,w,c
  6902  002946  A0D8               	btfss	status,0,c
  6903  002948  D004               	goto	l630
  6904  00294A  501D               	movf	___awmod@divisor,w,c
  6905  00294C  5E1B               	subwf	___awmod@dividend,f,c
  6906  00294E  501E               	movf	___awmod@divisor+1,w,c
  6907  002950  5A1C               	subwfb	___awmod@dividend+1,f,c
  6908  002952                     l630:
  6909  002952  90D8               	bcf	status,0,c
  6910  002954  321E               	rrcf	___awmod@divisor+1,f,c
  6911  002956  321D               	rrcf	___awmod@divisor,f,c
  6912  002958  2E1F               	decfsz	___awmod@counter,f,c
  6913  00295A  D7F1               	goto	u3100
  6914  00295C                     l631:
  6915  00295C  5020               	movf	___awmod@sign,w,c
  6916  00295E  B4D8               	btfsc	status,2,c
  6917  002960  D004               	goto	l632
  6918  002962  6C1B               	negf	___awmod@dividend,c
  6919  002964  1E1C               	comf	___awmod@dividend+1,f,c
  6920  002966  B0D8               	btfsc	status,0,c
  6921  002968  2A1C               	incf	___awmod@dividend+1,f,c
  6922  00296A                     l632:
  6923  00296A  C01B  F01B         	movff	___awmod@dividend,?___awmod
  6924  00296E  C01C  F01C         	movff	___awmod@dividend+1,?___awmod+1
  6925  002972  0012               	return	
  6926  002974                     __end_of___awmod:
  6927                           	opt stack 0
  6928                           tblptru	equ	0xFF8
  6929                           tblptrh	equ	0xFF7
  6930                           tblptrl	equ	0xFF6
  6931                           tablat	equ	0xFF5
  6932                           prodh	equ	0xFF4
  6933                           prodl	equ	0xFF3
  6934                           intcon	equ	0xFF2
  6935                           intcon2	equ	0xFF1
  6936                           intcon3	equ	0xFF0
  6937                           postinc0	equ	0xFEE
  6938                           wreg	equ	0xFE8
  6939                           indf1	equ	0xFE7
  6940                           postdec1	equ	0xFE5
  6941                           fsr1h	equ	0xFE2
  6942                           fsr1l	equ	0xFE1
  6943                           indf2	equ	0xFDF
  6944                           postinc2	equ	0xFDE
  6945                           postdec2	equ	0xFDD
  6946                           fsr2h	equ	0xFDA
  6947                           fsr2l	equ	0xFD9
  6948                           status	equ	0xFD8
  6949                           
  6950 ;; *************** function ___awdiv *****************
  6951 ;; Defined at:
  6952 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  6953 ;; Parameters:    Size  Location     Type
  6954 ;;  dividend        2   32[COMRAM] int 
  6955 ;;  divisor         2   34[COMRAM] int 
  6956 ;; Auto vars:     Size  Location     Type
  6957 ;;  quotient        2   38[COMRAM] int 
  6958 ;;  sign            1   37[COMRAM] unsigned char 
  6959 ;;  counter         1   36[COMRAM] unsigned char 
  6960 ;; Return value:  Size  Location     Type
  6961 ;;                  2   32[COMRAM] int 
  6962 ;; Registers used:
  6963 ;;		wreg, status,2, status,0
  6964 ;; Tracked objects:
  6965 ;;		On entry : 0/0
  6966 ;;		On exit  : 0/0
  6967 ;;		Unchanged: 0/0
  6968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6969 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6970 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6972 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6973 ;;Total ram usage:        8 bytes
  6974 ;; Hardware stack levels used:    1
  6975 ;; Hardware stack levels required when called:    2
  6976 ;; This function calls:
  6977 ;;		Nothing
  6978 ;; This function is called by:
  6979 ;;		_fround
  6980 ;;		_scale
  6981 ;;		_sprintf
  6982 ;; This function uses a non-reentrant model
  6983 ;;
  6984                           
  6985                           	psect	text18
  6986  00277C                     __ptext18:
  6987                           	opt stack 0
  6988  00277C                     ___awdiv:
  6989                           	opt stack 25
  6990                           
  6991                           ;incstack = 0
  6992  00277C  0E00               	movlw	0
  6993  00277E  6E26               	movwf	___awdiv@sign,c
  6994  002780  AE24               	btfss	___awdiv@divisor+1,7,c
  6995  002782  D006               	goto	l610
  6996  002784  6C23               	negf	___awdiv@divisor,c
  6997  002786  1E24               	comf	___awdiv@divisor+1,f,c
  6998  002788  B0D8               	btfsc	status,0,c
  6999  00278A  2A24               	incf	___awdiv@divisor+1,f,c
  7000  00278C  0E01               	movlw	1
  7001  00278E  6E26               	movwf	___awdiv@sign,c
  7002  002790                     l610:
  7003  002790  AE22               	btfss	___awdiv@dividend+1,7,c
  7004  002792  D006               	goto	l611
  7005  002794  6C21               	negf	___awdiv@dividend,c
  7006  002796  1E22               	comf	___awdiv@dividend+1,f,c
  7007  002798  B0D8               	btfsc	status,0,c
  7008  00279A  2A22               	incf	___awdiv@dividend+1,f,c
  7009  00279C  0E01               	movlw	1
  7010  00279E  1A26               	xorwf	___awdiv@sign,f,c
  7011  0027A0                     l611:
  7012  0027A0  0E00               	movlw	0
  7013  0027A2  6E28               	movwf	___awdiv@quotient+1,c
  7014  0027A4  0E00               	movlw	0
  7015  0027A6  6E27               	movwf	___awdiv@quotient,c
  7016  0027A8  5023               	movf	___awdiv@divisor,w,c
  7017  0027AA  1024               	iorwf	___awdiv@divisor+1,w,c
  7018  0027AC  B4D8               	btfsc	status,2,c
  7019  0027AE  D01C               	goto	l618
  7020  0027B0  0E01               	movlw	1
  7021  0027B2  6E25               	movwf	___awdiv@counter,c
  7022  0027B4  D004               	goto	l613
  7023  0027B6  90D8               	bcf	status,0,c
  7024  0027B8  3623               	rlcf	___awdiv@divisor,f,c
  7025  0027BA  3624               	rlcf	___awdiv@divisor+1,f,c
  7026  0027BC  2A25               	incf	___awdiv@counter,f,c
  7027  0027BE                     l613:
  7028  0027BE  AE24               	btfss	___awdiv@divisor+1,7,c
  7029  0027C0  D7FA               	goto	l614
  7030  0027C2                     u3040:
  7031  0027C2  90D8               	bcf	status,0,c
  7032  0027C4  3627               	rlcf	___awdiv@quotient,f,c
  7033  0027C6  3628               	rlcf	___awdiv@quotient+1,f,c
  7034  0027C8  5023               	movf	___awdiv@divisor,w,c
  7035  0027CA  5C21               	subwf	___awdiv@dividend,w,c
  7036  0027CC  5024               	movf	___awdiv@divisor+1,w,c
  7037  0027CE  5822               	subwfb	___awdiv@dividend+1,w,c
  7038  0027D0  A0D8               	btfss	status,0,c
  7039  0027D2  D005               	goto	l617
  7040  0027D4  5023               	movf	___awdiv@divisor,w,c
  7041  0027D6  5E21               	subwf	___awdiv@dividend,f,c
  7042  0027D8  5024               	movf	___awdiv@divisor+1,w,c
  7043  0027DA  5A22               	subwfb	___awdiv@dividend+1,f,c
  7044  0027DC  8027               	bsf	___awdiv@quotient,0,c
  7045  0027DE                     l617:
  7046  0027DE  90D8               	bcf	status,0,c
  7047  0027E0  3224               	rrcf	___awdiv@divisor+1,f,c
  7048  0027E2  3223               	rrcf	___awdiv@divisor,f,c
  7049  0027E4  2E25               	decfsz	___awdiv@counter,f,c
  7050  0027E6  D7ED               	goto	u3040
  7051  0027E8                     l618:
  7052  0027E8  5026               	movf	___awdiv@sign,w,c
  7053  0027EA  B4D8               	btfsc	status,2,c
  7054  0027EC  D004               	goto	l619
  7055  0027EE  6C27               	negf	___awdiv@quotient,c
  7056  0027F0  1E28               	comf	___awdiv@quotient+1,f,c
  7057  0027F2  B0D8               	btfsc	status,0,c
  7058  0027F4  2A28               	incf	___awdiv@quotient+1,f,c
  7059  0027F6                     l619:
  7060  0027F6  C027  F021         	movff	___awdiv@quotient,?___awdiv
  7061  0027FA  C028  F022         	movff	___awdiv@quotient+1,?___awdiv+1
  7062  0027FE  0012               	return	
  7063  002800                     __end_of___awdiv:
  7064                           	opt stack 0
  7065                           tblptru	equ	0xFF8
  7066                           tblptrh	equ	0xFF7
  7067                           tblptrl	equ	0xFF6
  7068                           tablat	equ	0xFF5
  7069                           prodh	equ	0xFF4
  7070                           prodl	equ	0xFF3
  7071                           intcon	equ	0xFF2
  7072                           intcon2	equ	0xFF1
  7073                           intcon3	equ	0xFF0
  7074                           postinc0	equ	0xFEE
  7075                           wreg	equ	0xFE8
  7076                           indf1	equ	0xFE7
  7077                           postdec1	equ	0xFE5
  7078                           fsr1h	equ	0xFE2
  7079                           fsr1l	equ	0xFE1
  7080                           indf2	equ	0xFDF
  7081                           postinc2	equ	0xFDE
  7082                           postdec2	equ	0xFDD
  7083                           fsr2h	equ	0xFDA
  7084                           fsr2l	equ	0xFD9
  7085                           status	equ	0xFD8
  7086                           
  7087 ;; *************** function __tdiv_to_l_ *****************
  7088 ;; Defined at:
  7089 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  7090 ;; Parameters:    Size  Location     Type
  7091 ;;  f1              4   26[COMRAM] float 
  7092 ;;  f2              4   30[COMRAM] float 
  7093 ;; Auto vars:     Size  Location     Type
  7094 ;;  quot            4   37[COMRAM] unsigned long 
  7095 ;;  exp1            1   42[COMRAM] unsigned char 
  7096 ;;  cntr            1   41[COMRAM] unsigned char 
  7097 ;; Return value:  Size  Location     Type
  7098 ;;                  4   26[COMRAM] unsigned long 
  7099 ;; Registers used:
  7100 ;;		wreg, status,2, status,0
  7101 ;; Tracked objects:
  7102 ;;		On entry : 0/0
  7103 ;;		On exit  : 0/0
  7104 ;;		Unchanged: 0/0
  7105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7106 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7107 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7108 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7109 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7110 ;;Total ram usage:       17 bytes
  7111 ;; Hardware stack levels used:    1
  7112 ;; Hardware stack levels required when called:    2
  7113 ;; This function calls:
  7114 ;;		Nothing
  7115 ;; This function is called by:
  7116 ;;		_sprintf
  7117 ;; This function uses a non-reentrant model
  7118 ;;
  7119                           
  7120                           	psect	text19
  7121  00213A                     __ptext19:
  7122                           	opt stack 0
  7123  00213A                     __tdiv_to_l_:
  7124                           	opt stack 26
  7125                           
  7126                           ;incstack = 0
  7127  00213A  C01D  F023         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7128  00213E  6A24               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7129  002140  6A25               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7130  002142  341C               	rlcf	__tdiv_to_l_@f1+1,w,c
  7131  002144  3623               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7132  002146  E301               	bnc	u3221
  7133  002148  8024               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7134  00214A                     u3221:
  7135  00214A  5023               	movf	??__tdiv_to_l_,w,c
  7136  00214C  6E2B               	movwf	__tdiv_to_l_@exp1,c
  7137  00214E  502B               	movf	__tdiv_to_l_@exp1,w,c
  7138  002150  A4D8               	btfss	status,2,c
  7139  002152  D009               	goto	l746
  7140  002154  0E00               	movlw	0
  7141  002156  6E1B               	movwf	?__tdiv_to_l_,c
  7142  002158  0E00               	movlw	0
  7143  00215A  6E1C               	movwf	?__tdiv_to_l_+1,c
  7144  00215C  0E00               	movlw	0
  7145  00215E  6E1D               	movwf	?__tdiv_to_l_+2,c
  7146  002160  0E00               	movlw	0
  7147  002162  6E1E               	movwf	?__tdiv_to_l_+3,c
  7148  002164  0012               	return	
  7149  002166                     l746:
  7150  002166  C021  F023         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7151  00216A  6A24               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7152  00216C  6A25               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7153  00216E  3420               	rlcf	__tdiv_to_l_@f2+1,w,c
  7154  002170  3623               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7155  002172  E301               	bnc	u3241
  7156  002174  8024               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7157  002176                     u3241:
  7158  002176  5023               	movf	??__tdiv_to_l_,w,c
  7159  002178  6E2A               	movwf	__tdiv_to_l_@cntr,c
  7160  00217A  502A               	movf	__tdiv_to_l_@cntr,w,c
  7161  00217C  A4D8               	btfss	status,2,c
  7162  00217E  D009               	goto	l748
  7163  002180  0E00               	movlw	0
  7164  002182  6E1B               	movwf	?__tdiv_to_l_,c
  7165  002184  0E00               	movlw	0
  7166  002186  6E1C               	movwf	?__tdiv_to_l_+1,c
  7167  002188  0E00               	movlw	0
  7168  00218A  6E1D               	movwf	?__tdiv_to_l_+2,c
  7169  00218C  0E00               	movlw	0
  7170  00218E  6E1E               	movwf	?__tdiv_to_l_+3,c
  7171  002190  0012               	return	
  7172  002192                     l748:
  7173  002192  8E1C               	bsf	__tdiv_to_l_@f1+1,7,c
  7174  002194  0EFF               	movlw	255
  7175  002196  161B               	andwf	__tdiv_to_l_@f1,f,c
  7176  002198  0EFF               	movlw	255
  7177  00219A  161C               	andwf	__tdiv_to_l_@f1+1,f,c
  7178  00219C  0E00               	movlw	0
  7179  00219E  161D               	andwf	__tdiv_to_l_@f1+2,f,c
  7180  0021A0  8E20               	bsf	__tdiv_to_l_@f2+1,7,c
  7181  0021A2  0EFF               	movlw	255
  7182  0021A4  161F               	andwf	__tdiv_to_l_@f2,f,c
  7183  0021A6  0EFF               	movlw	255
  7184  0021A8  1620               	andwf	__tdiv_to_l_@f2+1,f,c
  7185  0021AA  0E00               	movlw	0
  7186  0021AC  1621               	andwf	__tdiv_to_l_@f2+2,f,c
  7187  0021AE  0E00               	movlw	0
  7188  0021B0  6E26               	movwf	__tdiv_to_l_@quot,c
  7189  0021B2  0E00               	movlw	0
  7190  0021B4  6E27               	movwf	__tdiv_to_l_@quot+1,c
  7191  0021B6  0E00               	movlw	0
  7192  0021B8  6E28               	movwf	__tdiv_to_l_@quot+2,c
  7193  0021BA  0E00               	movlw	0
  7194  0021BC  6E29               	movwf	__tdiv_to_l_@quot+3,c
  7195  0021BE  0E7F               	movlw	127
  7196  0021C0  5E2B               	subwf	__tdiv_to_l_@exp1,f,c
  7197  0021C2  502A               	movf	__tdiv_to_l_@cntr,w,c
  7198  0021C4  0F98               	addlw	152
  7199  0021C6  5E2B               	subwf	__tdiv_to_l_@exp1,f,c
  7200  0021C8  0E18               	movlw	24
  7201  0021CA  6E2A               	movwf	__tdiv_to_l_@cntr,c
  7202  0021CC                     l749:
  7203  0021CC  90D8               	bcf	status,0,c
  7204  0021CE  3626               	rlcf	__tdiv_to_l_@quot,f,c
  7205  0021D0  3627               	rlcf	__tdiv_to_l_@quot+1,f,c
  7206  0021D2  3628               	rlcf	__tdiv_to_l_@quot+2,f,c
  7207  0021D4  3629               	rlcf	__tdiv_to_l_@quot+3,f,c
  7208  0021D6  501F               	movf	__tdiv_to_l_@f2,w,c
  7209  0021D8  5C1B               	subwf	__tdiv_to_l_@f1,w,c
  7210  0021DA  5020               	movf	__tdiv_to_l_@f2+1,w,c
  7211  0021DC  581C               	subwfb	__tdiv_to_l_@f1+1,w,c
  7212  0021DE  5021               	movf	__tdiv_to_l_@f2+2,w,c
  7213  0021E0  581D               	subwfb	__tdiv_to_l_@f1+2,w,c
  7214  0021E2  A0D8               	btfss	status,0,c
  7215  0021E4  D007               	goto	l750
  7216  0021E6  501F               	movf	__tdiv_to_l_@f2,w,c
  7217  0021E8  5E1B               	subwf	__tdiv_to_l_@f1,f,c
  7218  0021EA  5020               	movf	__tdiv_to_l_@f2+1,w,c
  7219  0021EC  5A1C               	subwfb	__tdiv_to_l_@f1+1,f,c
  7220  0021EE  5021               	movf	__tdiv_to_l_@f2+2,w,c
  7221  0021F0  5A1D               	subwfb	__tdiv_to_l_@f1+2,f,c
  7222  0021F2  8026               	bsf	__tdiv_to_l_@quot,0,c
  7223  0021F4                     l750:
  7224  0021F4  90D8               	bcf	status,0,c
  7225  0021F6  361B               	rlcf	__tdiv_to_l_@f1,f,c
  7226  0021F8  361C               	rlcf	__tdiv_to_l_@f1+1,f,c
  7227  0021FA  361D               	rlcf	__tdiv_to_l_@f1+2,f,c
  7228  0021FC  2E2A               	decfsz	__tdiv_to_l_@cntr,f,c
  7229  0021FE  D7E6               	goto	l749
  7230  002200  AE2B               	btfss	__tdiv_to_l_@exp1,7,c
  7231  002202  D016               	goto	l752
  7232  002204  502B               	movf	__tdiv_to_l_@exp1,w,c
  7233  002206  0A80               	xorlw	128
  7234  002208  0F97               	addlw	151
  7235  00220A  B0D8               	btfsc	status,0,c
  7236  00220C  D009               	goto	l753
  7237  00220E  0E00               	movlw	0
  7238  002210  6E1B               	movwf	?__tdiv_to_l_,c
  7239  002212  0E00               	movlw	0
  7240  002214  6E1C               	movwf	?__tdiv_to_l_+1,c
  7241  002216  0E00               	movlw	0
  7242  002218  6E1D               	movwf	?__tdiv_to_l_+2,c
  7243  00221A  0E00               	movlw	0
  7244  00221C  6E1E               	movwf	?__tdiv_to_l_+3,c
  7245  00221E  0012               	return	
  7246  002220                     l753:
  7247  002220  90D8               	bcf	status,0,c
  7248  002222  3229               	rrcf	__tdiv_to_l_@quot+3,f,c
  7249  002224  3228               	rrcf	__tdiv_to_l_@quot+2,f,c
  7250  002226  3227               	rrcf	__tdiv_to_l_@quot+1,f,c
  7251  002228  3226               	rrcf	__tdiv_to_l_@quot,f,c
  7252  00222A  3E2B               	incfsz	__tdiv_to_l_@exp1,f,c
  7253  00222C  D7F9               	goto	l753
  7254  00222E  D015               	goto	u3300
  7255  002230                     l752:
  7256  002230  0E17               	movlw	23
  7257  002232  642B               	cpfsgt	__tdiv_to_l_@exp1,c
  7258  002234  D00F               	goto	l758
  7259  002236  0E00               	movlw	0
  7260  002238  6E1B               	movwf	?__tdiv_to_l_,c
  7261  00223A  0E00               	movlw	0
  7262  00223C  6E1C               	movwf	?__tdiv_to_l_+1,c
  7263  00223E  0E00               	movlw	0
  7264  002240  6E1D               	movwf	?__tdiv_to_l_+2,c
  7265  002242  0E00               	movlw	0
  7266  002244  6E1E               	movwf	?__tdiv_to_l_+3,c
  7267  002246  0012               	return	
  7268  002248  90D8               	bcf	status,0,c
  7269  00224A  3626               	rlcf	__tdiv_to_l_@quot,f,c
  7270  00224C  3627               	rlcf	__tdiv_to_l_@quot+1,f,c
  7271  00224E  3628               	rlcf	__tdiv_to_l_@quot+2,f,c
  7272  002250  3629               	rlcf	__tdiv_to_l_@quot+3,f,c
  7273  002252  062B               	decf	__tdiv_to_l_@exp1,f,c
  7274  002254                     l758:
  7275  002254  502B               	movf	__tdiv_to_l_@exp1,w,c
  7276  002256  A4D8               	btfss	status,2,c
  7277  002258  D7F7               	goto	l759
  7278  00225A                     u3300:
  7279  00225A  C026  F01B         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7280  00225E  C027  F01C         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7281  002262  C028  F01D         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7282  002266  C029  F01E         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7283  00226A  0012               	return		;funcret
  7284  00226C                     __end_of__tdiv_to_l_:
  7285                           	opt stack 0
  7286                           tblptru	equ	0xFF8
  7287                           tblptrh	equ	0xFF7
  7288                           tblptrl	equ	0xFF6
  7289                           tablat	equ	0xFF5
  7290                           prodh	equ	0xFF4
  7291                           prodl	equ	0xFF3
  7292                           intcon	equ	0xFF2
  7293                           intcon2	equ	0xFF1
  7294                           intcon3	equ	0xFF0
  7295                           postinc0	equ	0xFEE
  7296                           wreg	equ	0xFE8
  7297                           indf1	equ	0xFE7
  7298                           postdec1	equ	0xFE5
  7299                           fsr1h	equ	0xFE2
  7300                           fsr1l	equ	0xFE1
  7301                           indf2	equ	0xFDF
  7302                           postinc2	equ	0xFDE
  7303                           postdec2	equ	0xFDD
  7304                           fsr2h	equ	0xFDA
  7305                           fsr2l	equ	0xFD9
  7306                           status	equ	0xFD8
  7307                           
  7308 ;; *************** function __div_to_l_ *****************
  7309 ;; Defined at:
  7310 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  7311 ;; Parameters:    Size  Location     Type
  7312 ;;  f1              4   26[COMRAM] unsigned long 
  7313 ;;  f2              4   30[COMRAM] unsigned long 
  7314 ;; Auto vars:     Size  Location     Type
  7315 ;;  quot            4   34[COMRAM] unsigned long 
  7316 ;;  exp1            1   39[COMRAM] unsigned char 
  7317 ;;  cntr            1   38[COMRAM] unsigned char 
  7318 ;; Return value:  Size  Location     Type
  7319 ;;                  4   26[COMRAM] unsigned long 
  7320 ;; Registers used:
  7321 ;;		wreg, status,2, status,0
  7322 ;; Tracked objects:
  7323 ;;		On entry : 0/0
  7324 ;;		On exit  : 0/0
  7325 ;;		Unchanged: 0/0
  7326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7327 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7328 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7330 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7331 ;;Total ram usage:       14 bytes
  7332 ;; Hardware stack levels used:    1
  7333 ;; Hardware stack levels required when called:    2
  7334 ;; This function calls:
  7335 ;;		Nothing
  7336 ;; This function is called by:
  7337 ;;		_sprintf
  7338 ;; This function uses a non-reentrant model
  7339 ;;
  7340                           
  7341                           	psect	text20
  7342  00226C                     __ptext20:
  7343                           	opt stack 0
  7344  00226C                     __div_to_l_:
  7345                           	opt stack 26
  7346                           
  7347                           ;incstack = 0
  7348  00226C  341D               	rlcf	__div_to_l_@f1+2,w,c
  7349  00226E  341E               	rlcf	__div_to_l_@f1+3,w,c
  7350  002270  6E28               	movwf	__div_to_l_@exp1,c
  7351  002272  5028               	movf	__div_to_l_@exp1,w,c
  7352  002274  A4D8               	btfss	status,2,c
  7353  002276  D009               	goto	l642
  7354  002278  0E00               	movlw	0
  7355  00227A  6E1B               	movwf	?__div_to_l_,c
  7356  00227C  0E00               	movlw	0
  7357  00227E  6E1C               	movwf	?__div_to_l_+1,c
  7358  002280  0E00               	movlw	0
  7359  002282  6E1D               	movwf	?__div_to_l_+2,c
  7360  002284  0E00               	movlw	0
  7361  002286  6E1E               	movwf	?__div_to_l_+3,c
  7362  002288  0012               	return	
  7363  00228A                     l642:
  7364  00228A  3421               	rlcf	__div_to_l_@f2+2,w,c
  7365  00228C  3422               	rlcf	__div_to_l_@f2+3,w,c
  7366  00228E  6E27               	movwf	__div_to_l_@cntr,c
  7367  002290  5027               	movf	__div_to_l_@cntr,w,c
  7368  002292  A4D8               	btfss	status,2,c
  7369  002294  D009               	goto	l644
  7370  002296  0E00               	movlw	0
  7371  002298  6E1B               	movwf	?__div_to_l_,c
  7372  00229A  0E00               	movlw	0
  7373  00229C  6E1C               	movwf	?__div_to_l_+1,c
  7374  00229E  0E00               	movlw	0
  7375  0022A0  6E1D               	movwf	?__div_to_l_+2,c
  7376  0022A2  0E00               	movlw	0
  7377  0022A4  6E1E               	movwf	?__div_to_l_+3,c
  7378  0022A6  0012               	return	
  7379  0022A8                     l644:
  7380  0022A8  8E1D               	bsf	__div_to_l_@f1+2,7,c
  7381  0022AA  0EFF               	movlw	255
  7382  0022AC  161B               	andwf	__div_to_l_@f1,f,c
  7383  0022AE  0EFF               	movlw	255
  7384  0022B0  161C               	andwf	__div_to_l_@f1+1,f,c
  7385  0022B2  0EFF               	movlw	255
  7386  0022B4  161D               	andwf	__div_to_l_@f1+2,f,c
  7387  0022B6  0E00               	movlw	0
  7388  0022B8  161E               	andwf	__div_to_l_@f1+3,f,c
  7389  0022BA  8E21               	bsf	__div_to_l_@f2+2,7,c
  7390  0022BC  0EFF               	movlw	255
  7391  0022BE  161F               	andwf	__div_to_l_@f2,f,c
  7392  0022C0  0EFF               	movlw	255
  7393  0022C2  1620               	andwf	__div_to_l_@f2+1,f,c
  7394  0022C4  0EFF               	movlw	255
  7395  0022C6  1621               	andwf	__div_to_l_@f2+2,f,c
  7396  0022C8  0E00               	movlw	0
  7397  0022CA  1622               	andwf	__div_to_l_@f2+3,f,c
  7398  0022CC  0E00               	movlw	0
  7399  0022CE  6E23               	movwf	__div_to_l_@quot,c
  7400  0022D0  0E00               	movlw	0
  7401  0022D2  6E24               	movwf	__div_to_l_@quot+1,c
  7402  0022D4  0E00               	movlw	0
  7403  0022D6  6E25               	movwf	__div_to_l_@quot+2,c
  7404  0022D8  0E00               	movlw	0
  7405  0022DA  6E26               	movwf	__div_to_l_@quot+3,c
  7406  0022DC  0E7F               	movlw	127
  7407  0022DE  5E28               	subwf	__div_to_l_@exp1,f,c
  7408  0022E0  5027               	movf	__div_to_l_@cntr,w,c
  7409  0022E2  0FA0               	addlw	160
  7410  0022E4  5E28               	subwf	__div_to_l_@exp1,f,c
  7411  0022E6  0E20               	movlw	32
  7412  0022E8  6E27               	movwf	__div_to_l_@cntr,c
  7413  0022EA  90D8               	bcf	status,0,c
  7414  0022EC  3623               	rlcf	__div_to_l_@quot,f,c
  7415  0022EE  3624               	rlcf	__div_to_l_@quot+1,f,c
  7416  0022F0  3625               	rlcf	__div_to_l_@quot+2,f,c
  7417  0022F2  3626               	rlcf	__div_to_l_@quot+3,f,c
  7418  0022F4  501F               	movf	__div_to_l_@f2,w,c
  7419  0022F6  5C1B               	subwf	__div_to_l_@f1,w,c
  7420  0022F8  5020               	movf	__div_to_l_@f2+1,w,c
  7421  0022FA  581C               	subwfb	__div_to_l_@f1+1,w,c
  7422  0022FC  5021               	movf	__div_to_l_@f2+2,w,c
  7423  0022FE  581D               	subwfb	__div_to_l_@f1+2,w,c
  7424  002300  5022               	movf	__div_to_l_@f2+3,w,c
  7425  002302  581E               	subwfb	__div_to_l_@f1+3,w,c
  7426  002304  A0D8               	btfss	status,0,c
  7427  002306  D009               	goto	l646
  7428  002308  501F               	movf	__div_to_l_@f2,w,c
  7429  00230A  5E1B               	subwf	__div_to_l_@f1,f,c
  7430  00230C  5020               	movf	__div_to_l_@f2+1,w,c
  7431  00230E  5A1C               	subwfb	__div_to_l_@f1+1,f,c
  7432  002310  5021               	movf	__div_to_l_@f2+2,w,c
  7433  002312  5A1D               	subwfb	__div_to_l_@f1+2,f,c
  7434  002314  5022               	movf	__div_to_l_@f2+3,w,c
  7435  002316  5A1E               	subwfb	__div_to_l_@f1+3,f,c
  7436  002318  8023               	bsf	__div_to_l_@quot,0,c
  7437  00231A                     l646:
  7438  00231A  90D8               	bcf	status,0,c
  7439  00231C  361B               	rlcf	__div_to_l_@f1,f,c
  7440  00231E  361C               	rlcf	__div_to_l_@f1+1,f,c
  7441  002320  361D               	rlcf	__div_to_l_@f1+2,f,c
  7442  002322  361E               	rlcf	__div_to_l_@f1+3,f,c
  7443  002324  2E27               	decfsz	__div_to_l_@cntr,f,c
  7444  002326  D7E1               	goto	l645
  7445  002328  AE28               	btfss	__div_to_l_@exp1,7,c
  7446  00232A  D016               	goto	l648
  7447  00232C  5028               	movf	__div_to_l_@exp1,w,c
  7448  00232E  0A80               	xorlw	128
  7449  002330  0F9F               	addlw	159
  7450  002332  B0D8               	btfsc	status,0,c
  7451  002334  D009               	goto	l649
  7452  002336  0E00               	movlw	0
  7453  002338  6E1B               	movwf	?__div_to_l_,c
  7454  00233A  0E00               	movlw	0
  7455  00233C  6E1C               	movwf	?__div_to_l_+1,c
  7456  00233E  0E00               	movlw	0
  7457  002340  6E1D               	movwf	?__div_to_l_+2,c
  7458  002342  0E00               	movlw	0
  7459  002344  6E1E               	movwf	?__div_to_l_+3,c
  7460  002346  0012               	return	
  7461  002348                     l649:
  7462  002348  90D8               	bcf	status,0,c
  7463  00234A  3226               	rrcf	__div_to_l_@quot+3,f,c
  7464  00234C  3225               	rrcf	__div_to_l_@quot+2,f,c
  7465  00234E  3224               	rrcf	__div_to_l_@quot+1,f,c
  7466  002350  3223               	rrcf	__div_to_l_@quot,f,c
  7467  002352  3E28               	incfsz	__div_to_l_@exp1,f,c
  7468  002354  D7F9               	goto	l649
  7469  002356  D015               	goto	u3370
  7470  002358                     l648:
  7471  002358  0E1F               	movlw	31
  7472  00235A  6428               	cpfsgt	__div_to_l_@exp1,c
  7473  00235C  D00F               	goto	l654
  7474  00235E  0E00               	movlw	0
  7475  002360  6E1B               	movwf	?__div_to_l_,c
  7476  002362  0E00               	movlw	0
  7477  002364  6E1C               	movwf	?__div_to_l_+1,c
  7478  002366  0E00               	movlw	0
  7479  002368  6E1D               	movwf	?__div_to_l_+2,c
  7480  00236A  0E00               	movlw	0
  7481  00236C  6E1E               	movwf	?__div_to_l_+3,c
  7482  00236E  0012               	return	
  7483  002370  90D8               	bcf	status,0,c
  7484  002372  3623               	rlcf	__div_to_l_@quot,f,c
  7485  002374  3624               	rlcf	__div_to_l_@quot+1,f,c
  7486  002376  3625               	rlcf	__div_to_l_@quot+2,f,c
  7487  002378  3626               	rlcf	__div_to_l_@quot+3,f,c
  7488  00237A  0628               	decf	__div_to_l_@exp1,f,c
  7489  00237C                     l654:
  7490  00237C  5028               	movf	__div_to_l_@exp1,w,c
  7491  00237E  A4D8               	btfss	status,2,c
  7492  002380  D7F7               	goto	l655
  7493  002382                     u3370:
  7494  002382  C023  F01B         	movff	__div_to_l_@quot,?__div_to_l_
  7495  002386  C024  F01C         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7496  00238A  C025  F01D         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7497  00238E  C026  F01E         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7498  002392  0012               	return		;funcret
  7499  002394                     __end_of__div_to_l_:
  7500                           	opt stack 0
  7501                           tblptru	equ	0xFF8
  7502                           tblptrh	equ	0xFF7
  7503                           tblptrl	equ	0xFF6
  7504                           tablat	equ	0xFF5
  7505                           prodh	equ	0xFF4
  7506                           prodl	equ	0xFF3
  7507                           intcon	equ	0xFF2
  7508                           intcon2	equ	0xFF1
  7509                           intcon3	equ	0xFF0
  7510                           postinc0	equ	0xFEE
  7511                           wreg	equ	0xFE8
  7512                           indf1	equ	0xFE7
  7513                           postdec1	equ	0xFE5
  7514                           fsr1h	equ	0xFE2
  7515                           fsr1l	equ	0xFE1
  7516                           indf2	equ	0xFDF
  7517                           postinc2	equ	0xFDE
  7518                           postdec2	equ	0xFDD
  7519                           fsr2h	equ	0xFDA
  7520                           fsr2l	equ	0xFD9
  7521                           status	equ	0xFD8
  7522                           
  7523 ;; *************** function ___xxtofl *****************
  7524 ;; Defined at:
  7525 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\xxtofl.c"
  7526 ;; Parameters:    Size  Location     Type
  7527 ;;  sign            1    wreg     unsigned char 
  7528 ;;  val             4   32[COMRAM] long 
  7529 ;; Auto vars:     Size  Location     Type
  7530 ;;  sign            1   40[COMRAM] unsigned char 
  7531 ;;  arg             4   42[COMRAM] unsigned long 
  7532 ;;  exp             1   41[COMRAM] unsigned char 
  7533 ;; Return value:  Size  Location     Type
  7534 ;;                  4   32[COMRAM] unsigned char 
  7535 ;; Registers used:
  7536 ;;		wreg, status,2, status,0
  7537 ;; Tracked objects:
  7538 ;;		On entry : 0/0
  7539 ;;		On exit  : 0/0
  7540 ;;		Unchanged: 0/0
  7541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7542 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7543 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7544 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7545 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7546 ;;Total ram usage:       14 bytes
  7547 ;; Hardware stack levels used:    1
  7548 ;; Hardware stack levels required when called:    2
  7549 ;; This function calls:
  7550 ;;		Nothing
  7551 ;; This function is called by:
  7552 ;;		_operation
  7553 ;;		_read_adc_voltage
  7554 ;;		_sprintf
  7555 ;; This function uses a non-reentrant model
  7556 ;;
  7557                           
  7558                           	psect	text21
  7559  001FEA                     __ptext21:
  7560                           	opt stack 0
  7561  001FEA                     ___xxtofl:
  7562                           	opt stack 27
  7563                           
  7564                           ;incstack = 0
  7565                           ;___xxtofl@sign stored from wreg
  7566  001FEA  6E29               	movwf	___xxtofl@sign,c
  7567  001FEC  5029               	movf	___xxtofl@sign,w,c
  7568  001FEE  A4D8               	btfss	status,2,c
  7569  001FF0  AE24               	btfss	___xxtofl@val+3,7,c
  7570  001FF2  D01A               	goto	l1033
  7571  001FF4  C021  F025         	movff	___xxtofl@val,??___xxtofl
  7572  001FF8  C022  F026         	movff	___xxtofl@val+1,??___xxtofl+1
  7573  001FFC  C023  F027         	movff	___xxtofl@val+2,??___xxtofl+2
  7574  002000  C024  F028         	movff	___xxtofl@val+3,??___xxtofl+3
  7575  002004  1E25               	comf	??___xxtofl,f,c
  7576  002006  1E26               	comf	??___xxtofl+1,f,c
  7577  002008  1E27               	comf	??___xxtofl+2,f,c
  7578  00200A  1E28               	comf	??___xxtofl+3,f,c
  7579  00200C  2A25               	incf	??___xxtofl,f,c
  7580  00200E  0E00               	movlw	0
  7581  002010  2226               	addwfc	??___xxtofl+1,f,c
  7582  002012  2227               	addwfc	??___xxtofl+2,f,c
  7583  002014  2228               	addwfc	??___xxtofl+3,f,c
  7584  002016  C025  F02B         	movff	??___xxtofl,___xxtofl@arg
  7585  00201A  C026  F02C         	movff	??___xxtofl+1,___xxtofl@arg+1
  7586  00201E  C027  F02D         	movff	??___xxtofl+2,___xxtofl@arg+2
  7587  002022  C028  F02E         	movff	??___xxtofl+3,___xxtofl@arg+3
  7588  002026  D008               	goto	l1034
  7589  002028                     l1033:
  7590  002028  C021  F02B         	movff	___xxtofl@val,___xxtofl@arg
  7591  00202C  C022  F02C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  7592  002030  C023  F02D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  7593  002034  C024  F02E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  7594  002038                     l1034:
  7595  002038  5021               	movf	___xxtofl@val,w,c
  7596  00203A  1022               	iorwf	___xxtofl@val+1,w,c
  7597  00203C  1023               	iorwf	___xxtofl@val+2,w,c
  7598  00203E  1024               	iorwf	___xxtofl@val+3,w,c
  7599  002040  A4D8               	btfss	status,2,c
  7600  002042  D009               	goto	l1035
  7601  002044  0E00               	movlw	0
  7602  002046  6E21               	movwf	?___xxtofl,c
  7603  002048  0E00               	movlw	0
  7604  00204A  6E22               	movwf	?___xxtofl+1,c
  7605  00204C  0E00               	movlw	0
  7606  00204E  6E23               	movwf	?___xxtofl+2,c
  7607  002050  0E00               	movlw	0
  7608  002052  6E24               	movwf	?___xxtofl+3,c
  7609  002054  0012               	return	
  7610  002056                     l1035:
  7611  002056  0E96               	movlw	150
  7612  002058  6E2A               	movwf	___xxtofl@exp,c
  7613  00205A  D006               	goto	l1037
  7614  00205C  2A2A               	incf	___xxtofl@exp,f,c
  7615  00205E  90D8               	bcf	status,0,c
  7616  002060  322E               	rrcf	___xxtofl@arg+3,f,c
  7617  002062  322D               	rrcf	___xxtofl@arg+2,f,c
  7618  002064  322C               	rrcf	___xxtofl@arg+1,f,c
  7619  002066  322B               	rrcf	___xxtofl@arg,f,c
  7620  002068                     l1037:
  7621  002068  0E00               	movlw	0
  7622  00206A  142B               	andwf	___xxtofl@arg,w,c
  7623  00206C  6E25               	movwf	??___xxtofl& (0+255),c
  7624  00206E  0E00               	movlw	0
  7625  002070  142C               	andwf	___xxtofl@arg+1,w,c
  7626  002072  6E26               	movwf	(??___xxtofl+1)& (0+255),c
  7627  002074  0E00               	movlw	0
  7628  002076  142D               	andwf	___xxtofl@arg+2,w,c
  7629  002078  6E27               	movwf	(??___xxtofl+2)& (0+255),c
  7630  00207A  0EFE               	movlw	254
  7631  00207C  142E               	andwf	___xxtofl@arg+3,w,c
  7632  00207E  6E28               	movwf	(??___xxtofl+3)& (0+255),c
  7633  002080  5025               	movf	??___xxtofl,w,c
  7634  002082  1026               	iorwf	??___xxtofl+1,w,c
  7635  002084  1027               	iorwf	??___xxtofl+2,w,c
  7636  002086  1028               	iorwf	??___xxtofl+3,w,c
  7637  002088  B4D8               	btfsc	status,2,c
  7638  00208A  D00D               	goto	l1040
  7639  00208C  D7E7               	goto	l1038
  7640  00208E  2A2A               	incf	___xxtofl@exp,f,c
  7641  002090  0E01               	movlw	1
  7642  002092  262B               	addwf	___xxtofl@arg,f,c
  7643  002094  0E00               	movlw	0
  7644  002096  222C               	addwfc	___xxtofl@arg+1,f,c
  7645  002098  222D               	addwfc	___xxtofl@arg+2,f,c
  7646  00209A  222E               	addwfc	___xxtofl@arg+3,f,c
  7647  00209C  90D8               	bcf	status,0,c
  7648  00209E  322E               	rrcf	___xxtofl@arg+3,f,c
  7649  0020A0  322D               	rrcf	___xxtofl@arg+2,f,c
  7650  0020A2  322C               	rrcf	___xxtofl@arg+1,f,c
  7651  0020A4  322B               	rrcf	___xxtofl@arg,f,c
  7652  0020A6                     l1040:
  7653  0020A6  0E00               	movlw	0
  7654  0020A8  142B               	andwf	___xxtofl@arg,w,c
  7655  0020AA  6E25               	movwf	??___xxtofl& (0+255),c
  7656  0020AC  0E00               	movlw	0
  7657  0020AE  142C               	andwf	___xxtofl@arg+1,w,c
  7658  0020B0  6E26               	movwf	(??___xxtofl+1)& (0+255),c
  7659  0020B2  0E00               	movlw	0
  7660  0020B4  142D               	andwf	___xxtofl@arg+2,w,c
  7661  0020B6  6E27               	movwf	(??___xxtofl+2)& (0+255),c
  7662  0020B8  0EFF               	movlw	255
  7663  0020BA  142E               	andwf	___xxtofl@arg+3,w,c
  7664  0020BC  6E28               	movwf	(??___xxtofl+3)& (0+255),c
  7665  0020BE  5025               	movf	??___xxtofl,w,c
  7666  0020C0  1026               	iorwf	??___xxtofl+1,w,c
  7667  0020C2  1027               	iorwf	??___xxtofl+2,w,c
  7668  0020C4  1028               	iorwf	??___xxtofl+3,w,c
  7669  0020C6  B4D8               	btfsc	status,2,c
  7670  0020C8  D007               	goto	l1043
  7671  0020CA  D7E1               	goto	l1041
  7672  0020CC  062A               	decf	___xxtofl@exp,f,c
  7673  0020CE  90D8               	bcf	status,0,c
  7674  0020D0  362B               	rlcf	___xxtofl@arg,f,c
  7675  0020D2  362C               	rlcf	___xxtofl@arg+1,f,c
  7676  0020D4  362D               	rlcf	___xxtofl@arg+2,f,c
  7677  0020D6  362E               	rlcf	___xxtofl@arg+3,f,c
  7678  0020D8                     l1043:
  7679  0020D8  BE2D               	btfsc	___xxtofl@arg+2,7,c
  7680  0020DA  D003               	goto	u3630
  7681  0020DC  0E02               	movlw	2
  7682  0020DE  602A               	cpfslt	___xxtofl@exp,c
  7683  0020E0  D7F5               	goto	l1044
  7684  0020E2                     u3630:
  7685  0020E2  B02A               	btfsc	___xxtofl@exp,0,c
  7686  0020E4  D008               	goto	l1048
  7687  0020E6  0EFF               	movlw	255
  7688  0020E8  162B               	andwf	___xxtofl@arg,f,c
  7689  0020EA  0EFF               	movlw	255
  7690  0020EC  162C               	andwf	___xxtofl@arg+1,f,c
  7691  0020EE  0E7F               	movlw	127
  7692  0020F0  162D               	andwf	___xxtofl@arg+2,f,c
  7693  0020F2  0EFF               	movlw	255
  7694  0020F4  162E               	andwf	___xxtofl@arg+3,f,c
  7695  0020F6                     l1048:
  7696  0020F6  90D8               	bcf	status,0,c
  7697  0020F8  322A               	rrcf	___xxtofl@exp,f,c
  7698  0020FA  C02A  F025         	movff	___xxtofl@exp,??___xxtofl
  7699  0020FE  6A26               	clrf	(??___xxtofl+1)& (0+255),c
  7700  002100  6A27               	clrf	(??___xxtofl+2)& (0+255),c
  7701  002102  6A28               	clrf	(??___xxtofl+3)& (0+255),c
  7702  002104  C025  F028         	movff	??___xxtofl,??___xxtofl+3
  7703  002108  6A27               	clrf	??___xxtofl+2,c
  7704  00210A  6A26               	clrf	??___xxtofl+1,c
  7705  00210C  6A25               	clrf	??___xxtofl,c
  7706  00210E  5025               	movf	??___xxtofl,w,c
  7707  002110  122B               	iorwf	___xxtofl@arg,f,c
  7708  002112  5026               	movf	??___xxtofl+1,w,c
  7709  002114  122C               	iorwf	___xxtofl@arg+1,f,c
  7710  002116  5027               	movf	??___xxtofl+2,w,c
  7711  002118  122D               	iorwf	___xxtofl@arg+2,f,c
  7712  00211A  5028               	movf	??___xxtofl+3,w,c
  7713  00211C  122E               	iorwf	___xxtofl@arg+3,f,c
  7714  00211E  5029               	movf	___xxtofl@sign,w,c
  7715  002120  A4D8               	btfss	status,2,c
  7716  002122  AE24               	btfss	___xxtofl@val+3,7,c
  7717  002124  D001               	goto	l1049
  7718  002126  8E2E               	bsf	___xxtofl@arg+3,7,c
  7719  002128                     l1049:
  7720  002128  C02B  F021         	movff	___xxtofl@arg,?___xxtofl
  7721  00212C  C02C  F022         	movff	___xxtofl@arg+1,?___xxtofl+1
  7722  002130  C02D  F023         	movff	___xxtofl@arg+2,?___xxtofl+2
  7723  002134  C02E  F024         	movff	___xxtofl@arg+3,?___xxtofl+3
  7724  002138  0012               	return	
  7725  00213A                     __end_of___xxtofl:
  7726                           	opt stack 0
  7727                           tblptru	equ	0xFF8
  7728                           tblptrh	equ	0xFF7
  7729                           tblptrl	equ	0xFF6
  7730                           tablat	equ	0xFF5
  7731                           prodh	equ	0xFF4
  7732                           prodl	equ	0xFF3
  7733                           intcon	equ	0xFF2
  7734                           intcon2	equ	0xFF1
  7735                           intcon3	equ	0xFF0
  7736                           postinc0	equ	0xFEE
  7737                           wreg	equ	0xFE8
  7738                           indf1	equ	0xFE7
  7739                           postdec1	equ	0xFE5
  7740                           fsr1h	equ	0xFE2
  7741                           fsr1l	equ	0xFE1
  7742                           indf2	equ	0xFDF
  7743                           postinc2	equ	0xFDE
  7744                           postdec2	equ	0xFDD
  7745                           fsr2h	equ	0xFDA
  7746                           fsr2l	equ	0xFD9
  7747                           status	equ	0xFD8
  7748                           
  7749 ;; *************** function ___wmul *****************
  7750 ;; Defined at:
  7751 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;  multiplier      2   26[COMRAM] unsigned int 
  7754 ;;  multiplicand    2   28[COMRAM] unsigned int 
  7755 ;; Auto vars:     Size  Location     Type
  7756 ;;  product         2   30[COMRAM] unsigned int 
  7757 ;; Return value:  Size  Location     Type
  7758 ;;                  2   26[COMRAM] unsigned int 
  7759 ;; Registers used:
  7760 ;;		wreg, status,2, status,0, prodl, prodh
  7761 ;; Tracked objects:
  7762 ;;		On entry : 0/0
  7763 ;;		On exit  : 0/0
  7764 ;;		Unchanged: 0/0
  7765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7766 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7767 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7769 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7770 ;;Total ram usage:        6 bytes
  7771 ;; Hardware stack levels used:    1
  7772 ;; Hardware stack levels required when called:    2
  7773 ;; This function calls:
  7774 ;;		Nothing
  7775 ;; This function is called by:
  7776 ;;		_read_adc_voltage
  7777 ;;		_sprintf
  7778 ;; This function uses a non-reentrant model
  7779 ;;
  7780                           
  7781                           	psect	text22
  7782  002D80                     __ptext22:
  7783                           	opt stack 0
  7784  002D80                     ___wmul:
  7785                           	opt stack 27
  7786                           
  7787                           ;incstack = 0
  7788  002D80  501B               	movf	___wmul@multiplier,w,c
  7789  002D82  021D               	mulwf	___wmul@multiplicand,c
  7790  002D84  CFF3 F01F          	movff	prodl,___wmul@product
  7791  002D88  CFF4 F020          	movff	prodh,___wmul@product+1
  7792  002D8C  501B               	movf	___wmul@multiplier,w,c
  7793  002D8E  021E               	mulwf	___wmul@multiplicand+1,c
  7794  002D90  50F3               	movf	prodl,w,c
  7795  002D92  2620               	addwf	___wmul@product+1,f,c
  7796  002D94  501C               	movf	___wmul@multiplier+1,w,c
  7797  002D96  021D               	mulwf	___wmul@multiplicand,c
  7798  002D98  50F3               	movf	prodl,w,c
  7799  002D9A  2620               	addwf	___wmul@product+1,f,c
  7800  002D9C  C01F  F01B         	movff	___wmul@product,?___wmul
  7801  002DA0  C020  F01C         	movff	___wmul@product+1,?___wmul+1
  7802  002DA4  0012               	return	
  7803  002DA6                     __end_of___wmul:
  7804                           	opt stack 0
  7805                           tblptru	equ	0xFF8
  7806                           tblptrh	equ	0xFF7
  7807                           tblptrl	equ	0xFF6
  7808                           tablat	equ	0xFF5
  7809                           prodh	equ	0xFF4
  7810                           prodl	equ	0xFF3
  7811                           intcon	equ	0xFF2
  7812                           intcon2	equ	0xFF1
  7813                           intcon3	equ	0xFF0
  7814                           postinc0	equ	0xFEE
  7815                           wreg	equ	0xFE8
  7816                           indf1	equ	0xFE7
  7817                           postdec1	equ	0xFE5
  7818                           fsr1h	equ	0xFE2
  7819                           fsr1l	equ	0xFE1
  7820                           indf2	equ	0xFDF
  7821                           postinc2	equ	0xFDE
  7822                           postdec2	equ	0xFDD
  7823                           fsr2h	equ	0xFDA
  7824                           fsr2l	equ	0xFD9
  7825                           status	equ	0xFD8
  7826                           
  7827 ;; *************** function ___llmod *****************
  7828 ;; Defined at:
  7829 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  7830 ;; Parameters:    Size  Location     Type
  7831 ;;  dividend        4   39[COMRAM] unsigned long 
  7832 ;;  divisor         4   43[COMRAM] unsigned long 
  7833 ;; Auto vars:     Size  Location     Type
  7834 ;;  counter         1   47[COMRAM] unsigned char 
  7835 ;; Return value:  Size  Location     Type
  7836 ;;                  4   39[COMRAM] unsigned long 
  7837 ;; Registers used:
  7838 ;;		wreg, status,2, status,0
  7839 ;; Tracked objects:
  7840 ;;		On entry : 0/0
  7841 ;;		On exit  : 0/0
  7842 ;;		Unchanged: 0/0
  7843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7844 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7845 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7847 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7848 ;;Total ram usage:        9 bytes
  7849 ;; Hardware stack levels used:    1
  7850 ;; Hardware stack levels required when called:    2
  7851 ;; This function calls:
  7852 ;;		Nothing
  7853 ;; This function is called by:
  7854 ;;		_sprintf
  7855 ;; This function uses a non-reentrant model
  7856 ;;
  7857                           
  7858                           	psect	text23
  7859  0029E4                     __ptext23:
  7860                           	opt stack 0
  7861  0029E4                     ___llmod:
  7862                           	opt stack 26
  7863                           
  7864                           ;incstack = 0
  7865  0029E4  502C               	movf	___llmod@divisor,w,c
  7866  0029E6  102D               	iorwf	___llmod@divisor+1,w,c
  7867  0029E8  102E               	iorwf	___llmod@divisor+2,w,c
  7868  0029EA  102F               	iorwf	___llmod@divisor+3,w,c
  7869  0029EC  B4D8               	btfsc	status,2,c
  7870  0029EE  D024               	goto	l847
  7871  0029F0  0E01               	movlw	1
  7872  0029F2  6E30               	movwf	___llmod@counter,c
  7873  0029F4  D006               	goto	l842
  7874  0029F6  90D8               	bcf	status,0,c
  7875  0029F8  362C               	rlcf	___llmod@divisor,f,c
  7876  0029FA  362D               	rlcf	___llmod@divisor+1,f,c
  7877  0029FC  362E               	rlcf	___llmod@divisor+2,f,c
  7878  0029FE  362F               	rlcf	___llmod@divisor+3,f,c
  7879  002A00  2A30               	incf	___llmod@counter,f,c
  7880  002A02                     l842:
  7881  002A02  AE2F               	btfss	___llmod@divisor+3,7,c
  7882  002A04  D7F8               	goto	l843
  7883  002A06                     u3550:
  7884  002A06  502C               	movf	___llmod@divisor,w,c
  7885  002A08  5C28               	subwf	___llmod@dividend,w,c
  7886  002A0A  502D               	movf	___llmod@divisor+1,w,c
  7887  002A0C  5829               	subwfb	___llmod@dividend+1,w,c
  7888  002A0E  502E               	movf	___llmod@divisor+2,w,c
  7889  002A10  582A               	subwfb	___llmod@dividend+2,w,c
  7890  002A12  502F               	movf	___llmod@divisor+3,w,c
  7891  002A14  582B               	subwfb	___llmod@dividend+3,w,c
  7892  002A16  A0D8               	btfss	status,0,c
  7893  002A18  D008               	goto	l846
  7894  002A1A  502C               	movf	___llmod@divisor,w,c
  7895  002A1C  5E28               	subwf	___llmod@dividend,f,c
  7896  002A1E  502D               	movf	___llmod@divisor+1,w,c
  7897  002A20  5A29               	subwfb	___llmod@dividend+1,f,c
  7898  002A22  502E               	movf	___llmod@divisor+2,w,c
  7899  002A24  5A2A               	subwfb	___llmod@dividend+2,f,c
  7900  002A26  502F               	movf	___llmod@divisor+3,w,c
  7901  002A28  5A2B               	subwfb	___llmod@dividend+3,f,c
  7902  002A2A                     l846:
  7903  002A2A  90D8               	bcf	status,0,c
  7904  002A2C  322F               	rrcf	___llmod@divisor+3,f,c
  7905  002A2E  322E               	rrcf	___llmod@divisor+2,f,c
  7906  002A30  322D               	rrcf	___llmod@divisor+1,f,c
  7907  002A32  322C               	rrcf	___llmod@divisor,f,c
  7908  002A34  2E30               	decfsz	___llmod@counter,f,c
  7909  002A36  D7E7               	goto	u3550
  7910  002A38                     l847:
  7911  002A38  C028  F028         	movff	___llmod@dividend,?___llmod
  7912  002A3C  C029  F029         	movff	___llmod@dividend+1,?___llmod+1
  7913  002A40  C02A  F02A         	movff	___llmod@dividend+2,?___llmod+2
  7914  002A44  C02B  F02B         	movff	___llmod@dividend+3,?___llmod+3
  7915  002A48  0012               	return		;funcret
  7916  002A4A                     __end_of___llmod:
  7917                           	opt stack 0
  7918                           tblptru	equ	0xFF8
  7919                           tblptrh	equ	0xFF7
  7920                           tblptrl	equ	0xFF6
  7921                           tablat	equ	0xFF5
  7922                           prodh	equ	0xFF4
  7923                           prodl	equ	0xFF3
  7924                           intcon	equ	0xFF2
  7925                           intcon2	equ	0xFF1
  7926                           intcon3	equ	0xFF0
  7927                           postinc0	equ	0xFEE
  7928                           wreg	equ	0xFE8
  7929                           indf1	equ	0xFE7
  7930                           postdec1	equ	0xFE5
  7931                           fsr1h	equ	0xFE2
  7932                           fsr1l	equ	0xFE1
  7933                           indf2	equ	0xFDF
  7934                           postinc2	equ	0xFDE
  7935                           postdec2	equ	0xFDD
  7936                           fsr2h	equ	0xFDA
  7937                           fsr2l	equ	0xFD9
  7938                           status	equ	0xFD8
  7939                           
  7940 ;; *************** function ___lldiv *****************
  7941 ;; Defined at:
  7942 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  7943 ;; Parameters:    Size  Location     Type
  7944 ;;  dividend        4   26[COMRAM] unsigned long 
  7945 ;;  divisor         4   30[COMRAM] unsigned long 
  7946 ;; Auto vars:     Size  Location     Type
  7947 ;;  quotient        4   34[COMRAM] unsigned long 
  7948 ;;  counter         1   38[COMRAM] unsigned char 
  7949 ;; Return value:  Size  Location     Type
  7950 ;;                  4   26[COMRAM] unsigned long 
  7951 ;; Registers used:
  7952 ;;		wreg, status,2, status,0
  7953 ;; Tracked objects:
  7954 ;;		On entry : 0/0
  7955 ;;		On exit  : 0/0
  7956 ;;		Unchanged: 0/0
  7957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7958 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7959 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7961 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7962 ;;Total ram usage:       13 bytes
  7963 ;; Hardware stack levels used:    1
  7964 ;; Hardware stack levels required when called:    2
  7965 ;; This function calls:
  7966 ;;		Nothing
  7967 ;; This function is called by:
  7968 ;;		_sprintf
  7969 ;; This function uses a non-reentrant model
  7970 ;;
  7971                           
  7972                           	psect	text24
  7973  002882                     __ptext24:
  7974                           	opt stack 0
  7975  002882                     ___lldiv:
  7976                           	opt stack 26
  7977                           
  7978                           ;incstack = 0
  7979  002882  0E00               	movlw	0
  7980  002884  6E23               	movwf	___lldiv@quotient,c
  7981  002886  0E00               	movlw	0
  7982  002888  6E24               	movwf	___lldiv@quotient+1,c
  7983  00288A  0E00               	movlw	0
  7984  00288C  6E25               	movwf	___lldiv@quotient+2,c
  7985  00288E  0E00               	movlw	0
  7986  002890  6E26               	movwf	___lldiv@quotient+3,c
  7987  002892  501F               	movf	___lldiv@divisor,w,c
  7988  002894  1020               	iorwf	___lldiv@divisor+1,w,c
  7989  002896  1021               	iorwf	___lldiv@divisor+2,w,c
  7990  002898  1022               	iorwf	___lldiv@divisor+3,w,c
  7991  00289A  B4D8               	btfsc	status,2,c
  7992  00289C  D02A               	goto	l837
  7993  00289E  0E01               	movlw	1
  7994  0028A0  6E27               	movwf	___lldiv@counter,c
  7995  0028A2  D006               	goto	l832
  7996  0028A4  90D8               	bcf	status,0,c
  7997  0028A6  361F               	rlcf	___lldiv@divisor,f,c
  7998  0028A8  3620               	rlcf	___lldiv@divisor+1,f,c
  7999  0028AA  3621               	rlcf	___lldiv@divisor+2,f,c
  8000  0028AC  3622               	rlcf	___lldiv@divisor+3,f,c
  8001  0028AE  2A27               	incf	___lldiv@counter,f,c
  8002  0028B0                     l832:
  8003  0028B0  AE22               	btfss	___lldiv@divisor+3,7,c
  8004  0028B2  D7F8               	goto	l833
  8005  0028B4                     u3520:
  8006  0028B4  90D8               	bcf	status,0,c
  8007  0028B6  3623               	rlcf	___lldiv@quotient,f,c
  8008  0028B8  3624               	rlcf	___lldiv@quotient+1,f,c
  8009  0028BA  3625               	rlcf	___lldiv@quotient+2,f,c
  8010  0028BC  3626               	rlcf	___lldiv@quotient+3,f,c
  8011  0028BE  501F               	movf	___lldiv@divisor,w,c
  8012  0028C0  5C1B               	subwf	___lldiv@dividend,w,c
  8013  0028C2  5020               	movf	___lldiv@divisor+1,w,c
  8014  0028C4  581C               	subwfb	___lldiv@dividend+1,w,c
  8015  0028C6  5021               	movf	___lldiv@divisor+2,w,c
  8016  0028C8  581D               	subwfb	___lldiv@dividend+2,w,c
  8017  0028CA  5022               	movf	___lldiv@divisor+3,w,c
  8018  0028CC  581E               	subwfb	___lldiv@dividend+3,w,c
  8019  0028CE  A0D8               	btfss	status,0,c
  8020  0028D0  D009               	goto	l836
  8021  0028D2  501F               	movf	___lldiv@divisor,w,c
  8022  0028D4  5E1B               	subwf	___lldiv@dividend,f,c
  8023  0028D6  5020               	movf	___lldiv@divisor+1,w,c
  8024  0028D8  5A1C               	subwfb	___lldiv@dividend+1,f,c
  8025  0028DA  5021               	movf	___lldiv@divisor+2,w,c
  8026  0028DC  5A1D               	subwfb	___lldiv@dividend+2,f,c
  8027  0028DE  5022               	movf	___lldiv@divisor+3,w,c
  8028  0028E0  5A1E               	subwfb	___lldiv@dividend+3,f,c
  8029  0028E2  8023               	bsf	___lldiv@quotient,0,c
  8030  0028E4                     l836:
  8031  0028E4  90D8               	bcf	status,0,c
  8032  0028E6  3222               	rrcf	___lldiv@divisor+3,f,c
  8033  0028E8  3221               	rrcf	___lldiv@divisor+2,f,c
  8034  0028EA  3220               	rrcf	___lldiv@divisor+1,f,c
  8035  0028EC  321F               	rrcf	___lldiv@divisor,f,c
  8036  0028EE  2E27               	decfsz	___lldiv@counter,f,c
  8037  0028F0  D7E1               	goto	u3520
  8038  0028F2                     l837:
  8039  0028F2  C023  F01B         	movff	___lldiv@quotient,?___lldiv
  8040  0028F6  C024  F01C         	movff	___lldiv@quotient+1,?___lldiv+1
  8041  0028FA  C025  F01D         	movff	___lldiv@quotient+2,?___lldiv+2
  8042  0028FE  C026  F01E         	movff	___lldiv@quotient+3,?___lldiv+3
  8043  002902  0012               	return		;funcret
  8044  002904                     __end_of___lldiv:
  8045                           	opt stack 0
  8046                           tblptru	equ	0xFF8
  8047                           tblptrh	equ	0xFF7
  8048                           tblptrl	equ	0xFF6
  8049                           tablat	equ	0xFF5
  8050                           prodh	equ	0xFF4
  8051                           prodl	equ	0xFF3
  8052                           intcon	equ	0xFF2
  8053                           intcon2	equ	0xFF1
  8054                           intcon3	equ	0xFF0
  8055                           postinc0	equ	0xFEE
  8056                           wreg	equ	0xFE8
  8057                           indf1	equ	0xFE7
  8058                           postdec1	equ	0xFE5
  8059                           fsr1h	equ	0xFE2
  8060                           fsr1l	equ	0xFE1
  8061                           indf2	equ	0xFDF
  8062                           postinc2	equ	0xFDE
  8063                           postdec2	equ	0xFDD
  8064                           fsr2h	equ	0xFDA
  8065                           fsr2l	equ	0xFD9
  8066                           status	equ	0xFD8
  8067                           
  8068 ;; *************** function ___fltol *****************
  8069 ;; Defined at:
  8070 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fltol.c"
  8071 ;; Parameters:    Size  Location     Type
  8072 ;;  f1              4   18[BANK0 ] unsigned long 
  8073 ;; Auto vars:     Size  Location     Type
  8074 ;;  exp1            1   27[BANK0 ] unsigned char 
  8075 ;;  sign1           1   26[BANK0 ] unsigned char 
  8076 ;; Return value:  Size  Location     Type
  8077 ;;                  4   18[BANK0 ] long 
  8078 ;; Registers used:
  8079 ;;		wreg, status,2, status,0
  8080 ;; Tracked objects:
  8081 ;;		On entry : 0/0
  8082 ;;		On exit  : 0/0
  8083 ;;		Unchanged: 0/0
  8084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8085 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8086 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8087 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8088 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8089 ;;Total ram usage:       10 bytes
  8090 ;; Hardware stack levels used:    1
  8091 ;; Hardware stack levels required when called:    2
  8092 ;; This function calls:
  8093 ;;		Nothing
  8094 ;; This function is called by:
  8095 ;;		_operation
  8096 ;;		_sprintf
  8097 ;;		_set_pwm1_percent
  8098 ;;		_set_pwm1_voltage
  8099 ;;		_set_pwm1_general
  8100 ;; This function uses a non-reentrant model
  8101 ;;
  8102                           
  8103                           	psect	text25
  8104  00269E                     __ptext25:
  8105                           	opt stack 0
  8106  00269E                     ___fltol:
  8107                           	opt stack 27
  8108                           
  8109                           ;incstack = 0
  8110  00269E  0100               	movlb	0	; () banked
  8111  0026A0  3594               	rlcf	(___fltol@f1+2)& (0+255),w,b
  8112  0026A2  3595               	rlcf	(___fltol@f1+3)& (0+255),w,b
  8113  0026A4  6F9B               	movwf	___fltol@exp1& (0+255),b
  8114  0026A6  519B               	movf	___fltol@exp1& (0+255),w,b
  8115  0026A8  A4D8               	btfss	status,2,c
  8116  0026AA  D009               	goto	l689
  8117                           
  8118                           ; BSR set to: 0
  8119  0026AC  0E00               	movlw	0
  8120  0026AE  6F92               	movwf	?___fltol& (0+255),b
  8121  0026B0  0E00               	movlw	0
  8122  0026B2  6F93               	movwf	(?___fltol+1)& (0+255),b
  8123  0026B4  0E00               	movlw	0
  8124  0026B6  6F94               	movwf	(?___fltol+2)& (0+255),b
  8125  0026B8  0E00               	movlw	0
  8126  0026BA  6F95               	movwf	(?___fltol+3)& (0+255),b
  8127                           
  8128                           ; BSR set to: 0
  8129  0026BC  0012               	return	
  8130  0026BE                     l689:
  8131                           
  8132                           ; BSR set to: 0
  8133                           
  8134                           ; BSR set to: 0
  8135  0026BE  C092  F096         	movff	___fltol@f1,??___fltol
  8136  0026C2  C093  F097         	movff	___fltol@f1+1,??___fltol+1
  8137  0026C6  C094  F098         	movff	___fltol@f1+2,??___fltol+2
  8138  0026CA  C095  F099         	movff	___fltol@f1+3,??___fltol+3
  8139  0026CE  0E20               	movlw	32
  8140  0026D0  D005               	goto	u3450
  8141  0026D2                     u3455:
  8142  0026D2  90D8               	bcf	status,0,c
  8143  0026D4  3399               	rrcf	(??___fltol+3)& (0+255),f,b
  8144  0026D6  3398               	rrcf	(??___fltol+2)& (0+255),f,b
  8145  0026D8  3397               	rrcf	(??___fltol+1)& (0+255),f,b
  8146  0026DA  3396               	rrcf	??___fltol& (0+255),f,b
  8147  0026DC                     u3450:
  8148  0026DC  2EE8               	decfsz	wreg,f,c
  8149  0026DE  D7F9               	goto	u3455
  8150  0026E0  5196               	movf	??___fltol& (0+255),w,b
  8151  0026E2  6F9A               	movwf	___fltol@sign1& (0+255),b
  8152                           
  8153                           ; BSR set to: 0
  8154  0026E4  8F94               	bsf	(___fltol@f1+2)& (0+255),7,b
  8155                           
  8156                           ; BSR set to: 0
  8157  0026E6  0EFF               	movlw	255
  8158  0026E8  1792               	andwf	___fltol@f1& (0+255),f,b
  8159  0026EA  0EFF               	movlw	255
  8160  0026EC  1793               	andwf	(___fltol@f1+1)& (0+255),f,b
  8161  0026EE  0EFF               	movlw	255
  8162  0026F0  1794               	andwf	(___fltol@f1+2)& (0+255),f,b
  8163  0026F2  0E00               	movlw	0
  8164  0026F4  1795               	andwf	(___fltol@f1+3)& (0+255),f,b
  8165                           
  8166                           ; BSR set to: 0
  8167  0026F6  0E96               	movlw	150
  8168  0026F8  5F9B               	subwf	___fltol@exp1& (0+255),f,b
  8169                           
  8170                           ; BSR set to: 0
  8171  0026FA  AF9B               	btfss	___fltol@exp1& (0+255),7,b
  8172  0026FC  D016               	goto	l691
  8173                           
  8174                           ; BSR set to: 0
  8175  0026FE  519B               	movf	___fltol@exp1& (0+255),w,b
  8176  002700  0A80               	xorlw	128
  8177  002702  0F97               	addlw	151
  8178  002704  B0D8               	btfsc	status,0,c
  8179  002706  D009               	goto	l692
  8180                           
  8181                           ; BSR set to: 0
  8182  002708  0E00               	movlw	0
  8183  00270A  6F92               	movwf	?___fltol& (0+255),b
  8184  00270C  0E00               	movlw	0
  8185  00270E  6F93               	movwf	(?___fltol+1)& (0+255),b
  8186  002710  0E00               	movlw	0
  8187  002712  6F94               	movwf	(?___fltol+2)& (0+255),b
  8188  002714  0E00               	movlw	0
  8189  002716  6F95               	movwf	(?___fltol+3)& (0+255),b
  8190                           
  8191                           ; BSR set to: 0
  8192  002718  0012               	return	
  8193  00271A                     l692:
  8194                           
  8195                           ; BSR set to: 0
  8196                           
  8197                           ; BSR set to: 0
  8198                           
  8199                           ; BSR set to: 0
  8200  00271A  90D8               	bcf	status,0,c
  8201  00271C  3395               	rrcf	(___fltol@f1+3)& (0+255),f,b
  8202  00271E  3394               	rrcf	(___fltol@f1+2)& (0+255),f,b
  8203  002720  3393               	rrcf	(___fltol@f1+1)& (0+255),f,b
  8204  002722  3392               	rrcf	___fltol@f1& (0+255),f,b
  8205                           
  8206                           ; BSR set to: 0
  8207  002724  3F9B               	incfsz	___fltol@exp1& (0+255),f,b
  8208  002726  D7F9               	goto	l692
  8209                           
  8210                           ; BSR set to: 0
  8211  002728  D015               	goto	u3490
  8212  00272A                     l691:
  8213                           
  8214                           ; BSR set to: 0
  8215                           
  8216                           ; BSR set to: 0
  8217  00272A  0E1F               	movlw	31
  8218  00272C  659B               	cpfsgt	___fltol@exp1& (0+255),b
  8219  00272E  D00F               	goto	l697
  8220                           
  8221                           ; BSR set to: 0
  8222  002730  0E00               	movlw	0
  8223  002732  6F92               	movwf	?___fltol& (0+255),b
  8224  002734  0E00               	movlw	0
  8225  002736  6F93               	movwf	(?___fltol+1)& (0+255),b
  8226  002738  0E00               	movlw	0
  8227  00273A  6F94               	movwf	(?___fltol+2)& (0+255),b
  8228  00273C  0E00               	movlw	0
  8229  00273E  6F95               	movwf	(?___fltol+3)& (0+255),b
  8230                           
  8231                           ; BSR set to: 0
  8232  002740  0012               	return	
  8233  002742                     
  8234                           ; BSR set to: 0
  8235                           
  8236                           ; BSR set to: 0
  8237  002742  90D8               	bcf	status,0,c
  8238  002744  3792               	rlcf	___fltol@f1& (0+255),f,b
  8239  002746  3793               	rlcf	(___fltol@f1+1)& (0+255),f,b
  8240  002748  3794               	rlcf	(___fltol@f1+2)& (0+255),f,b
  8241  00274A  3795               	rlcf	(___fltol@f1+3)& (0+255),f,b
  8242  00274C  079B               	decf	___fltol@exp1& (0+255),f,b
  8243  00274E                     l697:
  8244                           
  8245                           ; BSR set to: 0
  8246                           
  8247                           ; BSR set to: 0
  8248  00274E  519B               	movf	___fltol@exp1& (0+255),w,b
  8249  002750  A4D8               	btfss	status,2,c
  8250  002752  D7F7               	goto	l698
  8251  002754                     u3490:
  8252                           
  8253                           ; BSR set to: 0
  8254                           
  8255                           ; BSR set to: 0
  8256                           
  8257                           ; BSR set to: 0
  8258  002754  519A               	movf	___fltol@sign1& (0+255),w,b
  8259  002756  B4D8               	btfsc	status,2,c
  8260  002758  D008               	goto	l700
  8261                           
  8262                           ; BSR set to: 0
  8263  00275A  1F95               	comf	(___fltol@f1+3)& (0+255),f,b
  8264  00275C  1F94               	comf	(___fltol@f1+2)& (0+255),f,b
  8265  00275E  1F93               	comf	(___fltol@f1+1)& (0+255),f,b
  8266  002760  6D92               	negf	___fltol@f1& (0+255),b
  8267  002762  0E00               	movlw	0
  8268  002764  2393               	addwfc	(___fltol@f1+1)& (0+255),f,b
  8269  002766  2394               	addwfc	(___fltol@f1+2)& (0+255),f,b
  8270  002768  2395               	addwfc	(___fltol@f1+3)& (0+255),f,b
  8271  00276A                     l700:
  8272                           
  8273                           ; BSR set to: 0
  8274                           
  8275                           ; BSR set to: 0
  8276  00276A  C092  F092         	movff	___fltol@f1,?___fltol
  8277  00276E  C093  F093         	movff	___fltol@f1+1,?___fltol+1
  8278  002772  C094  F094         	movff	___fltol@f1+2,?___fltol+2
  8279  002776  C095  F095         	movff	___fltol@f1+3,?___fltol+3
  8280  00277A  0012               	return	
  8281  00277C                     __end_of___fltol:
  8282                           	opt stack 0
  8283                           tblptru	equ	0xFF8
  8284                           tblptrh	equ	0xFF7
  8285                           tblptrl	equ	0xFF6
  8286                           tablat	equ	0xFF5
  8287                           prodh	equ	0xFF4
  8288                           prodl	equ	0xFF3
  8289                           intcon	equ	0xFF2
  8290                           intcon2	equ	0xFF1
  8291                           intcon3	equ	0xFF0
  8292                           postinc0	equ	0xFEE
  8293                           wreg	equ	0xFE8
  8294                           indf1	equ	0xFE7
  8295                           postdec1	equ	0xFE5
  8296                           fsr1h	equ	0xFE2
  8297                           fsr1l	equ	0xFE1
  8298                           indf2	equ	0xFDF
  8299                           postinc2	equ	0xFDE
  8300                           postdec2	equ	0xFDD
  8301                           fsr2h	equ	0xFDA
  8302                           fsr2l	equ	0xFD9
  8303                           status	equ	0xFD8
  8304                           
  8305 ;; *************** function ___flsub *****************
  8306 ;; Defined at:
  8307 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
  8308 ;; Parameters:    Size  Location     Type
  8309 ;;  b               4   42[BANK0 ] long 
  8310 ;;  a               4   46[BANK0 ] long 
  8311 ;; Auto vars:     Size  Location     Type
  8312 ;;		None
  8313 ;; Return value:  Size  Location     Type
  8314 ;;                  4   42[BANK0 ] long 
  8315 ;; Registers used:
  8316 ;;		wreg, status,2, status,0, cstack
  8317 ;; Tracked objects:
  8318 ;;		On entry : 0/0
  8319 ;;		On exit  : 0/0
  8320 ;;		Unchanged: 0/0
  8321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8322 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8325 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8326 ;;Total ram usage:        8 bytes
  8327 ;; Hardware stack levels used:    1
  8328 ;; Hardware stack levels required when called:    3
  8329 ;; This function calls:
  8330 ;;		___fladd
  8331 ;; This function is called by:
  8332 ;;		_sprintf
  8333 ;; This function uses a non-reentrant model
  8334 ;;
  8335                           
  8336                           	psect	text26
  8337  002BAA                     __ptext26:
  8338                           	opt stack 0
  8339  002BAA                     ___flsub:
  8340                           	opt stack 25
  8341                           
  8342                           ; BSR set to: 0
  8343                           ;incstack = 0
  8344  002BAA  0E00               	movlw	0
  8345  002BAC  0100               	movlb	0	; () banked
  8346  002BAE  1BAE               	xorwf	___flsub@a& (0+255),f,b
  8347  002BB0  0E00               	movlw	0
  8348  002BB2  1BAF               	xorwf	(___flsub@a+1)& (0+255),f,b
  8349  002BB4  0E00               	movlw	0
  8350  002BB6  1BB0               	xorwf	(___flsub@a+2)& (0+255),f,b
  8351  002BB8  0E80               	movlw	128
  8352  002BBA  1BB1               	xorwf	(___flsub@a+3)& (0+255),f,b
  8353                           
  8354                           ; BSR set to: 0
  8355  002BBC  C0AA  F096         	movff	___flsub@b,___fladd@b
  8356  002BC0  C0AB  F097         	movff	___flsub@b+1,___fladd@b+1
  8357  002BC4  C0AC  F098         	movff	___flsub@b+2,___fladd@b+2
  8358  002BC8  C0AD  F099         	movff	___flsub@b+3,___fladd@b+3
  8359  002BCC  C0AE  F09A         	movff	___flsub@a,___fladd@a
  8360  002BD0  C0AF  F09B         	movff	___flsub@a+1,___fladd@a+1
  8361  002BD4  C0B0  F09C         	movff	___flsub@a+2,___fladd@a+2
  8362  002BD8  C0B1  F09D         	movff	___flsub@a+3,___fladd@a+3
  8363  002BDC  EC2D  F009         	call	___fladd	;wreg free
  8364  002BE0  C096  F0AA         	movff	?___fladd,?___flsub
  8365  002BE4  C097  F0AB         	movff	?___fladd+1,?___flsub+1
  8366  002BE8  C098  F0AC         	movff	?___fladd+2,?___flsub+2
  8367  002BEC  C099  F0AD         	movff	?___fladd+3,?___flsub+3
  8368  002BF0  0012               	return	
  8369  002BF2                     __end_of___flsub:
  8370                           	opt stack 0
  8371                           tblptru	equ	0xFF8
  8372                           tblptrh	equ	0xFF7
  8373                           tblptrl	equ	0xFF6
  8374                           tablat	equ	0xFF5
  8375                           prodh	equ	0xFF4
  8376                           prodl	equ	0xFF3
  8377                           intcon	equ	0xFF2
  8378                           intcon2	equ	0xFF1
  8379                           intcon3	equ	0xFF0
  8380                           postinc0	equ	0xFEE
  8381                           wreg	equ	0xFE8
  8382                           indf1	equ	0xFE7
  8383                           postdec1	equ	0xFE5
  8384                           fsr1h	equ	0xFE2
  8385                           fsr1l	equ	0xFE1
  8386                           indf2	equ	0xFDF
  8387                           postinc2	equ	0xFDE
  8388                           postdec2	equ	0xFDD
  8389                           fsr2h	equ	0xFDA
  8390                           fsr2l	equ	0xFD9
  8391                           status	equ	0xFD8
  8392                           
  8393 ;; *************** function ___fladd *****************
  8394 ;; Defined at:
  8395 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
  8396 ;; Parameters:    Size  Location     Type
  8397 ;;  b               4   22[BANK0 ] long 
  8398 ;;  a               4   26[BANK0 ] long 
  8399 ;; Auto vars:     Size  Location     Type
  8400 ;;  grs             1   41[BANK0 ] unsigned char 
  8401 ;;  bexp            1   40[BANK0 ] unsigned char 
  8402 ;;  aexp            1   39[BANK0 ] unsigned char 
  8403 ;;  signs           1   38[BANK0 ] unsigned char 
  8404 ;; Return value:  Size  Location     Type
  8405 ;;                  4   22[BANK0 ] unsigned char 
  8406 ;; Registers used:
  8407 ;;		wreg, status,2, status,0
  8408 ;; Tracked objects:
  8409 ;;		On entry : 0/0
  8410 ;;		On exit  : 0/0
  8411 ;;		Unchanged: 0/0
  8412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8413 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8414 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8416 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;Total ram usage:       20 bytes
  8418 ;; Hardware stack levels used:    1
  8419 ;; Hardware stack levels required when called:    2
  8420 ;; This function calls:
  8421 ;;		Nothing
  8422 ;; This function is called by:
  8423 ;;		_operation
  8424 ;;		_sprintf
  8425 ;;		___flsub
  8426 ;;		_set_pwm1_percent
  8427 ;;		_set_pwm1_voltage
  8428 ;;		_set_pwm1_general
  8429 ;; This function uses a non-reentrant model
  8430 ;;
  8431                           
  8432                           	psect	text27
  8433  00125A                     __ptext27:
  8434                           	opt stack 0
  8435  00125A                     ___fladd:
  8436                           	opt stack 27
  8437                           
  8438                           ;incstack = 0
  8439  00125A  0100               	movlb	0	; () banked
  8440  00125C  5199               	movf	(___fladd@b+3)& (0+255),w,b
  8441  00125E  0B80               	andlw	128
  8442  001260  6FA6               	movwf	___fladd@signs& (0+255),b
  8443  001262  5199               	movf	(___fladd@b+3)& (0+255),w,b
  8444  001264  2599               	addwf	(___fladd@b+3)& (0+255),w,b
  8445  001266  6FA8               	movwf	___fladd@bexp& (0+255),b
  8446                           
  8447                           ; BSR set to: 0
  8448  001268  BF98               	btfsc	(___fladd@b+2)& (0+255),7,b
  8449                           
  8450                           ; BSR set to: 0
  8451  00126A  81A8               	bsf	___fladd@bexp& (0+255),0,b
  8452                           
  8453                           ; BSR set to: 0
  8454                           
  8455                           ; BSR set to: 0
  8456  00126C  51A8               	movf	___fladd@bexp& (0+255),w,b
  8457  00126E  B4D8               	btfsc	status,2,c
  8458  001270  D00D               	goto	l914
  8459                           
  8460                           ; BSR set to: 0
  8461  001272  29A8               	incf	___fladd@bexp& (0+255),w,b
  8462  001274  A4D8               	btfss	status,2,c
  8463  001276  D008               	goto	l915
  8464                           
  8465                           ; BSR set to: 0
  8466  001278  0E00               	movlw	0
  8467  00127A  6F96               	movwf	___fladd@b& (0+255),b
  8468  00127C  0E00               	movlw	0
  8469  00127E  6F97               	movwf	(___fladd@b+1)& (0+255),b
  8470  001280  0E00               	movlw	0
  8471  001282  6F98               	movwf	(___fladd@b+2)& (0+255),b
  8472  001284  0E00               	movlw	0
  8473  001286  6F99               	movwf	(___fladd@b+3)& (0+255),b
  8474  001288                     l915:
  8475                           
  8476                           ; BSR set to: 0
  8477                           
  8478                           ; BSR set to: 0
  8479  001288  8F98               	bsf	(___fladd@b+2)& (0+255),7,b
  8480  00128A  D006               	goto	L9
  8481  00128C                     l914:
  8482                           
  8483                           ; BSR set to: 0
  8484                           
  8485                           ; BSR set to: 0
  8486  00128C  0E00               	movlw	0
  8487  00128E  6F96               	movwf	___fladd@b& (0+255),b
  8488  001290  0E00               	movlw	0
  8489  001292  6F97               	movwf	(___fladd@b+1)& (0+255),b
  8490  001294  0E00               	movlw	0
  8491  001296  6F98               	movwf	(___fladd@b+2)& (0+255),b
  8492  001298                     L9:
  8493  001298  0E00               	movlw	0
  8494  00129A  6F99               	movwf	(___fladd@b+3)& (0+255),b
  8495                           
  8496                           ; BSR set to: 0
  8497                           
  8498                           ; BSR set to: 0
  8499  00129C  519D               	movf	(___fladd@a+3)& (0+255),w,b
  8500  00129E  0B80               	andlw	128
  8501  0012A0  6FA7               	movwf	___fladd@aexp& (0+255),b
  8502                           
  8503                           ; BSR set to: 0
  8504  0012A2  51A6               	movf	___fladd@signs& (0+255),w,b
  8505  0012A4  19A7               	xorwf	___fladd@aexp& (0+255),w,b
  8506  0012A6  A4D8               	btfss	status,2,c
  8507                           
  8508                           ; BSR set to: 0
  8509  0012A8  8DA6               	bsf	___fladd@signs& (0+255),6,b
  8510                           
  8511                           ; BSR set to: 0
  8512                           
  8513                           ; BSR set to: 0
  8514  0012AA  519D               	movf	(___fladd@a+3)& (0+255),w,b
  8515  0012AC  259D               	addwf	(___fladd@a+3)& (0+255),w,b
  8516  0012AE  6FA7               	movwf	___fladd@aexp& (0+255),b
  8517                           
  8518                           ; BSR set to: 0
  8519  0012B0  BF9C               	btfsc	(___fladd@a+2)& (0+255),7,b
  8520                           
  8521                           ; BSR set to: 0
  8522  0012B2  81A7               	bsf	___fladd@aexp& (0+255),0,b
  8523                           
  8524                           ; BSR set to: 0
  8525                           
  8526                           ; BSR set to: 0
  8527  0012B4  51A7               	movf	___fladd@aexp& (0+255),w,b
  8528  0012B6  B4D8               	btfsc	status,2,c
  8529  0012B8  D00D               	goto	l919
  8530                           
  8531                           ; BSR set to: 0
  8532  0012BA  29A7               	incf	___fladd@aexp& (0+255),w,b
  8533  0012BC  A4D8               	btfss	status,2,c
  8534  0012BE  D008               	goto	l920
  8535                           
  8536                           ; BSR set to: 0
  8537  0012C0  0E00               	movlw	0
  8538  0012C2  6F9A               	movwf	___fladd@a& (0+255),b
  8539  0012C4  0E00               	movlw	0
  8540  0012C6  6F9B               	movwf	(___fladd@a+1)& (0+255),b
  8541  0012C8  0E00               	movlw	0
  8542  0012CA  6F9C               	movwf	(___fladd@a+2)& (0+255),b
  8543  0012CC  0E00               	movlw	0
  8544  0012CE  6F9D               	movwf	(___fladd@a+3)& (0+255),b
  8545  0012D0                     l920:
  8546                           
  8547                           ; BSR set to: 0
  8548                           
  8549                           ; BSR set to: 0
  8550  0012D0  8F9C               	bsf	(___fladd@a+2)& (0+255),7,b
  8551  0012D2  D006               	goto	L10
  8552  0012D4                     l919:
  8553                           
  8554                           ; BSR set to: 0
  8555                           
  8556                           ; BSR set to: 0
  8557  0012D4  0E00               	movlw	0
  8558  0012D6  6F9A               	movwf	___fladd@a& (0+255),b
  8559  0012D8  0E00               	movlw	0
  8560  0012DA  6F9B               	movwf	(___fladd@a+1)& (0+255),b
  8561  0012DC  0E00               	movlw	0
  8562  0012DE  6F9C               	movwf	(___fladd@a+2)& (0+255),b
  8563  0012E0                     L10:
  8564  0012E0  0E00               	movlw	0
  8565  0012E2  6F9D               	movwf	(___fladd@a+3)& (0+255),b
  8566                           
  8567                           ; BSR set to: 0
  8568                           
  8569                           ; BSR set to: 0
  8570  0012E4  51A8               	movf	___fladd@bexp& (0+255),w,b
  8571  0012E6  5DA7               	subwf	___fladd@aexp& (0+255),w,b
  8572  0012E8  B0D8               	btfsc	status,0,c
  8573  0012EA  D022               	goto	l922
  8574                           
  8575                           ; BSR set to: 0
  8576  0012EC  ADA6               	btfss	___fladd@signs& (0+255),6,b
  8577  0012EE  D002               	goto	l923
  8578                           
  8579                           ; BSR set to: 0
  8580  0012F0  0E80               	movlw	128
  8581  0012F2  1BA6               	xorwf	___fladd@signs& (0+255),f,b
  8582  0012F4                     l923:
  8583                           
  8584                           ; BSR set to: 0
  8585                           
  8586                           ; BSR set to: 0
  8587  0012F4  C0A8  F0A9         	movff	___fladd@bexp,___fladd@grs
  8588                           
  8589                           ; BSR set to: 0
  8590  0012F8  C0A7  F0A8         	movff	___fladd@aexp,___fladd@bexp
  8591                           
  8592                           ; BSR set to: 0
  8593  0012FC  C0A9  F0A7         	movff	___fladd@grs,___fladd@aexp
  8594                           
  8595                           ; BSR set to: 0
  8596  001300  C096  F0A9         	movff	___fladd@b,___fladd@grs
  8597                           
  8598                           ; BSR set to: 0
  8599  001304  C09A  F096         	movff	___fladd@a,___fladd@b
  8600                           
  8601                           ; BSR set to: 0
  8602  001308  C0A9  F09A         	movff	___fladd@grs,___fladd@a
  8603                           
  8604                           ; BSR set to: 0
  8605  00130C  C097  F0A9         	movff	___fladd@b+1,___fladd@grs
  8606                           
  8607                           ; BSR set to: 0
  8608  001310  C09B  F097         	movff	___fladd@a+1,___fladd@b+1
  8609                           
  8610                           ; BSR set to: 0
  8611  001314  C0A9  F09B         	movff	___fladd@grs,___fladd@a+1
  8612                           
  8613                           ; BSR set to: 0
  8614  001318  C098  F0A9         	movff	___fladd@b+2,___fladd@grs
  8615                           
  8616                           ; BSR set to: 0
  8617  00131C  C09C  F098         	movff	___fladd@a+2,___fladd@b+2
  8618                           
  8619                           ; BSR set to: 0
  8620  001320  C0A9  F09C         	movff	___fladd@grs,___fladd@a+2
  8621                           
  8622                           ; BSR set to: 0
  8623  001324  C099  F0A9         	movff	___fladd@b+3,___fladd@grs
  8624                           
  8625                           ; BSR set to: 0
  8626  001328  C09D  F099         	movff	___fladd@a+3,___fladd@b+3
  8627                           
  8628                           ; BSR set to: 0
  8629  00132C  C0A9  F09D         	movff	___fladd@grs,___fladd@a+3
  8630  001330                     l922:
  8631                           
  8632                           ; BSR set to: 0
  8633                           
  8634                           ; BSR set to: 0
  8635  001330  0E00               	movlw	0
  8636  001332  6FA9               	movwf	___fladd@grs& (0+255),b
  8637                           
  8638                           ; BSR set to: 0
  8639  001334  51A8               	movf	___fladd@bexp& (0+255),w,b
  8640  001336  6F9E               	movwf	??___fladd& (0+255),b
  8641  001338  6B9F               	clrf	(??___fladd+1)& (0+255),b
  8642  00133A  1F9E               	comf	??___fladd& (0+255),f,b
  8643  00133C  1F9F               	comf	(??___fladd+1)& (0+255),f,b
  8644  00133E  4B9E               	infsnz	??___fladd& (0+255),f,b
  8645  001340  2B9F               	incf	(??___fladd+1)& (0+255),f,b
  8646  001342  51A7               	movf	___fladd@aexp& (0+255),w,b
  8647  001344  6FA0               	movwf	(??___fladd+2)& (0+255),b
  8648  001346  6BA1               	clrf	(??___fladd+3)& (0+255),b
  8649  001348  519E               	movf	??___fladd& (0+255),w,b
  8650  00134A  27A0               	addwf	(??___fladd+2)& (0+255),f,b
  8651  00134C  519F               	movf	(??___fladd+1)& (0+255),w,b
  8652  00134E  23A1               	addwfc	(??___fladd+3)& (0+255),f,b
  8653  001350  BFA1               	btfsc	(??___fladd+3)& (0+255),7,b
  8654  001352  D02C               	goto	l926
  8655  001354  51A1               	movf	(??___fladd+3)& (0+255),w,b
  8656  001356  E104               	bnz	u2520
  8657  001358  0E1A               	movlw	26
  8658  00135A  5DA0               	subwf	(??___fladd+2)& (0+255),w,b
  8659  00135C  A0D8               	btfss	status,0,c
  8660  00135E  D026               	goto	l926
  8661  001360                     u2520:
  8662                           
  8663                           ; BSR set to: 0
  8664  001360  5196               	movf	___fladd@b& (0+255),w,b
  8665  001362  1197               	iorwf	(___fladd@b+1)& (0+255),w,b
  8666  001364  1198               	iorwf	(___fladd@b+2)& (0+255),w,b
  8667  001366  1199               	iorwf	(___fladd@b+3)& (0+255),w,b
  8668  001368  B4D8               	btfsc	status,2,c
  8669  00136A  D002               	goto	u2530
  8670  00136C  0E01               	movlw	1
  8671  00136E  D001               	goto	u2540
  8672  001370                     u2530:
  8673  001370  0E00               	movlw	0
  8674  001372                     u2540:
  8675  001372  6FA9               	movwf	___fladd@grs& (0+255),b
  8676                           
  8677                           ; BSR set to: 0
  8678  001374  0E00               	movlw	0
  8679  001376  6F96               	movwf	___fladd@b& (0+255),b
  8680  001378  0E00               	movlw	0
  8681  00137A  6F97               	movwf	(___fladd@b+1)& (0+255),b
  8682  00137C  0E00               	movlw	0
  8683  00137E  6F98               	movwf	(___fladd@b+2)& (0+255),b
  8684  001380  0E00               	movlw	0
  8685  001382  6F99               	movwf	(___fladd@b+3)& (0+255),b
  8686                           
  8687                           ; BSR set to: 0
  8688  001384  C0A7  F0A8         	movff	___fladd@aexp,___fladd@bexp
  8689  001388  D015               	goto	u2570
  8690  00138A                     l927:
  8691                           
  8692                           ; BSR set to: 0
  8693  00138A  A1A9               	btfss	___fladd@grs& (0+255),0,b
  8694  00138C  D005               	goto	l928
  8695                           
  8696                           ; BSR set to: 0
  8697  00138E  90D8               	bcf	status,0,c
  8698  001390  31A9               	rrcf	___fladd@grs& (0+255),w,b
  8699  001392  0901               	iorlw	1
  8700  001394  6FA9               	movwf	___fladd@grs& (0+255),b
  8701  001396  D002               	goto	l929
  8702  001398                     l928:
  8703                           
  8704                           ; BSR set to: 0
  8705                           
  8706                           ; BSR set to: 0
  8707  001398  90D8               	bcf	status,0,c
  8708  00139A  33A9               	rrcf	___fladd@grs& (0+255),f,b
  8709  00139C                     l929:
  8710                           
  8711                           ; BSR set to: 0
  8712                           
  8713                           ; BSR set to: 0
  8714  00139C  B196               	btfsc	___fladd@b& (0+255),0,b
  8715                           
  8716                           ; BSR set to: 0
  8717  00139E  8FA9               	bsf	___fladd@grs& (0+255),7,b
  8718                           
  8719                           ; BSR set to: 0
  8720                           
  8721                           ; BSR set to: 0
  8722  0013A0  3599               	rlcf	(___fladd@b+3)& (0+255),w,b
  8723  0013A2  3399               	rrcf	(___fladd@b+3)& (0+255),f,b
  8724  0013A4  3398               	rrcf	(___fladd@b+2)& (0+255),f,b
  8725  0013A6  3397               	rrcf	(___fladd@b+1)& (0+255),f,b
  8726  0013A8  3396               	rrcf	___fladd@b& (0+255),f,b
  8727                           
  8728                           ; BSR set to: 0
  8729  0013AA  2BA8               	incf	___fladd@bexp& (0+255),f,b
  8730  0013AC                     l926:
  8731                           
  8732                           ; BSR set to: 0
  8733  0013AC  51A7               	movf	___fladd@aexp& (0+255),w,b
  8734  0013AE  5DA8               	subwf	___fladd@bexp& (0+255),w,b
  8735  0013B0  A0D8               	btfss	status,0,c
  8736  0013B2  D7EB               	goto	l927
  8737  0013B4                     u2570:
  8738                           
  8739                           ; BSR set to: 0
  8740                           
  8741                           ; BSR set to: 0
  8742  0013B4  BDA6               	btfsc	___fladd@signs& (0+255),6,b
  8743  0013B6  D029               	goto	l932
  8744                           
  8745                           ; BSR set to: 0
  8746  0013B8  51A8               	movf	___fladd@bexp& (0+255),w,b
  8747  0013BA  A4D8               	btfss	status,2,c
  8748  0013BC  D009               	goto	l933
  8749                           
  8750                           ; BSR set to: 0
  8751  0013BE  0E00               	movlw	0
  8752  0013C0  6F96               	movwf	?___fladd& (0+255),b
  8753  0013C2  0E00               	movlw	0
  8754  0013C4  6F97               	movwf	(?___fladd+1)& (0+255),b
  8755  0013C6  0E00               	movlw	0
  8756  0013C8  6F98               	movwf	(?___fladd+2)& (0+255),b
  8757  0013CA  0E00               	movlw	0
  8758  0013CC  6F99               	movwf	(?___fladd+3)& (0+255),b
  8759                           
  8760                           ; BSR set to: 0
  8761  0013CE  0012               	return	
  8762  0013D0                     l933:
  8763                           
  8764                           ; BSR set to: 0
  8765                           
  8766                           ; BSR set to: 0
  8767  0013D0  519A               	movf	___fladd@a& (0+255),w,b
  8768  0013D2  2796               	addwf	___fladd@b& (0+255),f,b
  8769  0013D4  519B               	movf	(___fladd@a+1)& (0+255),w,b
  8770  0013D6  2397               	addwfc	(___fladd@b+1)& (0+255),f,b
  8771  0013D8  519C               	movf	(___fladd@a+2)& (0+255),w,b
  8772  0013DA  2398               	addwfc	(___fladd@b+2)& (0+255),f,b
  8773  0013DC  519D               	movf	(___fladd@a+3)& (0+255),w,b
  8774  0013DE  2399               	addwfc	(___fladd@b+3)& (0+255),f,b
  8775                           
  8776                           ; BSR set to: 0
  8777  0013E0  A199               	btfss	(___fladd@b+3)& (0+255),0,b
  8778  0013E2  D083               	goto	u2700
  8779                           
  8780                           ; BSR set to: 0
  8781  0013E4  A1A9               	btfss	___fladd@grs& (0+255),0,b
  8782  0013E6  D006               	goto	l936
  8783                           
  8784                           ; BSR set to: 0
  8785  0013E8  90D8               	bcf	status,0,c
  8786  0013EA  33A9               	rrcf	___fladd@grs& (0+255),f,b
  8787  0013EC  51A9               	movf	___fladd@grs& (0+255),w,b
  8788  0013EE  0901               	iorlw	1
  8789  0013F0  6FA9               	movwf	___fladd@grs& (0+255),b
  8790  0013F2  D002               	goto	l937
  8791  0013F4                     l936:
  8792                           
  8793                           ; BSR set to: 0
  8794                           
  8795                           ; BSR set to: 0
  8796  0013F4  90D8               	bcf	status,0,c
  8797  0013F6  33A9               	rrcf	___fladd@grs& (0+255),f,b
  8798  0013F8                     l937:
  8799                           
  8800                           ; BSR set to: 0
  8801                           
  8802                           ; BSR set to: 0
  8803  0013F8  B196               	btfsc	___fladd@b& (0+255),0,b
  8804                           
  8805                           ; BSR set to: 0
  8806  0013FA  8FA9               	bsf	___fladd@grs& (0+255),7,b
  8807                           
  8808                           ; BSR set to: 0
  8809                           
  8810                           ; BSR set to: 0
  8811  0013FC  3599               	rlcf	(___fladd@b+3)& (0+255),w,b
  8812  0013FE  3399               	rrcf	(___fladd@b+3)& (0+255),f,b
  8813  001400  3398               	rrcf	(___fladd@b+2)& (0+255),f,b
  8814  001402  3397               	rrcf	(___fladd@b+1)& (0+255),f,b
  8815  001404  3396               	rrcf	___fladd@b& (0+255),f,b
  8816                           
  8817                           ; BSR set to: 0
  8818  001406  2BA8               	incf	___fladd@bexp& (0+255),f,b
  8819                           
  8820                           ; BSR set to: 0
  8821  001408  D070               	goto	u2700
  8822  00140A                     l932:
  8823                           
  8824                           ; BSR set to: 0
  8825                           
  8826                           ; BSR set to: 0
  8827  00140A  519A               	movf	___fladd@a& (0+255),w,b
  8828  00140C  5D96               	subwf	___fladd@b& (0+255),w,b
  8829  00140E  519B               	movf	(___fladd@a+1)& (0+255),w,b
  8830  001410  5997               	subwfb	(___fladd@b+1)& (0+255),w,b
  8831  001412  519C               	movf	(___fladd@a+2)& (0+255),w,b
  8832  001414  5998               	subwfb	(___fladd@b+2)& (0+255),w,b
  8833  001416  5199               	movf	(___fladd@b+3)& (0+255),w,b
  8834  001418  0A80               	xorlw	128
  8835  00141A  6F9E               	movwf	??___fladd& (0+255),b
  8836  00141C  519D               	movf	(___fladd@a+3)& (0+255),w,b
  8837  00141E  0A80               	xorlw	128
  8838  001420  599E               	subwfb	??___fladd& (0+255),w,b
  8839  001422  B0D8               	btfsc	status,0,c
  8840  001424  D036               	goto	l940
  8841                           
  8842                           ; BSR set to: 0
  8843  001426  C096  F09E         	movff	___fladd@b,??___fladd
  8844  00142A  C097  F09F         	movff	___fladd@b+1,??___fladd+1
  8845  00142E  C098  F0A0         	movff	___fladd@b+2,??___fladd+2
  8846  001432  C099  F0A1         	movff	___fladd@b+3,??___fladd+3
  8847  001436  1F9E               	comf	??___fladd& (0+255),f,b
  8848  001438  1F9F               	comf	(??___fladd+1)& (0+255),f,b
  8849  00143A  1FA0               	comf	(??___fladd+2)& (0+255),f,b
  8850  00143C  1FA1               	comf	(??___fladd+3)& (0+255),f,b
  8851  00143E  2B9E               	incf	??___fladd& (0+255),f,b
  8852  001440  0E00               	movlw	0
  8853  001442  239F               	addwfc	(??___fladd+1)& (0+255),f,b
  8854  001444  23A0               	addwfc	(??___fladd+2)& (0+255),f,b
  8855  001446  23A1               	addwfc	(??___fladd+3)& (0+255),f,b
  8856  001448  519A               	movf	___fladd@a& (0+255),w,b
  8857  00144A  259E               	addwf	??___fladd& (0+255),w,b
  8858  00144C  6FA2               	movwf	(??___fladd+4)& (0+255),b
  8859  00144E  519B               	movf	(___fladd@a+1)& (0+255),w,b
  8860  001450  219F               	addwfc	(??___fladd+1)& (0+255),w,b
  8861  001452  6FA3               	movwf	(??___fladd+5)& (0+255),b
  8862  001454  519C               	movf	(___fladd@a+2)& (0+255),w,b
  8863  001456  21A0               	addwfc	(??___fladd+2)& (0+255),w,b
  8864  001458  6FA4               	movwf	(??___fladd+6)& (0+255),b
  8865  00145A  519D               	movf	(___fladd@a+3)& (0+255),w,b
  8866  00145C  21A1               	addwfc	(??___fladd+3)& (0+255),w,b
  8867  00145E  6FA5               	movwf	(??___fladd+7)& (0+255),b
  8868  001460  0EFF               	movlw	255
  8869  001462  25A2               	addwf	(??___fladd+4)& (0+255),w,b
  8870  001464  6F96               	movwf	___fladd@b& (0+255),b
  8871  001466  0EFF               	movlw	255
  8872  001468  21A3               	addwfc	(??___fladd+5)& (0+255),w,b
  8873  00146A  6F97               	movwf	(___fladd@b+1)& (0+255),b
  8874  00146C  0EFF               	movlw	255
  8875  00146E  21A4               	addwfc	(??___fladd+6)& (0+255),w,b
  8876  001470  6F98               	movwf	(___fladd@b+2)& (0+255),b
  8877  001472  0EFF               	movlw	255
  8878  001474  21A5               	addwfc	(??___fladd+7)& (0+255),w,b
  8879  001476  6F99               	movwf	(___fladd@b+3)& (0+255),b
  8880  001478  0E80               	movlw	128
  8881  00147A  1BA6               	xorwf	___fladd@signs& (0+255),f,b
  8882                           
  8883                           ; BSR set to: 0
  8884  00147C  6DA9               	negf	___fladd@grs& (0+255),b
  8885                           
  8886                           ; BSR set to: 0
  8887  00147E  51A9               	movf	___fladd@grs& (0+255),w,b
  8888  001480  A4D8               	btfss	status,2,c
  8889  001482  D00F               	goto	l942
  8890                           
  8891                           ; BSR set to: 0
  8892  001484  0E01               	movlw	1
  8893  001486  2796               	addwf	___fladd@b& (0+255),f,b
  8894  001488  0E00               	movlw	0
  8895  00148A  2397               	addwfc	(___fladd@b+1)& (0+255),f,b
  8896  00148C  2398               	addwfc	(___fladd@b+2)& (0+255),f,b
  8897  00148E  2399               	addwfc	(___fladd@b+3)& (0+255),f,b
  8898                           
  8899                           ; BSR set to: 0
  8900  001490  D008               	goto	l942
  8901  001492                     l940:
  8902                           
  8903                           ; BSR set to: 0
  8904                           
  8905                           ; BSR set to: 0
  8906  001492  519A               	movf	___fladd@a& (0+255),w,b
  8907  001494  5F96               	subwf	___fladd@b& (0+255),f,b
  8908  001496  519B               	movf	(___fladd@a+1)& (0+255),w,b
  8909  001498  5B97               	subwfb	(___fladd@b+1)& (0+255),f,b
  8910  00149A  519C               	movf	(___fladd@a+2)& (0+255),w,b
  8911  00149C  5B98               	subwfb	(___fladd@b+2)& (0+255),f,b
  8912  00149E  519D               	movf	(___fladd@a+3)& (0+255),w,b
  8913  0014A0  5B99               	subwfb	(___fladd@b+3)& (0+255),f,b
  8914  0014A2                     l942:
  8915                           
  8916                           ; BSR set to: 0
  8917  0014A2  5196               	movf	___fladd@b& (0+255),w,b
  8918  0014A4  1197               	iorwf	(___fladd@b+1)& (0+255),w,b
  8919  0014A6  1198               	iorwf	(___fladd@b+2)& (0+255),w,b
  8920  0014A8  1199               	iorwf	(___fladd@b+3)& (0+255),w,b
  8921  0014AA  A4D8               	btfss	status,2,c
  8922  0014AC  D01C               	goto	l949
  8923                           
  8924                           ; BSR set to: 0
  8925  0014AE  51A9               	movf	___fladd@grs& (0+255),w,b
  8926  0014B0  A4D8               	btfss	status,2,c
  8927  0014B2  D019               	goto	l949
  8928                           
  8929                           ; BSR set to: 0
  8930  0014B4  0E00               	movlw	0
  8931  0014B6  6F96               	movwf	?___fladd& (0+255),b
  8932  0014B8  0E00               	movlw	0
  8933  0014BA  6F97               	movwf	(?___fladd+1)& (0+255),b
  8934  0014BC  0E00               	movlw	0
  8935  0014BE  6F98               	movwf	(?___fladd+2)& (0+255),b
  8936  0014C0  0E00               	movlw	0
  8937  0014C2  6F99               	movwf	(?___fladd+3)& (0+255),b
  8938                           
  8939                           ; BSR set to: 0
  8940  0014C4  0012               	return	
  8941  0014C6                     
  8942                           ; BSR set to: 0
  8943                           
  8944                           ; BSR set to: 0
  8945  0014C6  90D8               	bcf	status,0,c
  8946  0014C8  3796               	rlcf	___fladd@b& (0+255),f,b
  8947  0014CA  3797               	rlcf	(___fladd@b+1)& (0+255),f,b
  8948  0014CC  3798               	rlcf	(___fladd@b+2)& (0+255),f,b
  8949  0014CE  3799               	rlcf	(___fladd@b+3)& (0+255),f,b
  8950                           
  8951                           ; BSR set to: 0
  8952  0014D0  BFA9               	btfsc	___fladd@grs& (0+255),7,b
  8953                           
  8954                           ; BSR set to: 0
  8955  0014D2  8196               	bsf	___fladd@b& (0+255),0,b
  8956                           
  8957                           ; BSR set to: 0
  8958                           
  8959                           ; BSR set to: 0
  8960  0014D4  A1A9               	btfss	___fladd@grs& (0+255),0,b
  8961  0014D6  D002               	goto	l947
  8962                           
  8963                           ; BSR set to: 0
  8964  0014D8  80D8               	bsf	status,0,c
  8965  0014DA  D001               	goto	L11
  8966  0014DC                     l947:
  8967                           
  8968                           ; BSR set to: 0
  8969                           
  8970                           ; BSR set to: 0
  8971  0014DC  90D8               	bcf	status,0,c
  8972  0014DE                     L11:
  8973  0014DE  37A9               	rlcf	___fladd@grs& (0+255),f,b
  8974                           
  8975                           ; BSR set to: 0
  8976                           
  8977                           ; BSR set to: 0
  8978  0014E0  51A8               	movf	___fladd@bexp& (0+255),w,b
  8979  0014E2  A4D8               	btfss	status,2,c
  8980                           
  8981                           ; BSR set to: 0
  8982  0014E4  07A8               	decf	___fladd@bexp& (0+255),f,b
  8983  0014E6                     l949:
  8984                           
  8985                           ; BSR set to: 0
  8986                           
  8987                           ; BSR set to: 0
  8988                           
  8989                           ; BSR set to: 0
  8990  0014E6  AF98               	btfss	(___fladd@b+2)& (0+255),7,b
  8991  0014E8  D7EE               	goto	l945
  8992  0014EA                     u2700:
  8993                           
  8994                           ; BSR set to: 0
  8995                           
  8996                           ; BSR set to: 0
  8997                           
  8998                           ; BSR set to: 0
  8999  0014EA  0E00               	movlw	0
  9000  0014EC  6FA7               	movwf	___fladd@aexp& (0+255),b
  9001                           
  9002                           ; BSR set to: 0
  9003  0014EE  AFA9               	btfss	___fladd@grs& (0+255),7,b
  9004  0014F0  D00A               	goto	l954
  9005                           
  9006                           ; BSR set to: 0
  9007  0014F2  C0A9  F09E         	movff	___fladd@grs,??___fladd
  9008  0014F6  0E7F               	movlw	127
  9009  0014F8  179E               	andwf	??___fladd& (0+255),f,b
  9010  0014FA  A4D8               	btfss	status,2,c
  9011  0014FC  D002               	goto	u2730
  9012                           
  9013                           ; BSR set to: 0
  9014                           
  9015                           ; BSR set to: 0
  9016  0014FE  A196               	btfss	___fladd@b& (0+255),0,b
  9017  001500  D002               	goto	l954
  9018  001502                     u2730:
  9019                           
  9020                           ; BSR set to: 0
  9021  001502  0E01               	movlw	1
  9022  001504  6FA7               	movwf	___fladd@aexp& (0+255),b
  9023  001506                     l954:
  9024                           
  9025                           ; BSR set to: 0
  9026                           
  9027                           ; BSR set to: 0
  9028                           
  9029                           ; BSR set to: 0
  9030  001506  51A7               	movf	___fladd@aexp& (0+255),w,b
  9031  001508  B4D8               	btfsc	status,2,c
  9032  00150A  D020               	goto	l957
  9033                           
  9034                           ; BSR set to: 0
  9035  00150C  0E01               	movlw	1
  9036  00150E  2796               	addwf	___fladd@b& (0+255),f,b
  9037  001510  0E00               	movlw	0
  9038  001512  2397               	addwfc	(___fladd@b+1)& (0+255),f,b
  9039  001514  2398               	addwfc	(___fladd@b+2)& (0+255),f,b
  9040  001516  2399               	addwfc	(___fladd@b+3)& (0+255),f,b
  9041                           
  9042                           ; BSR set to: 0
  9043  001518  A199               	btfss	(___fladd@b+3)& (0+255),0,b
  9044  00151A  D018               	goto	l957
  9045                           
  9046                           ; BSR set to: 0
  9047  00151C  C096  F09E         	movff	___fladd@b,??___fladd
  9048  001520  C097  F09F         	movff	___fladd@b+1,??___fladd+1
  9049  001524  C098  F0A0         	movff	___fladd@b+2,??___fladd+2
  9050  001528  C099  F0A1         	movff	___fladd@b+3,??___fladd+3
  9051  00152C  35A1               	rlcf	(??___fladd+3)& (0+255),w,b
  9052  00152E  33A1               	rrcf	(??___fladd+3)& (0+255),f,b
  9053  001530  33A0               	rrcf	(??___fladd+2)& (0+255),f,b
  9054  001532  339F               	rrcf	(??___fladd+1)& (0+255),f,b
  9055  001534  339E               	rrcf	??___fladd& (0+255),f,b
  9056  001536  C09E  F096         	movff	??___fladd,___fladd@b
  9057  00153A  C09F  F097         	movff	??___fladd+1,___fladd@b+1
  9058  00153E  C0A0  F098         	movff	??___fladd+2,___fladd@b+2
  9059  001542  C0A1  F099         	movff	??___fladd+3,___fladd@b+3
  9060  001546  29A8               	incf	___fladd@bexp& (0+255),w,b
  9061  001548  A4D8               	btfss	status,2,c
  9062                           
  9063                           ; BSR set to: 0
  9064  00154A  2BA8               	incf	___fladd@bexp& (0+255),f,b
  9065  00154C                     l957:
  9066                           
  9067                           ; BSR set to: 0
  9068                           
  9069                           ; BSR set to: 0
  9070                           
  9071                           ; BSR set to: 0
  9072                           
  9073                           ; BSR set to: 0
  9074  00154C  29A8               	incf	___fladd@bexp& (0+255),w,b
  9075  00154E  B4D8               	btfsc	status,2,c
  9076  001550  D003               	goto	u2780
  9077                           
  9078                           ; BSR set to: 0
  9079  001552  51A8               	movf	___fladd@bexp& (0+255),w,b
  9080  001554  A4D8               	btfss	status,2,c
  9081  001556  D00D               	goto	l961
  9082  001558                     u2780:
  9083                           
  9084                           ; BSR set to: 0
  9085                           
  9086                           ; BSR set to: 0
  9087  001558  0E00               	movlw	0
  9088  00155A  6F96               	movwf	___fladd@b& (0+255),b
  9089  00155C  0E00               	movlw	0
  9090  00155E  6F97               	movwf	(___fladd@b+1)& (0+255),b
  9091  001560  0E00               	movlw	0
  9092  001562  6F98               	movwf	(___fladd@b+2)& (0+255),b
  9093  001564  0E00               	movlw	0
  9094  001566  6F99               	movwf	(___fladd@b+3)& (0+255),b
  9095  001568  51A8               	movf	___fladd@bexp& (0+255),w,b
  9096  00156A  A4D8               	btfss	status,2,c
  9097  00156C  D002               	goto	l961
  9098                           
  9099                           ; BSR set to: 0
  9100  00156E  0E00               	movlw	0
  9101  001570  6FA6               	movwf	___fladd@signs& (0+255),b
  9102  001572                     l961:
  9103                           
  9104                           ; BSR set to: 0
  9105                           
  9106                           ; BSR set to: 0
  9107                           
  9108                           ; BSR set to: 0
  9109  001572  A1A8               	btfss	___fladd@bexp& (0+255),0,b
  9110  001574  D002               	goto	l962
  9111                           
  9112                           ; BSR set to: 0
  9113  001576  8F98               	bsf	(___fladd@b+2)& (0+255),7,b
  9114  001578  D001               	goto	l963
  9115  00157A                     l962:
  9116                           
  9117                           ; BSR set to: 0
  9118                           
  9119                           ; BSR set to: 0
  9120  00157A  9F98               	bcf	(___fladd@b+2)& (0+255),7,b
  9121  00157C                     l963:
  9122                           
  9123                           ; BSR set to: 0
  9124                           
  9125                           ; BSR set to: 0
  9126  00157C  90D8               	bcf	status,0,c
  9127  00157E  31A8               	rrcf	___fladd@bexp& (0+255),w,b
  9128  001580  6F99               	movwf	(___fladd@b+3)& (0+255),b
  9129                           
  9130                           ; BSR set to: 0
  9131  001582  BFA6               	btfsc	___fladd@signs& (0+255),7,b
  9132                           
  9133                           ; BSR set to: 0
  9134  001584  8F99               	bsf	(___fladd@b+3)& (0+255),7,b
  9135                           
  9136                           ; BSR set to: 0
  9137                           
  9138                           ; BSR set to: 0
  9139  001586  C096  F096         	movff	___fladd@b,?___fladd
  9140  00158A  C097  F097         	movff	___fladd@b+1,?___fladd+1
  9141  00158E  C098  F098         	movff	___fladd@b+2,?___fladd+2
  9142  001592  C099  F099         	movff	___fladd@b+3,?___fladd+3
  9143  001596  0012               	return	
  9144  001598                     __end_of___fladd:
  9145                           	opt stack 0
  9146                           tblptru	equ	0xFF8
  9147                           tblptrh	equ	0xFF7
  9148                           tblptrl	equ	0xFF6
  9149                           tablat	equ	0xFF5
  9150                           prodh	equ	0xFF4
  9151                           prodl	equ	0xFF3
  9152                           intcon	equ	0xFF2
  9153                           intcon2	equ	0xFF1
  9154                           intcon3	equ	0xFF0
  9155                           postinc0	equ	0xFEE
  9156                           wreg	equ	0xFE8
  9157                           indf1	equ	0xFE7
  9158                           postdec1	equ	0xFE5
  9159                           fsr1h	equ	0xFE2
  9160                           fsr1l	equ	0xFE1
  9161                           indf2	equ	0xFDF
  9162                           postinc2	equ	0xFDE
  9163                           postdec2	equ	0xFDD
  9164                           fsr2h	equ	0xFDA
  9165                           fsr2l	equ	0xFD9
  9166                           status	equ	0xFD8
  9167                           
  9168 ;; *************** function ___flneg *****************
  9169 ;; Defined at:
  9170 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flneg.c"
  9171 ;; Parameters:    Size  Location     Type
  9172 ;;  f1              4   46[COMRAM] unsigned char 
  9173 ;; Auto vars:     Size  Location     Type
  9174 ;;		None
  9175 ;; Return value:  Size  Location     Type
  9176 ;;                  4   46[COMRAM] unsigned char 
  9177 ;; Registers used:
  9178 ;;		wreg, status,2, status,0
  9179 ;; Tracked objects:
  9180 ;;		On entry : 0/0
  9181 ;;		On exit  : 0/0
  9182 ;;		Unchanged: 0/0
  9183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9184 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9187 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9188 ;;Total ram usage:        4 bytes
  9189 ;; Hardware stack levels used:    1
  9190 ;; Hardware stack levels required when called:    2
  9191 ;; This function calls:
  9192 ;;		Nothing
  9193 ;; This function is called by:
  9194 ;;		_operation
  9195 ;;		_sprintf
  9196 ;;		_set_pwm1_general
  9197 ;; This function uses a non-reentrant model
  9198 ;;
  9199                           
  9200                           	psect	text28
  9201  002D24                     __ptext28:
  9202                           	opt stack 0
  9203  002D24                     ___flneg:
  9204                           	opt stack 27
  9205                           
  9206                           ; BSR set to: 0
  9207                           ;incstack = 0
  9208  002D24  502F               	movf	___flneg@f1,w,c
  9209  002D26  1030               	iorwf	___flneg@f1+1,w,c
  9210  002D28  1031               	iorwf	___flneg@f1+2,w,c
  9211  002D2A  1032               	iorwf	___flneg@f1+3,w,c
  9212  002D2C  B4D8               	btfsc	status,2,c
  9213  002D2E  D008               	goto	l666
  9214  002D30  0E00               	movlw	0
  9215  002D32  1A2F               	xorwf	___flneg@f1,f,c
  9216  002D34  0E00               	movlw	0
  9217  002D36  1A30               	xorwf	___flneg@f1+1,f,c
  9218  002D38  0E00               	movlw	0
  9219  002D3A  1A31               	xorwf	___flneg@f1+2,f,c
  9220  002D3C  0E80               	movlw	128
  9221  002D3E  1A32               	xorwf	___flneg@f1+3,f,c
  9222  002D40                     l666:
  9223  002D40  C02F  F02F         	movff	___flneg@f1,?___flneg
  9224  002D44  C030  F030         	movff	___flneg@f1+1,?___flneg+1
  9225  002D48  C031  F031         	movff	___flneg@f1+2,?___flneg+2
  9226  002D4C  C032  F032         	movff	___flneg@f1+3,?___flneg+3
  9227  002D50  0012               	return	
  9228  002D52                     __end_of___flneg:
  9229                           	opt stack 0
  9230                           tblptru	equ	0xFF8
  9231                           tblptrh	equ	0xFF7
  9232                           tblptrl	equ	0xFF6
  9233                           tablat	equ	0xFF5
  9234                           prodh	equ	0xFF4
  9235                           prodl	equ	0xFF3
  9236                           intcon	equ	0xFF2
  9237                           intcon2	equ	0xFF1
  9238                           intcon3	equ	0xFF0
  9239                           postinc0	equ	0xFEE
  9240                           wreg	equ	0xFE8
  9241                           indf1	equ	0xFE7
  9242                           postdec1	equ	0xFE5
  9243                           fsr1h	equ	0xFE2
  9244                           fsr1l	equ	0xFE1
  9245                           indf2	equ	0xFDF
  9246                           postinc2	equ	0xFDE
  9247                           postdec2	equ	0xFDD
  9248                           fsr2h	equ	0xFDA
  9249                           fsr2l	equ	0xFD9
  9250                           status	equ	0xFD8
  9251                           
  9252 ;; *************** function ___flge *****************
  9253 ;; Defined at:
  9254 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flge.c"
  9255 ;; Parameters:    Size  Location     Type
  9256 ;;  ff1             4   42[BANK0 ] unsigned char 
  9257 ;;  ff2             4   46[BANK0 ] unsigned char 
  9258 ;; Auto vars:     Size  Location     Type
  9259 ;;		None
  9260 ;; Return value:  Size  Location     Type
  9261 ;;		None               void
  9262 ;; Registers used:
  9263 ;;		wreg, status,2, status,0
  9264 ;; Tracked objects:
  9265 ;;		On entry : 0/0
  9266 ;;		On exit  : 0/0
  9267 ;;		Unchanged: 0/0
  9268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9269 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9271 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9272 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9273 ;;Total ram usage:       12 bytes
  9274 ;; Hardware stack levels used:    1
  9275 ;; Hardware stack levels required when called:    2
  9276 ;; This function calls:
  9277 ;;		Nothing
  9278 ;; This function is called by:
  9279 ;;		_operation
  9280 ;;		_sprintf
  9281 ;; This function uses a non-reentrant model
  9282 ;;
  9283                           
  9284                           	psect	text29
  9285  002394                     __ptext29:
  9286                           	opt stack 0
  9287  002394                     ___flge:
  9288                           	opt stack 27
  9289                           
  9290                           ;incstack = 0
  9291  002394  0E00               	movlw	0
  9292  002396  0100               	movlb	0	; () banked
  9293  002398  15AA               	andwf	___flge@ff1& (0+255),w,b
  9294  00239A  6FB2               	movwf	??___flge& (0+255),b
  9295  00239C  0E00               	movlw	0
  9296  00239E  15AB               	andwf	(___flge@ff1+1)& (0+255),w,b
  9297  0023A0  6FB3               	movwf	(??___flge+1)& (0+255),b
  9298  0023A2  0E80               	movlw	128
  9299  0023A4  15AC               	andwf	(___flge@ff1+2)& (0+255),w,b
  9300  0023A6  6FB4               	movwf	(??___flge+2)& (0+255),b
  9301  0023A8  0E7F               	movlw	127
  9302  0023AA  15AD               	andwf	(___flge@ff1+3)& (0+255),w,b
  9303  0023AC  6FB5               	movwf	(??___flge+3)& (0+255),b
  9304  0023AE  51B2               	movf	??___flge& (0+255),w,b
  9305  0023B0  11B3               	iorwf	(??___flge+1)& (0+255),w,b
  9306  0023B2  11B4               	iorwf	(??___flge+2)& (0+255),w,b
  9307  0023B4  11B5               	iorwf	(??___flge+3)& (0+255),w,b
  9308  0023B6  A4D8               	btfss	status,2,c
  9309  0023B8  D008               	goto	l659
  9310                           
  9311                           ; BSR set to: 0
  9312  0023BA  0E00               	movlw	0
  9313  0023BC  6FAA               	movwf	___flge@ff1& (0+255),b
  9314  0023BE  0E00               	movlw	0
  9315  0023C0  6FAB               	movwf	(___flge@ff1+1)& (0+255),b
  9316  0023C2  0E00               	movlw	0
  9317  0023C4  6FAC               	movwf	(___flge@ff1+2)& (0+255),b
  9318  0023C6  0E00               	movlw	0
  9319  0023C8  6FAD               	movwf	(___flge@ff1+3)& (0+255),b
  9320  0023CA                     l659:
  9321                           
  9322                           ; BSR set to: 0
  9323                           
  9324                           ; BSR set to: 0
  9325  0023CA  0E00               	movlw	0
  9326  0023CC  15AE               	andwf	___flge@ff2& (0+255),w,b
  9327  0023CE  6FB2               	movwf	??___flge& (0+255),b
  9328  0023D0  0E00               	movlw	0
  9329  0023D2  15AF               	andwf	(___flge@ff2+1)& (0+255),w,b
  9330  0023D4  6FB3               	movwf	(??___flge+1)& (0+255),b
  9331  0023D6  0E80               	movlw	128
  9332  0023D8  15B0               	andwf	(___flge@ff2+2)& (0+255),w,b
  9333  0023DA  6FB4               	movwf	(??___flge+2)& (0+255),b
  9334  0023DC  0E7F               	movlw	127
  9335  0023DE  15B1               	andwf	(___flge@ff2+3)& (0+255),w,b
  9336  0023E0  6FB5               	movwf	(??___flge+3)& (0+255),b
  9337  0023E2  51B2               	movf	??___flge& (0+255),w,b
  9338  0023E4  11B3               	iorwf	(??___flge+1)& (0+255),w,b
  9339  0023E6  11B4               	iorwf	(??___flge+2)& (0+255),w,b
  9340  0023E8  11B5               	iorwf	(??___flge+3)& (0+255),w,b
  9341  0023EA  A4D8               	btfss	status,2,c
  9342  0023EC  D008               	goto	l660
  9343                           
  9344                           ; BSR set to: 0
  9345  0023EE  0E00               	movlw	0
  9346  0023F0  6FAE               	movwf	___flge@ff2& (0+255),b
  9347  0023F2  0E00               	movlw	0
  9348  0023F4  6FAF               	movwf	(___flge@ff2+1)& (0+255),b
  9349  0023F6  0E00               	movlw	0
  9350  0023F8  6FB0               	movwf	(___flge@ff2+2)& (0+255),b
  9351  0023FA  0E00               	movlw	0
  9352  0023FC  6FB1               	movwf	(___flge@ff2+3)& (0+255),b
  9353  0023FE                     l660:
  9354                           
  9355                           ; BSR set to: 0
  9356                           
  9357                           ; BSR set to: 0
  9358  0023FE  AFAD               	btfss	(___flge@ff1+3)& (0+255),7,b
  9359  002400  D01D               	goto	l661
  9360                           
  9361                           ; BSR set to: 0
  9362  002402  C0AA  F0B2         	movff	___flge@ff1,??___flge
  9363  002406  C0AB  F0B3         	movff	___flge@ff1+1,??___flge+1
  9364  00240A  C0AC  F0B4         	movff	___flge@ff1+2,??___flge+2
  9365  00240E  C0AD  F0B5         	movff	___flge@ff1+3,??___flge+3
  9366  002412  1FB2               	comf	??___flge& (0+255),f,b
  9367  002414  1FB3               	comf	(??___flge+1)& (0+255),f,b
  9368  002416  1FB4               	comf	(??___flge+2)& (0+255),f,b
  9369  002418  1FB5               	comf	(??___flge+3)& (0+255),f,b
  9370  00241A  2BB2               	incf	??___flge& (0+255),f,b
  9371  00241C  0E00               	movlw	0
  9372  00241E  23B3               	addwfc	(??___flge+1)& (0+255),f,b
  9373  002420  23B4               	addwfc	(??___flge+2)& (0+255),f,b
  9374  002422  23B5               	addwfc	(??___flge+3)& (0+255),f,b
  9375  002424  0E00               	movlw	0
  9376  002426  25B2               	addwf	??___flge& (0+255),w,b
  9377  002428  6FAA               	movwf	___flge@ff1& (0+255),b
  9378  00242A  0E00               	movlw	0
  9379  00242C  21B3               	addwfc	(??___flge+1)& (0+255),w,b
  9380  00242E  6FAB               	movwf	(___flge@ff1+1)& (0+255),b
  9381  002430  0E00               	movlw	0
  9382  002432  21B4               	addwfc	(??___flge+2)& (0+255),w,b
  9383  002434  6FAC               	movwf	(___flge@ff1+2)& (0+255),b
  9384  002436  0E80               	movlw	128
  9385  002438  21B5               	addwfc	(??___flge+3)& (0+255),w,b
  9386  00243A  6FAD               	movwf	(___flge@ff1+3)& (0+255),b
  9387  00243C                     l661:
  9388                           
  9389                           ; BSR set to: 0
  9390                           
  9391                           ; BSR set to: 0
  9392  00243C  AFB1               	btfss	(___flge@ff2+3)& (0+255),7,b
  9393  00243E  D01D               	goto	l662
  9394                           
  9395                           ; BSR set to: 0
  9396  002440  C0AE  F0B2         	movff	___flge@ff2,??___flge
  9397  002444  C0AF  F0B3         	movff	___flge@ff2+1,??___flge+1
  9398  002448  C0B0  F0B4         	movff	___flge@ff2+2,??___flge+2
  9399  00244C  C0B1  F0B5         	movff	___flge@ff2+3,??___flge+3
  9400  002450  1FB2               	comf	??___flge& (0+255),f,b
  9401  002452  1FB3               	comf	(??___flge+1)& (0+255),f,b
  9402  002454  1FB4               	comf	(??___flge+2)& (0+255),f,b
  9403  002456  1FB5               	comf	(??___flge+3)& (0+255),f,b
  9404  002458  2BB2               	incf	??___flge& (0+255),f,b
  9405  00245A  0E00               	movlw	0
  9406  00245C  23B3               	addwfc	(??___flge+1)& (0+255),f,b
  9407  00245E  23B4               	addwfc	(??___flge+2)& (0+255),f,b
  9408  002460  23B5               	addwfc	(??___flge+3)& (0+255),f,b
  9409  002462  0E00               	movlw	0
  9410  002464  25B2               	addwf	??___flge& (0+255),w,b
  9411  002466  6FAE               	movwf	___flge@ff2& (0+255),b
  9412  002468  0E00               	movlw	0
  9413  00246A  21B3               	addwfc	(??___flge+1)& (0+255),w,b
  9414  00246C  6FAF               	movwf	(___flge@ff2+1)& (0+255),b
  9415  00246E  0E00               	movlw	0
  9416  002470  21B4               	addwfc	(??___flge+2)& (0+255),w,b
  9417  002472  6FB0               	movwf	(___flge@ff2+2)& (0+255),b
  9418  002474  0E80               	movlw	128
  9419  002476  21B5               	addwfc	(??___flge+3)& (0+255),w,b
  9420  002478  6FB1               	movwf	(___flge@ff2+3)& (0+255),b
  9421  00247A                     l662:
  9422                           
  9423                           ; BSR set to: 0
  9424  00247A  0E00               	movlw	0
  9425  00247C  1BAA               	xorwf	___flge@ff1& (0+255),f,b
  9426  00247E  0E00               	movlw	0
  9427  002480  1BAB               	xorwf	(___flge@ff1+1)& (0+255),f,b
  9428  002482  0E00               	movlw	0
  9429  002484  1BAC               	xorwf	(___flge@ff1+2)& (0+255),f,b
  9430  002486  0E80               	movlw	128
  9431  002488  1BAD               	xorwf	(___flge@ff1+3)& (0+255),f,b
  9432  00248A  0E00               	movlw	0
  9433  00248C  1BAE               	xorwf	___flge@ff2& (0+255),f,b
  9434  00248E  0E00               	movlw	0
  9435  002490  1BAF               	xorwf	(___flge@ff2+1)& (0+255),f,b
  9436  002492  0E00               	movlw	0
  9437  002494  1BB0               	xorwf	(___flge@ff2+2)& (0+255),f,b
  9438  002496  0E80               	movlw	128
  9439  002498  1BB1               	xorwf	(___flge@ff2+3)& (0+255),f,b
  9440  00249A  51AE               	movf	___flge@ff2& (0+255),w,b
  9441  00249C  5DAA               	subwf	___flge@ff1& (0+255),w,b
  9442  00249E  51AF               	movf	(___flge@ff2+1)& (0+255),w,b
  9443  0024A0  59AB               	subwfb	(___flge@ff1+1)& (0+255),w,b
  9444  0024A2  51B0               	movf	(___flge@ff2+2)& (0+255),w,b
  9445  0024A4  59AC               	subwfb	(___flge@ff1+2)& (0+255),w,b
  9446  0024A6  51B1               	movf	(___flge@ff2+3)& (0+255),w,b
  9447  0024A8  59AD               	subwfb	(___flge@ff1+3)& (0+255),w,b
  9448  0024AA  B0D8               	btfsc	status,0,c
  9449  0024AC  D002               	goto	l2813
  9450                           
  9451                           ; BSR set to: 0
  9452  0024AE  90D8               	bcf	status,0,c
  9453  0024B0  0012               	return	
  9454  0024B2                     l2813:
  9455                           
  9456                           ; BSR set to: 0
  9457                           
  9458                           ; BSR set to: 0
  9459  0024B2  80D8               	bsf	status,0,c
  9460                           
  9461                           ; BSR set to: 0
  9462  0024B4  0012               	return	
  9463  0024B6                     __end_of___flge:
  9464                           	opt stack 0
  9465                           tblptru	equ	0xFF8
  9466                           tblptrh	equ	0xFF7
  9467                           tblptrl	equ	0xFF6
  9468                           tablat	equ	0xFF5
  9469                           prodh	equ	0xFF4
  9470                           prodl	equ	0xFF3
  9471                           intcon	equ	0xFF2
  9472                           intcon2	equ	0xFF1
  9473                           intcon3	equ	0xFF0
  9474                           postinc0	equ	0xFEE
  9475                           wreg	equ	0xFE8
  9476                           indf1	equ	0xFE7
  9477                           postdec1	equ	0xFE5
  9478                           fsr1h	equ	0xFE2
  9479                           fsr1l	equ	0xFE1
  9480                           indf2	equ	0xFDF
  9481                           postinc2	equ	0xFDE
  9482                           postdec2	equ	0xFDD
  9483                           fsr2h	equ	0xFDA
  9484                           fsr2l	equ	0xFD9
  9485                           status	equ	0xFD8
  9486                           
  9487 ;; *************** function _lcd_puts *****************
  9488 ;; Defined at:
  9489 ;;		line 120 in file "lcd_x8.c"
  9490 ;; Parameters:    Size  Location     Type
  9491 ;;  s               2   40[COMRAM] PTR unsigned char 
  9492 ;;		 -> STR_6(4), display@LCD(64), display@LCDP(64), 
  9493 ;; Auto vars:     Size  Location     Type
  9494 ;;		None
  9495 ;; Return value:  Size  Location     Type
  9496 ;;                  1    wreg      void 
  9497 ;; Registers used:
  9498 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9499 ;; Tracked objects:
  9500 ;;		On entry : 0/0
  9501 ;;		On exit  : 0/0
  9502 ;;		Unchanged: 0/0
  9503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9504 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9507 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9508 ;;Total ram usage:        2 bytes
  9509 ;; Hardware stack levels used:    1
  9510 ;; Hardware stack levels required when called:    7
  9511 ;; This function calls:
  9512 ;;		_lcd_putc
  9513 ;; This function is called by:
  9514 ;;		_display
  9515 ;; This function uses a non-reentrant model
  9516 ;;
  9517                           
  9518                           	psect	text30
  9519  002AAC                     __ptext30:
  9520                           	opt stack 0
  9521  002AAC                     _lcd_puts:
  9522                           	opt stack 22
  9523                           
  9524                           ;lcd_x8.c: 121: while (*s) {
  9525                           
  9526                           ; BSR set to: 0
  9527                           ;incstack = 0
  9528  002AAC  D015               	goto	l204
  9529  002AAE                     
  9530                           ;lcd_x8.c: 122: lcd_putc(*s);
  9531  002AAE  C029  FFF6         	movff	lcd_puts@s,tblptrl
  9532  002AB2  C02A  FFF7         	movff	lcd_puts@s+1,tblptrh
  9533  002AB6  0E00               	movlw	low (__mediumconst shr (0+16))
  9534  002AB8  6EF8               	movwf	tblptru,c
  9535  002ABA  0E0F               	movlw	(high __ramtop+-1)
  9536  002ABC  64F7               	cpfsgt	tblptrh,c
  9537  002ABE  D003               	bra	u4227
  9538  002AC0  0008               	tblrd		*
  9539  002AC2  50F5               	movf	tablat,w,c
  9540  002AC4  D005               	bra	u4220
  9541  002AC6                     u4227:
  9542  002AC6  CFF6 FFE1          	movff	tblptrl,fsr1l
  9543  002ACA  CFF7 FFE2          	movff	tblptrh,fsr1h
  9544  002ACE  50E7               	movf	indf1,w,c
  9545  002AD0                     u4220:
  9546  002AD0  EC81  F015         	call	_lcd_putc
  9547                           
  9548                           ;lcd_x8.c: 123: s++;
  9549  002AD4  4A29               	infsnz	lcd_puts@s,f,c
  9550  002AD6  2A2A               	incf	lcd_puts@s+1,f,c
  9551  002AD8                     l204:
  9552  002AD8  C029  FFF6         	movff	lcd_puts@s,tblptrl
  9553  002ADC  C02A  FFF7         	movff	lcd_puts@s+1,tblptrh
  9554  002AE0  0E00               	movlw	low (__mediumconst shr (0+16))
  9555  002AE2  6EF8               	movwf	tblptru,c
  9556  002AE4  0E0F               	movlw	(high __ramtop+-1)
  9557  002AE6  64F7               	cpfsgt	tblptrh,c
  9558  002AE8  D003               	bra	u4237
  9559  002AEA  0008               	tblrd		*
  9560  002AEC  50F5               	movf	tablat,w,c
  9561  002AEE  D005               	bra	u4230
  9562  002AF0                     u4237:
  9563  002AF0  CFF6 FFE1          	movff	tblptrl,fsr1l
  9564  002AF4  CFF7 FFE2          	movff	tblptrh,fsr1h
  9565  002AF8  50E7               	movf	indf1,w,c
  9566  002AFA                     u4230:
  9567  002AFA  0900               	iorlw	0
  9568  002AFC  B4D8               	btfsc	status,2,c
  9569  002AFE  0012               	return	
  9570  002B00  D7D6               	goto	l205
  9571  002B02                     __end_of_lcd_puts:
  9572                           	opt stack 0
  9573                           tblptru	equ	0xFF8
  9574                           tblptrh	equ	0xFF7
  9575                           tblptrl	equ	0xFF6
  9576                           tablat	equ	0xFF5
  9577                           prodh	equ	0xFF4
  9578                           prodl	equ	0xFF3
  9579                           intcon	equ	0xFF2
  9580                           intcon2	equ	0xFF1
  9581                           intcon3	equ	0xFF0
  9582                           postinc0	equ	0xFEE
  9583                           wreg	equ	0xFE8
  9584                           indf1	equ	0xFE7
  9585                           postdec1	equ	0xFE5
  9586                           fsr1h	equ	0xFE2
  9587                           fsr1l	equ	0xFE1
  9588                           indf2	equ	0xFDF
  9589                           postinc2	equ	0xFDE
  9590                           postdec2	equ	0xFDD
  9591                           fsr2h	equ	0xFDA
  9592                           fsr2l	equ	0xFD9
  9593                           status	equ	0xFD8
  9594                           
  9595 ;; *************** function _lcd_putc *****************
  9596 ;; Defined at:
  9597 ;;		line 106 in file "lcd_x8.c"
  9598 ;; Parameters:    Size  Location     Type
  9599 ;;  c               1    wreg     unsigned char 
  9600 ;; Auto vars:     Size  Location     Type
  9601 ;;  c               1   39[COMRAM] unsigned char 
  9602 ;; Return value:  Size  Location     Type
  9603 ;;                  1    wreg      void 
  9604 ;; Registers used:
  9605 ;;		wreg, status,2, status,0, cstack
  9606 ;; Tracked objects:
  9607 ;;		On entry : 0/0
  9608 ;;		On exit  : 0/0
  9609 ;;		Unchanged: 0/0
  9610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9612 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9614 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9615 ;;Total ram usage:        1 bytes
  9616 ;; Hardware stack levels used:    1
  9617 ;; Hardware stack levels required when called:    6
  9618 ;; This function calls:
  9619 ;;		_delay_ms
  9620 ;;		_lcd_gotoxy
  9621 ;;		_lcd_send_byte
  9622 ;; This function is called by:
  9623 ;;		_display
  9624 ;;		_main
  9625 ;;		_lcd_puts
  9626 ;; This function uses a non-reentrant model
  9627 ;;
  9628                           
  9629                           	psect	text31
  9630  002B02                     __ptext31:
  9631                           	opt stack 0
  9632  002B02                     _lcd_putc:
  9633                           	opt stack 24
  9634                           
  9635                           ;incstack = 0
  9636                           ;lcd_putc@c stored from wreg
  9637  002B02  6E28               	movwf	lcd_putc@c,c
  9638                           
  9639                           ;lcd_x8.c: 107: switch (c) {
  9640  002B04  D01E               	goto	l195
  9641  002B06  0E01               	movlw	1
  9642  002B08  6E23               	movwf	lcd_send_byte@n,c
  9643  002B0A  0E00               	movlw	0
  9644  002B0C  ECF9  F015         	call	_lcd_send_byte
  9645                           
  9646                           ;lcd_x8.c: 109: delay_ms(2);
  9647  002B10  0E00               	movlw	0
  9648  002B12  6E1C               	movwf	delay_ms@n+1,c
  9649  002B14  0E02               	movlw	2
  9650  002B16  6E1B               	movwf	delay_ms@n,c
  9651  002B18  ECD3  F016         	call	_delay_ms	;wreg free
  9652                           
  9653                           ;lcd_x8.c: 110: break;
  9654  002B1C  0012               	return	
  9655  002B1E  0E02               	movlw	2
  9656  002B20  6E25               	movwf	lcd_gotoxy@y,c
  9657  002B22  0E01               	movlw	1
  9658  002B24  EC1D  F016         	call	_lcd_gotoxy
  9659                           
  9660                           ;lcd_x8.c: 112: break;
  9661  002B28  0012               	return	
  9662  002B2A  0E10               	movlw	16
  9663  002B2C  6E23               	movwf	lcd_send_byte@n,c
  9664  002B2E  0E00               	movlw	0
  9665  002B30  ECF9  F015         	call	_lcd_send_byte
  9666                           
  9667                           ;lcd_x8.c: 114: break;
  9668  002B34  0012               	return	
  9669  002B36  C028  F023         	movff	lcd_putc@c,lcd_send_byte@n
  9670  002B3A  0E01               	movlw	1
  9671  002B3C  ECF9  F015         	call	_lcd_send_byte
  9672                           
  9673                           ;lcd_x8.c: 117: }
  9674                           
  9675                           ;lcd_x8.c: 116: break;
  9676  002B40  0012               	return	
  9677  002B42                     l195:
  9678  002B42  5028               	movf	lcd_putc@c,w,c
  9679                           
  9680                           ; Switch size 1, requested type "space"
  9681                           ; Number of cases is 3, Range of values is 8 to 12
  9682                           ; switch strategies available:
  9683                           ; Name         Instructions Cycles
  9684                           ; simple_byte           10     6 (average)
  9685                           ;	Chosen strategy is simple_byte
  9686  002B44  0A08               	xorlw	8	; case 8
  9687  002B46  B4D8               	btfsc	status,2,c
  9688  002B48  D7F0               	goto	l199
  9689  002B4A  0A02               	xorlw	2	; case 10
  9690  002B4C  B4D8               	btfsc	status,2,c
  9691  002B4E  D7E7               	goto	l198
  9692  002B50  0A06               	xorlw	6	; case 12
  9693  002B52  B4D8               	btfsc	status,2,c
  9694  002B54  D7D8               	goto	l196
  9695  002B56  D7EF               	goto	l200
  9696  002B58                     __end_of_lcd_putc:
  9697                           	opt stack 0
  9698                           tblptru	equ	0xFF8
  9699                           tblptrh	equ	0xFF7
  9700                           tblptrl	equ	0xFF6
  9701                           tablat	equ	0xFF5
  9702                           prodh	equ	0xFF4
  9703                           prodl	equ	0xFF3
  9704                           intcon	equ	0xFF2
  9705                           intcon2	equ	0xFF1
  9706                           intcon3	equ	0xFF0
  9707                           postinc0	equ	0xFEE
  9708                           wreg	equ	0xFE8
  9709                           indf1	equ	0xFE7
  9710                           postdec1	equ	0xFE5
  9711                           fsr1h	equ	0xFE2
  9712                           fsr1l	equ	0xFE1
  9713                           indf2	equ	0xFDF
  9714                           postinc2	equ	0xFDE
  9715                           postdec2	equ	0xFDD
  9716                           fsr2h	equ	0xFDA
  9717                           fsr2l	equ	0xFD9
  9718                           status	equ	0xFD8
  9719                           
  9720 ;; *************** function _lcd_gotoxy *****************
  9721 ;; Defined at:
  9722 ;;		line 89 in file "lcd_x8.c"
  9723 ;; Parameters:    Size  Location     Type
  9724 ;;  x               1    wreg     unsigned char 
  9725 ;;  y               1   36[COMRAM] unsigned char 
  9726 ;; Auto vars:     Size  Location     Type
  9727 ;;  x               1   37[COMRAM] unsigned char 
  9728 ;;  address         1   38[COMRAM] unsigned char 
  9729 ;; Return value:  Size  Location     Type
  9730 ;;                  1    wreg      void 
  9731 ;; Registers used:
  9732 ;;		wreg, status,2, status,0, cstack
  9733 ;; Tracked objects:
  9734 ;;		On entry : 0/0
  9735 ;;		On exit  : 0/0
  9736 ;;		Unchanged: 0/0
  9737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9738 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9739 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9741 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9742 ;;Total ram usage:        3 bytes
  9743 ;; Hardware stack levels used:    1
  9744 ;; Hardware stack levels required when called:    5
  9745 ;; This function calls:
  9746 ;;		_lcd_send_byte
  9747 ;; This function is called by:
  9748 ;;		_display
  9749 ;;		_lcd_putc
  9750 ;; This function uses a non-reentrant model
  9751 ;;
  9752                           
  9753                           	psect	text32
  9754  002C3A                     __ptext32:
  9755                           	opt stack 0
  9756  002C3A                     _lcd_gotoxy:
  9757                           	opt stack 24
  9758                           
  9759                           ;incstack = 0
  9760                           ;lcd_gotoxy@x stored from wreg
  9761  002C3A  6E26               	movwf	lcd_gotoxy@x,c
  9762                           
  9763                           ;lcd_x8.c: 90: unsigned char address;
  9764                           ;lcd_x8.c: 92: switch (y) {
  9765  002C3C  D009               	goto	l186
  9766  002C3E  0E80               	movlw	128
  9767  002C40  D005               	goto	L14
  9768  002C42  0EC0               	movlw	192
  9769  002C44  D003               	goto	L14
  9770  002C46  0E90               	movlw	144
  9771  002C48  D001               	goto	L14
  9772  002C4A  0ED0               	movlw	208
  9773  002C4C                     L14:
  9774  002C4C  6E27               	movwf	lcd_gotoxy@address,c
  9775                           
  9776                           ;lcd_x8.c: 101: }
  9777                           
  9778                           ;lcd_x8.c: 100: break;
  9779  002C4E  D00D               	goto	l188
  9780  002C50                     l186:
  9781  002C50  5025               	movf	lcd_gotoxy@y,w,c
  9782                           
  9783                           ; Switch size 1, requested type "space"
  9784                           ; Number of cases is 4, Range of values is 1 to 4
  9785                           ; switch strategies available:
  9786                           ; Name         Instructions Cycles
  9787                           ; simple_byte           13     7 (average)
  9788                           ;	Chosen strategy is simple_byte
  9789  002C52  0A01               	xorlw	1	; case 1
  9790  002C54  B4D8               	btfsc	status,2,c
  9791  002C56  D7F3               	goto	l187
  9792  002C58  0A03               	xorlw	3	; case 2
  9793  002C5A  B4D8               	btfsc	status,2,c
  9794  002C5C  D7F2               	goto	l189
  9795  002C5E  0A01               	xorlw	1	; case 3
  9796  002C60  B4D8               	btfsc	status,2,c
  9797  002C62  D7F1               	goto	l190
  9798  002C64  0A07               	xorlw	7	; case 4
  9799  002C66  B4D8               	btfsc	status,2,c
  9800  002C68  D7F0               	goto	l191
  9801  002C6A                     l188:
  9802                           
  9803                           ;lcd_x8.c: 102: address += x - 1;
  9804  002C6A  0426               	decf	lcd_gotoxy@x,w,c
  9805  002C6C  2627               	addwf	lcd_gotoxy@address,f,c
  9806                           
  9807                           ;lcd_x8.c: 103: lcd_send_byte(0, (unsigned char) (0x80 | address));
  9808  002C6E  5027               	movf	lcd_gotoxy@address,w,c
  9809  002C70  0980               	iorlw	128
  9810  002C72  6E23               	movwf	lcd_send_byte@n,c
  9811  002C74  0E00               	movlw	0
  9812  002C76  ECF9  F015         	call	_lcd_send_byte
  9813  002C7A  0012               	return		;funcret
  9814  002C7C                     __end_of_lcd_gotoxy:
  9815                           	opt stack 0
  9816                           tblptru	equ	0xFF8
  9817                           tblptrh	equ	0xFF7
  9818                           tblptrl	equ	0xFF6
  9819                           tablat	equ	0xFF5
  9820                           prodh	equ	0xFF4
  9821                           prodl	equ	0xFF3
  9822                           intcon	equ	0xFF2
  9823                           intcon2	equ	0xFF1
  9824                           intcon3	equ	0xFF0
  9825                           postinc0	equ	0xFEE
  9826                           wreg	equ	0xFE8
  9827                           indf1	equ	0xFE7
  9828                           postdec1	equ	0xFE5
  9829                           fsr1h	equ	0xFE2
  9830                           fsr1l	equ	0xFE1
  9831                           indf2	equ	0xFDF
  9832                           postinc2	equ	0xFDE
  9833                           postdec2	equ	0xFDD
  9834                           fsr2h	equ	0xFDA
  9835                           fsr2l	equ	0xFD9
  9836                           status	equ	0xFD8
  9837                           
  9838 ;; *************** function _lcd_send_byte *****************
  9839 ;; Defined at:
  9840 ;;		line 39 in file "lcd_x8.c"
  9841 ;; Parameters:    Size  Location     Type
  9842 ;;  cm_data         1    wreg     unsigned char 
  9843 ;;  n               1   34[COMRAM] unsigned char 
  9844 ;; Auto vars:     Size  Location     Type
  9845 ;;  cm_data         1   35[COMRAM] unsigned char 
  9846 ;; Return value:  Size  Location     Type
  9847 ;;                  1    wreg      void 
  9848 ;; Registers used:
  9849 ;;		wreg, status,2, status,0, cstack
  9850 ;; Tracked objects:
  9851 ;;		On entry : 0/0
  9852 ;;		On exit  : 0/0
  9853 ;;		Unchanged: 0/0
  9854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9855 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9856 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9858 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9859 ;;Total ram usage:        2 bytes
  9860 ;; Hardware stack levels used:    1
  9861 ;; Hardware stack levels required when called:    4
  9862 ;; This function calls:
  9863 ;;		_delay_cycles
  9864 ;;		_delay_ms
  9865 ;;		_lcd_send_nibble
  9866 ;; This function is called by:
  9867 ;;		_lcd_init
  9868 ;;		_lcd_gotoxy
  9869 ;;		_lcd_putc
  9870 ;;		_Lcd_Shift_Right
  9871 ;;		_Lcd_Shift_Left
  9872 ;; This function uses a non-reentrant model
  9873 ;;
  9874                           
  9875                           	psect	text33
  9876  002BF2                     __ptext33:
  9877                           	opt stack 0
  9878  002BF2                     _lcd_send_byte:
  9879                           	opt stack 25
  9880                           
  9881                           ;incstack = 0
  9882                           ;lcd_send_byte@cm_data stored from wreg
  9883  002BF2  6E24               	movwf	lcd_send_byte@cm_data,c
  9884                           
  9885                           ;lcd_x8.c: 43: PORTEbits.RE2 = cm_data;
  9886  002BF4  B024               	btfsc	lcd_send_byte@cm_data,0,c
  9887  002BF6  D002               	bra	u2415
  9888  002BF8  9484               	bcf	3972,2,c	;volatile
  9889  002BFA  D001               	bra	u2416
  9890  002BFC                     u2415:
  9891  002BFC  8484               	bsf	3972,2,c	;volatile
  9892  002BFE                     u2416:
  9893                           
  9894                           ;lcd_x8.c: 44: delay_cycles(1);
  9895  002BFE  0E01               	movlw	1
  9896  002C00  ECA9  F016         	call	_delay_cycles
  9897                           
  9898                           ;lcd_x8.c: 46: delay_cycles(1);
  9899  002C04  0E01               	movlw	1
  9900  002C06  ECA9  F016         	call	_delay_cycles
  9901                           
  9902                           ;lcd_x8.c: 47: PORTEbits.RE1 = 0;
  9903  002C0A  9284               	bcf	3972,1,c	;volatile
  9904                           
  9905                           ;lcd_x8.c: 48: lcd_send_nibble(n >> 4);
  9906  002C0C  3823               	swapf	lcd_send_byte@n,w,c
  9907  002C0E  0B0F               	andlw	15
  9908  002C10  ECE6  F016         	call	_lcd_send_nibble
  9909                           
  9910                           ;lcd_x8.c: 49: lcd_send_nibble(n & 0x0f);
  9911  002C14  5023               	movf	lcd_send_byte@n,w,c
  9912  002C16  0B0F               	andlw	15
  9913  002C18  ECE6  F016         	call	_lcd_send_nibble
  9914                           
  9915                           ;lcd_x8.c: 50: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
  9916  002C1C  5024               	movf	lcd_send_byte@cm_data,w,c
  9917  002C1E  B4D8               	btfsc	status,2,c
  9918  002C20  D005               	goto	l174
  9919  002C22  0E32               	movlw	50
  9920  002C24                     u5637:
  9921  002C24  0004               	clrwdt	
  9922  002C26  2EE8               	decfsz	wreg,f,c
  9923  002C28  D7FD               	bra	u5637
  9924  002C2A  0012               	return	
  9925  002C2C                     l174:
  9926                           
  9927                           ;lcd_x8.c: 51: else
  9928                           ;lcd_x8.c: 52: delay_ms(2);
  9929  002C2C  0E00               	movlw	0
  9930  002C2E  6E1C               	movwf	delay_ms@n+1,c
  9931  002C30  0E02               	movlw	2
  9932  002C32  6E1B               	movwf	delay_ms@n,c
  9933  002C34  ECD3  F016         	call	_delay_ms	;wreg free
  9934  002C38  0012               	return	
  9935  002C3A                     __end_of_lcd_send_byte:
  9936                           	opt stack 0
  9937                           tblptru	equ	0xFF8
  9938                           tblptrh	equ	0xFF7
  9939                           tblptrl	equ	0xFF6
  9940                           tablat	equ	0xFF5
  9941                           prodh	equ	0xFF4
  9942                           prodl	equ	0xFF3
  9943                           intcon	equ	0xFF2
  9944                           intcon2	equ	0xFF1
  9945                           intcon3	equ	0xFF0
  9946                           postinc0	equ	0xFEE
  9947                           wreg	equ	0xFE8
  9948                           indf1	equ	0xFE7
  9949                           postdec1	equ	0xFE5
  9950                           fsr1h	equ	0xFE2
  9951                           fsr1l	equ	0xFE1
  9952                           indf2	equ	0xFDF
  9953                           postinc2	equ	0xFDE
  9954                           postdec2	equ	0xFDD
  9955                           fsr2h	equ	0xFDA
  9956                           fsr2l	equ	0xFD9
  9957                           status	equ	0xFD8
  9958                           
  9959 ;; *************** function _lcd_send_nibble *****************
  9960 ;; Defined at:
  9961 ;;		line 29 in file "lcd_x8.c"
  9962 ;; Parameters:    Size  Location     Type
  9963 ;;  n               1    wreg     unsigned char 
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;  n               1   33[COMRAM] unsigned char 
  9966 ;; Return value:  Size  Location     Type
  9967 ;;                  1    wreg      void 
  9968 ;; Registers used:
  9969 ;;		wreg, status,2, status,0, cstack
  9970 ;; Tracked objects:
  9971 ;;		On entry : 0/0
  9972 ;;		On exit  : 0/0
  9973 ;;		Unchanged: 0/0
  9974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9976 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9977 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9978 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9979 ;;Total ram usage:        2 bytes
  9980 ;; Hardware stack levels used:    1
  9981 ;; Hardware stack levels required when called:    3
  9982 ;; This function calls:
  9983 ;;		_delay_cycles
  9984 ;; This function is called by:
  9985 ;;		_lcd_send_byte
  9986 ;;		_lcd_init
  9987 ;; This function uses a non-reentrant model
  9988 ;;
  9989                           
  9990                           	psect	text34
  9991  002DCC                     __ptext34:
  9992                           	opt stack 0
  9993  002DCC                     _lcd_send_nibble:
  9994                           	opt stack 25
  9995                           
  9996                           ;incstack = 0
  9997                           ;lcd_send_nibble@n stored from wreg
  9998  002DCC  6E22               	movwf	lcd_send_nibble@n,c
  9999                           
 10000                           ;lcd_x8.c: 31: lcd.data = n;
 10001  002DCE  C022  F021         	movff	lcd_send_nibble@n,??_lcd_send_nibble
 10002  002DD2  3A21               	swapf	??_lcd_send_nibble,f,c
 10003  002DD4  5083               	movf	3971,w,c
 10004  002DD6  1821               	xorwf	??_lcd_send_nibble,w,c
 10005  002DD8  0B0F               	andlw	-241
 10006  002DDA  1821               	xorwf	??_lcd_send_nibble,w,c
 10007  002DDC  6E83               	movwf	3971,c
 10008                           
 10009                           ;lcd_x8.c: 33: delay_cycles(1);
 10010  002DDE  0E01               	movlw	1
 10011  002DE0  ECA9  F016         	call	_delay_cycles
 10012                           
 10013                           ;lcd_x8.c: 34: PORTEbits.RE1 = 1;
 10014  002DE4  8284               	bsf	3972,1,c	;volatile
 10015                           
 10016                           ;lcd_x8.c: 35: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
 10017  002DE6  0004               	clrwdt	
 10018  002DE8  F000               	nop		;2 cycle nop
 10019                           
 10020                           ;lcd_x8.c: 36: PORTEbits.RE1 = 0;
 10021  002DEA  9284               	bcf	3972,1,c	;volatile
 10022  002DEC  0012               	return		;funcret
 10023  002DEE                     __end_of_lcd_send_nibble:
 10024                           	opt stack 0
 10025                           tblptru	equ	0xFF8
 10026                           tblptrh	equ	0xFF7
 10027                           tblptrl	equ	0xFF6
 10028                           tablat	equ	0xFF5
 10029                           prodh	equ	0xFF4
 10030                           prodl	equ	0xFF3
 10031                           intcon	equ	0xFF2
 10032                           intcon2	equ	0xFF1
 10033                           intcon3	equ	0xFF0
 10034                           postinc0	equ	0xFEE
 10035                           wreg	equ	0xFE8
 10036                           indf1	equ	0xFE7
 10037                           postdec1	equ	0xFE5
 10038                           fsr1h	equ	0xFE2
 10039                           fsr1l	equ	0xFE1
 10040                           indf2	equ	0xFDF
 10041                           postinc2	equ	0xFDE
 10042                           postdec2	equ	0xFDD
 10043                           fsr2h	equ	0xFDA
 10044                           fsr2l	equ	0xFD9
 10045                           status	equ	0xFD8
 10046                           
 10047 ;; *************** function _delay_cycles *****************
 10048 ;; Defined at:
 10049 ;;		line 20 in file "lcd_x8.c"
 10050 ;; Parameters:    Size  Location     Type
 10051 ;;  n               1    wreg     unsigned char 
 10052 ;; Auto vars:     Size  Location     Type
 10053 ;;  n               1   29[COMRAM] unsigned char 
 10054 ;;  x               2   30[COMRAM] int 
 10055 ;; Return value:  Size  Location     Type
 10056 ;;                  1    wreg      void 
 10057 ;; Registers used:
 10058 ;;		wreg, status,2, status,0
 10059 ;; Tracked objects:
 10060 ;;		On entry : 0/0
 10061 ;;		On exit  : 0/0
 10062 ;;		Unchanged: 0/0
 10063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10065 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10066 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10067 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10068 ;;Total ram usage:        6 bytes
 10069 ;; Hardware stack levels used:    1
 10070 ;; Hardware stack levels required when called:    2
 10071 ;; This function calls:
 10072 ;;		Nothing
 10073 ;; This function is called by:
 10074 ;;		_lcd_send_nibble
 10075 ;;		_lcd_send_byte
 10076 ;; This function uses a non-reentrant model
 10077 ;;
 10078                           
 10079                           	psect	text35
 10080  002D52                     __ptext35:
 10081                           	opt stack 0
 10082  002D52                     _delay_cycles:
 10083                           	opt stack 25
 10084                           
 10085                           ;incstack = 0
 10086                           ;delay_cycles@n stored from wreg
 10087  002D52  6E1E               	movwf	delay_cycles@n,c
 10088                           
 10089                           ;lcd_x8.c: 21: int x;
 10090                           ;lcd_x8.c: 22: for (x = 0; x <= n; x++) {
 10091  002D54  0E00               	movlw	0
 10092  002D56  6E20               	movwf	delay_cycles@x+1,c
 10093  002D58  0E00               	movlw	0
 10094  002D5A  6E1F               	movwf	delay_cycles@x,c
 10095  002D5C  D003               	goto	l165
 10096  002D5E                     l166:
 10097  002D5E  0004               	clrwdt		;# 
 10098  002D60  4A1F               	infsnz	delay_cycles@x,f,c
 10099  002D62  2A20               	incf	delay_cycles@x+1,f,c
 10100  002D64                     l165:
 10101  002D64  501E               	movf	delay_cycles@n,w,c
 10102  002D66  6E1B               	movwf	??_delay_cycles& (0+255),c
 10103  002D68  6A1C               	clrf	(??_delay_cycles+1)& (0+255),c
 10104  002D6A  501F               	movf	delay_cycles@x,w,c
 10105  002D6C  5C1B               	subwf	??_delay_cycles,w,c
 10106  002D6E  501C               	movf	??_delay_cycles+1,w,c
 10107  002D70  0A80               	xorlw	128
 10108  002D72  6E1D               	movwf	(??_delay_cycles+2)& (0+255),c
 10109  002D74  5020               	movf	delay_cycles@x+1,w,c
 10110  002D76  0A80               	xorlw	128
 10111  002D78  581D               	subwfb	(??_delay_cycles+2)& (0+255),w,c
 10112  002D7A  A0D8               	btfss	status,0,c
 10113  002D7C  0012               	return	
 10114  002D7E  D7EF               	goto	l166
 10115  002D80                     __end_of_delay_cycles:
 10116                           	opt stack 0
 10117                           tblptru	equ	0xFF8
 10118                           tblptrh	equ	0xFF7
 10119                           tblptrl	equ	0xFF6
 10120                           tablat	equ	0xFF5
 10121                           prodh	equ	0xFF4
 10122                           prodl	equ	0xFF3
 10123                           intcon	equ	0xFF2
 10124                           intcon2	equ	0xFF1
 10125                           intcon3	equ	0xFF0
 10126                           postinc0	equ	0xFEE
 10127                           wreg	equ	0xFE8
 10128                           indf1	equ	0xFE7
 10129                           postdec1	equ	0xFE5
 10130                           fsr1h	equ	0xFE2
 10131                           fsr1l	equ	0xFE1
 10132                           indf2	equ	0xFDF
 10133                           postinc2	equ	0xFDE
 10134                           postdec2	equ	0xFDD
 10135                           fsr2h	equ	0xFDA
 10136                           fsr2l	equ	0xFD9
 10137                           status	equ	0xFD8
 10138                           
 10139 ;; *************** function _delay_ms *****************
 10140 ;; Defined at:
 10141 ;;		line 12 in file "lcd_x8.c"
 10142 ;; Parameters:    Size  Location     Type
 10143 ;;  n               2   26[COMRAM] unsigned int 
 10144 ;; Auto vars:     Size  Location     Type
 10145 ;;  x               2   28[COMRAM] int 
 10146 ;; Return value:  Size  Location     Type
 10147 ;;                  1    wreg      void 
 10148 ;; Registers used:
 10149 ;;		wreg, status,2, status,0
 10150 ;; Tracked objects:
 10151 ;;		On entry : 0/0
 10152 ;;		On exit  : 0/0
 10153 ;;		Unchanged: 0/0
 10154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10155 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10156 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10158 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10159 ;;Total ram usage:        4 bytes
 10160 ;; Hardware stack levels used:    1
 10161 ;; Hardware stack levels required when called:    2
 10162 ;; This function calls:
 10163 ;;		Nothing
 10164 ;; This function is called by:
 10165 ;;		_operation
 10166 ;;		_main
 10167 ;;		_lcd_send_byte
 10168 ;;		_lcd_init
 10169 ;;		_lcd_putc
 10170 ;; This function uses a non-reentrant model
 10171 ;;
 10172                           
 10173                           	psect	text36
 10174  002DA6                     __ptext36:
 10175                           	opt stack 0
 10176  002DA6                     _delay_ms:
 10177                           	opt stack 27
 10178                           
 10179                           ;lcd_x8.c: 13: int x;
 10180                           ;lcd_x8.c: 14: for (x = 0; x <= n; x++) {
 10181                           
 10182                           ;incstack = 0
 10183  002DA6  0E00               	movlw	0
 10184  002DA8  6E1E               	movwf	delay_ms@x+1,c
 10185  002DAA  0E00               	movlw	0
 10186  002DAC  6E1D               	movwf	delay_ms@x,c
 10187  002DAE  D007               	goto	l159
 10188  002DB0                     
 10189                           ;lcd_x8.c: 15: _delaywdt((unsigned long)((1)*(4000000UL/4000.0)));
 10190  002DB0  0EC8               	movlw	200
 10191  002DB2                     u5647:
 10192  002DB2  0004               	clrwdt	
 10193  002DB4  0004               	clrwdt	
 10194  002DB6  2EE8               	decfsz	wreg,f,c
 10195  002DB8  D7FC               	bra	u5647
 10196  002DBA  4A1D               	infsnz	delay_ms@x,f,c
 10197  002DBC  2A1E               	incf	delay_ms@x+1,f,c
 10198  002DBE                     l159:
 10199  002DBE  501D               	movf	delay_ms@x,w,c
 10200  002DC0  5C1B               	subwf	delay_ms@n,w,c
 10201  002DC2  501E               	movf	delay_ms@x+1,w,c
 10202  002DC4  581C               	subwfb	delay_ms@n+1,w,c
 10203  002DC6  A0D8               	btfss	status,0,c
 10204  002DC8  0012               	return	
 10205  002DCA  D7F2               	goto	l160
 10206  002DCC                     __end_of_delay_ms:
 10207                           	opt stack 0
 10208                           tblptru	equ	0xFF8
 10209                           tblptrh	equ	0xFF7
 10210                           tblptrl	equ	0xFF6
 10211                           tablat	equ	0xFF5
 10212                           prodh	equ	0xFF4
 10213                           prodl	equ	0xFF3
 10214                           intcon	equ	0xFF2
 10215                           intcon2	equ	0xFF1
 10216                           intcon3	equ	0xFF0
 10217                           postinc0	equ	0xFEE
 10218                           wreg	equ	0xFE8
 10219                           indf1	equ	0xFE7
 10220                           postdec1	equ	0xFE5
 10221                           fsr1h	equ	0xFE2
 10222                           fsr1l	equ	0xFE1
 10223                           indf2	equ	0xFDF
 10224                           postinc2	equ	0xFDE
 10225                           postdec2	equ	0xFDD
 10226                           fsr2h	equ	0xFDA
 10227                           fsr2l	equ	0xFD9
 10228                           status	equ	0xFD8
 10229                           
 10230 ;; *************** function _highIsr *****************
 10231 ;; Defined at:
 10232 ;;		line 142 in file "pwm_asl.c"
 10233 ;; Parameters:    Size  Location     Type
 10234 ;;		None
 10235 ;; Auto vars:     Size  Location     Type
 10236 ;;		None
 10237 ;; Return value:  Size  Location     Type
 10238 ;;                  1    wreg      void 
 10239 ;; Registers used:
 10240 ;;		wreg, status,2, status,0, cstack
 10241 ;; Tracked objects:
 10242 ;;		On entry : 0/0
 10243 ;;		On exit  : 0/0
 10244 ;;		Unchanged: 0/0
 10245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10248 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10249 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10250 ;;Total ram usage:       20 bytes
 10251 ;; Hardware stack levels used:    1
 10252 ;; Hardware stack levels required when called:    1
 10253 ;; This function calls:
 10254 ;;		i2___awmod
 10255 ;; This function is called by:
 10256 ;;		Interrupt level 2
 10257 ;; This function uses a non-reentrant model
 10258 ;;
 10259                           
 10260                           	psect	intcode
 10261  000008                     __pintcode:
 10262                           	opt stack 0
 10263  000008                     _highIsr:
 10264                           	opt stack 22
 10265                           
 10266                           ;incstack = 0
 10267  000008  8264               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10268  00000A  ED5B  F012         	call	int_func,f	;refresh shadow registers
 10269                           tblptru	equ	0xFF8
 10270                           tblptrh	equ	0xFF7
 10271                           tblptrl	equ	0xFF6
 10272                           tablat	equ	0xFF5
 10273                           prodh	equ	0xFF4
 10274                           prodl	equ	0xFF3
 10275                           intcon	equ	0xFF2
 10276                           intcon2	equ	0xFF1
 10277                           intcon3	equ	0xFF0
 10278                           postinc0	equ	0xFEE
 10279                           wreg	equ	0xFE8
 10280                           indf1	equ	0xFE7
 10281                           postdec1	equ	0xFE5
 10282                           fsr1h	equ	0xFE2
 10283                           fsr1l	equ	0xFE1
 10284                           indf2	equ	0xFDF
 10285                           postinc2	equ	0xFDE
 10286                           postdec2	equ	0xFDD
 10287                           fsr2h	equ	0xFDA
 10288                           fsr2l	equ	0xFD9
 10289                           status	equ	0xFD8
 10290                           
 10291                           	psect	intcode_body
 10292  0024B6                     __pintcode_body:
 10293                           	opt stack 22
 10294  0024B6                     int_func:
 10295                           	opt stack 22
 10296  0024B6  0006               	pop		; remove dummy address from shadow register refresh
 10297  0024B8  CFFA F009          	movff	pclath,??_highIsr+2
 10298  0024BC  CFFB F00A          	movff	pclatu,??_highIsr+3
 10299  0024C0  CFE9 F00B          	movff	fsr0l,??_highIsr+4
 10300  0024C4  CFEA F00C          	movff	fsr0h,??_highIsr+5
 10301  0024C8  CFE1 F00D          	movff	fsr1l,??_highIsr+6
 10302  0024CC  CFE2 F00E          	movff	fsr1h,??_highIsr+7
 10303  0024D0  CFD9 F00F          	movff	fsr2l,??_highIsr+8
 10304  0024D4  CFDA F010          	movff	fsr2h,??_highIsr+9
 10305  0024D8  CFF3 F011          	movff	prodl,??_highIsr+10
 10306  0024DC  CFF4 F012          	movff	prodh,??_highIsr+11
 10307  0024E0  CFF6 F013          	movff	tblptrl,??_highIsr+12
 10308  0024E4  CFF7 F014          	movff	tblptrh,??_highIsr+13
 10309  0024E8  CFF8 F015          	movff	tblptru,??_highIsr+14
 10310  0024EC  CFF5 F016          	movff	tablat,??_highIsr+15
 10311  0024F0  C064  F017         	movff	btemp,??_highIsr+16
 10312  0024F4  C065  F018         	movff	btemp+1,??_highIsr+17
 10313  0024F8  C066  F019         	movff	btemp+2,??_highIsr+18
 10314  0024FC  C067  F01A         	movff	btemp+3,??_highIsr+19
 10315                           
 10316                           ;pwm_asl.c: 144: if (INTCONbits.INT0IF) {
 10317  002500  A2F2               	btfss	intcon,1,c	;volatile
 10318  002502  D011               	goto	i2l110
 10319                           
 10320                           ;pwm_asl.c: 145: _delay((unsigned long)((250)*(4000000UL/4000.0)));
 10321  002504  0E02               	movlw	2
 10322  002506  6E08               	movwf	(??_highIsr+1)& (0+255),c
 10323  002508  0E45               	movlw	69
 10324  00250A  6E07               	movwf	??_highIsr& (0+255),c
 10325  00250C  0EAA               	movlw	170
 10326  00250E                     i2u565_47:
 10327  00250E  2EE8               	decfsz	wreg,f,c
 10328  002510  D7FE               	bra	i2u565_47
 10329  002512  2E07               	decfsz	??_highIsr& (0+255),f,c
 10330  002514  D7FC               	bra	i2u565_47
 10331  002516  2E08               	decfsz	(??_highIsr+1)& (0+255),f,c
 10332  002518  D7FA               	bra	i2u565_47
 10333                           
 10334                           ;pwm_asl.c: 146: if (INTCONbits.INT0IF) {
 10335  00251A  A2F2               	btfss	intcon,1,c	;volatile
 10336  00251C  D004               	goto	i2l110
 10337                           
 10338                           ;pwm_asl.c: 147: mode = (mode + 1) % 4;
 10339  00251E  285E               	incf	_mode,w,c
 10340  002520  0B03               	andlw	3
 10341  002522  6E5E               	movwf	_mode,c
 10342                           
 10343                           ;pwm_asl.c: 148: INTCONbits.INT0IF = 0;
 10344  002524  92F2               	bcf	intcon,1,c	;volatile
 10345  002526                     i2l110:
 10346                           
 10347                           ;pwm_asl.c: 149: }
 10348                           ;pwm_asl.c: 151: }
 10349                           ;pwm_asl.c: 152: if (INTCON3bits.INT2IF) {
 10350  002526  A2F0               	btfss	intcon3,1,c	;volatile
 10351  002528  D01C               	goto	i2l112
 10352                           
 10353                           ;pwm_asl.c: 153: _delay((unsigned long)((250)*(4000000UL/4000.0)));
 10354  00252A  0E02               	movlw	2
 10355  00252C  6E08               	movwf	(??_highIsr+1)& (0+255),c
 10356  00252E  0E45               	movlw	69
 10357  002530  6E07               	movwf	??_highIsr& (0+255),c
 10358  002532  0EAA               	movlw	170
 10359  002534                     i2u566_47:
 10360  002534  2EE8               	decfsz	wreg,f,c
 10361  002536  D7FE               	bra	i2u566_47
 10362  002538  2E07               	decfsz	??_highIsr& (0+255),f,c
 10363  00253A  D7FC               	bra	i2u566_47
 10364  00253C  2E08               	decfsz	(??_highIsr+1)& (0+255),f,c
 10365  00253E  D7FA               	bra	i2u566_47
 10366                           
 10367                           ;pwm_asl.c: 154: if (INTCON3bits.INT2IF) {
 10368  002540  A2F0               	btfss	intcon3,1,c	;volatile
 10369  002542  D00F               	goto	i2l112
 10370                           
 10371                           ;pwm_asl.c: 155: HS = (HS + 1) % (HS_4 + 1);
 10372  002544  0E01               	movlw	1
 10373  002546  245F               	addwf	_HS,w,c
 10374  002548  6E01               	movwf	i2___awmod@dividend,c
 10375  00254A  6A02               	clrf	i2___awmod@dividend+1,c
 10376  00254C  0E00               	movlw	0
 10377  00254E  2202               	addwfc	i2___awmod@dividend+1,f,c
 10378  002550  0E00               	movlw	0
 10379  002552  6E04               	movwf	i2___awmod@divisor+1,c
 10380  002554  0E05               	movlw	5
 10381  002556  6E03               	movwf	i2___awmod@divisor,c
 10382  002558  ECBA  F014         	call	i2___awmod	;wreg free
 10383  00255C  5001               	movf	?i2___awmod,w,c
 10384  00255E  6E5F               	movwf	_HS,c
 10385                           
 10386                           ;pwm_asl.c: 156: INTCON3bits.INT2IF = 0;
 10387  002560  92F0               	bcf	intcon3,1,c	;volatile
 10388  002562                     i2l112:
 10389                           
 10390                           ;pwm_asl.c: 157: }
 10391                           ;pwm_asl.c: 158: }
 10392                           ;pwm_asl.c: 159: if (PIR2bits.TMR3IF) {
 10393  002562  B2A1               	btfsc	4001,1,c	;volatile
 10394                           
 10395                           ;pwm_asl.c: 161: PIR2bits.TMR3IF = 0;
 10396  002564  92A1               	bcf	4001,1,c	;volatile
 10397  002566  C01A  F067         	movff	??_highIsr+19,btemp+3
 10398  00256A  C019  F066         	movff	??_highIsr+18,btemp+2
 10399  00256E  C018  F065         	movff	??_highIsr+17,btemp+1
 10400  002572  C017  F064         	movff	??_highIsr+16,btemp
 10401  002576  C016  FFF5         	movff	??_highIsr+15,tablat
 10402  00257A  C015  FFF8         	movff	??_highIsr+14,tblptru
 10403  00257E  C014  FFF7         	movff	??_highIsr+13,tblptrh
 10404  002582  C013  FFF6         	movff	??_highIsr+12,tblptrl
 10405  002586  C012  FFF4         	movff	??_highIsr+11,prodh
 10406  00258A  C011  FFF3         	movff	??_highIsr+10,prodl
 10407  00258E  C010  FFDA         	movff	??_highIsr+9,fsr2h
 10408  002592  C00F  FFD9         	movff	??_highIsr+8,fsr2l
 10409  002596  C00E  FFE2         	movff	??_highIsr+7,fsr1h
 10410  00259A  C00D  FFE1         	movff	??_highIsr+6,fsr1l
 10411  00259E  C00C  FFEA         	movff	??_highIsr+5,fsr0h
 10412  0025A2  C00B  FFE9         	movff	??_highIsr+4,fsr0l
 10413  0025A6  C00A  FFFB         	movff	??_highIsr+3,pclatu
 10414  0025AA  C009  FFFA         	movff	??_highIsr+2,pclath
 10415  0025AE  9264               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10416  0025B0  0011               	retfie		f
 10417  0025B2                     __end_of_highIsr:
 10418                           	opt stack 0
 10419                           pclatu	equ	0xFFB
 10420                           pclath	equ	0xFFA
 10421                           tblptru	equ	0xFF8
 10422                           tblptrh	equ	0xFF7
 10423                           tblptrl	equ	0xFF6
 10424                           tablat	equ	0xFF5
 10425                           prodh	equ	0xFF4
 10426                           prodl	equ	0xFF3
 10427                           intcon	equ	0xFF2
 10428                           intcon2	equ	0xFF1
 10429                           intcon3	equ	0xFF0
 10430                           postinc0	equ	0xFEE
 10431                           fsr0h	equ	0xFEA
 10432                           fsr0l	equ	0xFE9
 10433                           wreg	equ	0xFE8
 10434                           indf1	equ	0xFE7
 10435                           postdec1	equ	0xFE5
 10436                           fsr1h	equ	0xFE2
 10437                           fsr1l	equ	0xFE1
 10438                           indf2	equ	0xFDF
 10439                           postinc2	equ	0xFDE
 10440                           postdec2	equ	0xFDD
 10441                           fsr2h	equ	0xFDA
 10442                           fsr2l	equ	0xFD9
 10443                           status	equ	0xFD8
 10444                           
 10445 ;; *************** function i2___awmod *****************
 10446 ;; Defined at:
 10447 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 10448 ;; Parameters:    Size  Location     Type
 10449 ;;  dividend        2    0[COMRAM] int 
 10450 ;;  divisor         2    2[COMRAM] int 
 10451 ;; Auto vars:     Size  Location     Type
 10452 ;;  __awmod         1    5[COMRAM] unsigned char 
 10453 ;;  __awmod         1    4[COMRAM] unsigned char 
 10454 ;; Return value:  Size  Location     Type
 10455 ;;                  2    0[COMRAM] int 
 10456 ;; Registers used:
 10457 ;;		wreg, status,2, status,0
 10458 ;; Tracked objects:
 10459 ;;		On entry : 0/0
 10460 ;;		On exit  : 0/0
 10461 ;;		Unchanged: 0/0
 10462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10463 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10464 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10466 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10467 ;;Total ram usage:        6 bytes
 10468 ;; Hardware stack levels used:    1
 10469 ;; This function calls:
 10470 ;;		Nothing
 10471 ;; This function is called by:
 10472 ;;		_highIsr
 10473 ;; This function uses a non-reentrant model
 10474 ;;
 10475                           
 10476                           	psect	text38
 10477  002974                     __ptext38:
 10478                           	opt stack 0
 10479  002974                     i2___awmod:
 10480                           	opt stack 22
 10481                           
 10482                           ;incstack = 0
 10483  002974  0E00               	movlw	0
 10484  002976  6E06               	movwf	i2___awmod@sign,c
 10485  002978  AE02               	btfss	i2___awmod@dividend+1,7,c
 10486  00297A  D006               	goto	i2l623
 10487  00297C  6C01               	negf	i2___awmod@dividend,c
 10488  00297E  1E02               	comf	i2___awmod@dividend+1,f,c
 10489  002980  B0D8               	btfsc	status,0,c
 10490  002982  2A02               	incf	i2___awmod@dividend+1,f,c
 10491  002984  0E01               	movlw	1
 10492  002986  6E06               	movwf	i2___awmod@sign,c
 10493  002988                     i2l623:
 10494  002988  AE04               	btfss	i2___awmod@divisor+1,7,c
 10495  00298A  D004               	goto	i2l624
 10496  00298C  6C03               	negf	i2___awmod@divisor,c
 10497  00298E  1E04               	comf	i2___awmod@divisor+1,f,c
 10498  002990  B0D8               	btfsc	status,0,c
 10499  002992  2A04               	incf	i2___awmod@divisor+1,f,c
 10500  002994                     i2l624:
 10501  002994  5003               	movf	i2___awmod@divisor,w,c
 10502  002996  1004               	iorwf	i2___awmod@divisor+1,w,c
 10503  002998  B4D8               	btfsc	status,2,c
 10504  00299A  D018               	goto	i2l631
 10505  00299C  0E01               	movlw	1
 10506  00299E  6E05               	movwf	i2___awmod@counter,c
 10507  0029A0  D004               	goto	i2l626
 10508  0029A2  90D8               	bcf	status,0,c
 10509  0029A4  3603               	rlcf	i2___awmod@divisor,f,c
 10510  0029A6  3604               	rlcf	i2___awmod@divisor+1,f,c
 10511  0029A8  2A05               	incf	i2___awmod@counter,f,c
 10512  0029AA                     i2l626:
 10513  0029AA  AE04               	btfss	i2___awmod@divisor+1,7,c
 10514  0029AC  D7FA               	goto	i2l627
 10515  0029AE                     i2u460_40:
 10516  0029AE  5003               	movf	i2___awmod@divisor,w,c
 10517  0029B0  5C01               	subwf	i2___awmod@dividend,w,c
 10518  0029B2  5004               	movf	i2___awmod@divisor+1,w,c
 10519  0029B4  5802               	subwfb	i2___awmod@dividend+1,w,c
 10520  0029B6  A0D8               	btfss	status,0,c
 10521  0029B8  D004               	goto	i2l630
 10522  0029BA  5003               	movf	i2___awmod@divisor,w,c
 10523  0029BC  5E01               	subwf	i2___awmod@dividend,f,c
 10524  0029BE  5004               	movf	i2___awmod@divisor+1,w,c
 10525  0029C0  5A02               	subwfb	i2___awmod@dividend+1,f,c
 10526  0029C2                     i2l630:
 10527  0029C2  90D8               	bcf	status,0,c
 10528  0029C4  3204               	rrcf	i2___awmod@divisor+1,f,c
 10529  0029C6  3203               	rrcf	i2___awmod@divisor,f,c
 10530  0029C8  2E05               	decfsz	i2___awmod@counter,f,c
 10531  0029CA  D7F1               	goto	i2u460_40
 10532  0029CC                     i2l631:
 10533  0029CC  5006               	movf	i2___awmod@sign,w,c
 10534  0029CE  B4D8               	btfsc	status,2,c
 10535  0029D0  D004               	goto	i2l632
 10536  0029D2  6C01               	negf	i2___awmod@dividend,c
 10537  0029D4  1E02               	comf	i2___awmod@dividend+1,f,c
 10538  0029D6  B0D8               	btfsc	status,0,c
 10539  0029D8  2A02               	incf	i2___awmod@dividend+1,f,c
 10540  0029DA                     i2l632:
 10541  0029DA  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 10542  0029DE  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 10543  0029E2  0012               	return	
 10544  0029E4                     __end_ofi2___awmod:
 10545                           	opt stack 0
 10546                           pclatu	equ	0xFFB
 10547                           pclath	equ	0xFFA
 10548                           tblptru	equ	0xFF8
 10549                           tblptrh	equ	0xFF7
 10550                           tblptrl	equ	0xFF6
 10551                           tablat	equ	0xFF5
 10552                           prodh	equ	0xFF4
 10553                           prodl	equ	0xFF3
 10554                           intcon	equ	0xFF2
 10555                           intcon2	equ	0xFF1
 10556                           intcon3	equ	0xFF0
 10557                           postinc0	equ	0xFEE
 10558                           fsr0h	equ	0xFEA
 10559                           fsr0l	equ	0xFE9
 10560                           wreg	equ	0xFE8
 10561                           indf1	equ	0xFE7
 10562                           postdec1	equ	0xFE5
 10563                           fsr1h	equ	0xFE2
 10564                           fsr1l	equ	0xFE1
 10565                           indf2	equ	0xFDF
 10566                           postinc2	equ	0xFDE
 10567                           postdec2	equ	0xFDD
 10568                           fsr2h	equ	0xFDA
 10569                           fsr2l	equ	0xFD9
 10570                           status	equ	0xFD8
 10571                           pclatu	equ	0xFFB
 10572                           pclath	equ	0xFFA
 10573                           tblptru	equ	0xFF8
 10574                           tblptrh	equ	0xFF7
 10575                           tblptrl	equ	0xFF6
 10576                           tablat	equ	0xFF5
 10577                           prodh	equ	0xFF4
 10578                           prodl	equ	0xFF3
 10579                           intcon	equ	0xFF2
 10580                           intcon2	equ	0xFF1
 10581                           intcon3	equ	0xFF0
 10582                           postinc0	equ	0xFEE
 10583                           fsr0h	equ	0xFEA
 10584                           fsr0l	equ	0xFE9
 10585                           wreg	equ	0xFE8
 10586                           indf1	equ	0xFE7
 10587                           postdec1	equ	0xFE5
 10588                           fsr1h	equ	0xFE2
 10589                           fsr1l	equ	0xFE1
 10590                           indf2	equ	0xFDF
 10591                           postinc2	equ	0xFDE
 10592                           postdec2	equ	0xFDD
 10593                           fsr2h	equ	0xFDA
 10594                           fsr2l	equ	0xFD9
 10595                           status	equ	0xFD8
 10596                           
 10597                           	psect	rparam
 10598  0000                     pclatu	equ	0xFFB
 10599                           pclath	equ	0xFFA
 10600                           tblptru	equ	0xFF8
 10601                           tblptrh	equ	0xFF7
 10602                           tblptrl	equ	0xFF6
 10603                           tablat	equ	0xFF5
 10604                           prodh	equ	0xFF4
 10605                           prodl	equ	0xFF3
 10606                           intcon	equ	0xFF2
 10607                           intcon2	equ	0xFF1
 10608                           intcon3	equ	0xFF0
 10609                           postinc0	equ	0xFEE
 10610                           fsr0h	equ	0xFEA
 10611                           fsr0l	equ	0xFE9
 10612                           wreg	equ	0xFE8
 10613                           indf1	equ	0xFE7
 10614                           postdec1	equ	0xFE5
 10615                           fsr1h	equ	0xFE2
 10616                           fsr1l	equ	0xFE1
 10617                           indf2	equ	0xFDF
 10618                           postinc2	equ	0xFDE
 10619                           postdec2	equ	0xFDD
 10620                           fsr2h	equ	0xFDA
 10621                           fsr2l	equ	0xFD9
 10622                           status	equ	0xFD8
 10623                           
 10624                           	psect	temp
 10625  000064                     btemp:
 10626                           	opt stack 0
 10627  000064                     	ds	1
 10628  0000                     int$flags	set	btemp
 10629  0000                     wtemp6	set	btemp+1
 10630                           pclatu	equ	0xFFB
 10631                           pclath	equ	0xFFA
 10632                           tblptru	equ	0xFF8
 10633                           tblptrh	equ	0xFF7
 10634                           tblptrl	equ	0xFF6
 10635                           tablat	equ	0xFF5
 10636                           prodh	equ	0xFF4
 10637                           prodl	equ	0xFF3
 10638                           intcon	equ	0xFF2
 10639                           intcon2	equ	0xFF1
 10640                           intcon3	equ	0xFF0
 10641                           postinc0	equ	0xFEE
 10642                           fsr0h	equ	0xFEA
 10643                           fsr0l	equ	0xFE9
 10644                           wreg	equ	0xFE8
 10645                           indf1	equ	0xFE7
 10646                           postdec1	equ	0xFE5
 10647                           fsr1h	equ	0xFE2
 10648                           fsr1l	equ	0xFE1
 10649                           indf2	equ	0xFDF
 10650                           postinc2	equ	0xFDE
 10651                           postdec2	equ	0xFDD
 10652                           fsr2h	equ	0xFDA
 10653                           fsr2l	equ	0xFD9
 10654                           status	equ	0xFD8


Data Sizes:
    Strings     132
    Constant    144
    Data        4
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     87      99
    BANK0           128    102     124
    BANK1           256    130     166
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_10(CODE[4]), STR_9(CODE[12]), STR_8(CODE[7]), STR_7(CODE[12]), 
		 -> STR_5(CODE[11]), STR_4(CODE[19]), STR_3(CODE[21]), STR_2(CODE[21]), 
		 -> STR_1(CODE[21]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 64
		 -> display@LCD(BANK1[64]), display@LCDP(BANK1[64]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 64
		 -> STR_6(CODE[4]), display@LCD(BANK1[64]), display@LCDP(BANK1[64]), 


Critical Paths under _main in COMRAM

    _read_adc_voltage->___fldiv
    ___fldiv->___xxtofl
    _lcd_init->_lcd_send_byte
    _sprintf->_fround
    _sprintf->_scale
    _scale->___flmul
    _fround->___flmul
    ___flmul->___fldiv
    ___awdiv->___awmod
    ___xxtofl->___wmul
    ___llmod->___lldiv
    ___fltol->_scale
    ___fladd->_fround
    ___flneg->___xxtofl
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles

Critical Paths under _highIsr in COMRAM

    _highIsr->i2___awmod

Critical Paths under _main in BANK0

    _operation->___flge
    _display->_sprintf
    _sprintf->___flge
    _scale->___flmul
    _fround->___flmul
    ___fltol->_scale
    ___flsub->___fladd
    ___fladd->_fround
    ___flge->___fladd

Critical Paths under _highIsr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_display

Critical Paths under _highIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _highIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _highIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _highIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _highIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _highIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _highIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _highIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _highIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _highIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _highIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _highIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _highIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _highIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   92569
                                             97 BANK0      5     5      0
                            ___flmul
                           _delay_ms
                            _display
                     _initInterrupts
                    _init_adc_no_lib
                          _init_pwm1
                           _lcd_init
                           _lcd_putc
                          _operation
                   _read_adc_voltage
                         _setupPorts
 ---------------------------------------------------------------------------------
 (1) _setupPorts                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_adc_voltage                                    11     7      4    3695
                                             71 COMRAM    11     7      4
                            ___fldiv
                             ___wmul
                           ___xxtofl
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (1) _operation                                            8     8      0   16302
                                             54 BANK0      8     8      0
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                           _delay_ms
                _read_adc_raw_no_lib
                       _set_pwm1_raw
 ---------------------------------------------------------------------------------
 (2) _set_pwm1_raw                                         4     2      2     576
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _read_adc_raw_no_lib                                  7     5      2      45
                                             26 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    2265
                                             46 COMRAM    25    17      8
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    1920
                                             36 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (1) _init_pwm1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_adc_no_lib                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initInterrupts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _display                                            130   130      0   59664
                                              0 BANK1    130   130      0
                         _lcd_gotoxy
                           _lcd_putc
                           _lcd_puts
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             44    36      8   48591
                                             54 BANK0     43    35      8
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                9     5      4   10686
                                             83 COMRAM     4     0      4
                                             13 BANK0      5     5      0
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             26 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13     9      4   10407
                                             83 COMRAM     4     0      4
                                             13 BANK0      9     9      0
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    6473
                                             71 COMRAM    12     4      8
                                              0 BANK0     13    13      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1764
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1820
                                             32 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         17     9      8     455
                                             26 COMRAM    17     9      8
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          14     6      8     455
                                             26 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     550
                                             32 COMRAM    14    10      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     767
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     767
                                             39 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     618
                                             26 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     761
                                             18 BANK0     10     6      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    3801
                                             42 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fladd                                             20    12      8    3478
                                             22 BANK0     20    12      8
                            ___flneg (ARG)
                           ___xxtofl (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flneg                                              4     0      4     425
                                             46 COMRAM     4     0      4
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    1094
                                             42 BANK0     12     4      8
                            ___fladd (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             2     0      2    4426
                                             40 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (1) _lcd_putc                                             1     1      0    3849
                                             39 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           3     2      1    2067
                                             36 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        2     1      1    1236
                                             34 COMRAM     2     1      1
                       _delay_cycles
                           _delay_ms
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_send_nibble                                      2     2      0      68
                                             32 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (4) _delay_cycles                                         6     6      0      46
                                             26 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             4     2      2     502
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _highIsr                                             20    20      0     348
                                              6 COMRAM    20    20      0
                          i2___awmod
 ---------------------------------------------------------------------------------
 (9) i2___awmod                                            6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___flmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___fldiv (ARG)
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
   _delay_ms
   _display
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_putc
       _delay_ms
       _lcd_gotoxy
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___fladd
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fldiv (ARG)
               ___wmul (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
       ___flge
         ___fladd (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fldiv (ARG)
                 ___wmul (ARG)
                 ___xxtofl (ARG)
                   ___wmul (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
       ___flneg
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___flsub
         ___fladd
           ___flneg (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fldiv (ARG)
                 ___wmul (ARG)
                 ___xxtofl (ARG)
                   ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___fltol
         ___fldiv (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fldiv (ARG)
               ___wmul (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       ___xxtofl
         ___wmul (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
   _initInterrupts
   _init_adc_no_lib
   _init_pwm1
   _lcd_init
     _delay_ms
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _lcd_putc
     _delay_ms
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _operation
     ___fladd
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
     ___fldiv
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___flge
       ___fladd (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fldiv (ARG)
               ___wmul (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___fldiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
     ___flneg
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___fltol
       ___fldiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
     ___xxtofl
       ___wmul (ARG)
     _delay_ms
     _read_adc_raw_no_lib
     _set_pwm1_raw
   _read_adc_voltage
     ___fldiv
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___wmul
     ___xxtofl
       ___wmul (ARG)
     _read_adc_raw_no_lib
   _setupPorts

 _highIsr (ROOT)
   i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     82      A6       7       64.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     66      7C       5       96.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     57      63       1       78.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     185      34        0.0%
DATA                 0      0     185       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jun 23 18:34:30 2024

            ?_read_adc_voltage 0048                   ___fldiv@aexp 0047                   ___fldiv@bexp 0046  
                 ___fldiv@sign 003B             ??_read_adc_voltage 004C                             _AN 00E6  
                           _HC 01A2                             _HS 005F                 ?_lcd_send_byte 0023  
                 ___awdiv@sign 0026                             _ft 0058                             _sp 00F2  
          ___wmul@multiplicand 001D                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                  __CFG_OSC$XT 000000                    __CFG_LVP$ON 000000                    __CFG_WDT$ON 000000  
                          l200 2B36                            l122 15D2                            l123 1646  
                          l204 2AD8                            l132 1E6C                            l124 16A0  
                          l205 2AAE                            l133 1DF4                            l117 1890  
                          l125 17FA                            l134 1E86                            l230 2CD2  
                          l126 1784                            l118 159A                            l135 1E0E  
                          l143 25D4                            l160 2DB0                            l136 1E2E  
                          l144 25F0                            l401 05D4                            l137 1E4E  
                          l402 05BE                            l411 06DA                            l332 1CC4  
                          l420 08A8                            l412 06DE                            l165 2D64  
                          l421 08C0                            l413 0700                            l405 0696  
                          l181 2A8E                            l166 2D5E                            l174 2C2C  
                          l190 2C46                            l342 0CBA                            l430 097C  
                          l414 0842                            l406 0602                            l350 003C  
                          l159 2DBE                            l191 2C4A                            l335 1DA2  
                          l343 0E24                            l431 0984                            l415 0760  
                          l432 09A8                            l408 06B6                            l352 006A  
                          l345 0EDC                            l433 09B0                            l425 0918  
                          l417 0864                            l409 06A0                            l186 2C50  
                          l610 2790                            l338 0CE6                            l418 084E  
                          l370 0198                            l362 0148                            l354 013A  
                          l187 2C3E                            l195 2B42                            l611 27A0  
                          l339 0C02                            l427 0938                            l363 021C  
                          l371 0188                            l355 0124                            l179 2A66  
                          l188 2C6A                            l196 2B06                            l700 276A  
                          l428 095A                            l356 00EC                            l189 2C42  
                          l613 27BE                            l381 02EA                            l373 01C6  
                          l349 0020                            l198 2B1E                            l614 27B6  
                          l630 2952                            l438 0A80                            l382 036A  
                          l374 01AA                            l366 014C                            l199 2B2A  
                          l631 295C                            l623 2918                            l439 09F8  
                          l359 01EC                            l367 0168                            l632 296A  
                          l624 2924                            l384 0398                            l376 01DA  
                          l368 017E                            l617 27DE                            l377 086E  
                          l385 03E2                            l642 228A                            l618 27E8  
                          l626 293A                            l386 04C4                            l378 0230  
                          l619 27F6                            l627 2932                            l395 053C  
                          l379 027E                            l660 23FE                            l644 22A8  
                          l661 243C                            l645 22EA                            l389 045E  
                          l662 247A                            l654 237C                            l646 231A  
                          l750 21F4                            l806 2E22                            l655 2370  
                          l399 05A8                            l920 12D0                            l832 28B0  
                          l648 2358                            l752 2230                            l833 28A4  
                          l649 2348                            l753 2220                            l666 2D40  
                          l922 1330                            l914 128C                            l842 2A02  
                          l746 2166                            l659 23CA                            l923 12F4  
                          l915 1288                            l691 272A                            l843 29F6  
                          l940 1492                            l932 140A                            l692 271A  
                          l836 28E4                            l748 2192                            l933 13D0  
                          l837 28F2                            l749 21CC                            l942 14A2  
                          l926 13AC                            l846 2A2A                            l758 2254  
                          l927 138A                            l919 12D4                            l847 2A38  
                          l759 2248                            l936 13F4                            l928 1398  
                          l961 1572                            l945 14C6                            l937 13F8  
                          l929 139C                            l697 274E                            l689 26BE  
                          l962 157A                            l954 1506                            l698 2742  
                          l963 157C                            l947 14DC                            l971 18DC  
                          l980 198A                            l972 18D8                            l957 154C  
                          l949 14E6                            l981 1A38                            l982 19E8  
                          l983 1A10                            l975 191C                            l976 1918  
                          l985 1A36                            l978 1962                            l995 1AA4  
                          l988 1A6C                            l997 1AE8                            l989 1A4E  
                          l998 1B0C                            l999 1B36                   __CFG_CPB$OFF 000000  
                          _PR2 000FCB                   __CFG_CPD$OFF 000000                            _RPS 005A  
                          _lcd 000F83                   ___awmod@sign 0020                            prod 000FF3  
    read_adc_voltage@raw_value 0050                            wreg 000FE8                   ___flmul@aexp 0081  
                 ___flmul@bexp 0086                   ___flmul@sign 0080                   ___flmul@temp 008B  
                 ___flmul@prod 0087                    main@channel 00E5                    lcd_gotoxy@x 0026  
                  lcd_gotoxy@y 0025                   ___fltol@exp1 009B                    display@LCDP 0100  
                         l1000 1B42                           l1001 1B44                           l1010 0F76  
                         l1011 0F8A                           l1012 0FA8                           l1005 0F3A  
                         l1006 0F36                           l1023 11A0                           l1007 0F4A  
                         l1040 20A6                           l1016 1168                           l1041 208E  
                         l1033 2028                           l1025 11E4                           l1017 114A  
                         l1009 0F7A                           l1034 2038                           l1026 1202  
                         l1043 20D8                           l1035 2056                           l1044 20CC  
                         l1028 1226                           l1037 2068                           l1029 1244  
                         l1038 205C                           l1048 20F6                           l1049 2128  
                         l4119 1B36                           l5041 1E0A                           l4313 2A86  
                         l5131 25E8                           l2813 24B2                           l5055 1E48  
                         l4713 0188                           l4811 0540                           l4299 2A5E  
                         l4831 05BE                           l4719 01AA                           l4835 05CE  
                         l4917 08C4                           l4855 06A0                           l4791 0430  
                         l4783 03E2                           l4971 09F8                           l4975 0A7C  
                         STR_1 FF7B                           STR_2 FF90                           STR_3 FFA5  
                         STR_4 FFBA                           STR_5 FFE5                           STR_6 FFFB  
                         STR_7 FFCD                           STR_8 FFF0                           STR_9 FFD9  
                         u3100 293E                           u3040 27C2                           u3300 225A  
                         u3221 214A                           u2415 2BFC                           u2416 2BFE  
                         u2520 1360                           u3241 2176                           u2530 1370  
                         u5010 00C8                           u4220 2AD0                           u2700 14EA  
                         u2540 1372                           _IPR1 000F9F                           u4230 2AFA  
                         _IPR2 000FA2                           _PIE1 000F9D                           u3520 28B4  
                         u5200 0430                           _PIE2 000FA0                           u2730 1502  
                         u2570 13B4                           u3450 26DC                           u3370 2382  
                         u4227 2AC6                           u5300 06C4                           u4420 1AA0  
                         u4237 2AF0                           u3550 2A06                           u3630 20E2  
                         u5310 06D4                           u3455 26D2                           u5400 08FC  
                         u5240 0578                           u5160 03A8                           u3490 2754  
                         u5170 03F4                           u4450 1AF6                           u2780 1558  
                         u4540 2A7C                           u4460 1B1A                           u5510 0A90  
                         u5270 05E2                           u4800 0F96                           u5520 0AAA  
                         u4810 110C                           u4900 1210                           u4815 1102  
                         u5480 09B8                           _PIR1 000F9E                           u5490 09D6  
                         _PIR2 000FA1                           u4860 119C                           u5637 2C24  
                         u5590 262C                           u5647 2DB2                           u4890 11F2  
             ?_lcd_send_nibble 0001                           _main 25B2                           _mode 005E  
                         _temp 00F6                           fsr0h 000FEA                           fsr1h 000FE2  
                         fsr2h 000FDA                           fsr0l 000FE9                           indf1 000FE7  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 0064                           prodh 000FF4                           prodl 000FF3  
                         start 000E                  __CFG_IESO$OFF 000000                ___fldiv@new_exp 0040  
                  main@voltage 00E1                   _sprintf$1937 00C2                  __CFG_MCLRE$ON 000000  
                 ___param_bank 000000           __end_of_delay_cycles 2D80                  ___fltol@sign1 009A  
              __end_of___fladd 1598                          ?_main 0001                __end_of___fldiv 1B60  
              __end_of___awdiv 2800                __end_of___flneg 2D52                          STR_10 FFF7  
              __end_of___awmod 2974                __end_of___flmul 125A                __end_of___flsub 2BF2  
              __end_of___fltol 277C                __end_of___lldiv 2904                ___awdiv@divisor 0023  
              __end_of___llmod 2A4A                          _T2CON 000FCA                          _T3CON 000FB1  
                        i2l110 2526                          i2l112 2562                          i2l630 29C2  
                        i2l631 29CC                          i2l623 2988                          i2l632 29DA  
                        i2l624 2994                          i2l626 29AA                          i2l627 29A2  
              ___awdiv@counter 0025                          _RCREG 000FAE                          _RCSTA 000FAB  
                        _SPBRG 000FAF        read_adc_voltage@channel 0052                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94                          _TRISD 000F95  
                        _TRISE 000F96                          _TXREG 000FAD                          _TXSTA 000FAC  
                __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
                __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000                 __CFG_EBTR0$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
               __CFG_EBTR3$OFF 000000                __end_of_highIsr 25B2                  __CFG_WRTB$OFF 000000  
              __end_of_display 1FEA                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
               __CFG_EBTRB$OFF 000000                __end_of_dpowers FF7B                          _scale 0AB8  
              __end_of_isdigit 2E2A                _init_adc_no_lib 2E42                          pclath 000FFA  
                        tablat 000FF5                          status 000FD8        read_adc_voltage@voltage 004C  
                        wtemp6 0065                __end_of_sprintf 0AB8             __size_ofi2___awmod 0070  
               __CFG_PBADEN$ON 000000                __initialization 2B58                   __end_of_main 269E  
              ??_lcd_send_byte 0024                         ??_main 0058                  __activetblptr 000002  
         __size_of__tdiv_to_l_ 0132                         _ADCON0 000FC2                         _ADCON1 000FC1  
                       _ADCON2 000FC0               ___llmod@dividend 0028                         ?_scale 0054  
                       _ADRESH 000FC4                         _ADRESL 000FC3                         _CCPR1L 000FBE  
             ___awdiv@dividend 0021                         _INTCON 000FF2                         _SPBRGH 000FB0  
             __end_of___xxtofl 213A               __end_of_delay_ms 2DCC                         _Buffer 0182  
               __CFG_XINST$OFF 000000               __end_of__powers_ FF1F               __end_of_lcd_init 2AAC  
                       ___flge 2394               __end_of_lcd_putc 2B58               __end_of_lcd_puts 2B02  
                    ??___fladd 009E                         ___wmul 2D80                      ??___fldiv 0037  
                    ??___awdiv 0025                      ??___flneg 0033                 __CFG_STVREN$ON 000000  
                    ??___awmod 001F                      ??___flmul 0050                      ??___flsub 0058  
                    ??___fltol 0096                      ??___lldiv 0023                      ??___llmod 0030  
                       _fround 1B60                         clear_0 2B7E                         clear_1 2B8A  
                       clear_2 2B96               ___awdiv@quotient 0027                ___awmod@divisor 001D  
              ___awmod@counter 001F                      ??_highIsr 0007                      ??_display 0058  
      __end_of_init_adc_no_lib 2E4E                   __pdataCOMRAM 0060                      ??_isdigit 001B  
            __end_ofi2___awmod 29E4                   __mediumconst FEEA                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                 i2___awmod@sign 0006  
                    ??_sprintf 00BE                     ___flge@ff1 00AA                     ___flge@ff2 00AE  
                 ___xxtofl@arg 002B                   ___xxtofl@exp 002A                   ___xxtofl@val 0021  
                   __accesstop 0080        __end_of__initialization 2B9C                     ___flneg@f1 002F  
                ___rparam_used 000001                     ___fltol@f1 0092                 __pcstackCOMRAM 0001  
        __size_of_delay_cycles 002E        __size_of_initInterrupts 0040                  __end_of_scale 0F08  
                   __div_to_l_ 226C      __size_of_read_adc_voltage 0082              lcd_gotoxy@address 0027  
              __div_to_l_@exp1 0028                __div_to_l_@cntr 0027                        ??_scale 0058  
              __div_to_l_@quot 0023                   sprintf@width 00D8                     __pbssBANK0 00E6  
                   __pbssBANK1 0182    __end_of_read_adc_raw_no_lib 2CF6                   _delay_cycles 2D52  
                __div_to_l_@f1 001B                  __div_to_l_@f2 001F             __size_of_init_pwm1 0018  
               lcd_send_byte@n 0023                        ?___flge 00AA                        ?___wmul 001B  
             lcd_send_nibble@n 0022                        _CCP1CON 000FBD                        ?_fround 0054  
           __size_of_operation 0314               ?_init_adc_no_lib 0001                        _INTCON2 000FF1  
                    ?___xxtofl 0021                      ?_delay_ms 001B                     _lcd_gotoxy 2C3A  
                    ?_lcd_init 0001                      ?_lcd_putc 0001                      ?_lcd_puts 0029  
            __end_of__npowers_ FF53                        __Hparam 0000                     _scale$1936 008D  
                      __Lparam 0000       __size_of_lcd_send_nibble 0022                __size_of___flge 0122  
                      ___fladd 125A                        ___fldiv 18AC                        ___awdiv 277C  
                      ___flneg 2D24                        ___awmod 2904                        ___flmul 0F08  
                      ___flsub 2BAA                        ___fltol 269E                        ___lldiv 2882  
              __size_of___wmul 0026                        ___llmod 29E4                  ?_set_pwm1_raw 001B  
                      __pcinit 2B58                __size_of_fround 0292                        __ramtop 1000  
                      __ptext0 25B2                        __ptext1 2DEE                        __ptext2 2800  
                      __ptext3 1598                        __ptext4 2CF6                        __ptext5 2CBC  
                      __ptext6 18AC                        __ptext7 2A4A                        __ptext8 2E2A  
                      __ptext9 2E42                        _highIsr 0008                        _display 1DF2  
                  ?__div_to_l_ 001B                        _dpowers FF53                      _T2CONbits 000FCA  
                      _isdigit 2E0C                     ??___xxtofl 0025                      _T3CONbits 000FB1  
            __end_of_init_pwm1 2E42               ___awmod@dividend 001B                        _raw_val 00FA  
                   ??_delay_ms 001D                        _sprintf 0012                     ??_lcd_init 0025  
               __pintcode_body 24B6                     ??_lcd_putc 0028                     ??_lcd_puts 002B  
         end_of_initialization 2B9C                  __Lmediumconst FEEA                        int_func 24B6  
            __end_of_operation 18AC           lcd_send_byte@cm_data 0024                ___lldiv@divisor 001F  
              ___lldiv@counter 0027                      _RCSTAbits 000FAB                        postdec1 000FE5  
                      postdec2 000FDD                 _initInterrupts 2C7C                        postinc0 000FEE  
                      postinc2 000FDE                 ??_set_pwm1_raw 001D                 __tdiv_to_l_@f1 001B  
               __tdiv_to_l_@f2 001F          __end_of_lcd_send_byte 2C3A                  ??__tdiv_to_l_ 0023  
                    _PORTBbits 000F81                      _PORTCbits 000F82                      _PORTEbits 000F84  
                   _setupPorts 2DEE                    ___fladd@grs 00A9                  ___xxtofl@sign 0029  
             _read_adc_voltage 2800                      _TRISCbits 000F94                    ?_lcd_gotoxy 0025  
                  ___fldiv@grs 0042                    ___fldiv@rem 003C                      i2___awmod 2974  
              _LCD_INIT_STRING 0060                      _RPS_count 005C                    ___flmul@grs 0082  
                  _CCP1CONbits 000FBD                     display@LCD 0140                      _TXSTAbits 000FAC  
          __size_of__div_to_l_ 0128         __end_of_initInterrupts 2CBC                 __end_of___flge 24B6  
               __end_of___wmul 2DA6                    _BAUDCONbits 000FB8                  __pidataCOMRAM 2E4E  
                delay_cycles@n 001E                  delay_cycles@x 001F              ??_lcd_send_nibble 0021  
               __end_of_fround 1DF2            start_initialization 2B58            __end_of__tdiv_to_l_ 226C  
                   ?i2___awmod 0001                ___llmod@divisor 002C                ___llmod@counter 0030  
              ?_initInterrupts 0001                       ??___flge 00B2            __size_of_lcd_gotoxy 0042  
                     ??___wmul 001F   read_adc_raw_no_lib@raw_value 001F               __CFG_LPT1OSC$OFF 000000  
                     ??_fround 0058                  sprintf@tmpval 00CE                    ?_setupPorts 0001  
                    ___fladd@a 009A                      ___fladd@b 0096                     fround@prec 0095  
                    ___fldiv@a 0033                      ___fldiv@b 002F                      ___flmul@a 004C  
                    ___flmul@b 0048                    __pbssCOMRAM 0058                      ___flsub@a 00AE  
                    ___flsub@b 00AA                  __pcstackBANK0 0080                  __pcstackBANK1 0100  
            __size_of___xxtofl 0150                   _isdigit$1561 001C              __size_of_delay_ms 0026  
         __end_of_set_pwm1_raw 2D24              __size_of_lcd_init 0062                    sprintf@flag 00CC  
            __size_of_lcd_putc 0056              __size_of_lcd_puts 0056                    sprintf@fval 00DA  
                  sprintf@prec 00DE              __CFG_CCP2MX$PORTC 000000                      __pintcode 0008  
 __size_of_read_adc_raw_no_lib 003A                  __pmediumconst FEEA                       ?___fladd 0096  
                     ?___fldiv 002F                       ?___awdiv 0021                       ?___flneg 002F  
                     ?___awmod 001B                       ?___flmul 0048                       ?___flsub 00AA  
                     ?___fltol 0092                       ?___lldiv 001B                       ?___llmod 0028  
                    __npowers_ FF1F                    __tdiv_to_l_ 213A                       ?_highIsr 0001  
                     ?_display 0001                   ??__div_to_l_ 0023                       ?_isdigit 0001  
                  ??i2___awmod 0005                       ?_sprintf 00B6                      _init_pwm1 2E2A  
               __size_of_scale 0450       __size_of_init_adc_no_lib 000C                 ___wmul@product 001F  
                    delay_ms@n 001B                      delay_ms@x 001D                       _PIE2bits 000FA0  
          __size_of_setupPorts 001E                       _PIR1bits 000F9E             __end_of__div_to_l_ 2394  
                     _PIR2bits 000FA1                       i2u460_40 29AE       __end_of_read_adc_voltage 2882  
                    _operation 1598                       i2u565_47 250E                       i2u566_47 2534  
                     _RCONbits 000FD0               __CFG_WDTPS$32768 000000     read_adc_raw_no_lib@channel 0021  
                   _ADCON0bits 000FC2              ___wmul@multiplier 001B                      lcd_init@i 0025  
                    lcd_putc@c 0028                      lcd_puts@s 0029                   ??_lcd_gotoxy 0026  
                   ?_init_pwm1 0001                    _INTCON2bits 000FF1                    _INTCON3bits 000FF0  
                    copy_data0 2B6C             i2___awmod@dividend 0001                _lcd_send_nibble 2DCC  
                     __Hrparam 0000          set_pwm1_raw@raw_value 001B                     ?_operation 0001  
                     __Lrparam 0000             __CFG_BOREN$SBORDIS 000000             __end_of_lcd_gotoxy 2C7C  
             __size_of___fladd 033E               __size_of___fldiv 02B4               __size_of___awdiv 0084  
             __size_of___flneg 002E               __size_of___awmod 0070               __size_of___flmul 0352  
             __size_of___flsub 0048               __size_of___fltol 00DE               __size_of___lldiv 0082  
             __size_of___llmod 0066                    _fround$1934 0091                    _fround$1935 008D  
             __size_of_highIsr 25AA               __size_of_display 01F8                     sprintf@len 00CA  
                   sprintf@exp 00D6                     sprintf@val 00D2                       ___xxtofl 1FEA  
        __size_of_set_pwm1_raw 002E               __size_of_isdigit 001E                       _delay_ms 2DA6  
                     __ptext10 2C7C                       __ptext11 1DF2                       __ptext20 226C  
                     __ptext12 0012                       __ptext21 1FEA                       __ptext13 0AB8  
                     __ptext30 2AAC                       __ptext22 2D80                       __ptext14 2E0C  
                     __ptext31 2B02                       __ptext23 29E4                       __ptext15 1B60  
                     __ptext32 2C3A                       __ptext24 2882                       __ptext16 0F08  
                     __ptext33 2BF2                       __ptext25 269E                       __ptext17 2904  
                     __ptext34 2DCC                       __ptext26 2BAA                       __ptext18 277C  
                     __ptext35 2D52                       __ptext27 125A                       __ptext19 213A  
                     __ptext36 2DA6                       __ptext28 2D24                       __ptext29 2394  
                     __ptext38 2974                       __powers_ FEEB                       _lcd_init 2A4A  
                     _lcd_putc 2B02                       _lcd_puts 2AAC               __size_of_sprintf 0AA6  
             ??_initInterrupts 001B         __size_of_lcd_send_byte 0048                  ?_delay_cycles 0001  
           operation@CoolError 00B6                  __size_of_main 00EC              ??_init_adc_no_lib 001B  
                     int$flags 0064                   _set_pwm1_raw 2CF6                       display@C 0180  
                     display@H 0181                   ??_setupPorts 001B              i2___awmod@divisor 0003  
            i2___awmod@counter 0005                     _INTCONbits 000FF2                       isdigit@c 001D  
          _read_adc_raw_no_lib 2CBC  operation@PWM_percentage_value 00BA                       scale@scl 0091  
                  ??_init_pwm1 001B                       intlevel2 0000                      sprintf@ap 00C8  
                    sprintf@cp 00C6        __end_of_lcd_send_nibble 2DEE               __tdiv_to_l_@exp1 002B  
             __tdiv_to_l_@cntr 002A                      sprintf@sp 00B6                 ??_delay_cycles 001B  
             __tdiv_to_l_@quot 0026               ___lldiv@dividend 001B             __end_of_setupPorts 2E0C  
                  ??_operation 0058           ?_read_adc_raw_no_lib 001B                  _lcd_send_byte 2BF2  
                 ?__tdiv_to_l_ 001B                       sprintf@c 00E0                       sprintf@f 00B8  
             ___lldiv@quotient 0023                  ___fladd@signs 00A6                   ___fladd@aexp 00A7  
                 ___fladd@bexp 00A8          ??_read_adc_raw_no_lib 001D  
