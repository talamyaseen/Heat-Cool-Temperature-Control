

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Jun 25 22:32:47 2024

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           ; Version 1.45
    61                           ; Generated 16/11/2017 GMT
    62                           ; 
    63                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F4620 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     
    95                           	psect	idataCOMRAM
    96  0030AC                     __pidataCOMRAM:
    97                           	opt stack 0
    98                           
    99                           ;initializer for _LCD_INIT_STRING
   100  0030AC  28                 	db	40
   101  0030AD  0C                 	db	12
   102  0030AE  01                 	db	1
   103  0030AF  06                 	db	6
   104                           
   105                           	psect	mediumconst
   106  00FEEA                     __pmediumconst:
   107                           	opt stack 0
   108  00FEEA  00                 	db	0
   109  00FEEB                     __powers_:
   110                           	opt stack 0
   111  00FEEB  0000               	dw	0
   112  00FEED  3F80               	dw	16256
   113  00FEEF  0000               	dw	0
   114  00FEF1  4120               	dw	16672
   115  00FEF3  0000               	dw	0
   116  00FEF5  42C8               	dw	17096
   117  00FEF7  0000               	dw	0
   118  00FEF9  447A               	dw	17530
   119  00FEFB  4000               	dw	16384
   120  00FEFD  461C               	dw	17948
   121  00FEFF  5000               	dw	20480
   122  00FF01  47C3               	dw	18371
   123  00FF03  2400               	dw	9216
   124  00FF05  4974               	dw	18804
   125  00FF07  9680               	dw	38528
   126  00FF09  4B18               	dw	19224
   127  00FF0B  BC20               	dw	48160
   128  00FF0D  4CBE               	dw	19646
   129  00FF0F  6B28               	dw	27432
   130  00FF11  4E6E               	dw	20078
   131  00FF13  02F9               	dw	761
   132  00FF15  5015               	dw	20501
   133  00FF17  78EC               	dw	30956
   134  00FF19  60AD               	dw	24749
   135  00FF1B  F2CA               	dw	62154
   136  00FF1D  7149               	dw	29001
   137  00FF1F                     __end_of__powers_:
   138                           	opt stack 0
   139  00FF1F                     __npowers_:
   140                           	opt stack 0
   141  00FF1F  0000               	dw	0
   142  00FF21  3F80               	dw	16256
   143  00FF23  CCCD               	dw	52429
   144  00FF25  3DCC               	dw	15820
   145  00FF27  D70A               	dw	55050
   146  00FF29  3C23               	dw	15395
   147  00FF2B  126F               	dw	4719
   148  00FF2D  3A83               	dw	14979
   149  00FF2F  B717               	dw	46871
   150  00FF31  38D1               	dw	14545
   151  00FF33  C5AC               	dw	50604
   152  00FF35  3727               	dw	14119
   153  00FF37  37BD               	dw	14269
   154  00FF39  3586               	dw	13702
   155  00FF3B  BF95               	dw	49045
   156  00FF3D  33D6               	dw	13270
   157  00FF3F  CC77               	dw	52343
   158  00FF41  322B               	dw	12843
   159  00FF43  705F               	dw	28767
   160  00FF45  3089               	dw	12425
   161  00FF47  E6FF               	dw	59135
   162  00FF49  2EDB               	dw	11995
   163  00FF4B  E508               	dw	58632
   164  00FF4D  1E3C               	dw	7740
   165  00FF4F  4260               	dw	16992
   166  00FF51  0DA2               	dw	3490
   167  00FF53                     __end_of__npowers_:
   168                           	opt stack 0
   169  00FF53                     _dpowers:
   170                           	opt stack 0
   171  00FF53  0001               	dw	1
   172  00FF55  0000               	dw	0
   173  00FF57  000A               	dw	10
   174  00FF59  0000               	dw	0
   175  00FF5B  0064               	dw	100
   176  00FF5D  0000               	dw	0
   177  00FF5F  03E8               	dw	1000
   178  00FF61  0000               	dw	0
   179  00FF63  2710               	dw	10000
   180  00FF65  0000               	dw	0
   181  00FF67  86A0               	dw	34464
   182  00FF69  0001               	dw	1
   183  00FF6B  4240               	dw	16960
   184  00FF6D  000F               	dw	15
   185  00FF6F  9680               	dw	38528
   186  00FF71  0098               	dw	152
   187  00FF73  E100               	dw	57600
   188  00FF75  05F5               	dw	1525
   189  00FF77  CA00               	dw	51712
   190  00FF79  3B9A               	dw	15258
   191  00FF7B                     __end_of_dpowers:
   192                           	opt stack 0
   193  0000                     _CCPR2	set	4027
   194  0000                     _TMR3	set	4018
   195  0000                     _TXREG	set	4013
   196  0000                     _PIR1bits	set	3998
   197  0000                     _RCREG	set	4014
   198  0000                     _RCSTAbits	set	4011
   199  0000                     _RCSTA	set	4011
   200  0000                     _TXSTAbits	set	4012
   201  0000                     _SPBRGH	set	4016
   202  0000                     _SPBRG	set	4015
   203  0000                     _TXSTA	set	4012
   204  0000                     _BAUDCONbits	set	4024
   205  0000                     _CCP1CONbits	set	4029
   206  0000                     _CCPR1L	set	4030
   207  0000                     _TRISCbits	set	3988
   208  0000                     _CCP1CON	set	4029
   209  0000                     _T2CONbits	set	4042
   210  0000                     _T2CON	set	4042
   211  0000                     _PR2	set	4043
   212  0000                     _ADRESL	set	4035
   213  0000                     _ADRESH	set	4036
   214  0000                     _ADCON2	set	4032
   215  0000                     _ADCON0bits	set	4034
   216  0000                     _PORTEbits	set	3972
   217  0000                     _PORTCbits	set	3970
   218  0000                     _PORTBbits	set	3969
   219  0000                     _LATCbits	set	3979
   220  0000                     _PIR2bits	set	4001
   221  0000                     _PIE2bits	set	4000
   222  0000                     _INTCON2bits	set	4081
   223  0000                     _T3CONbits	set	4017
   224  0000                     _INTCON3bits	set	4080
   225  0000                     _INTCONbits	set	4082
   226  0000                     _CCP2CON	set	4026
   227  0000                     _RCONbits	set	4048
   228  0000                     _IPR2	set	4002
   229  0000                     _PIR2	set	4001
   230  0000                     _PIE2	set	4000
   231  0000                     _IPR1	set	3999
   232  0000                     _PIR1	set	3998
   233  0000                     _PIE1	set	3997
   234  0000                     _T3CON	set	4017
   235  0000                     _INTCON	set	4082
   236  0000                     _TRISE	set	3990
   237  0000                     _TRISD	set	3989
   238  0000                     _TRISA	set	3986
   239  0000                     _TRISC	set	3988
   240  0000                     _TRISB	set	3987
   241  0000                     _ADCON1	set	4033
   242  0000                     _ADCON0	set	4034
   243  0000                     _INTCON2	set	4081
   244  00FF7B                     STR_1:
   245  00FF7B  4F                 	db	79	;'O'
   246  00FF7C  46                 	db	70	;'F'
   247  00FF7D  46                 	db	70	;'F'
   248  00FF7E  20                 	db	32
   249  00FF7F  20                 	db	32
   250  00FF80  20                 	db	32
   251  00FF81  20                 	db	32
   252  00FF82  20                 	db	32
   253  00FF83  20                 	db	32
   254  00FF84  20                 	db	32
   255  00FF85  20                 	db	32
   256  00FF86  20                 	db	32
   257  00FF87  20                 	db	32
   258  00FF88  20                 	db	32
   259  00FF89  20                 	db	32
   260  00FF8A  20                 	db	32
   261  00FF8B  20                 	db	32
   262  00FF8C  20                 	db	32
   263  00FF8D  20                 	db	32
   264  00FF8E  20                 	db	32
   265  00FF8F  00                 	db	0
   266  00FF90                     STR_2:
   267  00FF90  43                 	db	67	;'C'
   268  00FF91  6F                 	db	111	;'o'
   269  00FF92  6F                 	db	111	;'o'
   270  00FF93  6C                 	db	108	;'l'
   271  00FF94  20                 	db	32
   272  00FF95  20                 	db	32
   273  00FF96  20                 	db	32
   274  00FF97  20                 	db	32
   275  00FF98  20                 	db	32
   276  00FF99  20                 	db	32
   277  00FF9A  20                 	db	32
   278  00FF9B  20                 	db	32
   279  00FF9C  20                 	db	32
   280  00FF9D  20                 	db	32
   281  00FF9E  20                 	db	32
   282  00FF9F  20                 	db	32
   283  00FFA0  20                 	db	32
   284  00FFA1  20                 	db	32
   285  00FFA2  20                 	db	32
   286  00FFA3  20                 	db	32
   287  00FFA4  00                 	db	0
   288  00FFA5                     STR_3:
   289  00FFA5  48                 	db	72	;'H'
   290  00FFA6  65                 	db	101	;'e'
   291  00FFA7  61                 	db	97	;'a'
   292  00FFA8  74                 	db	116	;'t'
   293  00FFA9  20                 	db	32
   294  00FFAA  20                 	db	32
   295  00FFAB  20                 	db	32
   296  00FFAC  20                 	db	32
   297  00FFAD  20                 	db	32
   298  00FFAE  20                 	db	32
   299  00FFAF  20                 	db	32
   300  00FFB0  20                 	db	32
   301  00FFB1  20                 	db	32
   302  00FFB2  20                 	db	32
   303  00FFB3  20                 	db	32
   304  00FFB4  20                 	db	32
   305  00FFB5  20                 	db	32
   306  00FFB6  20                 	db	32
   307  00FFB7  20                 	db	32
   308  00FFB8  20                 	db	32
   309  00FFB9  00                 	db	0
   310  00FFBA                     STR_4:
   311  00FFBA  41                 	db	65	;'A'
   312  00FFBB  75                 	db	117	;'u'
   313  00FFBC  74                 	db	116	;'t'
   314  00FFBD  6F                 	db	111	;'o'
   315  00FFBE  20                 	db	32
   316  00FFBF  43                 	db	67	;'C'
   317  00FFC0  6F                 	db	111	;'o'
   318  00FFC1  6F                 	db	111	;'o'
   319  00FFC2  6C                 	db	108	;'l'
   320  00FFC3  20                 	db	32
   321  00FFC4  20                 	db	32
   322  00FFC5  20                 	db	32
   323  00FFC6  20                 	db	32
   324  00FFC7  20                 	db	32
   325  00FFC8  20                 	db	32
   326  00FFC9  20                 	db	32
   327  00FFCA  20                 	db	32
   328  00FFCB  20                 	db	32
   329  00FFCC  00                 	db	0
   330  00FFCD                     STR_7:
   331  00FFCD  53                 	db	83	;'S'
   332  00FFCE  50                 	db	80	;'P'
   333  00FFCF  3A                 	db	58	;':'
   334  00FFD0  20                 	db	32
   335  00FFD1  25                 	db	37
   336  00FFD2  34                 	db	52	;'4'
   337  00FFD3  2E                 	db	46
   338  00FFD4  31                 	db	49	;'1'
   339  00FFD5  66                 	db	102	;'f'
   340  00FFD6  43                 	db	67	;'C'
   341  00FFD7  20                 	db	32
   342  00FFD8  00                 	db	0
   343  00FFD9                     STR_9:
   344  00FFD9  48                 	db	72	;'H'
   345  00FFDA  43                 	db	67	;'C'
   346  00FFDB  3A                 	db	58	;':'
   347  00FFDC  20                 	db	32
   348  00FFDD  25                 	db	37
   349  00FFDE  34                 	db	52	;'4'
   350  00FFDF  2E                 	db	46
   351  00FFE0  31                 	db	49	;'1'
   352  00FFE1  66                 	db	102	;'f'
   353  00FFE2  25                 	db	37
   354  00FFE3  25                 	db	37
   355  00FFE4  00                 	db	0
   356  00FFE5                     STR_5:
   357  00FFE5  52                 	db	82	;'R'
   358  00FFE6  54                 	db	84	;'T'
   359  00FFE7  3A                 	db	58	;':'
   360  00FFE8  20                 	db	32
   361  00FFE9  25                 	db	37
   362  00FFEA  34                 	db	52	;'4'
   363  00FFEB  2E                 	db	46
   364  00FFEC  31                 	db	49	;'1'
   365  00FFED  66                 	db	102	;'f'
   366  00FFEE  43                 	db	67	;'C'
   367  00FFEF  00                 	db	0
   368  00FFF0                     STR_8:
   369  00FFF0  48                 	db	72	;'H'
   370  00FFF1  53                 	db	83	;'S'
   371  00FFF2  3A                 	db	58	;':'
   372  00FFF3  20                 	db	32
   373  00FFF4  25                 	db	37
   374  00FFF5  64                 	db	100	;'d'
   375  00FFF6  00                 	db	0
   376  00FFF7                     STR_10:
   377  00FFF7  4D                 	db	77	;'M'
   378  00FFF8  44                 	db	68	;'D'
   379  00FFF9  3A                 	db	58	;':'
   380  00FFFA  00                 	db	0
   381  00FFFB                     STR_6:
   382  00FFFB  48                 	db	72	;'H'
   383  00FFFC  20                 	db	32
   384  00FFFD  43                 	db	67	;'C'
   385  00FFFE  00                 	db	0
   386                           
   387                           ; #config settings
   388  00FFFF  00                 	db	0	; dummy byte at the end
   389  0000                     
   390                           	psect	cinit
   391  002DF6                     __pcinit:
   392                           	opt stack 0
   393  002DF6                     start_initialization:
   394                           	opt stack 0
   395  002DF6                     __initialization:
   396                           	opt stack 0
   397                           
   398                           ; Initialize objects allocated to COMRAM (4 bytes)
   399                           ; load TBLPTR registers with __pidataCOMRAM
   400  002DF6  0EAC               	movlw	low __pidataCOMRAM
   401  002DF8  6EF6               	movwf	tblptrl,c
   402  002DFA  0E30               	movlw	high __pidataCOMRAM
   403  002DFC  6EF7               	movwf	tblptrh,c
   404  002DFE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   405  002E00  6EF8               	movwf	tblptru,c
   406  002E02  EE00  F05C         	lfsr	0,__pdataCOMRAM
   407  002E06  EE10 F004          	lfsr	1,4
   408  002E0A                     copy_data0:
   409  002E0A  0009               	tblrd		*+
   410  002E0C  CFF5 FFEE          	movff	tablat,postinc0
   411  002E10  50E5               	movf	postdec1,w,c
   412  002E12  50E1               	movf	fsr1l,w,c
   413  002E14  E1FA               	bnz	copy_data0
   414                           
   415                           ; Clear objects allocated to BANK1 (36 bytes)
   416  002E16  EE01  F0A1         	lfsr	0,__pbssBANK1
   417  002E1A  0E24               	movlw	36
   418  002E1C                     clear_0:
   419  002E1C  6AEE               	clrf	postinc0,c
   420  002E1E  06E8               	decf	wreg,f,c
   421  002E20  E1FD               	bnz	clear_0
   422                           
   423                           ; Clear objects allocated to BANK0 (22 bytes)
   424  002E22  EE00  F0D3         	lfsr	0,__pbssBANK0
   425  002E26  0E16               	movlw	22
   426  002E28                     clear_1:
   427  002E28  6AEE               	clrf	postinc0,c
   428  002E2A  06E8               	decf	wreg,f,c
   429  002E2C  E1FD               	bnz	clear_1
   430                           
   431                           ; Clear objects allocated to COMRAM (12 bytes)
   432  002E2E  EE00  F050         	lfsr	0,__pbssCOMRAM
   433  002E32  0E0C               	movlw	12
   434  002E34                     clear_2:
   435  002E34  6AEE               	clrf	postinc0,c
   436  002E36  06E8               	decf	wreg,f,c
   437  002E38  E1FD               	bnz	clear_2
   438  002E3A                     end_of_initialization:
   439                           	opt stack 0
   440  002E3A                     __end_of__initialization:
   441                           	opt stack 0
   442  002E3A  9060               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   443  002E3C  9260               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   444  002E3E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   445  002E40  6EF8               	movwf	tblptru,c
   446  002E42  0100               	movlb	0
   447  002E44  EF8B  F013         	goto	_main	;jump to C main() function
   448                           tblptru	equ	0xFF8
   449                           tblptrh	equ	0xFF7
   450                           tblptrl	equ	0xFF6
   451                           tablat	equ	0xFF5
   452                           postinc0	equ	0xFEE
   453                           wreg	equ	0xFE8
   454                           postdec1	equ	0xFE5
   455                           fsr1l	equ	0xFE1
   456                           
   457                           	psect	bssCOMRAM
   458  000050                     __pbssCOMRAM:
   459                           	opt stack 0
   460  000050                     _compare:
   461                           	opt stack 0
   462  000050                     	ds	4
   463  000054                     _ft:
   464                           	opt stack 0
   465  000054                     	ds	2
   466  000056                     _RPS:
   467                           	opt stack 0
   468  000056                     	ds	2
   469  000058                     _RPS_count:
   470                           	opt stack 0
   471  000058                     	ds	2
   472  00005A                     _mode:
   473                           	opt stack 0
   474  00005A                     	ds	1
   475  00005B                     _HS:
   476                           	opt stack 0
   477  00005B                     	ds	1
   478                           tblptru	equ	0xFF8
   479                           tblptrh	equ	0xFF7
   480                           tblptrl	equ	0xFF6
   481                           tablat	equ	0xFF5
   482                           postinc0	equ	0xFEE
   483                           wreg	equ	0xFE8
   484                           postdec1	equ	0xFE5
   485                           fsr1l	equ	0xFE1
   486                           
   487                           	psect	dataCOMRAM
   488  00005C                     __pdataCOMRAM:
   489                           	opt stack 0
   490  00005C                     _LCD_INIT_STRING:
   491                           	opt stack 0
   492  00005C                     	ds	4
   493                           tblptru	equ	0xFF8
   494                           tblptrh	equ	0xFF7
   495                           tblptrl	equ	0xFF6
   496                           tablat	equ	0xFF5
   497                           postinc0	equ	0xFEE
   498                           wreg	equ	0xFE8
   499                           postdec1	equ	0xFE5
   500                           fsr1l	equ	0xFE1
   501                           
   502                           	psect	bssBANK0
   503  0000D3                     __pbssBANK0:
   504                           	opt stack 0
   505  0000D3                     _AN:
   506                           	opt stack 0
   507  0000D3                     	ds	12
   508  0000DF                     _sp:
   509                           	opt stack 0
   510  0000DF                     	ds	4
   511  0000E3                     _temp:
   512                           	opt stack 0
   513  0000E3                     	ds	4
   514  0000E7                     _raw_val:
   515                           	opt stack 0
   516  0000E7                     	ds	2
   517                           tblptru	equ	0xFF8
   518                           tblptrh	equ	0xFF7
   519                           tblptrl	equ	0xFF6
   520                           tablat	equ	0xFF5
   521                           postinc0	equ	0xFEE
   522                           wreg	equ	0xFE8
   523                           postdec1	equ	0xFE5
   524                           fsr1l	equ	0xFE1
   525                           
   526                           	psect	bssBANK1
   527  0001A1                     __pbssBANK1:
   528                           	opt stack 0
   529  0001A1                     _Buffer:
   530                           	opt stack 0
   531  0001A1                     	ds	32
   532  0001C1                     _HC:
   533                           	opt stack 0
   534  0001C1                     	ds	4
   535                           tblptru	equ	0xFF8
   536                           tblptrh	equ	0xFF7
   537                           tblptrl	equ	0xFF6
   538                           tablat	equ	0xFF5
   539                           postinc0	equ	0xFEE
   540                           wreg	equ	0xFE8
   541                           postdec1	equ	0xFE5
   542                           fsr1l	equ	0xFE1
   543                           
   544                           	psect	cstackBANK1
   545  000100                     __pcstackBANK1:
   546                           	opt stack 0
   547  000100                     _sprintf$1989:
   548                           	opt stack 0
   549                           
   550                           ; 4 bytes @ 0x0
   551  000100                     	ds	4
   552  000104                     sprintf@cp:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x4
   556  000104                     	ds	2
   557  000106                     sprintf@ap:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x6
   561  000106                     	ds	2
   562  000108                     sprintf@len:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x8
   566  000108                     	ds	2
   567  00010A                     sprintf@flag:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0xA
   571  00010A                     	ds	2
   572  00010C                     sprintf@tmpval:
   573                           	opt stack 0
   574                           
   575                           ; 4 bytes @ 0xC
   576  00010C                     	ds	4
   577  000110                     sprintf@val:
   578                           	opt stack 0
   579                           
   580                           ; 4 bytes @ 0x10
   581  000110                     	ds	4
   582  000114                     sprintf@exp:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x14
   586  000114                     	ds	2
   587  000116                     sprintf@width:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x16
   591  000116                     	ds	2
   592  000118                     sprintf@fval:
   593                           	opt stack 0
   594                           
   595                           ; 4 bytes @ 0x18
   596  000118                     	ds	4
   597  00011C                     sprintf@prec:
   598                           	opt stack 0
   599                           
   600                           ; 2 bytes @ 0x1C
   601  00011C                     	ds	2
   602  00011E                     sprintf@c:
   603                           	opt stack 0
   604                           
   605                           ; 1 bytes @ 0x1E
   606  00011E                     	ds	1
   607  00011F                     display@LCDP:
   608                           	opt stack 0
   609                           
   610                           ; 64 bytes @ 0x1F
   611  00011F                     	ds	64
   612  00015F                     display@LCD:
   613                           	opt stack 0
   614                           
   615                           ; 64 bytes @ 0x5F
   616  00015F                     	ds	64
   617  00019F                     display@C:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x9F
   621  00019F                     	ds	1
   622  0001A0                     display@H:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0xA0
   626  0001A0                     	ds	1
   627                           tblptru	equ	0xFF8
   628                           tblptrh	equ	0xFF7
   629                           tblptrl	equ	0xFF6
   630                           tablat	equ	0xFF5
   631                           postinc0	equ	0xFEE
   632                           wreg	equ	0xFE8
   633                           postdec1	equ	0xFE5
   634                           fsr1l	equ	0xFE1
   635                           
   636                           	psect	cstackBANK0
   637  000080                     __pcstackBANK0:
   638                           	opt stack 0
   639  000080                     ?___flmul:
   640                           	opt stack 0
   641  000080                     read_adc_voltage@voltage:
   642                           	opt stack 0
   643  000080                     ___flmul@b:
   644                           	opt stack 0
   645                           
   646                           ; 4 bytes @ 0x0
   647  000080                     	ds	4
   648  000084                     read_adc_voltage@channel:
   649                           	opt stack 0
   650  000084                     ___flmul@a:
   651                           	opt stack 0
   652                           
   653                           ; 4 bytes @ 0x4
   654  000084                     	ds	1
   655  000085                     read_adc_voltage@raw_value:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x5
   659  000085                     	ds	3
   660  000088                     ___flmul@sign:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0x8
   664  000088                     	ds	1
   665  000089                     ___flmul@aexp:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x9
   669  000089                     	ds	1
   670  00008A                     ___flmul@grs:
   671                           	opt stack 0
   672                           
   673                           ; 4 bytes @ 0xA
   674  00008A                     	ds	4
   675  00008E                     ___flmul@bexp:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0xE
   679  00008E                     	ds	1
   680  00008F                     ___flmul@prod:
   681                           	opt stack 0
   682                           
   683                           ; 4 bytes @ 0xF
   684  00008F                     	ds	4
   685  000093                     ___flmul@temp:
   686                           	opt stack 0
   687                           
   688                           ; 2 bytes @ 0x13
   689  000093                     	ds	2
   690  000095                     ?_fround:
   691                           	opt stack 0
   692  000095                     ?_scale:
   693                           	opt stack 0
   694                           
   695                           ; 4 bytes @ 0x15
   696  000095                     	ds	4
   697  000099                     _fround$1987:
   698                           	opt stack 0
   699  000099                     _scale$1988:
   700                           	opt stack 0
   701                           
   702                           ; 4 bytes @ 0x19
   703  000099                     	ds	4
   704  00009D                     scale@scl:
   705                           	opt stack 0
   706  00009D                     _fround$1986:
   707                           	opt stack 0
   708                           
   709                           ; 4 bytes @ 0x1D
   710  00009D                     	ds	1
   711  00009E                     ?___fltol:
   712                           	opt stack 0
   713  00009E                     ___fltol@f1:
   714                           	opt stack 0
   715                           
   716                           ; 4 bytes @ 0x1E
   717  00009E                     	ds	3
   718  0000A1                     fround@prec:
   719                           	opt stack 0
   720                           
   721                           ; 1 bytes @ 0x21
   722  0000A1                     	ds	1
   723  0000A2                     ??___fltol:
   724  0000A2                     ?___fladd:
   725                           	opt stack 0
   726  0000A2                     ___fladd@b:
   727                           	opt stack 0
   728                           
   729                           ; 4 bytes @ 0x22
   730  0000A2                     	ds	4
   731  0000A6                     ___fltol@sign1:
   732                           	opt stack 0
   733  0000A6                     ___fladd@a:
   734                           	opt stack 0
   735                           
   736                           ; 4 bytes @ 0x26
   737  0000A6                     	ds	1
   738  0000A7                     ___fltol@exp1:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x27
   742  0000A7                     	ds	3
   743  0000AA                     ??___fladd:
   744                           
   745                           ; 1 bytes @ 0x2A
   746  0000AA                     	ds	8
   747  0000B2                     ___fladd@signs:
   748                           	opt stack 0
   749                           
   750                           ; 1 bytes @ 0x32
   751  0000B2                     	ds	1
   752  0000B3                     ___fladd@aexp:
   753                           	opt stack 0
   754                           
   755                           ; 1 bytes @ 0x33
   756  0000B3                     	ds	1
   757  0000B4                     ___fladd@bexp:
   758                           	opt stack 0
   759                           
   760                           ; 1 bytes @ 0x34
   761  0000B4                     	ds	1
   762  0000B5                     ___fladd@grs:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0x35
   766  0000B5                     	ds	1
   767  0000B6                     ?___flsub:
   768                           	opt stack 0
   769  0000B6                     ___flge@ff1:
   770                           	opt stack 0
   771  0000B6                     ___flsub@b:
   772                           	opt stack 0
   773                           
   774                           ; 4 bytes @ 0x36
   775  0000B6                     	ds	4
   776  0000BA                     ___flge@ff2:
   777                           	opt stack 0
   778  0000BA                     ___flsub@a:
   779                           	opt stack 0
   780                           
   781                           ; 4 bytes @ 0x3A
   782  0000BA                     	ds	4
   783  0000BE                     ??___flge:
   784                           
   785                           ; 1 bytes @ 0x3E
   786  0000BE                     	ds	4
   787  0000C2                     ??_operation:
   788  0000C2                     ?_sprintf:
   789                           	opt stack 0
   790  0000C2                     sprintf@sp:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0x42
   794  0000C2                     	ds	2
   795  0000C4                     sprintf@f:
   796                           	opt stack 0
   797  0000C4                     operation@PWM_percentage_value:
   798                           	opt stack 0
   799                           
   800                           ; 4 bytes @ 0x44
   801  0000C4                     	ds	4
   802  0000C8                     operation@CoolError:
   803                           	opt stack 0
   804                           
   805                           ; 4 bytes @ 0x48
   806  0000C8                     	ds	2
   807  0000CA                     ??_sprintf:
   808                           
   809                           ; 1 bytes @ 0x4A
   810  0000CA                     	ds	4
   811  0000CE                     main@voltage:
   812                           	opt stack 0
   813                           
   814                           ; 4 bytes @ 0x4E
   815  0000CE                     	ds	4
   816  0000D2                     main@channel:
   817                           	opt stack 0
   818                           
   819                           ; 1 bytes @ 0x52
   820  0000D2                     	ds	1
   821                           tblptru	equ	0xFF8
   822                           tblptrh	equ	0xFF7
   823                           tblptrl	equ	0xFF6
   824                           tablat	equ	0xFF5
   825                           postinc0	equ	0xFEE
   826                           wreg	equ	0xFE8
   827                           postdec1	equ	0xFE5
   828                           fsr1l	equ	0xFE1
   829                           
   830                           	psect	cstackCOMRAM
   831  000001                     __pcstackCOMRAM:
   832                           	opt stack 0
   833  000001                     ?i2___awmod:
   834                           	opt stack 0
   835  000001                     ?i2___fltol:
   836                           	opt stack 0
   837  000001                     i2___awmod@dividend:
   838                           	opt stack 0
   839  000001                     i2___fltol@f1:
   840                           	opt stack 0
   841                           
   842                           ; 4 bytes @ 0x0
   843  000001                     	ds	2
   844  000003                     i2___awmod@divisor:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x2
   848  000003                     	ds	2
   849  000005                     ??i2___fltol:
   850  000005                     i2___awmod@counter:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0x4
   854  000005                     	ds	1
   855  000006                     i2___awmod@sign:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x5
   859  000006                     	ds	3
   860  000009                     i2___fltol@sign1:
   861                           	opt stack 0
   862                           
   863                           ; 1 bytes @ 0x8
   864  000009                     	ds	1
   865  00000A                     i2___fltol@exp1:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x9
   869  00000A                     	ds	1
   870  00000B                     ??_highIsr:
   871                           
   872                           ; 1 bytes @ 0xA
   873  00000B                     	ds	20
   874  00001F                     ??_isdigit:
   875  00001F                     ??_delay_cycles:
   876  00001F                     ?_read_adc_raw_no_lib:
   877                           	opt stack 0
   878  00001F                     ?___wmul:
   879                           	opt stack 0
   880  00001F                     ?___awmod:
   881                           	opt stack 0
   882  00001F                     ?__tdiv_to_l_:
   883                           	opt stack 0
   884  00001F                     ?__div_to_l_:
   885                           	opt stack 0
   886  00001F                     ?___lldiv:
   887                           	opt stack 0
   888  00001F                     delay_ms@n:
   889                           	opt stack 0
   890  00001F                     set_pwm1_raw@raw_value:
   891                           	opt stack 0
   892  00001F                     ___wmul@multiplier:
   893                           	opt stack 0
   894  00001F                     ___awmod@dividend:
   895                           	opt stack 0
   896  00001F                     __div_to_l_@f1:
   897                           	opt stack 0
   898  00001F                     __tdiv_to_l_@f1:
   899                           	opt stack 0
   900  00001F                     ___lldiv@dividend:
   901                           	opt stack 0
   902                           
   903                           ; 4 bytes @ 0x1E
   904  00001F                     	ds	1
   905  000020                     _isdigit$1613:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x1F
   909  000020                     	ds	1
   910  000021                     ??_set_pwm1_raw:
   911  000021                     ??_read_adc_raw_no_lib:
   912  000021                     isdigit@c:
   913                           	opt stack 0
   914  000021                     delay_ms@x:
   915                           	opt stack 0
   916  000021                     ___wmul@multiplicand:
   917                           	opt stack 0
   918  000021                     ___awmod@divisor:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x20
   922  000021                     	ds	1
   923  000022                     delay_cycles@n:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x21
   927  000022                     	ds	1
   928  000023                     read_adc_raw_no_lib@channel:
   929                           	opt stack 0
   930  000023                     ___awmod@counter:
   931                           	opt stack 0
   932  000023                     delay_cycles@x:
   933                           	opt stack 0
   934  000023                     ___wmul@product:
   935                           	opt stack 0
   936  000023                     __div_to_l_@f2:
   937                           	opt stack 0
   938  000023                     __tdiv_to_l_@f2:
   939                           	opt stack 0
   940  000023                     ___lldiv@divisor:
   941                           	opt stack 0
   942                           
   943                           ; 4 bytes @ 0x22
   944  000023                     	ds	1
   945  000024                     ___awmod@sign:
   946                           	opt stack 0
   947  000024                     read_adc_raw_no_lib@raw_value:
   948                           	opt stack 0
   949                           
   950                           ; 2 bytes @ 0x23
   951  000024                     	ds	1
   952  000025                     ??_lcd_send_nibble:
   953  000025                     ?___awdiv:
   954                           	opt stack 0
   955  000025                     ?___xxtofl:
   956                           	opt stack 0
   957  000025                     ___awdiv@dividend:
   958                           	opt stack 0
   959  000025                     ___xxtofl@val:
   960                           	opt stack 0
   961                           
   962                           ; 4 bytes @ 0x24
   963  000025                     	ds	1
   964  000026                     lcd_send_nibble@n:
   965                           	opt stack 0
   966                           
   967                           ; 1 bytes @ 0x25
   968  000026                     	ds	1
   969  000027                     ??__tdiv_to_l_:
   970  000027                     lcd_send_byte@n:
   971                           	opt stack 0
   972  000027                     ___awdiv@divisor:
   973                           	opt stack 0
   974  000027                     __div_to_l_@quot:
   975                           	opt stack 0
   976  000027                     ___lldiv@quotient:
   977                           	opt stack 0
   978                           
   979                           ; 4 bytes @ 0x26
   980  000027                     	ds	1
   981  000028                     lcd_send_byte@cm_data:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x27
   985  000028                     	ds	1
   986  000029                     ??___xxtofl:
   987  000029                     lcd_init@i:
   988                           	opt stack 0
   989  000029                     lcd_gotoxy@y:
   990                           	opt stack 0
   991  000029                     ___awdiv@counter:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x28
   995  000029                     	ds	1
   996  00002A                     lcd_gotoxy@x:
   997                           	opt stack 0
   998  00002A                     ___awdiv@sign:
   999                           	opt stack 0
  1000  00002A                     __tdiv_to_l_@quot:
  1001                           	opt stack 0
  1002                           
  1003                           ; 4 bytes @ 0x29
  1004  00002A                     	ds	1
  1005  00002B                     lcd_gotoxy@address:
  1006                           	opt stack 0
  1007  00002B                     __div_to_l_@cntr:
  1008                           	opt stack 0
  1009  00002B                     ___lldiv@counter:
  1010                           	opt stack 0
  1011  00002B                     ___awdiv@quotient:
  1012                           	opt stack 0
  1013                           
  1014                           ; 2 bytes @ 0x2A
  1015  00002B                     	ds	1
  1016  00002C                     ?___llmod:
  1017                           	opt stack 0
  1018  00002C                     lcd_putc@c:
  1019                           	opt stack 0
  1020  00002C                     __div_to_l_@exp1:
  1021                           	opt stack 0
  1022  00002C                     ___llmod@dividend:
  1023                           	opt stack 0
  1024                           
  1025                           ; 4 bytes @ 0x2B
  1026  00002C                     	ds	1
  1027  00002D                     ___xxtofl@sign:
  1028                           	opt stack 0
  1029  00002D                     lcd_puts@s:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0x2C
  1033  00002D                     	ds	1
  1034  00002E                     __tdiv_to_l_@cntr:
  1035                           	opt stack 0
  1036  00002E                     ___xxtofl@exp:
  1037                           	opt stack 0
  1038                           
  1039                           ; 1 bytes @ 0x2D
  1040  00002E                     	ds	1
  1041  00002F                     __tdiv_to_l_@exp1:
  1042                           	opt stack 0
  1043  00002F                     ___xxtofl@arg:
  1044                           	opt stack 0
  1045                           
  1046                           ; 4 bytes @ 0x2E
  1047  00002F                     	ds	1
  1048  000030                     ___llmod@divisor:
  1049                           	opt stack 0
  1050                           
  1051                           ; 4 bytes @ 0x2F
  1052  000030                     	ds	3
  1053  000033                     ?___fldiv:
  1054                           	opt stack 0
  1055  000033                     ?___flneg:
  1056                           	opt stack 0
  1057  000033                     ___flneg@f1:
  1058                           	opt stack 0
  1059  000033                     ___fldiv@b:
  1060                           	opt stack 0
  1061                           
  1062                           ; 4 bytes @ 0x32
  1063  000033                     	ds	1
  1064  000034                     ___llmod@counter:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x33
  1068  000034                     	ds	3
  1069  000037                     ___fldiv@a:
  1070                           	opt stack 0
  1071                           
  1072                           ; 4 bytes @ 0x36
  1073  000037                     	ds	4
  1074  00003B                     ??___fldiv:
  1075                           
  1076                           ; 1 bytes @ 0x3A
  1077  00003B                     	ds	4
  1078  00003F                     ___fldiv@sign:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x3E
  1082  00003F                     	ds	1
  1083  000040                     ___fldiv@rem:
  1084                           	opt stack 0
  1085                           
  1086                           ; 4 bytes @ 0x3F
  1087  000040                     	ds	4
  1088  000044                     ___fldiv@new_exp:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x43
  1092  000044                     	ds	2
  1093  000046                     ___fldiv@grs:
  1094                           	opt stack 0
  1095                           
  1096                           ; 4 bytes @ 0x45
  1097  000046                     	ds	4
  1098  00004A                     ___fldiv@bexp:
  1099                           	opt stack 0
  1100                           
  1101                           ; 1 bytes @ 0x49
  1102  00004A                     	ds	1
  1103  00004B                     ___fldiv@aexp:
  1104                           	opt stack 0
  1105                           
  1106                           ; 1 bytes @ 0x4A
  1107  00004B                     	ds	1
  1108  00004C                     ??___flmul:
  1109  00004C                     ?_read_adc_voltage:
  1110                           	opt stack 0
  1111                           
  1112                           ; 4 bytes @ 0x4B
  1113  00004C                     	ds	4
  1114  000050                     tblptru	equ	0xFF8
  1115                           tblptrh	equ	0xFF7
  1116                           tblptrl	equ	0xFF6
  1117                           tablat	equ	0xFF5
  1118                           postinc0	equ	0xFEE
  1119                           wreg	equ	0xFE8
  1120                           postdec1	equ	0xFE5
  1121                           fsr1l	equ	0xFE1
  1122                           
  1123                           ; 1 bytes @ 0x4F
  1124 ;;
  1125 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1126 ;;
  1127 ;; *************** function _main *****************
  1128 ;; Defined at:
  1129 ;;		line 332 in file "pwm_asl.c"
  1130 ;; Parameters:    Size  Location     Type
  1131 ;;		None
  1132 ;; Auto vars:     Size  Location     Type
  1133 ;;  voltage         4   78[BANK0 ] float 
  1134 ;;  channel         1   82[BANK0 ] unsigned char 
  1135 ;; Return value:  Size  Location     Type
  1136 ;;                  1    wreg      void 
  1137 ;; Registers used:
  1138 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1139 ;; Tracked objects:
  1140 ;;		On entry : 0/0
  1141 ;;		On exit  : 0/0
  1142 ;;		Unchanged: 0/0
  1143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1145 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1147 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1148 ;;Total ram usage:        5 bytes
  1149 ;; Hardware stack levels required when called:    9
  1150 ;; This function calls:
  1151 ;;		___flmul
  1152 ;;		_delay_ms
  1153 ;;		_display
  1154 ;;		_initInterrupts
  1155 ;;		_init_adc_no_lib
  1156 ;;		_init_pwm1
  1157 ;;		_lcd_init
  1158 ;;		_lcd_putc
  1159 ;;		_operation
  1160 ;;		_read_adc_voltage
  1161 ;;		_setupPorts
  1162 ;; This function is called by:
  1163 ;;		Startup code after reset
  1164 ;; This function uses a non-reentrant model
  1165 ;;
  1166                           
  1167                           	psect	text0
  1168  002716                     __ptext0:
  1169                           	opt stack 0
  1170  002716                     _main:
  1171                           	opt stack 22
  1172                           
  1173                           ;pwm_asl.c: 333: unsigned char channel;
  1174                           ;pwm_asl.c: 334: float voltage;
  1175                           ;pwm_asl.c: 335: setupPorts();
  1176                           
  1177                           ;incstack = 0
  1178  002716  EC26  F018         	call	_setupPorts	;wreg free
  1179                           
  1180                           ;pwm_asl.c: 336: initInterrupts();
  1181  00271A  EC79  F016         	call	_initInterrupts	;wreg free
  1182                           
  1183                           ;pwm_asl.c: 337: lcd_init();
  1184  00271E  EC48  F016         	call	_lcd_init	;wreg free
  1185                           
  1186                           ;pwm_asl.c: 338: init_adc_no_lib();
  1187  002722  EC50  F018         	call	_init_adc_no_lib	;wreg free
  1188                           
  1189                           ;pwm_asl.c: 339: init_pwm1();
  1190  002726  EC44  F018         	call	_init_pwm1	;wreg free
  1191                           
  1192                           ;pwm_asl.c: 340: lcd_putc('\f');
  1193  00272A  0E0C               	movlw	12
  1194  00272C  ECD0  F016         	call	_lcd_putc
  1195                           
  1196                           ;pwm_asl.c: 341: mode = OFF;
  1197  002730  0E00               	movlw	0
  1198  002732  6E5A               	movwf	_mode,c
  1199                           
  1200                           ;pwm_asl.c: 342: HS = HS_0;
  1201  002734  0E00               	movlw	0
  1202  002736  6E5B               	movwf	_HS,c
  1203  002738                     l154:
  1204  002738  0004               	clrwdt		;# 
  1205                           
  1206                           ;pwm_asl.c: 345: delay_ms(200);
  1207  00273A  0E00               	movlw	0
  1208  00273C  6E20               	movwf	delay_ms@n+1,c
  1209  00273E  0EC8               	movlw	200
  1210  002740  6E1F               	movwf	delay_ms@n,c
  1211  002742  EC02  F018         	call	_delay_ms	;wreg free
  1212                           
  1213                           ;pwm_asl.c: 346: for (channel = 0; channel < 3; channel++) {
  1214  002746  0E00               	movlw	0
  1215  002748  0100               	movlb	0	; () banked
  1216  00274A  6FD2               	movwf	main@channel& (0+255),b
  1217  00274C                     l6082:
  1218                           
  1219                           ; BSR set to: 0
  1220  00274C  0E02               	movlw	2
  1221  00274E  65D2               	cpfsgt	main@channel& (0+255),b
  1222  002750  D001               	goto	l155
  1223  002752  D01E               	goto	u7000
  1224  002754                     l155:
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;pwm_asl.c: 347: voltage = read_adc_voltage((unsigned char) channel);
  1228                           
  1229                           ; BSR set to: 0
  1230  002754  51D2               	movf	main@channel& (0+255),w,b
  1231  002756  ECDF  F014         	call	_read_adc_voltage
  1232  00275A  C04C  F0CE         	movff	?_read_adc_voltage,main@voltage
  1233  00275E  C04D  F0CF         	movff	?_read_adc_voltage+1,main@voltage+1
  1234  002762  C04E  F0D0         	movff	?_read_adc_voltage+2,main@voltage+2
  1235  002766  C04F  F0D1         	movff	?_read_adc_voltage+3,main@voltage+3
  1236                           
  1237                           ;pwm_asl.c: 348: AN[channel] = voltage;
  1238  00276A  0100               	movlb	0	; () banked
  1239  00276C  51D2               	movf	main@channel& (0+255),w,b
  1240  00276E  0D04               	mullw	4
  1241  002770  0ED3               	movlw	low _AN
  1242  002772  24F3               	addwf	prodl,w,c
  1243  002774  6ED9               	movwf	fsr2l,c
  1244  002776  0E00               	movlw	high _AN
  1245  002778  20F4               	addwfc	prodh,w,c
  1246  00277A  6EDA               	movwf	fsr2h,c
  1247  00277C  C0CE  FFDE         	movff	main@voltage,postinc2
  1248  002780  C0CF  FFDE         	movff	main@voltage+1,postinc2
  1249  002784  C0D0  FFDE         	movff	main@voltage+2,postinc2
  1250  002788  C0D1  FFDE         	movff	main@voltage+3,postinc2
  1251                           
  1252                           ; BSR set to: 0
  1253  00278C  2BD2               	incf	main@channel& (0+255),f,b
  1254  00278E  D7DE               	goto	l6082
  1255  002790                     u7000:
  1256                           
  1257                           ; BSR set to: 0
  1258                           ;pwm_asl.c: 349: }
  1259                           ;pwm_asl.c: 350: sp=AN[0]*20;
  1260                           
  1261                           ; BSR set to: 0
  1262  002790  C0D3  F080         	movff	_AN,___flmul@b
  1263  002794  C0D4  F081         	movff	_AN+1,___flmul@b+1
  1264  002798  C0D5  F082         	movff	_AN+2,___flmul@b+2
  1265  00279C  C0D6  F083         	movff	_AN+3,___flmul@b+3
  1266  0027A0  0E00               	movlw	0
  1267  0027A2  6F84               	movwf	___flmul@a& (0+255),b
  1268  0027A4  0E00               	movlw	0
  1269  0027A6  6F85               	movwf	(___flmul@a+1)& (0+255),b
  1270  0027A8  0EA0               	movlw	160
  1271  0027AA  6F86               	movwf	(___flmul@a+2)& (0+255),b
  1272  0027AC  0E41               	movlw	65
  1273  0027AE  6F87               	movwf	(___flmul@a+3)& (0+255),b
  1274  0027B0  ECAA  F009         	call	___flmul	;wreg free
  1275  0027B4  C080  F0DF         	movff	?___flmul,_sp
  1276  0027B8  C081  F0E0         	movff	?___flmul+1,_sp+1
  1277  0027BC  C082  F0E1         	movff	?___flmul+2,_sp+2
  1278  0027C0  C083  F0E2         	movff	?___flmul+3,_sp+3
  1279                           
  1280                           ;pwm_asl.c: 351: temp=AN[2]*100.0;
  1281  0027C4  C0DB  F080         	movff	_AN+8,___flmul@b
  1282  0027C8  C0DC  F081         	movff	_AN+9,___flmul@b+1
  1283  0027CC  C0DD  F082         	movff	_AN+10,___flmul@b+2
  1284  0027D0  C0DE  F083         	movff	_AN+11,___flmul@b+3
  1285  0027D4  0E00               	movlw	0
  1286  0027D6  0100               	movlb	0	; () banked
  1287  0027D8  6F84               	movwf	___flmul@a& (0+255),b
  1288  0027DA  0E00               	movlw	0
  1289  0027DC  6F85               	movwf	(___flmul@a+1)& (0+255),b
  1290  0027DE  0EC8               	movlw	200
  1291  0027E0  6F86               	movwf	(___flmul@a+2)& (0+255),b
  1292  0027E2  0E42               	movlw	66
  1293  0027E4  6F87               	movwf	(___flmul@a+3)& (0+255),b
  1294  0027E6  ECAA  F009         	call	___flmul	;wreg free
  1295  0027EA  C080  F0E3         	movff	?___flmul,_temp
  1296  0027EE  C081  F0E4         	movff	?___flmul+1,_temp+1
  1297  0027F2  C082  F0E5         	movff	?___flmul+2,_temp+2
  1298  0027F6  C083  F0E6         	movff	?___flmul+3,_temp+3
  1299                           
  1300                           ;pwm_asl.c: 352: operation();
  1301  0027FA  ECDE  F007         	call	_operation	;wreg free
  1302                           
  1303                           ;pwm_asl.c: 353: display();
  1304  0027FE  EC97  F00F         	call	_display	;wreg free
  1305  002802  D79A               	goto	l154
  1306  002804                     __end_of_main:
  1307                           	opt stack 0
  1308                           tblptru	equ	0xFF8
  1309                           tblptrh	equ	0xFF7
  1310                           tblptrl	equ	0xFF6
  1311                           tablat	equ	0xFF5
  1312                           prodh	equ	0xFF4
  1313                           prodl	equ	0xFF3
  1314                           postinc0	equ	0xFEE
  1315                           wreg	equ	0xFE8
  1316                           postdec1	equ	0xFE5
  1317                           fsr1l	equ	0xFE1
  1318                           postinc2	equ	0xFDE
  1319                           fsr2h	equ	0xFDA
  1320                           fsr2l	equ	0xFD9
  1321                           
  1322 ;; *************** function _setupPorts *****************
  1323 ;; Defined at:
  1324 ;;		line 103 in file "pwm_asl.c"
  1325 ;; Parameters:    Size  Location     Type
  1326 ;;		None
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;		None
  1329 ;; Return value:  Size  Location     Type
  1330 ;;                  1    wreg      void 
  1331 ;; Registers used:
  1332 ;;		wreg, status,2
  1333 ;; Tracked objects:
  1334 ;;		On entry : 0/0
  1335 ;;		On exit  : 0/0
  1336 ;;		Unchanged: 0/0
  1337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1342 ;;Total ram usage:        0 bytes
  1343 ;; Hardware stack levels used:    1
  1344 ;; Hardware stack levels required when called:    2
  1345 ;; This function calls:
  1346 ;;		Nothing
  1347 ;; This function is called by:
  1348 ;;		_main
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           	psect	text1
  1353  00304C                     __ptext1:
  1354                           	opt stack 0
  1355  00304C                     _setupPorts:
  1356                           	opt stack 28
  1357                           
  1358                           ;pwm_asl.c: 104: INTCON2 =0 ;
  1359                           
  1360                           ;incstack = 0
  1361  00304C  0E00               	movlw	0
  1362  00304E  6EF1               	movwf	intcon2,c	;volatile
  1363                           
  1364                           ;pwm_asl.c: 105: ADCON0 = 0;
  1365  003050  0E00               	movlw	0
  1366  003052  6EC2               	movwf	4034,c	;volatile
  1367                           
  1368                           ;pwm_asl.c: 106: ADCON1 = 0b00001100;
  1369  003054  0E0C               	movlw	12
  1370  003056  6EC1               	movwf	4033,c	;volatile
  1371                           
  1372                           ;pwm_asl.c: 107: TRISB = 0xFF;
  1373  003058  6893               	setf	3987,c	;volatile
  1374                           
  1375                           ;pwm_asl.c: 108: TRISC = 0x80;
  1376  00305A  0E80               	movlw	128
  1377  00305C  6E94               	movwf	3988,c	;volatile
  1378                           
  1379                           ;pwm_asl.c: 109: TRISA = 0xFF;
  1380  00305E  6892               	setf	3986,c	;volatile
  1381                           
  1382                           ;pwm_asl.c: 110: TRISD = 0x00;
  1383  003060  0E00               	movlw	0
  1384  003062  6E95               	movwf	3989,c	;volatile
  1385                           
  1386                           ;pwm_asl.c: 111: TRISE = 0x00;
  1387  003064  0E00               	movlw	0
  1388  003066  6E96               	movwf	3990,c	;volatile
  1389  003068  0012               	return		;funcret
  1390  00306A                     __end_of_setupPorts:
  1391                           	opt stack 0
  1392                           tblptru	equ	0xFF8
  1393                           tblptrh	equ	0xFF7
  1394                           tblptrl	equ	0xFF6
  1395                           tablat	equ	0xFF5
  1396                           prodh	equ	0xFF4
  1397                           prodl	equ	0xFF3
  1398                           intcon2	equ	0xFF1
  1399                           postinc0	equ	0xFEE
  1400                           wreg	equ	0xFE8
  1401                           postdec1	equ	0xFE5
  1402                           fsr1l	equ	0xFE1
  1403                           postinc2	equ	0xFDE
  1404                           fsr2h	equ	0xFDA
  1405                           fsr2l	equ	0xFD9
  1406                           
  1407 ;; *************** function _read_adc_voltage *****************
  1408 ;; Defined at:
  1409 ;;		line 48 in file "my_adc.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;  channel         1    wreg     unsigned char 
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;  channel         1    4[BANK0 ] unsigned char 
  1414 ;;  voltage         4    0[BANK0 ] float 
  1415 ;;  raw_value       2    5[BANK0 ] int 
  1416 ;; Return value:  Size  Location     Type
  1417 ;;                  4   75[COMRAM] float 
  1418 ;; Registers used:
  1419 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1420 ;; Tracked objects:
  1421 ;;		On entry : 0/0
  1422 ;;		On exit  : 0/0
  1423 ;;		Unchanged: 0/0
  1424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1425 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1426 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1428 ;;      Totals:         4       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1429 ;;Total ram usage:       11 bytes
  1430 ;; Hardware stack levels used:    1
  1431 ;; Hardware stack levels required when called:    3
  1432 ;; This function calls:
  1433 ;;		___fldiv
  1434 ;;		___wmul
  1435 ;;		___xxtofl
  1436 ;;		_read_adc_raw_no_lib
  1437 ;; This function is called by:
  1438 ;;		_main
  1439 ;; This function uses a non-reentrant model
  1440 ;;
  1441                           
  1442                           	psect	text2
  1443  0029BE                     __ptext2:
  1444                           	opt stack 0
  1445  0029BE                     _read_adc_voltage:
  1446                           	opt stack 27
  1447                           
  1448                           ;incstack = 0
  1449                           ;read_adc_voltage@channel stored from wreg
  1450  0029BE  0100               	movlb	0	; () banked
  1451  0029C0  6F84               	movwf	read_adc_voltage@channel& (0+255),b
  1452                           
  1453                           ;my_adc.c: 49: int raw_value;
  1454                           ;my_adc.c: 50: float voltage;
  1455                           ;my_adc.c: 51: raw_value = read_adc_raw_no_lib(channel);
  1456  0029C2  0100               	movlb	0	; () banked
  1457  0029C4  5184               	movf	read_adc_voltage@channel& (0+255),w,b
  1458  0029C6  EC8D  F017         	call	_read_adc_raw_no_lib
  1459  0029CA  C01F  F085         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  1460  0029CE  C020  F086         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  1461                           
  1462                           ;my_adc.c: 52: voltage = (raw_value * 5) / 1023.0;
  1463  0029D2  C085  F01F         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  1464  0029D6  C086  F020         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  1465  0029DA  0E00               	movlw	0
  1466  0029DC  6E22               	movwf	___wmul@multiplicand+1,c
  1467  0029DE  0E05               	movlw	5
  1468  0029E0  6E21               	movwf	___wmul@multiplicand,c
  1469  0029E2  ECEF  F017         	call	___wmul	;wreg free
  1470  0029E6  C01F  F025         	movff	?___wmul,___xxtofl@val
  1471  0029EA  C020  F026         	movff	?___wmul+1,___xxtofl@val+1
  1472  0029EE  0E00               	movlw	0
  1473  0029F0  BE26               	btfsc	___xxtofl@val+1,7,c
  1474  0029F2  0EFF               	movlw	-1
  1475  0029F4  6E27               	movwf	___xxtofl@val+2,c
  1476  0029F6  6E28               	movwf	___xxtofl@val+3,c
  1477  0029F8  0E01               	movlw	1
  1478  0029FA  EC93  F010         	call	___xxtofl
  1479  0029FE  C025  F033         	movff	?___xxtofl,___fldiv@b
  1480  002A02  C026  F034         	movff	?___xxtofl+1,___fldiv@b+1
  1481  002A06  C027  F035         	movff	?___xxtofl+2,___fldiv@b+2
  1482  002A0A  C028  F036         	movff	?___xxtofl+3,___fldiv@b+3
  1483  002A0E  0E00               	movlw	0
  1484  002A10  6E37               	movwf	___fldiv@a,c
  1485  002A12  0EC0               	movlw	192
  1486  002A14  6E38               	movwf	___fldiv@a+1,c
  1487  002A16  0E7F               	movlw	127
  1488  002A18  6E39               	movwf	___fldiv@a+2,c
  1489  002A1A  0E44               	movlw	68
  1490  002A1C  6E3A               	movwf	___fldiv@a+3,c
  1491  002A1E  ECF2  F00C         	call	___fldiv	;wreg free
  1492  002A22  C033  F080         	movff	?___fldiv,read_adc_voltage@voltage
  1493  002A26  C034  F081         	movff	?___fldiv+1,read_adc_voltage@voltage+1
  1494  002A2A  C035  F082         	movff	?___fldiv+2,read_adc_voltage@voltage+2
  1495  002A2E  C036  F083         	movff	?___fldiv+3,read_adc_voltage@voltage+3
  1496                           
  1497                           ;my_adc.c: 53: return voltage;
  1498  002A32  C080  F04C         	movff	read_adc_voltage@voltage,?_read_adc_voltage
  1499  002A36  C081  F04D         	movff	read_adc_voltage@voltage+1,?_read_adc_voltage+1
  1500  002A3A  C082  F04E         	movff	read_adc_voltage@voltage+2,?_read_adc_voltage+2
  1501  002A3E  C083  F04F         	movff	read_adc_voltage@voltage+3,?_read_adc_voltage+3
  1502  002A42  0012               	return	
  1503  002A44                     __end_of_read_adc_voltage:
  1504                           	opt stack 0
  1505                           tblptru	equ	0xFF8
  1506                           tblptrh	equ	0xFF7
  1507                           tblptrl	equ	0xFF6
  1508                           tablat	equ	0xFF5
  1509                           prodh	equ	0xFF4
  1510                           prodl	equ	0xFF3
  1511                           intcon2	equ	0xFF1
  1512                           postinc0	equ	0xFEE
  1513                           wreg	equ	0xFE8
  1514                           postdec1	equ	0xFE5
  1515                           fsr1l	equ	0xFE1
  1516                           postinc2	equ	0xFDE
  1517                           fsr2h	equ	0xFDA
  1518                           fsr2l	equ	0xFD9
  1519                           
  1520 ;; *************** function _operation *****************
  1521 ;; Defined at:
  1522 ;;		line 205 in file "pwm_asl.c"
  1523 ;; Parameters:    Size  Location     Type
  1524 ;;		None
  1525 ;; Auto vars:     Size  Location     Type
  1526 ;;  PWM_percenta    4   68[BANK0 ] float 
  1527 ;;  CoolError       4   72[BANK0 ] float 
  1528 ;; Return value:  Size  Location     Type
  1529 ;;                  1    wreg      void 
  1530 ;; Registers used:
  1531 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1532 ;; Tracked objects:
  1533 ;;		On entry : 0/0
  1534 ;;		On exit  : 0/0
  1535 ;;		Unchanged: 0/0
  1536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1538 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1539 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1540 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1541 ;;Total ram usage:       10 bytes
  1542 ;; Hardware stack levels used:    1
  1543 ;; Hardware stack levels required when called:    3
  1544 ;; This function calls:
  1545 ;;		___fladd
  1546 ;;		___fldiv
  1547 ;;		___flge
  1548 ;;		___flmul
  1549 ;;		___flneg
  1550 ;;		___xxtofl
  1551 ;;		_delay_ms
  1552 ;;		_read_adc_raw_no_lib
  1553 ;;		_set_pwm1_raw
  1554 ;; This function is called by:
  1555 ;;		_main
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           	psect	text3
  1560  000FBC                     __ptext3:
  1561                           	opt stack 0
  1562  000FBC                     _operation:
  1563                           	opt stack 27
  1564                           
  1565                           ;pwm_asl.c: 206: float CoolError;
  1566                           ;pwm_asl.c: 207: switch(mode) {
  1567                           
  1568                           ;incstack = 0
  1569  000FBC  D1BD               	goto	l128
  1570  000FBE                     l129:
  1571                           
  1572                           ;pwm_asl.c: 209: if(PORTBbits.RB3==0){
  1573  000FBE  B681               	btfsc	3969,3,c	;volatile
  1574  000FC0  0012               	return	
  1575                           
  1576                           ;pwm_asl.c: 210: delay_ms(250);
  1577  000FC2  0E00               	movlw	0
  1578  000FC4  6E20               	movwf	delay_ms@n+1,c
  1579  000FC6  0EFA               	movlw	250
  1580  000FC8  6E1F               	movwf	delay_ms@n,c
  1581  000FCA  EC02  F018         	call	_delay_ms	;wreg free
  1582                           
  1583                           ;pwm_asl.c: 211: if(PORTBbits.RB3==0)
  1584  000FCE  B681               	btfsc	3969,3,c	;volatile
  1585  000FD0  0012               	return	
  1586                           
  1587                           ;pwm_asl.c: 212: {
  1588                           ;pwm_asl.c: 213: set_pwm1_raw(0);
  1589  000FD2  0E00               	movlw	0
  1590  000FD4  6E20               	movwf	set_pwm1_raw@raw_value+1,c
  1591  000FD6  0E00               	movlw	0
  1592  000FD8  6E1F               	movwf	set_pwm1_raw@raw_value,c
  1593  000FDA  ECAA  F017         	call	_set_pwm1_raw	;wreg free
  1594                           
  1595                           ;pwm_asl.c: 214: PORTCbits.RC2=0;
  1596  000FDE  9482               	bcf	3970,2,c	;volatile
  1597                           
  1598                           ;pwm_asl.c: 215: PORTCbits.RC5=0;
  1599  000FE0  9A82               	bcf	3970,5,c	;volatile
  1600                           
  1601                           ;pwm_asl.c: 216: HC=0;
  1602  000FE2  0E00               	movlw	0
  1603  000FE4  0101               	movlb	1	; () banked
  1604  000FE6  6FC1               	movwf	_HC& (0+255),b
  1605  000FE8  0E00               	movlw	0
  1606  000FEA  6FC2               	movwf	(_HC+1)& (0+255),b
  1607  000FEC  0E00               	movlw	0
  1608  000FEE  6FC3               	movwf	(_HC+2)& (0+255),b
  1609  000FF0  0E00               	movlw	0
  1610  000FF2  6FC4               	movwf	(_HC+3)& (0+255),b
  1611                           
  1612                           ; BSR set to: 1
  1613                           ;pwm_asl.c: 217: PIE2bits.CCP2IE = 0;
  1614  000FF4  90A0               	bcf	4000,0,c	;volatile
  1615                           
  1616                           ; BSR set to: 1
  1617                           ;pwm_asl.c: 218: PIE2bits.TMR3IE = 0;
  1618  000FF6  92A0               	bcf	4000,1,c	;volatile
  1619                           
  1620                           ; BSR set to: 1
  1621                           ;pwm_asl.c: 219: }
  1622                           ;pwm_asl.c: 220: }
  1623                           ;pwm_asl.c: 221: break;
  1624                           
  1625                           ; BSR set to: 1
  1626  000FF8  0012               	return	
  1627  000FFA                     
  1628                           ;pwm_asl.c: 224: HC =(AN[1]/5.0)*100.0;
  1629                           
  1630                           ; BSR set to: 1
  1631  000FFA  0E00               	movlw	0
  1632  000FFC  6E37               	movwf	___fldiv@a,c
  1633  000FFE  0E00               	movlw	0
  1634  001000  6E38               	movwf	___fldiv@a+1,c
  1635  001002  0EA0               	movlw	160
  1636  001004  6E39               	movwf	___fldiv@a+2,c
  1637  001006  0E40               	movlw	64
  1638  001008  6E3A               	movwf	___fldiv@a+3,c
  1639  00100A  C0D7  F033         	movff	_AN+4,___fldiv@b
  1640  00100E  C0D8  F034         	movff	_AN+5,___fldiv@b+1
  1641  001012  C0D9  F035         	movff	_AN+6,___fldiv@b+2
  1642  001016  C0DA  F036         	movff	_AN+7,___fldiv@b+3
  1643  00101A  ECF2  F00C         	call	___fldiv	;wreg free
  1644  00101E  C033  F080         	movff	?___fldiv,___flmul@b
  1645  001022  C034  F081         	movff	?___fldiv+1,___flmul@b+1
  1646  001026  C035  F082         	movff	?___fldiv+2,___flmul@b+2
  1647  00102A  C036  F083         	movff	?___fldiv+3,___flmul@b+3
  1648  00102E  0E00               	movlw	0
  1649  001030  0100               	movlb	0	; () banked
  1650  001032  6F84               	movwf	___flmul@a& (0+255),b
  1651  001034  0E00               	movlw	0
  1652  001036  6F85               	movwf	(___flmul@a+1)& (0+255),b
  1653  001038  0EC8               	movlw	200
  1654  00103A  6F86               	movwf	(___flmul@a+2)& (0+255),b
  1655  00103C  0E42               	movlw	66
  1656  00103E  6F87               	movwf	(___flmul@a+3)& (0+255),b
  1657  001040  ECAA  F009         	call	___flmul	;wreg free
  1658  001044  C080  F1C1         	movff	?___flmul,_HC
  1659  001048  C081  F1C2         	movff	?___flmul+1,_HC+1
  1660  00104C  C082  F1C3         	movff	?___flmul+2,_HC+2
  1661  001050  C083  F1C4         	movff	?___flmul+3,_HC+3
  1662                           
  1663                           ;pwm_asl.c: 225: raw_val = read_adc_raw_no_lib(1);
  1664  001054  0E01               	movlw	1
  1665  001056  EC8D  F017         	call	_read_adc_raw_no_lib
  1666  00105A  C01F  F0E7         	movff	?_read_adc_raw_no_lib,_raw_val
  1667  00105E  C020  F0E8         	movff	?_read_adc_raw_no_lib+1,_raw_val+1
  1668                           
  1669                           ;pwm_asl.c: 226: set_pwm1_raw(raw_val);
  1670  001062  C0E7  F01F         	movff	_raw_val,set_pwm1_raw@raw_value
  1671  001066  C0E8  F020         	movff	_raw_val+1,set_pwm1_raw@raw_value+1
  1672  00106A  ECAA  F017         	call	_set_pwm1_raw	;wreg free
  1673                           
  1674                           ;pwm_asl.c: 227: PORTCbits.RC5=0;
  1675  00106E  9A82               	bcf	3970,5,c	;volatile
  1676                           
  1677                           ;pwm_asl.c: 228: PIE2bits.CCP2IE = 0;
  1678  001070  90A0               	bcf	4000,0,c	;volatile
  1679                           
  1680                           ;pwm_asl.c: 229: PIE2bits.TMR3IE = 0;
  1681  001072  92A0               	bcf	4000,1,c	;volatile
  1682                           
  1683                           ;pwm_asl.c: 230: break;
  1684  001074  0012               	return	
  1685  001076                     
  1686                           ;pwm_asl.c: 233: HC = (AN[1] / 5.0) * 100.0;
  1687  001076  0E00               	movlw	0
  1688  001078  6E37               	movwf	___fldiv@a,c
  1689  00107A  0E00               	movlw	0
  1690  00107C  6E38               	movwf	___fldiv@a+1,c
  1691  00107E  0EA0               	movlw	160
  1692  001080  6E39               	movwf	___fldiv@a+2,c
  1693  001082  0E40               	movlw	64
  1694  001084  6E3A               	movwf	___fldiv@a+3,c
  1695  001086  C0D7  F033         	movff	_AN+4,___fldiv@b
  1696  00108A  C0D8  F034         	movff	_AN+5,___fldiv@b+1
  1697  00108E  C0D9  F035         	movff	_AN+6,___fldiv@b+2
  1698  001092  C0DA  F036         	movff	_AN+7,___fldiv@b+3
  1699  001096  ECF2  F00C         	call	___fldiv	;wreg free
  1700  00109A  C033  F080         	movff	?___fldiv,___flmul@b
  1701  00109E  C034  F081         	movff	?___fldiv+1,___flmul@b+1
  1702  0010A2  C035  F082         	movff	?___fldiv+2,___flmul@b+2
  1703  0010A6  C036  F083         	movff	?___fldiv+3,___flmul@b+3
  1704  0010AA  0E00               	movlw	0
  1705  0010AC  0100               	movlb	0	; () banked
  1706  0010AE  6F84               	movwf	___flmul@a& (0+255),b
  1707  0010B0  0E00               	movlw	0
  1708  0010B2  6F85               	movwf	(___flmul@a+1)& (0+255),b
  1709  0010B4  0EC8               	movlw	200
  1710  0010B6  6F86               	movwf	(___flmul@a+2)& (0+255),b
  1711  0010B8  0E42               	movlw	66
  1712  0010BA  6F87               	movwf	(___flmul@a+3)& (0+255),b
  1713  0010BC  ECAA  F009         	call	___flmul	;wreg free
  1714  0010C0  C080  F1C1         	movff	?___flmul,_HC
  1715  0010C4  C081  F1C2         	movff	?___flmul+1,_HC+1
  1716  0010C8  C082  F1C3         	movff	?___flmul+2,_HC+2
  1717  0010CC  C083  F1C4         	movff	?___flmul+3,_HC+3
  1718                           
  1719                           ;pwm_asl.c: 234: raw_val = read_adc_raw_no_lib(1);
  1720  0010D0  0E01               	movlw	1
  1721  0010D2  EC8D  F017         	call	_read_adc_raw_no_lib
  1722  0010D6  C01F  F0E7         	movff	?_read_adc_raw_no_lib,_raw_val
  1723  0010DA  C020  F0E8         	movff	?_read_adc_raw_no_lib+1,_raw_val+1
  1724                           
  1725                           ;pwm_asl.c: 235: compare=raw_val * 64;
  1726  0010DE  C0E7  F0C2         	movff	_raw_val,??_operation
  1727  0010E2  C0E8  F0C3         	movff	_raw_val+1,??_operation+1
  1728  0010E6  0E06               	movlw	6
  1729  0010E8                     u6955:
  1730  0010E8  90D8               	bcf	status,0,c
  1731  0010EA  0100               	movlb	0	; () banked
  1732  0010EC  37C2               	rlcf	??_operation& (0+255),f,b
  1733  0010EE  37C3               	rlcf	(??_operation+1)& (0+255),f,b
  1734  0010F0  2EE8               	decfsz	wreg,f,c
  1735  0010F2  D7FA               	goto	u6955
  1736  0010F4  C0C2  F025         	movff	??_operation,___xxtofl@val
  1737  0010F8  C0C3  F026         	movff	??_operation+1,___xxtofl@val+1
  1738  0010FC  0E00               	movlw	0
  1739  0010FE  BE26               	btfsc	___xxtofl@val+1,7,c
  1740  001100  0EFF               	movlw	-1
  1741  001102  6E27               	movwf	___xxtofl@val+2,c
  1742  001104  6E28               	movwf	___xxtofl@val+3,c
  1743  001106  0E01               	movlw	1
  1744  001108  EC93  F010         	call	___xxtofl
  1745  00110C  C025  F050         	movff	?___xxtofl,_compare
  1746  001110  C026  F051         	movff	?___xxtofl+1,_compare+1
  1747  001114  C027  F052         	movff	?___xxtofl+2,_compare+2
  1748  001118  C028  F053         	movff	?___xxtofl+3,_compare+3
  1749                           
  1750                           ;pwm_asl.c: 236: set_pwm1_raw(0);
  1751  00111C  0E00               	movlw	0
  1752  00111E  6E20               	movwf	set_pwm1_raw@raw_value+1,c
  1753  001120  0E00               	movlw	0
  1754  001122  6E1F               	movwf	set_pwm1_raw@raw_value,c
  1755  001124  ECAA  F017         	call	_set_pwm1_raw	;wreg free
  1756                           
  1757                           ;pwm_asl.c: 237: PORTCbits.RC2=0;
  1758  001128  9482               	bcf	3970,2,c	;volatile
  1759                           
  1760                           ;pwm_asl.c: 238: PIE2bits.CCP2IE = 1;
  1761  00112A  80A0               	bsf	4000,0,c	;volatile
  1762                           
  1763                           ;pwm_asl.c: 239: PIE2bits.TMR3IE = 1;
  1764  00112C  82A0               	bsf	4000,1,c	;volatile
  1765                           
  1766                           ;pwm_asl.c: 240: break;
  1767  00112E  0012               	return	
  1768  001130                     
  1769                           ;pwm_asl.c: 243: CoolError = temp - sp;
  1770  001130  C0DF  F033         	movff	_sp,___flneg@f1
  1771  001134  C0E0  F034         	movff	_sp+1,___flneg@f1+1
  1772  001138  C0E1  F035         	movff	_sp+2,___flneg@f1+2
  1773  00113C  C0E2  F036         	movff	_sp+3,___flneg@f1+3
  1774  001140  ECC1  F017         	call	___flneg	;wreg free
  1775  001144  C033  F0A2         	movff	?___flneg,___fladd@b
  1776  001148  C034  F0A3         	movff	?___flneg+1,___fladd@b+1
  1777  00114C  C035  F0A4         	movff	?___flneg+2,___fladd@b+2
  1778  001150  C036  F0A5         	movff	?___flneg+3,___fladd@b+3
  1779  001154  C0E3  F0A6         	movff	_temp,___fladd@a
  1780  001158  C0E4  F0A7         	movff	_temp+1,___fladd@a+1
  1781  00115C  C0E5  F0A8         	movff	_temp+2,___fladd@a+2
  1782  001160  C0E6  F0A9         	movff	_temp+3,___fladd@a+3
  1783  001164  EC53  F00B         	call	___fladd	;wreg free
  1784  001168  C0A2  F0C8         	movff	?___fladd,operation@CoolError
  1785  00116C  C0A3  F0C9         	movff	?___fladd+1,operation@CoolError+1
  1786  001170  C0A4  F0CA         	movff	?___fladd+2,operation@CoolError+2
  1787  001174  C0A5  F0CB         	movff	?___fladd+3,operation@CoolError+3
  1788                           
  1789                           ;pwm_asl.c: 244: if (CoolError > 0) {
  1790  001178  0E00               	movlw	0
  1791  00117A  0100               	movlb	0	; () banked
  1792  00117C  6FB6               	movwf	___flge@ff1& (0+255),b
  1793  00117E  0E00               	movlw	0
  1794  001180  6FB7               	movwf	(___flge@ff1+1)& (0+255),b
  1795  001182  0E00               	movlw	0
  1796  001184  6FB8               	movwf	(___flge@ff1+2)& (0+255),b
  1797  001186  0E00               	movlw	0
  1798  001188  6FB9               	movwf	(___flge@ff1+3)& (0+255),b
  1799  00118A  C0C8  F0BA         	movff	operation@CoolError,___flge@ff2
  1800  00118E  C0C9  F0BB         	movff	operation@CoolError+1,___flge@ff2+1
  1801  001192  C0CA  F0BC         	movff	operation@CoolError+2,___flge@ff2+2
  1802  001196  C0CB  F0BD         	movff	operation@CoolError+3,___flge@ff2+3
  1803  00119A  ECFA  F012         	call	___flge	;wreg free
  1804  00119E  0100               	movlb	0	; () banked
  1805  0011A0  B0D8               	btfsc	status,0,c
  1806  0011A2  D076               	goto	l136
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;pwm_asl.c: 245: float PWM_percentage_value = CoolError * 10;
  1810  0011A4  C0C8  F080         	movff	operation@CoolError,___flmul@b
  1811  0011A8  C0C9  F081         	movff	operation@CoolError+1,___flmul@b+1
  1812  0011AC  C0CA  F082         	movff	operation@CoolError+2,___flmul@b+2
  1813  0011B0  C0CB  F083         	movff	operation@CoolError+3,___flmul@b+3
  1814  0011B4  0E00               	movlw	0
  1815  0011B6  6F84               	movwf	___flmul@a& (0+255),b
  1816  0011B8  0E00               	movlw	0
  1817  0011BA  6F85               	movwf	(___flmul@a+1)& (0+255),b
  1818  0011BC  0E20               	movlw	32
  1819  0011BE  6F86               	movwf	(___flmul@a+2)& (0+255),b
  1820  0011C0  0E41               	movlw	65
  1821  0011C2  6F87               	movwf	(___flmul@a+3)& (0+255),b
  1822  0011C4  ECAA  F009         	call	___flmul	;wreg free
  1823  0011C8  C080  F0C4         	movff	?___flmul,operation@PWM_percentage_value
  1824  0011CC  C081  F0C5         	movff	?___flmul+1,operation@PWM_percentage_value+1
  1825  0011D0  C082  F0C6         	movff	?___flmul+2,operation@PWM_percentage_value+2
  1826  0011D4  C083  F0C7         	movff	?___flmul+3,operation@PWM_percentage_value+3
  1827                           
  1828                           ;pwm_asl.c: 246: if (PWM_percentage_value < 25) {
  1829  0011D8  C0C4  F0B6         	movff	operation@PWM_percentage_value,___flge@ff1
  1830  0011DC  C0C5  F0B7         	movff	operation@PWM_percentage_value+1,___flge@ff1+1
  1831  0011E0  C0C6  F0B8         	movff	operation@PWM_percentage_value+2,___flge@ff1+2
  1832  0011E4  C0C7  F0B9         	movff	operation@PWM_percentage_value+3,___flge@ff1+3
  1833  0011E8  0E00               	movlw	0
  1834  0011EA  0100               	movlb	0	; () banked
  1835  0011EC  6FBA               	movwf	___flge@ff2& (0+255),b
  1836  0011EE  0E00               	movlw	0
  1837  0011F0  6FBB               	movwf	(___flge@ff2+1)& (0+255),b
  1838  0011F2  0EC8               	movlw	200
  1839  0011F4  6FBC               	movwf	(___flge@ff2+2)& (0+255),b
  1840  0011F6  0E41               	movlw	65
  1841  0011F8  6FBD               	movwf	(___flge@ff2+3)& (0+255),b
  1842  0011FA  ECFA  F012         	call	___flge	;wreg free
  1843  0011FE  0100               	movlb	0	; () banked
  1844  001200  B0D8               	btfsc	status,0,c
  1845  001202  D008               	goto	l137
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;pwm_asl.c: 247: PWM_percentage_value = 25;
  1849  001204  0E00               	movlw	0
  1850  001206  6FC4               	movwf	operation@PWM_percentage_value& (0+255),b
  1851  001208  0E00               	movlw	0
  1852  00120A  6FC5               	movwf	(operation@PWM_percentage_value+1)& (0+255),b
  1853  00120C  0EC8               	movlw	200
  1854  00120E  6FC6               	movwf	(operation@PWM_percentage_value+2)& (0+255),b
  1855  001210  0E41               	movlw	65
  1856  001212  6FC7               	movwf	(operation@PWM_percentage_value+3)& (0+255),b
  1857  001214                     l137:
  1858                           
  1859                           ; BSR set to: 0
  1860                           ;pwm_asl.c: 248: }
  1861                           ;pwm_asl.c: 249: HC =(AN[1]/5.0)*100.0;
  1862                           
  1863                           ; BSR set to: 0
  1864  001214  0E00               	movlw	0
  1865  001216  6E37               	movwf	___fldiv@a,c
  1866  001218  0E00               	movlw	0
  1867  00121A  6E38               	movwf	___fldiv@a+1,c
  1868  00121C  0EA0               	movlw	160
  1869  00121E  6E39               	movwf	___fldiv@a+2,c
  1870  001220  0E40               	movlw	64
  1871  001222  6E3A               	movwf	___fldiv@a+3,c
  1872  001224  C0D7  F033         	movff	_AN+4,___fldiv@b
  1873  001228  C0D8  F034         	movff	_AN+5,___fldiv@b+1
  1874  00122C  C0D9  F035         	movff	_AN+6,___fldiv@b+2
  1875  001230  C0DA  F036         	movff	_AN+7,___fldiv@b+3
  1876  001234  ECF2  F00C         	call	___fldiv	;wreg free
  1877  001238  C033  F080         	movff	?___fldiv,___flmul@b
  1878  00123C  C034  F081         	movff	?___fldiv+1,___flmul@b+1
  1879  001240  C035  F082         	movff	?___fldiv+2,___flmul@b+2
  1880  001244  C036  F083         	movff	?___fldiv+3,___flmul@b+3
  1881  001248  0E00               	movlw	0
  1882  00124A  0100               	movlb	0	; () banked
  1883  00124C  6F84               	movwf	___flmul@a& (0+255),b
  1884  00124E  0E00               	movlw	0
  1885  001250  6F85               	movwf	(___flmul@a+1)& (0+255),b
  1886  001252  0EC8               	movlw	200
  1887  001254  6F86               	movwf	(___flmul@a+2)& (0+255),b
  1888  001256  0E42               	movlw	66
  1889  001258  6F87               	movwf	(___flmul@a+3)& (0+255),b
  1890  00125A  ECAA  F009         	call	___flmul	;wreg free
  1891  00125E  C080  F1C1         	movff	?___flmul,_HC
  1892  001262  C081  F1C2         	movff	?___flmul+1,_HC+1
  1893  001266  C082  F1C3         	movff	?___flmul+2,_HC+2
  1894  00126A  C083  F1C4         	movff	?___flmul+3,_HC+3
  1895                           
  1896                           ;pwm_asl.c: 250: raw_val = read_adc_raw_no_lib(1);
  1897  00126E  0E01               	movlw	1
  1898  001270  EC8D  F017         	call	_read_adc_raw_no_lib
  1899  001274  C01F  F0E7         	movff	?_read_adc_raw_no_lib,_raw_val
  1900  001278  C020  F0E8         	movff	?_read_adc_raw_no_lib+1,_raw_val+1
  1901                           
  1902                           ;pwm_asl.c: 251: set_pwm1_raw(raw_val);
  1903  00127C  C0E7  F01F         	movff	_raw_val,set_pwm1_raw@raw_value
  1904  001280  C0E8  F020         	movff	_raw_val+1,set_pwm1_raw@raw_value+1
  1905  001284  ECAA  F017         	call	_set_pwm1_raw	;wreg free
  1906                           
  1907                           ;pwm_asl.c: 252: PORTCbits.RC5 = 0;
  1908  001288  9A82               	bcf	3970,5,c	;volatile
  1909                           
  1910                           ;pwm_asl.c: 253: PIE2bits.CCP2IE = 0;
  1911  00128A  90A0               	bcf	4000,0,c	;volatile
  1912                           
  1913                           ;pwm_asl.c: 254: PIE2bits.TMR3IE = 0;
  1914  00128C  92A0               	bcf	4000,1,c	;volatile
  1915                           
  1916                           ;pwm_asl.c: 255: } else if (temp < (sp - HS)) {
  1917  00128E  0012               	return	
  1918  001290                     l136:
  1919  001290  C0E3  F0B6         	movff	_temp,___flge@ff1
  1920  001294  C0E4  F0B7         	movff	_temp+1,___flge@ff1+1
  1921  001298  C0E5  F0B8         	movff	_temp+2,___flge@ff1+2
  1922  00129C  C0E6  F0B9         	movff	_temp+3,___flge@ff1+3
  1923  0012A0  C0DF  F0A6         	movff	_sp,___fladd@a
  1924  0012A4  C0E0  F0A7         	movff	_sp+1,___fladd@a+1
  1925  0012A8  C0E1  F0A8         	movff	_sp+2,___fladd@a+2
  1926  0012AC  C0E2  F0A9         	movff	_sp+3,___fladd@a+3
  1927  0012B0  505B               	movf	_HS,w,c
  1928  0012B2  6E25               	movwf	___xxtofl@val,c
  1929  0012B4  6A26               	clrf	___xxtofl@val+1,c
  1930  0012B6  6A27               	clrf	___xxtofl@val+2,c
  1931  0012B8  6A28               	clrf	___xxtofl@val+3,c
  1932  0012BA  0E00               	movlw	0
  1933  0012BC  EC93  F010         	call	___xxtofl
  1934  0012C0  C025  F033         	movff	?___xxtofl,___flneg@f1
  1935  0012C4  C026  F034         	movff	?___xxtofl+1,___flneg@f1+1
  1936  0012C8  C027  F035         	movff	?___xxtofl+2,___flneg@f1+2
  1937  0012CC  C028  F036         	movff	?___xxtofl+3,___flneg@f1+3
  1938  0012D0  ECC1  F017         	call	___flneg	;wreg free
  1939  0012D4  C033  F0A2         	movff	?___flneg,___fladd@b
  1940  0012D8  C034  F0A3         	movff	?___flneg+1,___fladd@b+1
  1941  0012DC  C035  F0A4         	movff	?___flneg+2,___fladd@b+2
  1942  0012E0  C036  F0A5         	movff	?___flneg+3,___fladd@b+3
  1943  0012E4  EC53  F00B         	call	___fladd	;wreg free
  1944  0012E8  C0A2  F0BA         	movff	?___fladd,___flge@ff2
  1945  0012EC  C0A3  F0BB         	movff	?___fladd+1,___flge@ff2+1
  1946  0012F0  C0A4  F0BC         	movff	?___fladd+2,___flge@ff2+2
  1947  0012F4  C0A5  F0BD         	movff	?___fladd+3,___flge@ff2+3
  1948  0012F8  ECFA  F012         	call	___flge	;wreg free
  1949  0012FC  0100               	movlb	0	; () banked
  1950  0012FE  B0D8               	btfsc	status,0,c
  1951  001300  0012               	return	
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;pwm_asl.c: 256: set_pwm1_raw(0);
  1955  001302  0E00               	movlw	0
  1956  001304  6E20               	movwf	set_pwm1_raw@raw_value+1,c
  1957  001306  0E00               	movlw	0
  1958  001308  6E1F               	movwf	set_pwm1_raw@raw_value,c
  1959  00130A  ECAA  F017         	call	_set_pwm1_raw	;wreg free
  1960                           
  1961                           ;pwm_asl.c: 257: PORTCbits.RC2 = 0;
  1962  00130E  9482               	bcf	3970,2,c	;volatile
  1963                           
  1964                           ;pwm_asl.c: 258: HC = 50.0;
  1965  001310  0E00               	movlw	0
  1966  001312  0101               	movlb	1	; () banked
  1967  001314  6FC1               	movwf	_HC& (0+255),b
  1968  001316  0E00               	movlw	0
  1969  001318  6FC2               	movwf	(_HC+1)& (0+255),b
  1970  00131A  0E48               	movlw	72
  1971  00131C  6FC3               	movwf	(_HC+2)& (0+255),b
  1972  00131E  0E42               	movlw	66
  1973  001320  6FC4               	movwf	(_HC+3)& (0+255),b
  1974                           
  1975                           ; BSR set to: 1
  1976                           ;pwm_asl.c: 259: compare=512 * 64;
  1977  001322  0E00               	movlw	0
  1978  001324  6E50               	movwf	_compare,c
  1979  001326  0E00               	movlw	0
  1980  001328  6E51               	movwf	_compare+1,c
  1981  00132A  0E00               	movlw	0
  1982  00132C  6E52               	movwf	_compare+2,c
  1983  00132E  0EC7               	movlw	199
  1984  001330  6E53               	movwf	_compare+3,c
  1985                           
  1986                           ; BSR set to: 1
  1987                           ;pwm_asl.c: 260: PIE2bits.CCP2IE = 1;
  1988  001332  80A0               	bsf	4000,0,c	;volatile
  1989                           
  1990                           ; BSR set to: 1
  1991                           ;pwm_asl.c: 261: PIE2bits.TMR3IE = 1;
  1992  001334  82A0               	bsf	4000,1,c	;volatile
  1993                           
  1994                           ; BSR set to: 1
  1995                           ;pwm_asl.c: 264: }
  1996                           
  1997                           ; BSR set to: 1
  1998                           ;pwm_asl.c: 262: }
  1999                           ;pwm_asl.c: 263: break;
  2000                           
  2001                           ; BSR set to: 1
  2002  001336  0012               	return	
  2003  001338                     l128:
  2004                           
  2005                           ; BSR set to: 1
  2006  001338  505A               	movf	_mode,w,c
  2007                           
  2008                           ; Switch size 1, requested type "space"
  2009                           ; Number of cases is 4, Range of values is 0 to 3
  2010                           ; switch strategies available:
  2011                           ; Name         Instructions Cycles
  2012                           ; simple_byte           13     7 (average)
  2013                           ;	Chosen strategy is simple_byte
  2014  00133A  0A00               	xorlw	0	; case 0
  2015  00133C  B4D8               	btfsc	status,2,c
  2016  00133E  D63F               	goto	l129
  2017  001340  0A01               	xorlw	1	; case 1
  2018  001342  B4D8               	btfsc	status,2,c
  2019  001344  D65A               	goto	l133
  2020  001346  0A03               	xorlw	3	; case 2
  2021  001348  B4D8               	btfsc	status,2,c
  2022  00134A  D695               	goto	l134
  2023  00134C  0A01               	xorlw	1	; case 3
  2024  00134E  A4D8               	btfss	status,2,c
  2025  001350  0012               	return	
  2026  001352  D6EE               	goto	l135
  2027  001354                     __end_of_operation:
  2028                           	opt stack 0
  2029                           tblptru	equ	0xFF8
  2030                           tblptrh	equ	0xFF7
  2031                           tblptrl	equ	0xFF6
  2032                           tablat	equ	0xFF5
  2033                           prodh	equ	0xFF4
  2034                           prodl	equ	0xFF3
  2035                           intcon2	equ	0xFF1
  2036                           postinc0	equ	0xFEE
  2037                           wreg	equ	0xFE8
  2038                           postdec1	equ	0xFE5
  2039                           fsr1l	equ	0xFE1
  2040                           postinc2	equ	0xFDE
  2041                           fsr2h	equ	0xFDA
  2042                           fsr2l	equ	0xFD9
  2043                           status	equ	0xFD8
  2044                           
  2045 ;; *************** function _set_pwm1_raw *****************
  2046 ;; Defined at:
  2047 ;;		line 15 in file "my_pwm.c"
  2048 ;; Parameters:    Size  Location     Type
  2049 ;;  raw_value       2   30[COMRAM] unsigned int 
  2050 ;; Auto vars:     Size  Location     Type
  2051 ;;		None
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  1    wreg      void 
  2054 ;; Registers used:
  2055 ;;		wreg, status,2, status,0
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2061 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2063 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;Total ram usage:        4 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; Hardware stack levels required when called:    2
  2068 ;; This function calls:
  2069 ;;		Nothing
  2070 ;; This function is called by:
  2071 ;;		_operation
  2072 ;;		_set_pwm1_percent
  2073 ;;		_set_pwm1_voltage
  2074 ;;		_set_pwm1_general
  2075 ;; This function uses a non-reentrant model
  2076 ;;
  2077                           
  2078                           	psect	text4
  2079  002F54                     __ptext4:
  2080                           	opt stack 0
  2081  002F54                     _set_pwm1_raw:
  2082                           	opt stack 27
  2083                           
  2084                           ;my_pwm.c: 17: CCPR1L = (raw_value >> 2) & 0x00FF;
  2085                           
  2086                           ;incstack = 0
  2087  002F54  C01F  F021         	movff	set_pwm1_raw@raw_value,??_set_pwm1_raw
  2088  002F58  C020  F022         	movff	set_pwm1_raw@raw_value+1,??_set_pwm1_raw+1
  2089  002F5C  90D8               	bcf	status,0,c
  2090  002F5E  3222               	rrcf	??_set_pwm1_raw+1,f,c
  2091  002F60  3221               	rrcf	??_set_pwm1_raw,f,c
  2092  002F62  90D8               	bcf	status,0,c
  2093  002F64  3222               	rrcf	??_set_pwm1_raw+1,f,c
  2094  002F66  3221               	rrcf	??_set_pwm1_raw,f,c
  2095  002F68  5021               	movf	??_set_pwm1_raw,w,c
  2096  002F6A  6EBE               	movwf	4030,c	;volatile
  2097                           
  2098                           ;my_pwm.c: 18: CCP1CONbits.DC1B = raw_value & 0x0003;
  2099  002F6C  C01F  F021         	movff	set_pwm1_raw@raw_value,??_set_pwm1_raw
  2100  002F70  0E03               	movlw	3
  2101  002F72  1621               	andwf	??_set_pwm1_raw,f,c
  2102  002F74  3A21               	swapf	??_set_pwm1_raw,f,c
  2103  002F76  50BD               	movf	4029,w,c	;volatile
  2104  002F78  1821               	xorwf	??_set_pwm1_raw,w,c
  2105  002F7A  0BCF               	andlw	-49
  2106  002F7C  1821               	xorwf	??_set_pwm1_raw,w,c
  2107  002F7E  6EBD               	movwf	4029,c	;volatile
  2108  002F80  0012               	return		;funcret
  2109  002F82                     __end_of_set_pwm1_raw:
  2110                           	opt stack 0
  2111                           tblptru	equ	0xFF8
  2112                           tblptrh	equ	0xFF7
  2113                           tblptrl	equ	0xFF6
  2114                           tablat	equ	0xFF5
  2115                           prodh	equ	0xFF4
  2116                           prodl	equ	0xFF3
  2117                           intcon2	equ	0xFF1
  2118                           postinc0	equ	0xFEE
  2119                           wreg	equ	0xFE8
  2120                           postdec1	equ	0xFE5
  2121                           fsr1l	equ	0xFE1
  2122                           postinc2	equ	0xFDE
  2123                           fsr2h	equ	0xFDA
  2124                           fsr2l	equ	0xFD9
  2125                           status	equ	0xFD8
  2126                           
  2127 ;; *************** function _read_adc_raw_no_lib *****************
  2128 ;; Defined at:
  2129 ;;		line 32 in file "my_adc.c"
  2130 ;; Parameters:    Size  Location     Type
  2131 ;;  channel         1    wreg     unsigned char 
  2132 ;; Auto vars:     Size  Location     Type
  2133 ;;  channel         1   34[COMRAM] unsigned char 
  2134 ;;  raw_value       2   35[COMRAM] int 
  2135 ;; Return value:  Size  Location     Type
  2136 ;;                  2   30[COMRAM] int 
  2137 ;; Registers used:
  2138 ;;		wreg, status,2, status,0
  2139 ;; Tracked objects:
  2140 ;;		On entry : 0/0
  2141 ;;		On exit  : 0/0
  2142 ;;		Unchanged: 0/0
  2143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2144 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2145 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2146 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2147 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2148 ;;Total ram usage:        7 bytes
  2149 ;; Hardware stack levels used:    1
  2150 ;; Hardware stack levels required when called:    2
  2151 ;; This function calls:
  2152 ;;		Nothing
  2153 ;; This function is called by:
  2154 ;;		_operation
  2155 ;;		_read_adc_voltage
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           	psect	text5
  2160  002F1A                     __ptext5:
  2161                           	opt stack 0
  2162  002F1A                     _read_adc_raw_no_lib:
  2163                           	opt stack 27
  2164                           
  2165                           ;incstack = 0
  2166                           ;read_adc_raw_no_lib@channel stored from wreg
  2167  002F1A  6E23               	movwf	read_adc_raw_no_lib@channel,c
  2168                           
  2169                           ;my_adc.c: 33: int raw_value;
  2170                           ;my_adc.c: 34: ADCON0bits.CHS = channel;
  2171  002F1C  C023  F021         	movff	read_adc_raw_no_lib@channel,??_read_adc_raw_no_lib
  2172  002F20  4621               	rlncf	??_read_adc_raw_no_lib,f,c
  2173  002F22  4621               	rlncf	??_read_adc_raw_no_lib,f,c
  2174  002F24  50C2               	movf	4034,w,c	;volatile
  2175  002F26  1821               	xorwf	??_read_adc_raw_no_lib,w,c
  2176  002F28  0BC3               	andlw	-61
  2177  002F2A  1821               	xorwf	??_read_adc_raw_no_lib,w,c
  2178  002F2C  6EC2               	movwf	4034,c	;volatile
  2179                           
  2180                           ;my_adc.c: 37: ADCON0bits.GO = 1;
  2181  002F2E  82C2               	bsf	4034,1,c	;volatile
  2182  002F30  B2C2               	btfsc	4034,1,c	;volatile
  2183  002F32  D7FE               	goto	l241
  2184                           
  2185                           ;my_adc.c: 41: raw_value = ADRESH << 8 | ADRESL;
  2186  002F34  50C3               	movf	4035,w,c	;volatile
  2187  002F36  CFC4 F021          	movff	4036,??_read_adc_raw_no_lib	;volatile
  2188  002F3A  6A22               	clrf	(??_read_adc_raw_no_lib+1)& (0+255),c
  2189  002F3C  C021  F022         	movff	??_read_adc_raw_no_lib,??_read_adc_raw_no_lib+1
  2190  002F40  6A21               	clrf	??_read_adc_raw_no_lib,c
  2191  002F42  1021               	iorwf	??_read_adc_raw_no_lib,w,c
  2192  002F44  6E24               	movwf	read_adc_raw_no_lib@raw_value,c
  2193  002F46  5022               	movf	??_read_adc_raw_no_lib+1,w,c
  2194  002F48  6E25               	movwf	read_adc_raw_no_lib@raw_value+1,c
  2195                           
  2196                           ;my_adc.c: 45: return raw_value;
  2197  002F4A  C024  F01F         	movff	read_adc_raw_no_lib@raw_value,?_read_adc_raw_no_lib
  2198  002F4E  C025  F020         	movff	read_adc_raw_no_lib@raw_value+1,?_read_adc_raw_no_lib+1
  2199  002F52  0012               	return	
  2200  002F54                     __end_of_read_adc_raw_no_lib:
  2201                           	opt stack 0
  2202                           tblptru	equ	0xFF8
  2203                           tblptrh	equ	0xFF7
  2204                           tblptrl	equ	0xFF6
  2205                           tablat	equ	0xFF5
  2206                           prodh	equ	0xFF4
  2207                           prodl	equ	0xFF3
  2208                           intcon2	equ	0xFF1
  2209                           postinc0	equ	0xFEE
  2210                           wreg	equ	0xFE8
  2211                           postdec1	equ	0xFE5
  2212                           fsr1l	equ	0xFE1
  2213                           postinc2	equ	0xFDE
  2214                           fsr2h	equ	0xFDA
  2215                           fsr2l	equ	0xFD9
  2216                           status	equ	0xFD8
  2217                           
  2218 ;; *************** function ___fldiv *****************
  2219 ;; Defined at:
  2220 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcdiv.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;  b               4   50[COMRAM] int 
  2223 ;;  a               4   54[COMRAM] int 
  2224 ;; Auto vars:     Size  Location     Type
  2225 ;;  grs             4   69[COMRAM] unsigned long 
  2226 ;;  rem             4   63[COMRAM] unsigned long 
  2227 ;;  new_exp         2   67[COMRAM] int 
  2228 ;;  aexp            1   74[COMRAM] unsigned char 
  2229 ;;  bexp            1   73[COMRAM] unsigned char 
  2230 ;;  sign            1   62[COMRAM] unsigned char 
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  4   50[COMRAM] unsigned char 
  2233 ;; Registers used:
  2234 ;;		wreg, status,2, status,0
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2240 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2241 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2242 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2243 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2244 ;;Total ram usage:       25 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; Hardware stack levels required when called:    2
  2247 ;; This function calls:
  2248 ;;		Nothing
  2249 ;; This function is called by:
  2250 ;;		_operation
  2251 ;;		_read_adc_voltage
  2252 ;;		_set_pwm1_percent
  2253 ;;		_set_pwm1_voltage
  2254 ;;		_set_pwm1_general
  2255 ;; This function uses a non-reentrant model
  2256 ;;
  2257                           
  2258                           	psect	text6
  2259  0019E4                     __ptext6:
  2260                           	opt stack 0
  2261  0019E4                     ___fldiv:
  2262                           	opt stack 27
  2263                           
  2264                           ;incstack = 0
  2265  0019E4  5036               	movf	___fldiv@b+3,w,c
  2266  0019E6  0B80               	andlw	128
  2267  0019E8  6E3F               	movwf	___fldiv@sign,c
  2268  0019EA  5036               	movf	___fldiv@b+3,w,c
  2269  0019EC  2436               	addwf	___fldiv@b+3,w,c
  2270  0019EE  6E4A               	movwf	___fldiv@bexp,c
  2271  0019F0  BE35               	btfsc	___fldiv@b+2,7,c
  2272  0019F2  804A               	bsf	___fldiv@bexp,0,c
  2273  0019F4  504A               	movf	___fldiv@bexp,w,c
  2274  0019F6  B4D8               	btfsc	status,2,c
  2275  0019F8  D00D               	goto	l982
  2276  0019FA  284A               	incf	___fldiv@bexp,w,c
  2277  0019FC  A4D8               	btfss	status,2,c
  2278  0019FE  D008               	goto	l983
  2279  001A00  0E00               	movlw	0
  2280  001A02  6E33               	movwf	___fldiv@b,c
  2281  001A04  0E00               	movlw	0
  2282  001A06  6E34               	movwf	___fldiv@b+1,c
  2283  001A08  0E00               	movlw	0
  2284  001A0A  6E35               	movwf	___fldiv@b+2,c
  2285  001A0C  0E00               	movlw	0
  2286  001A0E  6E36               	movwf	___fldiv@b+3,c
  2287  001A10                     l983:
  2288  001A10  8E35               	bsf	___fldiv@b+2,7,c
  2289  001A12  D006               	goto	L1
  2290  001A14                     l982:
  2291  001A14  0E00               	movlw	0
  2292  001A16  6E33               	movwf	___fldiv@b,c
  2293  001A18  0E00               	movlw	0
  2294  001A1A  6E34               	movwf	___fldiv@b+1,c
  2295  001A1C  0E00               	movlw	0
  2296  001A1E  6E35               	movwf	___fldiv@b+2,c
  2297  001A20                     L1:
  2298  001A20  0E00               	movlw	0
  2299  001A22  6E36               	movwf	___fldiv@b+3,c
  2300  001A24  503A               	movf	___fldiv@a+3,w,c
  2301  001A26  0B80               	andlw	128
  2302  001A28  1A3F               	xorwf	___fldiv@sign,f,c
  2303  001A2A  503A               	movf	___fldiv@a+3,w,c
  2304  001A2C  243A               	addwf	___fldiv@a+3,w,c
  2305  001A2E  6E4B               	movwf	___fldiv@aexp,c
  2306  001A30  BE39               	btfsc	___fldiv@a+2,7,c
  2307  001A32  804B               	bsf	___fldiv@aexp,0,c
  2308  001A34  504B               	movf	___fldiv@aexp,w,c
  2309  001A36  B4D8               	btfsc	status,2,c
  2310  001A38  D00D               	goto	l986
  2311  001A3A  284B               	incf	___fldiv@aexp,w,c
  2312  001A3C  A4D8               	btfss	status,2,c
  2313  001A3E  D008               	goto	l987
  2314  001A40  0E00               	movlw	0
  2315  001A42  6E37               	movwf	___fldiv@a,c
  2316  001A44  0E00               	movlw	0
  2317  001A46  6E38               	movwf	___fldiv@a+1,c
  2318  001A48  0E00               	movlw	0
  2319  001A4A  6E39               	movwf	___fldiv@a+2,c
  2320  001A4C  0E00               	movlw	0
  2321  001A4E  6E3A               	movwf	___fldiv@a+3,c
  2322  001A50                     l987:
  2323  001A50  8E39               	bsf	___fldiv@a+2,7,c
  2324  001A52  D006               	goto	L2
  2325  001A54                     l986:
  2326  001A54  0E00               	movlw	0
  2327  001A56  6E37               	movwf	___fldiv@a,c
  2328  001A58  0E00               	movlw	0
  2329  001A5A  6E38               	movwf	___fldiv@a+1,c
  2330  001A5C  0E00               	movlw	0
  2331  001A5E  6E39               	movwf	___fldiv@a+2,c
  2332  001A60                     L2:
  2333  001A60  0E00               	movlw	0
  2334  001A62  6E3A               	movwf	___fldiv@a+3,c
  2335  001A64  5037               	movf	___fldiv@a,w,c
  2336  001A66  1038               	iorwf	___fldiv@a+1,w,c
  2337  001A68  1039               	iorwf	___fldiv@a+2,w,c
  2338  001A6A  103A               	iorwf	___fldiv@a+3,w,c
  2339  001A6C  A4D8               	btfss	status,2,c
  2340  001A6E  D015               	goto	l989
  2341  001A70  0E00               	movlw	0
  2342  001A72  6E33               	movwf	___fldiv@b,c
  2343  001A74  0E00               	movlw	0
  2344  001A76  6E34               	movwf	___fldiv@b+1,c
  2345  001A78  0E00               	movlw	0
  2346  001A7A  6E35               	movwf	___fldiv@b+2,c
  2347  001A7C  0E00               	movlw	0
  2348  001A7E  6E36               	movwf	___fldiv@b+3,c
  2349  001A80  0E80               	movlw	128
  2350  001A82  1235               	iorwf	___fldiv@b+2,f,c
  2351  001A84  0E7F               	movlw	127
  2352  001A86  1236               	iorwf	___fldiv@b+3,f,c
  2353  001A88  C033  F033         	movff	___fldiv@b,?___fldiv
  2354  001A8C  C034  F034         	movff	___fldiv@b+1,?___fldiv+1
  2355  001A90  C035  F035         	movff	___fldiv@b+2,?___fldiv+2
  2356  001A94  C036  F036         	movff	___fldiv@b+3,?___fldiv+3
  2357  001A98  0012               	return	
  2358  001A9A                     l989:
  2359  001A9A  504A               	movf	___fldiv@bexp,w,c
  2360  001A9C  A4D8               	btfss	status,2,c
  2361  001A9E  D011               	goto	l991
  2362  001AA0  0E00               	movlw	0
  2363  001AA2  6E33               	movwf	___fldiv@b,c
  2364  001AA4  0E00               	movlw	0
  2365  001AA6  6E34               	movwf	___fldiv@b+1,c
  2366  001AA8  0E00               	movlw	0
  2367  001AAA  6E35               	movwf	___fldiv@b+2,c
  2368  001AAC  0E00               	movlw	0
  2369  001AAE  6E36               	movwf	___fldiv@b+3,c
  2370  001AB0  C033  F033         	movff	___fldiv@b,?___fldiv
  2371  001AB4  C034  F034         	movff	___fldiv@b+1,?___fldiv+1
  2372  001AB8  C035  F035         	movff	___fldiv@b+2,?___fldiv+2
  2373  001ABC  C036  F036         	movff	___fldiv@b+3,?___fldiv+3
  2374  001AC0  0012               	return	
  2375  001AC2                     l991:
  2376  001AC2  504B               	movf	___fldiv@aexp,w,c
  2377  001AC4  6E3B               	movwf	??___fldiv& (0+255),c
  2378  001AC6  6A3C               	clrf	(??___fldiv+1)& (0+255),c
  2379  001AC8  1E3B               	comf	??___fldiv,f,c
  2380  001ACA  1E3C               	comf	??___fldiv+1,f,c
  2381  001ACC  4A3B               	infsnz	??___fldiv,f,c
  2382  001ACE  2A3C               	incf	??___fldiv+1,f,c
  2383  001AD0  504A               	movf	___fldiv@bexp,w,c
  2384  001AD2  6E3D               	movwf	(??___fldiv+2)& (0+255),c
  2385  001AD4  6A3E               	clrf	(??___fldiv+3)& (0+255),c
  2386  001AD6  503B               	movf	??___fldiv,w,c
  2387  001AD8  263D               	addwf	??___fldiv+2,f,c
  2388  001ADA  503C               	movf	??___fldiv+1,w,c
  2389  001ADC  223E               	addwfc	??___fldiv+3,f,c
  2390  001ADE  0E7F               	movlw	127
  2391  001AE0  243D               	addwf	??___fldiv+2,w,c
  2392  001AE2  6E44               	movwf	___fldiv@new_exp,c
  2393  001AE4  0E00               	movlw	0
  2394  001AE6  203E               	addwfc	??___fldiv+3,w,c
  2395  001AE8  6E45               	movwf	___fldiv@new_exp+1,c
  2396  001AEA  C033  F040         	movff	___fldiv@b,___fldiv@rem
  2397  001AEE  C034  F041         	movff	___fldiv@b+1,___fldiv@rem+1
  2398  001AF2  C035  F042         	movff	___fldiv@b+2,___fldiv@rem+2
  2399  001AF6  C036  F043         	movff	___fldiv@b+3,___fldiv@rem+3
  2400  001AFA  0E00               	movlw	0
  2401  001AFC  6E33               	movwf	___fldiv@b,c
  2402  001AFE  0E00               	movlw	0
  2403  001B00  6E34               	movwf	___fldiv@b+1,c
  2404  001B02  0E00               	movlw	0
  2405  001B04  6E35               	movwf	___fldiv@b+2,c
  2406  001B06  0E00               	movlw	0
  2407  001B08  6E36               	movwf	___fldiv@b+3,c
  2408  001B0A  0E00               	movlw	0
  2409  001B0C  6E46               	movwf	___fldiv@grs,c
  2410  001B0E  0E00               	movlw	0
  2411  001B10  6E47               	movwf	___fldiv@grs+1,c
  2412  001B12  0E00               	movlw	0
  2413  001B14  6E48               	movwf	___fldiv@grs+2,c
  2414  001B16  0E00               	movlw	0
  2415  001B18  6E49               	movwf	___fldiv@grs+3,c
  2416  001B1A  0E00               	movlw	0
  2417  001B1C  6E4B               	movwf	___fldiv@aexp,c
  2418  001B1E  D028               	goto	l992
  2419  001B20  504B               	movf	___fldiv@aexp,w,c
  2420  001B22  B4D8               	btfsc	status,2,c
  2421  001B24  D011               	goto	l994
  2422  001B26  90D8               	bcf	status,0,c
  2423  001B28  3640               	rlcf	___fldiv@rem,f,c
  2424  001B2A  3641               	rlcf	___fldiv@rem+1,f,c
  2425  001B2C  3642               	rlcf	___fldiv@rem+2,f,c
  2426  001B2E  3643               	rlcf	___fldiv@rem+3,f,c
  2427  001B30  90D8               	bcf	status,0,c
  2428  001B32  3633               	rlcf	___fldiv@b,f,c
  2429  001B34  3634               	rlcf	___fldiv@b+1,f,c
  2430  001B36  3635               	rlcf	___fldiv@b+2,f,c
  2431  001B38  3636               	rlcf	___fldiv@b+3,f,c
  2432  001B3A  BE49               	btfsc	___fldiv@grs+3,7,c
  2433  001B3C  8033               	bsf	___fldiv@b,0,c
  2434  001B3E  90D8               	bcf	status,0,c
  2435  001B40  3646               	rlcf	___fldiv@grs,f,c
  2436  001B42  3647               	rlcf	___fldiv@grs+1,f,c
  2437  001B44  3648               	rlcf	___fldiv@grs+2,f,c
  2438  001B46  3649               	rlcf	___fldiv@grs+3,f,c
  2439  001B48                     l994:
  2440  001B48  5037               	movf	___fldiv@a,w,c
  2441  001B4A  5C40               	subwf	___fldiv@rem,w,c
  2442  001B4C  5038               	movf	___fldiv@a+1,w,c
  2443  001B4E  5841               	subwfb	___fldiv@rem+1,w,c
  2444  001B50  5039               	movf	___fldiv@a+2,w,c
  2445  001B52  5842               	subwfb	___fldiv@rem+2,w,c
  2446  001B54  503A               	movf	___fldiv@a+3,w,c
  2447  001B56  5843               	subwfb	___fldiv@rem+3,w,c
  2448  001B58  A0D8               	btfss	status,0,c
  2449  001B5A  D009               	goto	l996
  2450  001B5C  8C49               	bsf	___fldiv@grs+3,6,c
  2451  001B5E  5037               	movf	___fldiv@a,w,c
  2452  001B60  5E40               	subwf	___fldiv@rem,f,c
  2453  001B62  5038               	movf	___fldiv@a+1,w,c
  2454  001B64  5A41               	subwfb	___fldiv@rem+1,f,c
  2455  001B66  5039               	movf	___fldiv@a+2,w,c
  2456  001B68  5A42               	subwfb	___fldiv@rem+2,f,c
  2457  001B6A  503A               	movf	___fldiv@a+3,w,c
  2458  001B6C  5A43               	subwfb	___fldiv@rem+3,f,c
  2459  001B6E                     l996:
  2460  001B6E  2A4B               	incf	___fldiv@aexp,f,c
  2461  001B70                     l992:
  2462  001B70  0E19               	movlw	25
  2463  001B72  644B               	cpfsgt	___fldiv@aexp,c
  2464  001B74  D7D5               	goto	l993
  2465  001B76  5040               	movf	___fldiv@rem,w,c
  2466  001B78  1041               	iorwf	___fldiv@rem+1,w,c
  2467  001B7A  1042               	iorwf	___fldiv@rem+2,w,c
  2468  001B7C  1043               	iorwf	___fldiv@rem+3,w,c
  2469  001B7E  B4D8               	btfsc	status,2,c
  2470  001B80  D011               	goto	l999
  2471  001B82  8046               	bsf	___fldiv@grs,0,c
  2472  001B84  D00F               	goto	l999
  2473  001B86  90D8               	bcf	status,0,c
  2474  001B88  3633               	rlcf	___fldiv@b,f,c
  2475  001B8A  3634               	rlcf	___fldiv@b+1,f,c
  2476  001B8C  3635               	rlcf	___fldiv@b+2,f,c
  2477  001B8E  3636               	rlcf	___fldiv@b+3,f,c
  2478  001B90  BE49               	btfsc	___fldiv@grs+3,7,c
  2479  001B92  8033               	bsf	___fldiv@b,0,c
  2480  001B94  90D8               	bcf	status,0,c
  2481  001B96  3646               	rlcf	___fldiv@grs,f,c
  2482  001B98  3647               	rlcf	___fldiv@grs+1,f,c
  2483  001B9A  3648               	rlcf	___fldiv@grs+2,f,c
  2484  001B9C  3649               	rlcf	___fldiv@grs+3,f,c
  2485  001B9E  0644               	decf	___fldiv@new_exp,f,c
  2486  001BA0  A0D8               	btfss	status,0,c
  2487  001BA2  0645               	decf	___fldiv@new_exp+1,f,c
  2488  001BA4                     l999:
  2489  001BA4  AE35               	btfss	___fldiv@b+2,7,c
  2490  001BA6  D7EF               	goto	l1000
  2491  001BA8  0E00               	movlw	0
  2492  001BAA  6E4B               	movwf	___fldiv@aexp,c
  2493  001BAC  AE49               	btfss	___fldiv@grs+3,7,c
  2494  001BAE  D016               	goto	l1006
  2495  001BB0  0EFF               	movlw	255
  2496  001BB2  1446               	andwf	___fldiv@grs,w,c
  2497  001BB4  6E3B               	movwf	??___fldiv& (0+255),c
  2498  001BB6  0EFF               	movlw	255
  2499  001BB8  1447               	andwf	___fldiv@grs+1,w,c
  2500  001BBA  6E3C               	movwf	(??___fldiv+1)& (0+255),c
  2501  001BBC  0EFF               	movlw	255
  2502  001BBE  1448               	andwf	___fldiv@grs+2,w,c
  2503  001BC0  6E3D               	movwf	(??___fldiv+2)& (0+255),c
  2504  001BC2  0E7F               	movlw	127
  2505  001BC4  1449               	andwf	___fldiv@grs+3,w,c
  2506  001BC6  6E3E               	movwf	(??___fldiv+3)& (0+255),c
  2507  001BC8  503B               	movf	??___fldiv,w,c
  2508  001BCA  103C               	iorwf	??___fldiv+1,w,c
  2509  001BCC  103D               	iorwf	??___fldiv+2,w,c
  2510  001BCE  103E               	iorwf	??___fldiv+3,w,c
  2511  001BD0  A4D8               	btfss	status,2,c
  2512  001BD2  D002               	goto	u6870
  2513  001BD4  A033               	btfss	___fldiv@b,0,c
  2514  001BD6  D002               	goto	l1006
  2515  001BD8                     u6870:
  2516  001BD8  0E01               	movlw	1
  2517  001BDA  6E4B               	movwf	___fldiv@aexp,c
  2518  001BDC                     l1006:
  2519  001BDC  504B               	movf	___fldiv@aexp,w,c
  2520  001BDE  B4D8               	btfsc	status,2,c
  2521  001BE0  D01F               	goto	l1008
  2522  001BE2  0E01               	movlw	1
  2523  001BE4  2633               	addwf	___fldiv@b,f,c
  2524  001BE6  0E00               	movlw	0
  2525  001BE8  2234               	addwfc	___fldiv@b+1,f,c
  2526  001BEA  2235               	addwfc	___fldiv@b+2,f,c
  2527  001BEC  2236               	addwfc	___fldiv@b+3,f,c
  2528  001BEE  A036               	btfss	___fldiv@b+3,0,c
  2529  001BF0  D017               	goto	l1008
  2530  001BF2  C033  F03B         	movff	___fldiv@b,??___fldiv
  2531  001BF6  C034  F03C         	movff	___fldiv@b+1,??___fldiv+1
  2532  001BFA  C035  F03D         	movff	___fldiv@b+2,??___fldiv+2
  2533  001BFE  C036  F03E         	movff	___fldiv@b+3,??___fldiv+3
  2534  001C02  343E               	rlcf	??___fldiv+3,w,c
  2535  001C04  323E               	rrcf	??___fldiv+3,f,c
  2536  001C06  323D               	rrcf	??___fldiv+2,f,c
  2537  001C08  323C               	rrcf	??___fldiv+1,f,c
  2538  001C0A  323B               	rrcf	??___fldiv,f,c
  2539  001C0C  C03B  F033         	movff	??___fldiv,___fldiv@b
  2540  001C10  C03C  F034         	movff	??___fldiv+1,___fldiv@b+1
  2541  001C14  C03D  F035         	movff	??___fldiv+2,___fldiv@b+2
  2542  001C18  C03E  F036         	movff	??___fldiv+3,___fldiv@b+3
  2543  001C1C  4A44               	infsnz	___fldiv@new_exp,f,c
  2544  001C1E  2A45               	incf	___fldiv@new_exp+1,f,c
  2545  001C20                     l1008:
  2546  001C20  BE45               	btfsc	___fldiv@new_exp+1,7,c
  2547  001C22  D010               	goto	l1009
  2548  001C24  5045               	movf	___fldiv@new_exp+1,w,c
  2549  001C26  E103               	bnz	u6900
  2550  001C28  2844               	incf	___fldiv@new_exp,w,c
  2551  001C2A  A0D8               	btfss	status,0,c
  2552  001C2C  D00B               	goto	l1009
  2553  001C2E                     u6900:
  2554  001C2E  0E00               	movlw	0
  2555  001C30  6E45               	movwf	___fldiv@new_exp+1,c
  2556  001C32  6844               	setf	___fldiv@new_exp,c
  2557  001C34  0E00               	movlw	0
  2558  001C36  6E33               	movwf	___fldiv@b,c
  2559  001C38  0E00               	movlw	0
  2560  001C3A  6E34               	movwf	___fldiv@b+1,c
  2561  001C3C  0E00               	movlw	0
  2562  001C3E  6E35               	movwf	___fldiv@b+2,c
  2563  001C40  0E00               	movlw	0
  2564  001C42  6E36               	movwf	___fldiv@b+3,c
  2565  001C44                     l1009:
  2566  001C44  BE45               	btfsc	___fldiv@new_exp+1,7,c
  2567  001C46  D005               	goto	u6910
  2568  001C48  5045               	movf	___fldiv@new_exp+1,w,c
  2569  001C4A  E111               	bnz	l5882
  2570  001C4C  0444               	decf	___fldiv@new_exp,w,c
  2571  001C4E  B0D8               	btfsc	status,0,c
  2572  001C50  D00E               	goto	l1010
  2573  001C52                     u6910:
  2574  001C52  0E00               	movlw	0
  2575  001C54  6E45               	movwf	___fldiv@new_exp+1,c
  2576  001C56  0E00               	movlw	0
  2577  001C58  6E44               	movwf	___fldiv@new_exp,c
  2578  001C5A  0E00               	movlw	0
  2579  001C5C  6E33               	movwf	___fldiv@b,c
  2580  001C5E  0E00               	movlw	0
  2581  001C60  6E34               	movwf	___fldiv@b+1,c
  2582  001C62  0E00               	movlw	0
  2583  001C64  6E35               	movwf	___fldiv@b+2,c
  2584  001C66  0E00               	movlw	0
  2585  001C68  6E36               	movwf	___fldiv@b+3,c
  2586  001C6A  0E00               	movlw	0
  2587  001C6C  6E3F               	movwf	___fldiv@sign,c
  2588  001C6E                     l1010:
  2589  001C6E                     l5882:
  2590  001C6E  C044  F04A         	movff	___fldiv@new_exp,___fldiv@bexp
  2591  001C72  A04A               	btfss	___fldiv@bexp,0,c
  2592  001C74  D002               	goto	l1011
  2593  001C76  8E35               	bsf	___fldiv@b+2,7,c
  2594  001C78  D001               	goto	l1012
  2595  001C7A                     l1011:
  2596  001C7A  9E35               	bcf	___fldiv@b+2,7,c
  2597  001C7C                     l1012:
  2598  001C7C  90D8               	bcf	status,0,c
  2599  001C7E  304A               	rrcf	___fldiv@bexp,w,c
  2600  001C80  6E36               	movwf	___fldiv@b+3,c
  2601  001C82  503F               	movf	___fldiv@sign,w,c
  2602  001C84  1236               	iorwf	___fldiv@b+3,f,c
  2603  001C86  C033  F033         	movff	___fldiv@b,?___fldiv
  2604  001C8A  C034  F034         	movff	___fldiv@b+1,?___fldiv+1
  2605  001C8E  C035  F035         	movff	___fldiv@b+2,?___fldiv+2
  2606  001C92  C036  F036         	movff	___fldiv@b+3,?___fldiv+3
  2607  001C96  0012               	return	
  2608  001C98                     __end_of___fldiv:
  2609                           	opt stack 0
  2610                           tblptru	equ	0xFF8
  2611                           tblptrh	equ	0xFF7
  2612                           tblptrl	equ	0xFF6
  2613                           tablat	equ	0xFF5
  2614                           prodh	equ	0xFF4
  2615                           prodl	equ	0xFF3
  2616                           intcon2	equ	0xFF1
  2617                           postinc0	equ	0xFEE
  2618                           wreg	equ	0xFE8
  2619                           postdec1	equ	0xFE5
  2620                           fsr1l	equ	0xFE1
  2621                           postinc2	equ	0xFDE
  2622                           fsr2h	equ	0xFDA
  2623                           fsr2l	equ	0xFD9
  2624                           status	equ	0xFD8
  2625                           
  2626 ;; *************** function _lcd_init *****************
  2627 ;; Defined at:
  2628 ;;		line 56 in file "lcd_x8.c"
  2629 ;; Parameters:    Size  Location     Type
  2630 ;;		None
  2631 ;; Auto vars:     Size  Location     Type
  2632 ;;  i               1   40[COMRAM] unsigned char 
  2633 ;; Return value:  Size  Location     Type
  2634 ;;                  1    wreg      void 
  2635 ;; Registers used:
  2636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2637 ;; Tracked objects:
  2638 ;;		On entry : 0/0
  2639 ;;		On exit  : 0/0
  2640 ;;		Unchanged: 0/0
  2641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2643 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2645 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2646 ;;Total ram usage:        1 bytes
  2647 ;; Hardware stack levels used:    1
  2648 ;; Hardware stack levels required when called:    5
  2649 ;; This function calls:
  2650 ;;		_delay_ms
  2651 ;;		_lcd_send_byte
  2652 ;;		_lcd_send_nibble
  2653 ;; This function is called by:
  2654 ;;		_main
  2655 ;; This function uses a non-reentrant model
  2656 ;;
  2657                           
  2658                           	psect	text7
  2659  002C90                     __ptext7:
  2660                           	opt stack 0
  2661  002C90                     _lcd_init:
  2662                           	opt stack 25
  2663                           
  2664                           ;lcd_x8.c: 58: unsigned char i;
  2665                           ;lcd_x8.c: 61: PORTEbits.RE2 = 0;
  2666                           
  2667                           ;incstack = 0
  2668  002C90  9484               	bcf	3972,2,c	;volatile
  2669                           
  2670                           ;lcd_x8.c: 63: PORTEbits.RE1 = 0;
  2671  002C92  9284               	bcf	3972,1,c	;volatile
  2672                           
  2673                           ;lcd_x8.c: 65: delay_ms(25);
  2674  002C94  0E00               	movlw	0
  2675  002C96  6E20               	movwf	delay_ms@n+1,c
  2676  002C98  0E19               	movlw	25
  2677  002C9A  6E1F               	movwf	delay_ms@n,c
  2678  002C9C  EC02  F018         	call	_delay_ms	;wreg free
  2679                           
  2680                           ;lcd_x8.c: 66: for (i = 1; i <= 3; ++i) {
  2681  002CA0  0E01               	movlw	1
  2682  002CA2  6E29               	movwf	lcd_init@i,c
  2683  002CA4                     l4436:
  2684  002CA4  0E03               	movlw	3
  2685  002CA6  6429               	cpfsgt	lcd_init@i,c
  2686  002CA8  D001               	goto	l190
  2687  002CAA  D00B               	goto	u4640
  2688  002CAC                     l190:
  2689                           
  2690                           ;lcd_x8.c: 67: lcd_send_nibble(3);
  2691  002CAC  0E03               	movlw	3
  2692  002CAE  EC15  F018         	call	_lcd_send_nibble
  2693                           
  2694                           ;lcd_x8.c: 69: delay_ms(6);
  2695  002CB2  0E00               	movlw	0
  2696  002CB4  6E20               	movwf	delay_ms@n+1,c
  2697  002CB6  0E06               	movlw	6
  2698  002CB8  6E1F               	movwf	delay_ms@n,c
  2699  002CBA  EC02  F018         	call	_delay_ms	;wreg free
  2700  002CBE  2A29               	incf	lcd_init@i,f,c
  2701  002CC0  D7F1               	goto	l4436
  2702  002CC2                     u4640:
  2703                           
  2704                           ;lcd_x8.c: 70: }
  2705                           ;lcd_x8.c: 72: lcd_send_nibble(2);
  2706  002CC2  0E02               	movlw	2
  2707  002CC4  EC15  F018         	call	_lcd_send_nibble
  2708                           
  2709                           ;lcd_x8.c: 74: for (i = 0; i <= 3; ++i)
  2710  002CC8  0E00               	movlw	0
  2711  002CCA  6E29               	movwf	lcd_init@i,c
  2712  002CCC                     l4450:
  2713  002CCC  0E03               	movlw	3
  2714  002CCE  6429               	cpfsgt	lcd_init@i,c
  2715  002CD0  D001               	goto	l192
  2716  002CD2  0012               	return	
  2717  002CD4                     l192:
  2718                           
  2719                           ;lcd_x8.c: 75: lcd_send_byte(0, LCD_INIT_STRING[i]);
  2720  002CD4  5029               	movf	lcd_init@i,w,c
  2721  002CD6  0D01               	mullw	1
  2722  002CD8  0E5C               	movlw	low _LCD_INIT_STRING
  2723  002CDA  24F3               	addwf	prodl,w,c
  2724  002CDC  6ED9               	movwf	fsr2l,c
  2725  002CDE  0E00               	movlw	high _LCD_INIT_STRING
  2726  002CE0  20F4               	addwfc	prodh,w,c
  2727  002CE2  6EDA               	movwf	fsr2h,c
  2728  002CE4  50DF               	movf	indf2,w,c
  2729  002CE6  6E27               	movwf	lcd_send_byte@n,c
  2730  002CE8  0E00               	movlw	0
  2731  002CEA  EC48  F017         	call	_lcd_send_byte
  2732  002CEE  2A29               	incf	lcd_init@i,f,c
  2733  002CF0  D7ED               	goto	l4450
  2734  002CF2                     __end_of_lcd_init:
  2735                           	opt stack 0
  2736                           tblptru	equ	0xFF8
  2737                           tblptrh	equ	0xFF7
  2738                           tblptrl	equ	0xFF6
  2739                           tablat	equ	0xFF5
  2740                           prodh	equ	0xFF4
  2741                           prodl	equ	0xFF3
  2742                           intcon2	equ	0xFF1
  2743                           postinc0	equ	0xFEE
  2744                           wreg	equ	0xFE8
  2745                           postdec1	equ	0xFE5
  2746                           fsr1l	equ	0xFE1
  2747                           indf2	equ	0xFDF
  2748                           postinc2	equ	0xFDE
  2749                           fsr2h	equ	0xFDA
  2750                           fsr2l	equ	0xFD9
  2751                           status	equ	0xFD8
  2752                           
  2753 ;; *************** function _init_pwm1 *****************
  2754 ;; Defined at:
  2755 ;;		line 5 in file "my_pwm.c"
  2756 ;; Parameters:    Size  Location     Type
  2757 ;;		None
  2758 ;; Auto vars:     Size  Location     Type
  2759 ;;		None
  2760 ;; Return value:  Size  Location     Type
  2761 ;;                  1    wreg      void 
  2762 ;; Registers used:
  2763 ;;		wreg, status,2
  2764 ;; Tracked objects:
  2765 ;;		On entry : 0/0
  2766 ;;		On exit  : 0/0
  2767 ;;		Unchanged: 0/0
  2768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2773 ;;Total ram usage:        0 bytes
  2774 ;; Hardware stack levels used:    1
  2775 ;; Hardware stack levels required when called:    2
  2776 ;; This function calls:
  2777 ;;		Nothing
  2778 ;; This function is called by:
  2779 ;;		_main
  2780 ;; This function uses a non-reentrant model
  2781 ;;
  2782                           
  2783                           	psect	text8
  2784  003088                     __ptext8:
  2785                           	opt stack 0
  2786  003088                     _init_pwm1:
  2787                           	opt stack 28
  2788                           
  2789                           ;my_pwm.c: 7: PR2 = 255;
  2790                           
  2791                           ;incstack = 0
  2792  003088  68CB               	setf	4043,c	;volatile
  2793                           
  2794                           ;my_pwm.c: 8: T2CON = 0;
  2795  00308A  0E00               	movlw	0
  2796  00308C  6ECA               	movwf	4042,c	;volatile
  2797                           
  2798                           ;my_pwm.c: 9: T2CONbits.T2CKPS = 0b10;
  2799  00308E  50CA               	movf	4042,w,c	;volatile
  2800  003090  0BFC               	andlw	-4
  2801  003092  0902               	iorlw	2
  2802  003094  6ECA               	movwf	4042,c	;volatile
  2803                           
  2804                           ;my_pwm.c: 10: CCP1CON = 0x0C;
  2805  003096  0E0C               	movlw	12
  2806  003098  6EBD               	movwf	4029,c	;volatile
  2807                           
  2808                           ;my_pwm.c: 12: T2CONbits.TMR2ON = 1;
  2809  00309A  84CA               	bsf	4042,2,c	;volatile
  2810                           
  2811                           ;my_pwm.c: 13: TRISCbits.RC2 =0;
  2812  00309C  9494               	bcf	3988,2,c	;volatile
  2813  00309E  0012               	return		;funcret
  2814  0030A0                     __end_of_init_pwm1:
  2815                           	opt stack 0
  2816                           tblptru	equ	0xFF8
  2817                           tblptrh	equ	0xFF7
  2818                           tblptrl	equ	0xFF6
  2819                           tablat	equ	0xFF5
  2820                           prodh	equ	0xFF4
  2821                           prodl	equ	0xFF3
  2822                           intcon2	equ	0xFF1
  2823                           postinc0	equ	0xFEE
  2824                           wreg	equ	0xFE8
  2825                           postdec1	equ	0xFE5
  2826                           fsr1l	equ	0xFE1
  2827                           indf2	equ	0xFDF
  2828                           postinc2	equ	0xFDE
  2829                           fsr2h	equ	0xFDA
  2830                           fsr2l	equ	0xFD9
  2831                           status	equ	0xFD8
  2832                           
  2833 ;; *************** function _init_adc_no_lib *****************
  2834 ;; Defined at:
  2835 ;;		line 11 in file "my_adc.c"
  2836 ;; Parameters:    Size  Location     Type
  2837 ;;		None
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;		None
  2840 ;; Return value:  Size  Location     Type
  2841 ;;                  1    wreg      void 
  2842 ;; Registers used:
  2843 ;;		wreg, status,2
  2844 ;; Tracked objects:
  2845 ;;		On entry : 0/0
  2846 ;;		On exit  : 0/0
  2847 ;;		Unchanged: 0/0
  2848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2853 ;;Total ram usage:        0 bytes
  2854 ;; Hardware stack levels used:    1
  2855 ;; Hardware stack levels required when called:    2
  2856 ;; This function calls:
  2857 ;;		Nothing
  2858 ;; This function is called by:
  2859 ;;		_main
  2860 ;; This function uses a non-reentrant model
  2861 ;;
  2862                           
  2863                           	psect	text9
  2864  0030A0                     __ptext9:
  2865                           	opt stack 0
  2866  0030A0                     _init_adc_no_lib:
  2867                           	opt stack 28
  2868                           
  2869                           ;my_adc.c: 14: ADCON0 = 0;
  2870                           
  2871                           ;incstack = 0
  2872  0030A0  0E00               	movlw	0
  2873  0030A2  6EC2               	movwf	4034,c	;volatile
  2874                           
  2875                           ;my_adc.c: 15: ADCON0bits.ADON = 1;
  2876  0030A4  80C2               	bsf	4034,0,c	;volatile
  2877                           
  2878                           ;my_adc.c: 18: ADCON2 = 0b10001001;
  2879  0030A6  0E89               	movlw	137
  2880  0030A8  6EC0               	movwf	4032,c	;volatile
  2881  0030AA  0012               	return		;funcret
  2882  0030AC                     __end_of_init_adc_no_lib:
  2883                           	opt stack 0
  2884                           tblptru	equ	0xFF8
  2885                           tblptrh	equ	0xFF7
  2886                           tblptrl	equ	0xFF6
  2887                           tablat	equ	0xFF5
  2888                           prodh	equ	0xFF4
  2889                           prodl	equ	0xFF3
  2890                           intcon2	equ	0xFF1
  2891                           postinc0	equ	0xFEE
  2892                           wreg	equ	0xFE8
  2893                           postdec1	equ	0xFE5
  2894                           fsr1l	equ	0xFE1
  2895                           indf2	equ	0xFDF
  2896                           postinc2	equ	0xFDE
  2897                           fsr2h	equ	0xFDA
  2898                           fsr2l	equ	0xFD9
  2899                           status	equ	0xFD8
  2900                           
  2901 ;; *************** function _initInterrupts *****************
  2902 ;; Defined at:
  2903 ;;		line 114 in file "pwm_asl.c"
  2904 ;; Parameters:    Size  Location     Type
  2905 ;;		None
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;		None
  2908 ;; Return value:  Size  Location     Type
  2909 ;;                  1    wreg      void 
  2910 ;; Registers used:
  2911 ;;		wreg, status,2
  2912 ;; Tracked objects:
  2913 ;;		On entry : 0/0
  2914 ;;		On exit  : 0/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;Total ram usage:        0 bytes
  2922 ;; Hardware stack levels used:    1
  2923 ;; Hardware stack levels required when called:    2
  2924 ;; This function calls:
  2925 ;;		Nothing
  2926 ;; This function is called by:
  2927 ;;		_main
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931                           	psect	text10
  2932  002CF2                     __ptext10:
  2933                           	opt stack 0
  2934  002CF2                     _initInterrupts:
  2935                           	opt stack 28
  2936                           
  2937                           ;pwm_asl.c: 115: INTCON = 0;
  2938                           
  2939                           ;incstack = 0
  2940  002CF2  0E00               	movlw	0
  2941  002CF4  6EF2               	movwf	intcon,c	;volatile
  2942                           
  2943                           ;pwm_asl.c: 116: T3CON = 0;
  2944  002CF6  0E00               	movlw	0
  2945  002CF8  6EB1               	movwf	4017,c	;volatile
  2946                           
  2947                           ;pwm_asl.c: 117: PIE1 = 0;
  2948  002CFA  0E00               	movlw	0
  2949  002CFC  6E9D               	movwf	3997,c	;volatile
  2950                           
  2951                           ;pwm_asl.c: 118: PIR1 = 0;
  2952  002CFE  0E00               	movlw	0
  2953  002D00  6E9E               	movwf	3998,c	;volatile
  2954                           
  2955                           ;pwm_asl.c: 119: IPR1 = 0;
  2956  002D02  0E00               	movlw	0
  2957  002D04  6E9F               	movwf	3999,c	;volatile
  2958                           
  2959                           ;pwm_asl.c: 120: PIE2 = 0;
  2960  002D06  0E00               	movlw	0
  2961  002D08  6EA0               	movwf	4000,c	;volatile
  2962                           
  2963                           ;pwm_asl.c: 121: PIR2 = 0;
  2964  002D0A  0E00               	movlw	0
  2965  002D0C  6EA1               	movwf	4001,c	;volatile
  2966                           
  2967                           ;pwm_asl.c: 122: IPR2 = 0;
  2968  002D0E  0E00               	movlw	0
  2969  002D10  6EA2               	movwf	4002,c	;volatile
  2970                           
  2971                           ;pwm_asl.c: 123: RCONbits.IPEN = 0;
  2972  002D12  9ED0               	bcf	4048,7,c	;volatile
  2973                           
  2974                           ;pwm_asl.c: 124: CCP2CON = 0x09;
  2975  002D14  0E09               	movlw	9
  2976  002D16  6EBA               	movwf	4026,c	;volatile
  2977                           
  2978                           ;pwm_asl.c: 127: INTCONbits.INT0IF = 0;
  2979  002D18  92F2               	bcf	intcon,1,c	;volatile
  2980                           
  2981                           ;pwm_asl.c: 128: INTCON3bits.INT2IF = 0;
  2982  002D1A  92F0               	bcf	intcon3,1,c	;volatile
  2983                           
  2984                           ;pwm_asl.c: 131: INTCONbits.INT0IE = 1;
  2985  002D1C  88F2               	bsf	intcon,4,c	;volatile
  2986                           
  2987                           ;pwm_asl.c: 132: INTCON3bits.INT2IE = 1;
  2988  002D1E  88F0               	bsf	intcon3,4,c	;volatile
  2989                           
  2990                           ;pwm_asl.c: 134: T3CONbits.TMR3ON = 1;
  2991  002D20  80B1               	bsf	4017,0,c	;volatile
  2992                           
  2993                           ;pwm_asl.c: 135: INTCON2bits.INTEDG2 = 1;
  2994  002D22  88F1               	bsf	intcon2,4,c	;volatile
  2995                           
  2996                           ;pwm_asl.c: 136: INTCON2bits.INTEDG0 = 1;
  2997  002D24  8CF1               	bsf	intcon2,6,c	;volatile
  2998                           
  2999                           ;pwm_asl.c: 137: PIE2bits.TMR3IE = 0;
  3000  002D26  92A0               	bcf	4000,1,c	;volatile
  3001                           
  3002                           ;pwm_asl.c: 139: INTCONbits.GIE = 1;
  3003  002D28  8EF2               	bsf	intcon,7,c	;volatile
  3004                           
  3005                           ;pwm_asl.c: 140: T3CON = 0x00;
  3006  002D2A  0E00               	movlw	0
  3007  002D2C  6EB1               	movwf	4017,c	;volatile
  3008                           
  3009                           ;pwm_asl.c: 141: T3CONbits.T3CKPS = 0b10;
  3010  002D2E  50B1               	movf	4017,w,c	;volatile
  3011  002D30  0BCF               	andlw	-49
  3012  002D32  0920               	iorlw	32
  3013  002D34  6EB1               	movwf	4017,c	;volatile
  3014                           
  3015                           ;pwm_asl.c: 142: T3CONbits.TMR3ON = 1;
  3016  002D36  80B1               	bsf	4017,0,c	;volatile
  3017                           
  3018                           ;pwm_asl.c: 143: T3CONbits.T3CCP2 = 1;
  3019  002D38  8CB1               	bsf	4017,6,c	;volatile
  3020                           
  3021                           ;pwm_asl.c: 144: TMR3 = 0x0000;
  3022  002D3A  0E00               	movlw	0
  3023  002D3C  6EB3               	movwf	4019,c	;volatile
  3024  002D3E  0E00               	movlw	0
  3025  002D40  6EB2               	movwf	4018,c	;volatile
  3026                           
  3027                           ;pwm_asl.c: 145: PIE2bits.TMR3IE = 0;
  3028  002D42  92A0               	bcf	4000,1,c	;volatile
  3029                           
  3030                           ;pwm_asl.c: 146: INTCONbits.PEIE = 1;
  3031  002D44  8CF2               	bsf	intcon,6,c	;volatile
  3032                           
  3033                           ;pwm_asl.c: 147: INTCONbits.GIE = 1;
  3034  002D46  8EF2               	bsf	intcon,7,c	;volatile
  3035  002D48  0012               	return		;funcret
  3036  002D4A                     __end_of_initInterrupts:
  3037                           	opt stack 0
  3038                           tblptru	equ	0xFF8
  3039                           tblptrh	equ	0xFF7
  3040                           tblptrl	equ	0xFF6
  3041                           tablat	equ	0xFF5
  3042                           prodh	equ	0xFF4
  3043                           prodl	equ	0xFF3
  3044                           intcon	equ	0xFF2
  3045                           intcon2	equ	0xFF1
  3046                           intcon3	equ	0xFF0
  3047                           postinc0	equ	0xFEE
  3048                           wreg	equ	0xFE8
  3049                           postdec1	equ	0xFE5
  3050                           fsr1l	equ	0xFE1
  3051                           indf2	equ	0xFDF
  3052                           postinc2	equ	0xFDE
  3053                           fsr2h	equ	0xFDA
  3054                           fsr2l	equ	0xFD9
  3055                           status	equ	0xFD8
  3056                           
  3057 ;; *************** function _display *****************
  3058 ;; Defined at:
  3059 ;;		line 267 in file "pwm_asl.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;		None
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;  LCD            64   95[BANK1 ] unsigned char [64]
  3064 ;;  LCDP           64   31[BANK1 ] unsigned char [64]
  3065 ;;  H               1  160[BANK1 ] unsigned char 
  3066 ;;  C               1  159[BANK1 ] unsigned char 
  3067 ;; Return value:  Size  Location     Type
  3068 ;;                  1    wreg      void 
  3069 ;; Registers used:
  3070 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3071 ;; Tracked objects:
  3072 ;;		On entry : 0/0
  3073 ;;		On exit  : 0/0
  3074 ;;		Unchanged: 0/0
  3075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3077 ;;      Locals:         0       0     130       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3079 ;;      Totals:         0       0     130       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;Total ram usage:      130 bytes
  3081 ;; Hardware stack levels used:    1
  3082 ;; Hardware stack levels required when called:    8
  3083 ;; This function calls:
  3084 ;;		_lcd_gotoxy
  3085 ;;		_lcd_putc
  3086 ;;		_lcd_puts
  3087 ;;		_sprintf
  3088 ;; This function is called by:
  3089 ;;		_main
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093                           	psect	text11
  3094  001F2E                     __ptext11:
  3095                           	opt stack 0
  3096  001F2E                     _display:
  3097                           	opt stack 22
  3098                           
  3099                           ;pwm_asl.c: 268: char LCD[64];
  3100                           ;pwm_asl.c: 269: char LCDP[64];
  3101                           ;pwm_asl.c: 270: unsigned char C, H;
  3102                           ;pwm_asl.c: 271: switch(mode) {
  3103                           
  3104                           ;incstack = 0
  3105  001F2E  D03C               	goto	l143
  3106  001F30                     
  3107                           ;pwm_asl.c: 273: sprintf(LCDP, "OFF                 ");
  3108  001F30  0E1F               	movlw	low display@LCDP
  3109  001F32  0100               	movlb	0	; () banked
  3110  001F34  6FC2               	movwf	sprintf@sp& (0+255),b
  3111  001F36  0E01               	movlw	high display@LCDP
  3112  001F38  6FC3               	movwf	(sprintf@sp+1)& (0+255),b
  3113  001F3A  0E7B               	movlw	low STR_1
  3114  001F3C  6FC4               	movwf	sprintf@f& (0+255),b
  3115  001F3E  0EFF               	movlw	high STR_1
  3116  001F40  6FC5               	movwf	(sprintf@f+1)& (0+255),b
  3117  001F42  EC09  F000         	call	_sprintf	;wreg free
  3118  001F46                     l5984:
  3119                           
  3120                           ;pwm_asl.c: 274: H = 'N';
  3121  001F46  0E4E               	movlw	78
  3122  001F48  D02C               	goto	L5
  3123  001F4A                     
  3124                           ;pwm_asl.c: 279: sprintf(LCDP, "Cool                ");
  3125                           
  3126                           ; BSR set to: 1
  3127  001F4A  0E1F               	movlw	low display@LCDP
  3128  001F4C  0100               	movlb	0	; () banked
  3129  001F4E  6FC2               	movwf	sprintf@sp& (0+255),b
  3130  001F50  0E01               	movlw	high display@LCDP
  3131  001F52  6FC3               	movwf	(sprintf@sp+1)& (0+255),b
  3132  001F54  0E90               	movlw	low STR_2
  3133  001F56  6FC4               	movwf	sprintf@f& (0+255),b
  3134  001F58  0EFF               	movlw	high STR_2
  3135  001F5A  6FC5               	movwf	(sprintf@f+1)& (0+255),b
  3136  001F5C  EC09  F000         	call	_sprintf	;wreg free
  3137                           
  3138                           ;pwm_asl.c: 280: H = 'N';
  3139  001F60  0E4E               	movlw	78
  3140  001F62  0101               	movlb	1	; () banked
  3141  001F64  6FA0               	movwf	display@H& (0+255),b
  3142                           
  3143                           ; BSR set to: 1
  3144                           ;pwm_asl.c: 281: C = 'Y';
  3145  001F66  0E59               	movlw	89
  3146  001F68  D00E               	goto	L4
  3147  001F6A                     
  3148                           ;pwm_asl.c: 285: sprintf(LCDP, "Heat                ");
  3149                           
  3150                           ; BSR set to: 1
  3151  001F6A  0E1F               	movlw	low display@LCDP
  3152  001F6C  0100               	movlb	0	; () banked
  3153  001F6E  6FC2               	movwf	sprintf@sp& (0+255),b
  3154  001F70  0E01               	movlw	high display@LCDP
  3155  001F72  6FC3               	movwf	(sprintf@sp+1)& (0+255),b
  3156  001F74  0EA5               	movlw	low STR_3
  3157  001F76  6FC4               	movwf	sprintf@f& (0+255),b
  3158  001F78  0EFF               	movlw	high STR_3
  3159  001F7A  6FC5               	movwf	(sprintf@f+1)& (0+255),b
  3160  001F7C  EC09  F000         	call	_sprintf	;wreg free
  3161                           
  3162                           ;pwm_asl.c: 286: H = 'Y';
  3163  001F80  0E59               	movlw	89
  3164  001F82  D00F               	goto	L5
  3165  001F84                     l5998:
  3166                           
  3167                           ; BSR set to: 1
  3168                           ;pwm_asl.c: 287: C = 'N';
  3169  001F84  0E4E               	movlw	78
  3170  001F86                     L4:
  3171  001F86  6F9F               	movwf	display@C& (0+255),b
  3172                           
  3173                           ;pwm_asl.c: 288: break;
  3174  001F88  D01C               	goto	l145
  3175  001F8A                     
  3176                           ;pwm_asl.c: 291: sprintf(LCDP, "Auto Cool         ");
  3177                           
  3178                           ; BSR set to: 1
  3179  001F8A  0E1F               	movlw	low display@LCDP
  3180  001F8C  0100               	movlb	0	; () banked
  3181  001F8E  6FC2               	movwf	sprintf@sp& (0+255),b
  3182  001F90  0E01               	movlw	high display@LCDP
  3183  001F92  6FC3               	movwf	(sprintf@sp+1)& (0+255),b
  3184  001F94  0EBA               	movlw	low STR_4
  3185  001F96  6FC4               	movwf	sprintf@f& (0+255),b
  3186  001F98  0EFF               	movlw	high STR_4
  3187  001F9A  6FC5               	movwf	(sprintf@f+1)& (0+255),b
  3188  001F9C  EC09  F000         	call	_sprintf	;wreg free
  3189  001FA0  D7D2               	goto	l5984
  3190  001FA2                     L5:
  3191  001FA2  0101               	movlb	1	; () banked
  3192  001FA4  6FA0               	movwf	display@H& (0+255),b
  3193  001FA6  D7EE               	goto	l5998
  3194  001FA8                     l143:
  3195                           
  3196                           ; BSR set to: 1
  3197  001FA8  505A               	movf	_mode,w,c
  3198                           
  3199                           ; Switch size 1, requested type "space"
  3200                           ; Number of cases is 4, Range of values is 0 to 3
  3201                           ; switch strategies available:
  3202                           ; Name         Instructions Cycles
  3203                           ; simple_byte           13     7 (average)
  3204                           ;	Chosen strategy is simple_byte
  3205  001FAA  0A00               	xorlw	0	; case 0
  3206  001FAC  B4D8               	btfsc	status,2,c
  3207  001FAE  D7C0               	goto	l144
  3208  001FB0  0A01               	xorlw	1	; case 1
  3209  001FB2  B4D8               	btfsc	status,2,c
  3210  001FB4  D7CA               	goto	l146
  3211  001FB6  0A03               	xorlw	3	; case 2
  3212  001FB8  B4D8               	btfsc	status,2,c
  3213  001FBA  D7D7               	goto	l147
  3214  001FBC  0A01               	xorlw	1	; case 3
  3215  001FBE  B4D8               	btfsc	status,2,c
  3216  001FC0  D7E4               	goto	l148
  3217  001FC2                     l145:
  3218                           
  3219                           ;pwm_asl.c: 298: lcd_gotoxy(1, 1);
  3220  001FC2  0E01               	movlw	1
  3221  001FC4  6E29               	movwf	lcd_gotoxy@y,c
  3222  001FC6  0E01               	movlw	1
  3223  001FC8  EC6C  F017         	call	_lcd_gotoxy
  3224                           
  3225                           ;pwm_asl.c: 299: sprintf(LCD, "RT: %4.1fC", temp);
  3226  001FCC  0E5F               	movlw	low display@LCD
  3227  001FCE  0100               	movlb	0	; () banked
  3228  001FD0  6FC2               	movwf	sprintf@sp& (0+255),b
  3229  001FD2  0E01               	movlw	high display@LCD
  3230  001FD4  6FC3               	movwf	(sprintf@sp+1)& (0+255),b
  3231  001FD6  0EE5               	movlw	low STR_5
  3232  001FD8  6FC4               	movwf	sprintf@f& (0+255),b
  3233  001FDA  0EFF               	movlw	high STR_5
  3234  001FDC  6FC5               	movwf	(sprintf@f+1)& (0+255),b
  3235  001FDE  C0E3  F0C6         	movff	_temp,?_sprintf+4
  3236  001FE2  C0E4  F0C7         	movff	_temp+1,?_sprintf+5
  3237  001FE6  C0E5  F0C8         	movff	_temp+2,?_sprintf+6
  3238  001FEA  C0E6  F0C9         	movff	_temp+3,?_sprintf+7
  3239  001FEE  EC09  F000         	call	_sprintf	;wreg free
  3240                           
  3241                           ;pwm_asl.c: 300: lcd_puts(LCD);
  3242  001FF2  0E5F               	movlw	low display@LCD
  3243  001FF4  6E2D               	movwf	lcd_puts@s,c
  3244  001FF6  0E01               	movlw	high display@LCD
  3245  001FF8  6E2E               	movwf	lcd_puts@s+1,c
  3246  001FFA  ECA5  F016         	call	_lcd_puts	;wreg free
  3247                           
  3248                           ;pwm_asl.c: 302: lcd_gotoxy(14, 1);
  3249  001FFE  0E01               	movlw	1
  3250  002000  6E29               	movwf	lcd_gotoxy@y,c
  3251  002002  0E0E               	movlw	14
  3252  002004  EC6C  F017         	call	_lcd_gotoxy
  3253                           
  3254                           ;pwm_asl.c: 303: lcd_puts("H C");
  3255  002008  0EFB               	movlw	low STR_6
  3256  00200A  6E2D               	movwf	lcd_puts@s,c
  3257  00200C  0EFF               	movlw	high STR_6
  3258  00200E  6E2E               	movwf	lcd_puts@s+1,c
  3259  002010  ECA5  F016         	call	_lcd_puts	;wreg free
  3260                           
  3261                           ;pwm_asl.c: 305: lcd_gotoxy(1, 2);
  3262  002014  0E02               	movlw	2
  3263  002016  6E29               	movwf	lcd_gotoxy@y,c
  3264  002018  0E01               	movlw	1
  3265  00201A  EC6C  F017         	call	_lcd_gotoxy
  3266                           
  3267                           ;pwm_asl.c: 306: sprintf(LCD, "SP: %4.1fC ", sp);
  3268  00201E  0E5F               	movlw	low display@LCD
  3269  002020  0100               	movlb	0	; () banked
  3270  002022  6FC2               	movwf	sprintf@sp& (0+255),b
  3271  002024  0E01               	movlw	high display@LCD
  3272  002026  6FC3               	movwf	(sprintf@sp+1)& (0+255),b
  3273  002028  0ECD               	movlw	low STR_7
  3274  00202A  6FC4               	movwf	sprintf@f& (0+255),b
  3275  00202C  0EFF               	movlw	high STR_7
  3276  00202E  6FC5               	movwf	(sprintf@f+1)& (0+255),b
  3277  002030  C0DF  F0C6         	movff	_sp,?_sprintf+4
  3278  002034  C0E0  F0C7         	movff	_sp+1,?_sprintf+5
  3279  002038  C0E1  F0C8         	movff	_sp+2,?_sprintf+6
  3280  00203C  C0E2  F0C9         	movff	_sp+3,?_sprintf+7
  3281  002040  EC09  F000         	call	_sprintf	;wreg free
  3282                           
  3283                           ;pwm_asl.c: 307: lcd_puts(LCD);
  3284  002044  0E5F               	movlw	low display@LCD
  3285  002046  6E2D               	movwf	lcd_puts@s,c
  3286  002048  0E01               	movlw	high display@LCD
  3287  00204A  6E2E               	movwf	lcd_puts@s+1,c
  3288  00204C  ECA5  F016         	call	_lcd_puts	;wreg free
  3289                           
  3290                           ;pwm_asl.c: 309: lcd_gotoxy(14, 2);
  3291  002050  0E02               	movlw	2
  3292  002052  6E29               	movwf	lcd_gotoxy@y,c
  3293  002054  0E0E               	movlw	14
  3294  002056  EC6C  F017         	call	_lcd_gotoxy
  3295                           
  3296                           ;pwm_asl.c: 310: lcd_putc(H);
  3297  00205A  0101               	movlb	1	; () banked
  3298  00205C  51A0               	movf	display@H& (0+255),w,b
  3299  00205E  ECD0  F016         	call	_lcd_putc
  3300                           
  3301                           ;pwm_asl.c: 311: lcd_gotoxy(16, 2);
  3302  002062  0E02               	movlw	2
  3303  002064  6E29               	movwf	lcd_gotoxy@y,c
  3304  002066  0E10               	movlw	16
  3305  002068  EC6C  F017         	call	_lcd_gotoxy
  3306                           
  3307                           ;pwm_asl.c: 312: lcd_putc(C);
  3308  00206C  0101               	movlb	1	; () banked
  3309  00206E  519F               	movf	display@C& (0+255),w,b
  3310  002070  ECD0  F016         	call	_lcd_putc
  3311                           
  3312                           ;pwm_asl.c: 314: lcd_gotoxy(1, 3);
  3313  002074  0E03               	movlw	3
  3314  002076  6E29               	movwf	lcd_gotoxy@y,c
  3315  002078  0E01               	movlw	1
  3316  00207A  EC6C  F017         	call	_lcd_gotoxy
  3317                           
  3318                           ;pwm_asl.c: 315: sprintf(LCD, "HS: %d", HS);
  3319  00207E  0E5F               	movlw	low display@LCD
  3320  002080  0100               	movlb	0	; () banked
  3321  002082  6FC2               	movwf	sprintf@sp& (0+255),b
  3322  002084  0E01               	movlw	high display@LCD
  3323  002086  6FC3               	movwf	(sprintf@sp+1)& (0+255),b
  3324  002088  0EF0               	movlw	low STR_8
  3325  00208A  6FC4               	movwf	sprintf@f& (0+255),b
  3326  00208C  0EFF               	movlw	high STR_8
  3327  00208E  6FC5               	movwf	(sprintf@f+1)& (0+255),b
  3328  002090  C05B  F0C6         	movff	_HS,?_sprintf+4
  3329  002094  6BC7               	clrf	(?_sprintf+5)& (0+255),b
  3330  002096  EC09  F000         	call	_sprintf	;wreg free
  3331                           
  3332                           ;pwm_asl.c: 316: lcd_puts(LCD);
  3333  00209A  0E5F               	movlw	low display@LCD
  3334  00209C  6E2D               	movwf	lcd_puts@s,c
  3335  00209E  0E01               	movlw	high display@LCD
  3336  0020A0  6E2E               	movwf	lcd_puts@s+1,c
  3337  0020A2  ECA5  F016         	call	_lcd_puts	;wreg free
  3338                           
  3339                           ;pwm_asl.c: 318: lcd_gotoxy(8, 3);
  3340  0020A6  0E03               	movlw	3
  3341  0020A8  6E29               	movwf	lcd_gotoxy@y,c
  3342  0020AA  0E08               	movlw	8
  3343  0020AC  EC6C  F017         	call	_lcd_gotoxy
  3344                           
  3345                           ;pwm_asl.c: 319: sprintf(LCD, "HC: %4.1f%%", HC);
  3346  0020B0  0E5F               	movlw	low display@LCD
  3347  0020B2  0100               	movlb	0	; () banked
  3348  0020B4  6FC2               	movwf	sprintf@sp& (0+255),b
  3349  0020B6  0E01               	movlw	high display@LCD
  3350  0020B8  6FC3               	movwf	(sprintf@sp+1)& (0+255),b
  3351  0020BA  0ED9               	movlw	low STR_9
  3352  0020BC  6FC4               	movwf	sprintf@f& (0+255),b
  3353  0020BE  0EFF               	movlw	high STR_9
  3354  0020C0  6FC5               	movwf	(sprintf@f+1)& (0+255),b
  3355  0020C2  C1C1  F0C6         	movff	_HC,?_sprintf+4
  3356  0020C6  C1C2  F0C7         	movff	_HC+1,?_sprintf+5
  3357  0020CA  C1C3  F0C8         	movff	_HC+2,?_sprintf+6
  3358  0020CE  C1C4  F0C9         	movff	_HC+3,?_sprintf+7
  3359  0020D2  EC09  F000         	call	_sprintf	;wreg free
  3360                           
  3361                           ;pwm_asl.c: 320: lcd_puts(LCD);
  3362  0020D6  0E5F               	movlw	low display@LCD
  3363  0020D8  6E2D               	movwf	lcd_puts@s,c
  3364  0020DA  0E01               	movlw	high display@LCD
  3365  0020DC  6E2E               	movwf	lcd_puts@s+1,c
  3366  0020DE  ECA5  F016         	call	_lcd_puts	;wreg free
  3367                           
  3368                           ;pwm_asl.c: 323: lcd_gotoxy(1, 4);
  3369  0020E2  0E04               	movlw	4
  3370  0020E4  6E29               	movwf	lcd_gotoxy@y,c
  3371  0020E6  0E01               	movlw	1
  3372  0020E8  EC6C  F017         	call	_lcd_gotoxy
  3373                           
  3374                           ;pwm_asl.c: 324: sprintf(LCD, "MD:");
  3375  0020EC  0E5F               	movlw	low display@LCD
  3376  0020EE  0100               	movlb	0	; () banked
  3377  0020F0  6FC2               	movwf	sprintf@sp& (0+255),b
  3378  0020F2  0E01               	movlw	high display@LCD
  3379  0020F4  6FC3               	movwf	(sprintf@sp+1)& (0+255),b
  3380  0020F6  0EF7               	movlw	low STR_10
  3381  0020F8  6FC4               	movwf	sprintf@f& (0+255),b
  3382  0020FA  0EFF               	movlw	high STR_10
  3383  0020FC  6FC5               	movwf	(sprintf@f+1)& (0+255),b
  3384  0020FE  EC09  F000         	call	_sprintf	;wreg free
  3385                           
  3386                           ;pwm_asl.c: 325: lcd_puts(LCD);
  3387  002102  0E5F               	movlw	low display@LCD
  3388  002104  6E2D               	movwf	lcd_puts@s,c
  3389  002106  0E01               	movlw	high display@LCD
  3390  002108  6E2E               	movwf	lcd_puts@s+1,c
  3391  00210A  ECA5  F016         	call	_lcd_puts	;wreg free
  3392                           
  3393                           ;pwm_asl.c: 327: lcd_gotoxy(5, 4);
  3394  00210E  0E04               	movlw	4
  3395  002110  6E29               	movwf	lcd_gotoxy@y,c
  3396  002112  0E05               	movlw	5
  3397  002114  EC6C  F017         	call	_lcd_gotoxy
  3398                           
  3399                           ;pwm_asl.c: 328: lcd_puts(LCDP);
  3400  002118  0E1F               	movlw	low display@LCDP
  3401  00211A  6E2D               	movwf	lcd_puts@s,c
  3402  00211C  0E01               	movlw	high display@LCDP
  3403  00211E  6E2E               	movwf	lcd_puts@s+1,c
  3404  002120  ECA5  F016         	call	_lcd_puts	;wreg free
  3405  002124  0012               	return		;funcret
  3406  002126                     __end_of_display:
  3407                           	opt stack 0
  3408                           tblptru	equ	0xFF8
  3409                           tblptrh	equ	0xFF7
  3410                           tblptrl	equ	0xFF6
  3411                           tablat	equ	0xFF5
  3412                           prodh	equ	0xFF4
  3413                           prodl	equ	0xFF3
  3414                           intcon	equ	0xFF2
  3415                           intcon2	equ	0xFF1
  3416                           intcon3	equ	0xFF0
  3417                           postinc0	equ	0xFEE
  3418                           wreg	equ	0xFE8
  3419                           postdec1	equ	0xFE5
  3420                           fsr1l	equ	0xFE1
  3421                           indf2	equ	0xFDF
  3422                           postinc2	equ	0xFDE
  3423                           fsr2h	equ	0xFDA
  3424                           fsr2l	equ	0xFD9
  3425                           status	equ	0xFD8
  3426                           
  3427 ;; *************** function _sprintf *****************
  3428 ;; Defined at:
  3429 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;  sp              2   66[BANK0 ] PTR unsigned char 
  3432 ;;		 -> display@LCD(64), display@LCDP(64), 
  3433 ;;  f               2   68[BANK0 ] PTR const unsigned char 
  3434 ;;		 -> STR_10(4), STR_9(12), STR_8(7), STR_7(12), 
  3435 ;;		 -> STR_5(11), STR_4(19), STR_3(21), STR_2(21), 
  3436 ;;		 -> STR_1(21), 
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;  fval            4   24[BANK1 ] PTR const unsigned char 
  3439 ;;  val             4   16[BANK1 ] unsigned long 
  3440 ;;  tmpval          4   12[BANK1 ] struct .
  3441 ;;  prec            2   28[BANK1 ] int 
  3442 ;;  width           2   22[BANK1 ] int 
  3443 ;;  exp             2   20[BANK1 ] int 
  3444 ;;  flag            2   10[BANK1 ] unsigned short 
  3445 ;;  len             2    8[BANK1 ] unsigned int 
  3446 ;;  ap              2    6[BANK1 ] PTR void [1]
  3447 ;;		 -> ?_sprintf(2), 
  3448 ;;  cp              2    4[BANK1 ] PTR const unsigned char 
  3449 ;;		 -> sprintf@c(1), 
  3450 ;;  c               1   30[BANK1 ] char 
  3451 ;;  d               1    0        unsigned char 
  3452 ;; Return value:  Size  Location     Type
  3453 ;;                  2   66[BANK0 ] int 
  3454 ;; Registers used:
  3455 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3456 ;; Tracked objects:
  3457 ;;		On entry : 0/0
  3458 ;;		On exit  : 0/0
  3459 ;;		Unchanged: 0/0
  3460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3461 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3462 ;;      Locals:         0       0      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3463 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3464 ;;      Totals:         0      12      31       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3465 ;;Total ram usage:       43 bytes
  3466 ;; Hardware stack levels used:    1
  3467 ;; Hardware stack levels required when called:    4
  3468 ;; This function calls:
  3469 ;;		___awdiv
  3470 ;;		___fladd
  3471 ;;		___flge
  3472 ;;		___flmul
  3473 ;;		___flneg
  3474 ;;		___flsub
  3475 ;;		___fltol
  3476 ;;		___lldiv
  3477 ;;		___llmod
  3478 ;;		___wmul
  3479 ;;		___xxtofl
  3480 ;;		__div_to_l_
  3481 ;;		__tdiv_to_l_
  3482 ;;		_fround
  3483 ;;		_isdigit
  3484 ;;		_scale
  3485 ;; This function is called by:
  3486 ;;		_display
  3487 ;; This function uses a non-reentrant model
  3488 ;;
  3489                           
  3490                           	psect	text12
  3491  000012                     __ptext12:
  3492                           	opt stack 0
  3493  000012                     _sprintf:
  3494                           	opt stack 25
  3495                           
  3496                           ;doprnt.c: 494: va_list ap;
  3497                           ;doprnt.c: 499: signed char c;
  3498                           ;doprnt.c: 501: int width;
  3499                           ;doprnt.c: 504: int prec;
  3500                           ;doprnt.c: 508: unsigned short flag;
  3501                           ;doprnt.c: 515: char d;
  3502                           ;doprnt.c: 516: double fval;
  3503                           ;doprnt.c: 517: int exp;
  3504                           ;doprnt.c: 523: union {
  3505                           ;doprnt.c: 524: unsigned long vd;
  3506                           ;doprnt.c: 525: double integ;
  3507                           ;doprnt.c: 526: } tmpval;
  3508                           ;doprnt.c: 528: unsigned long val;
  3509                           ;doprnt.c: 529: unsigned len;
  3510                           ;doprnt.c: 530: const char * cp;
  3511                           ;doprnt.c: 533: *ap = __va_start();
  3512                           
  3513                           ;incstack = 0
  3514  000012  0EC6               	movlw	low (?_sprintf+4)
  3515  000014  0101               	movlb	1	; () banked
  3516  000016  6F06               	movwf	sprintf@ap& (0+255),b
  3517  000018  0E00               	movlw	high (?_sprintf+4)
  3518  00001A  6F07               	movwf	(sprintf@ap+1)& (0+255),b
  3519                           
  3520                           ;doprnt.c: 536: while(c = *f++) {
  3521  00001C  EFA0  F005         	goto	u6680
  3522  000020                     
  3523                           ; BSR set to: 1
  3524                           ;doprnt.c: 538: if(c != '%')
  3525                           
  3526                           ; BSR set to: 1
  3527  000020  0E25               	movlw	37
  3528  000022  191E               	xorwf	sprintf@c& (0+255),w,b
  3529  000024  B4D8               	btfsc	status,2,c
  3530  000026  D00B               	goto	l361
  3531                           
  3532                           ; BSR set to: 1
  3533                           ;doprnt.c: 540: {
  3534                           ;doprnt.c: 541: ((*sp++ = (c)));
  3535  000028  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  3536  00002C  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  3537  000030  C11E  FFDF         	movff	sprintf@c,indf2
  3538                           
  3539                           ; BSR set to: 1
  3540  000034  0100               	movlb	0	; () banked
  3541  000036  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  3542  000038  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  3543                           
  3544                           ;doprnt.c: 542: continue;
  3545  00003A  EFA0  F005         	goto	u6680
  3546  00003E                     l361:
  3547                           
  3548                           ;doprnt.c: 543: }
  3549                           ;doprnt.c: 546: width = 0;
  3550                           
  3551                           ; BSR set to: 0
  3552  00003E  0E00               	movlw	0
  3553  000040  0101               	movlb	1	; () banked
  3554  000042  6F17               	movwf	(sprintf@width+1)& (0+255),b
  3555  000044  0E00               	movlw	0
  3556  000046  6F16               	movwf	sprintf@width& (0+255),b
  3557                           
  3558                           ;doprnt.c: 548: flag = 0;
  3559  000048  0E00               	movlw	0
  3560  00004A  6F0B               	movwf	(sprintf@flag+1)& (0+255),b
  3561  00004C  0E00               	movlw	0
  3562  00004E  6F0A               	movwf	sprintf@flag& (0+255),b
  3563                           
  3564                           ; BSR set to: 1
  3565                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3566  000050  C0C4  FFF6         	movff	sprintf@f,tblptrl
  3567  000054  C0C5  FFF7         	movff	sprintf@f+1,tblptrh
  3568  000058                     	if	0	;tblptru may be non-zero
  3569  000058                     	endif
  3570  000058                     	if	0	;tblptru may be non-zero
  3571  000058                     	endif
  3572  000058  0008               	tblrd		*
  3573  00005A  50F5               	movf	tablat,w,c
  3574  00005C  EC35  F018         	call	_isdigit
  3575  000060  A0D8               	btfss	status,0,c
  3576  000062  D038               	goto	u6180
  3577                           
  3578                           ;doprnt.c: 598: width = 0;
  3579  000064  0E00               	movlw	0
  3580  000066  0101               	movlb	1	; () banked
  3581  000068  6F17               	movwf	(sprintf@width+1)& (0+255),b
  3582  00006A  0E00               	movlw	0
  3583  00006C  6F16               	movwf	sprintf@width& (0+255),b
  3584  00006E                     
  3585                           ;doprnt.c: 600: width *= 10;
  3586                           
  3587                           ; BSR set to: 1
  3588  00006E  C116  F01F         	movff	sprintf@width,___wmul@multiplier
  3589  000072  C117  F020         	movff	sprintf@width+1,___wmul@multiplier+1
  3590  000076  0E00               	movlw	0
  3591  000078  6E22               	movwf	___wmul@multiplicand+1,c
  3592  00007A  0E0A               	movlw	10
  3593  00007C  6E21               	movwf	___wmul@multiplicand,c
  3594  00007E  ECEF  F017         	call	___wmul	;wreg free
  3595  000082  C01F  F116         	movff	?___wmul,sprintf@width
  3596  000086  C020  F117         	movff	?___wmul+1,sprintf@width+1
  3597                           
  3598                           ;doprnt.c: 601: width += *f++ - '0';
  3599  00008A  0ED0               	movlw	208
  3600  00008C  0100               	movlb	0	; () banked
  3601  00008E  6FCA               	movwf	??_sprintf& (0+255),b
  3602  000090  0EFF               	movlw	255
  3603  000092  6FCB               	movwf	(??_sprintf+1)& (0+255),b
  3604  000094  C0C4  FFF6         	movff	sprintf@f,tblptrl
  3605  000098  C0C5  FFF7         	movff	sprintf@f+1,tblptrh
  3606  00009C                     	if	0	;tblptru may be non-zero
  3607  00009C                     	endif
  3608  00009C                     	if	0	;tblptru may be non-zero
  3609  00009C                     	endif
  3610  00009C  0008               	tblrd		*
  3611  00009E  50F5               	movf	tablat,w,c
  3612  0000A0  6FCC               	movwf	(??_sprintf+2)& (0+255),b
  3613  0000A2  6BCD               	clrf	(??_sprintf+3)& (0+255),b
  3614  0000A4  51CA               	movf	??_sprintf& (0+255),w,b
  3615  0000A6  27CC               	addwf	(??_sprintf+2)& (0+255),f,b
  3616  0000A8  51CB               	movf	(??_sprintf+1)& (0+255),w,b
  3617  0000AA  23CD               	addwfc	(??_sprintf+3)& (0+255),f,b
  3618  0000AC  51CC               	movf	(??_sprintf+2)& (0+255),w,b
  3619  0000AE  0101               	movlb	1	; () banked
  3620  0000B0  2716               	addwf	sprintf@width& (0+255),f,b
  3621  0000B2  0100               	movlb	0	; () banked
  3622  0000B4  51CD               	movf	(??_sprintf+3)& (0+255),w,b
  3623  0000B6  0101               	movlb	1	; () banked
  3624  0000B8  2317               	addwfc	(sprintf@width+1)& (0+255),f,b
  3625                           
  3626                           ; BSR set to: 1
  3627  0000BA  0100               	movlb	0	; () banked
  3628  0000BC  4BC4               	infsnz	sprintf@f& (0+255),f,b
  3629  0000BE  2BC5               	incf	(sprintf@f+1)& (0+255),f,b
  3630                           
  3631                           ; BSR set to: 0
  3632                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3633  0000C0  C0C4  FFF6         	movff	sprintf@f,tblptrl
  3634  0000C4  C0C5  FFF7         	movff	sprintf@f+1,tblptrh
  3635  0000C8                     	if	0	;tblptru may be non-zero
  3636  0000C8                     	endif
  3637  0000C8                     	if	0	;tblptru may be non-zero
  3638  0000C8                     	endif
  3639  0000C8  0008               	tblrd		*
  3640  0000CA  50F5               	movf	tablat,w,c
  3641  0000CC  EC35  F018         	call	_isdigit
  3642  0000D0  B0D8               	btfsc	status,0,c
  3643  0000D2  D7CD               	goto	l363
  3644  0000D4                     u6180:
  3645                           
  3646                           ;doprnt.c: 608: }
  3647                           ;doprnt.c: 611: if(*f == '.') {
  3648  0000D4  C0C4  FFF6         	movff	sprintf@f,tblptrl
  3649  0000D8  C0C5  FFF7         	movff	sprintf@f+1,tblptrh
  3650  0000DC                     	if	0	;tblptru may be non-zero
  3651  0000DC                     	endif
  3652  0000DC                     	if	0	;tblptru may be non-zero
  3653  0000DC                     	endif
  3654  0000DC  0008               	tblrd		*
  3655  0000DE  50F5               	movf	tablat,w,c
  3656  0000E0  0A2E               	xorlw	46
  3657  0000E2  A4D8               	btfss	status,2,c
  3658  0000E4  D033               	goto	l365
  3659                           
  3660                           ;doprnt.c: 612: flag |= 0x4000;
  3661  0000E6  0101               	movlb	1	; () banked
  3662  0000E8  8D0B               	bsf	(sprintf@flag+1)& (0+255),6,b
  3663                           
  3664                           ;doprnt.c: 613: f++;
  3665  0000EA  0100               	movlb	0	; () banked
  3666  0000EC  4BC4               	infsnz	sprintf@f& (0+255),f,b
  3667  0000EE  2BC5               	incf	(sprintf@f+1)& (0+255),f,b
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;doprnt.c: 620: {
  3671                           ;doprnt.c: 621: prec = 0;
  3672  0000F0  0E00               	movlw	0
  3673  0000F2  0101               	movlb	1	; () banked
  3674  0000F4  6F1D               	movwf	(sprintf@prec+1)& (0+255),b
  3675  0000F6  0E00               	movlw	0
  3676  0000F8  6F1C               	movwf	sprintf@prec& (0+255),b
  3677                           
  3678                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3679  0000FA  D01D               	goto	l366
  3680  0000FC                     
  3681                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3682                           
  3683                           ; BSR set to: 1
  3684  0000FC  C11C  F01F         	movff	sprintf@prec,___wmul@multiplier
  3685  000100  C11D  F020         	movff	sprintf@prec+1,___wmul@multiplier+1
  3686  000104  0E00               	movlw	0
  3687  000106  6E22               	movwf	___wmul@multiplicand+1,c
  3688  000108  0E0A               	movlw	10
  3689  00010A  6E21               	movwf	___wmul@multiplicand,c
  3690  00010C  ECEF  F017         	call	___wmul	;wreg free
  3691  000110  C0C4  FFF6         	movff	sprintf@f,tblptrl
  3692  000114  C0C5  FFF7         	movff	sprintf@f+1,tblptrh
  3693  000118                     	if	0	;tblptru may be non-zero
  3694  000118                     	endif
  3695  000118                     	if	0	;tblptru may be non-zero
  3696  000118                     	endif
  3697  000118  0008               	tblrd		*
  3698  00011A  50F5               	movf	tablat,w,c
  3699  00011C  261F               	addwf	?___wmul,f,c
  3700  00011E  0E00               	movlw	0
  3701  000120  2220               	addwfc	?___wmul+1,f,c
  3702  000122  0ED0               	movlw	208
  3703  000124  241F               	addwf	?___wmul,w,c
  3704  000126  0101               	movlb	1	; () banked
  3705  000128  6F1C               	movwf	sprintf@prec& (0+255),b
  3706  00012A  0EFF               	movlw	255
  3707  00012C  2020               	addwfc	?___wmul+1,w,c
  3708  00012E  6F1D               	movwf	(sprintf@prec+1)& (0+255),b
  3709                           
  3710                           ; BSR set to: 1
  3711  000130  0100               	movlb	0	; () banked
  3712  000132  4BC4               	infsnz	sprintf@f& (0+255),f,b
  3713  000134  2BC5               	incf	(sprintf@f+1)& (0+255),f,b
  3714  000136                     l366:
  3715                           
  3716                           ; BSR set to: 0
  3717  000136  C0C4  FFF6         	movff	sprintf@f,tblptrl
  3718  00013A  C0C5  FFF7         	movff	sprintf@f+1,tblptrh
  3719  00013E                     	if	0	;tblptru may be non-zero
  3720  00013E                     	endif
  3721  00013E                     	if	0	;tblptru may be non-zero
  3722  00013E                     	endif
  3723  00013E  0008               	tblrd		*
  3724  000140  50F5               	movf	tablat,w,c
  3725  000142  EC35  F018         	call	_isdigit
  3726  000146  A0D8               	btfss	status,0,c
  3727  000148  D05E               	goto	l370
  3728  00014A  D7D8               	goto	l367
  3729  00014C                     l365:
  3730                           
  3731                           ;doprnt.c: 626: prec = 0;
  3732  00014C  0E00               	movlw	0
  3733  00014E  0101               	movlb	1	; () banked
  3734  000150  6F1D               	movwf	(sprintf@prec+1)& (0+255),b
  3735  000152  0E00               	movlw	0
  3736  000154  6F1C               	movwf	sprintf@prec& (0+255),b
  3737                           
  3738                           ; BSR set to: 1
  3739                           ;doprnt.c: 628: flag |= 0x1000;
  3740  000156  890B               	bsf	(sprintf@flag+1)& (0+255),4,b
  3741                           
  3742                           ; BSR set to: 1
  3743                           ;doprnt.c: 630: }
  3744                           ;doprnt.c: 635: switch(c = *f++) {
  3745  000158  D056               	goto	l370
  3746  00015A                     
  3747                           ; BSR set to: 1
  3748                           ;doprnt.c: 663: flag |= 0x400;
  3749                           
  3750                           ; BSR set to: 1
  3751  00015A  850B               	bsf	(sprintf@flag+1)& (0+255),2,b
  3752                           
  3753                           ; BSR set to: 1
  3754                           ;doprnt.c: 698: case 'i':
  3755                           ;doprnt.c: 699: break;
  3756                           
  3757                           ; BSR set to: 1
  3758                           
  3759                           ;doprnt.c: 697: case 'd':
  3760                           
  3761                           ;doprnt.c: 664: break;
  3762  00015C  D06D               	goto	l374
  3763  00015E                     
  3764                           ; BSR set to: 1
  3765                           ;doprnt.c: 753: if(prec && prec < len)
  3766                           
  3767                           ; BSR set to: 1
  3768  00015E  511C               	movf	sprintf@prec& (0+255),w,b
  3769  000160  111D               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3770  000162  B4D8               	btfsc	status,2,c
  3771  000164  D00A               	goto	l378
  3772                           
  3773                           ; BSR set to: 1
  3774  000166  5108               	movf	sprintf@len& (0+255),w,b
  3775  000168  5D1C               	subwf	sprintf@prec& (0+255),w,b
  3776  00016A  5109               	movf	(sprintf@len+1)& (0+255),w,b
  3777  00016C  591D               	subwfb	(sprintf@prec+1)& (0+255),w,b
  3778  00016E  B0D8               	btfsc	status,0,c
  3779  000170  D004               	goto	l378
  3780                           
  3781                           ; BSR set to: 1
  3782                           ;doprnt.c: 754: len = prec;
  3783  000172  C11C  F108         	movff	sprintf@prec,sprintf@len
  3784  000176  C11D  F109         	movff	sprintf@prec+1,sprintf@len+1
  3785  00017A                     l378:
  3786                           
  3787                           ; BSR set to: 1
  3788                           ;doprnt.c: 757: if(width > len)
  3789                           
  3790                           ; BSR set to: 1
  3791  00017A  5116               	movf	sprintf@width& (0+255),w,b
  3792  00017C  5D08               	subwf	sprintf@len& (0+255),w,b
  3793  00017E  5117               	movf	(sprintf@width+1)& (0+255),w,b
  3794  000180  5909               	subwfb	(sprintf@len+1)& (0+255),w,b
  3795  000182  B0D8               	btfsc	status,0,c
  3796  000184  D005               	goto	l379
  3797                           
  3798                           ; BSR set to: 1
  3799                           ;doprnt.c: 758: width -= len;
  3800  000186  5108               	movf	sprintf@len& (0+255),w,b
  3801  000188  5F16               	subwf	sprintf@width& (0+255),f,b
  3802  00018A  5109               	movf	(sprintf@len+1)& (0+255),w,b
  3803  00018C  5B17               	subwfb	(sprintf@width+1)& (0+255),f,b
  3804  00018E  D00E               	goto	l381
  3805  000190                     l379:
  3806                           
  3807                           ; BSR set to: 1
  3808                           ;doprnt.c: 759: else
  3809                           ;doprnt.c: 760: width = 0;
  3810                           
  3811                           ; BSR set to: 1
  3812  000190  0E00               	movlw	0
  3813  000192  6F17               	movwf	(sprintf@width+1)& (0+255),b
  3814  000194  0E00               	movlw	0
  3815  000196  6F16               	movwf	sprintf@width& (0+255),b
  3816                           
  3817                           ; BSR set to: 1
  3818                           ;doprnt.c: 764: while(width--)
  3819  000198  D009               	goto	l381
  3820  00019A                     l5490:
  3821                           
  3822                           ; BSR set to: 1
  3823                           ;doprnt.c: 765: ((*sp++ = (' ')));
  3824  00019A  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  3825  00019E  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  3826  0001A2  0E20               	movlw	32
  3827  0001A4  6EDF               	movwf	indf2,c
  3828                           
  3829                           ; BSR set to: 1
  3830  0001A6  0100               	movlb	0	; () banked
  3831  0001A8  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  3832  0001AA  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  3833  0001AC                     l381:
  3834                           
  3835                           ; BSR set to: 0
  3836  0001AC  0101               	movlb	1	; () banked
  3837  0001AE  0716               	decf	sprintf@width& (0+255),f,b
  3838  0001B0  A0D8               	btfss	status,0,c
  3839  0001B2  0717               	decf	(sprintf@width+1)& (0+255),f,b
  3840  0001B4  2916               	incf	sprintf@width& (0+255),w,b
  3841  0001B6  E1F1               	bnz	l5490
  3842  0001B8  2917               	incf	(sprintf@width+1)& (0+255),w,b
  3843  0001BA  B4D8               	btfsc	status,2,c
  3844  0001BC  D010               	goto	l384
  3845  0001BE  D7ED               	goto	l382
  3846  0001C0                     l5496:
  3847                           
  3848                           ; BSR set to: 1
  3849                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  3850  0001C0  C104  FFD9         	movff	sprintf@cp,fsr2l
  3851  0001C4  C105  FFDA         	movff	sprintf@cp+1,fsr2h
  3852  0001C8  C0C2  FFE1         	movff	sprintf@sp,fsr1l
  3853  0001CC  C0C3  FFE2         	movff	sprintf@sp+1,fsr1h
  3854  0001D0  CFDF FFE7          	movff	indf2,indf1
  3855                           
  3856                           ; BSR set to: 1
  3857  0001D4  4B04               	infsnz	sprintf@cp& (0+255),f,b
  3858  0001D6  2B05               	incf	(sprintf@cp+1)& (0+255),f,b
  3859                           
  3860                           ; BSR set to: 1
  3861  0001D8  0100               	movlb	0	; () banked
  3862  0001DA  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  3863  0001DC  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  3864  0001DE                     l384:
  3865                           
  3866                           ; BSR set to: 0
  3867  0001DE  0101               	movlb	1	; () banked
  3868  0001E0  0708               	decf	sprintf@len& (0+255),f,b
  3869  0001E2  A0D8               	btfss	status,0,c
  3870  0001E4  0709               	decf	(sprintf@len+1)& (0+255),f,b
  3871  0001E6  2908               	incf	sprintf@len& (0+255),w,b
  3872  0001E8  E1EB               	bnz	l5496
  3873  0001EA  2909               	incf	(sprintf@len+1)& (0+255),w,b
  3874  0001EC  B4D8               	btfsc	status,2,c
  3875  0001EE  EFA0  F005         	goto	u6680
  3876  0001F2  D7E6               	goto	l385
  3877  0001F4                     
  3878                           ; BSR set to: 1
  3879                           ;doprnt.c: 805: cp = (char *)&c;
  3880                           
  3881                           ; BSR set to: 1
  3882  0001F4  0E1E               	movlw	low sprintf@c
  3883  0001F6  6F04               	movwf	sprintf@cp& (0+255),b
  3884  0001F8  0E01               	movlw	high sprintf@c
  3885  0001FA  6F05               	movwf	(sprintf@cp+1)& (0+255),b
  3886                           
  3887                           ; BSR set to: 1
  3888                           ;doprnt.c: 806: len = 1;
  3889  0001FC  0E00               	movlw	0
  3890  0001FE  6F09               	movwf	(sprintf@len+1)& (0+255),b
  3891  000200  0E01               	movlw	1
  3892  000202  6F08               	movwf	sprintf@len& (0+255),b
  3893                           
  3894                           ;doprnt.c: 807: goto dostring;
  3895  000204  D7AC               	goto	l377
  3896  000206                     l370:
  3897                           
  3898                           ; BSR set to: 1
  3899  000206  C0C4  FFF6         	movff	sprintf@f,tblptrl
  3900  00020A  C0C5  FFF7         	movff	sprintf@f+1,tblptrh
  3901  00020E  0100               	movlb	0	; () banked
  3902  000210  4BC4               	infsnz	sprintf@f& (0+255),f,b
  3903  000212  2BC5               	incf	(sprintf@f+1)& (0+255),f,b
  3904  000214                     	if	0	;tblptru may be non-zero
  3905  000214                     	endif
  3906  000214                     	if	0	;tblptru may be non-zero
  3907  000214                     	endif
  3908  000214  0008               	tblrd		*
  3909  000216  CFF5 F11E          	movff	tablat,sprintf@c
  3910  00021A  0101               	movlb	1	; () banked
  3911  00021C  511E               	movf	sprintf@c& (0+255),w,b
  3912                           
  3913                           ; Switch size 1, requested type "space"
  3914                           ; Number of cases is 4, Range of values is 0 to 105
  3915                           ; switch strategies available:
  3916                           ; Name         Instructions Cycles
  3917                           ; simple_byte           13     7 (average)
  3918                           ;	Chosen strategy is simple_byte
  3919  00021E  0A00               	xorlw	0	; case 0
  3920  000220  B4D8               	btfsc	status,2,c
  3921  000222  EFAF  F005         	goto	u6690
  3922  000226  0A64               	xorlw	100	; case 100
  3923  000228  B4D8               	btfsc	status,2,c
  3924  00022A  D006               	goto	l374
  3925  00022C  0A02               	xorlw	2	; case 102
  3926  00022E  B4D8               	btfsc	status,2,c
  3927  000230  D794               	goto	l373
  3928  000232  0A0F               	xorlw	15	; case 105
  3929  000234  A4D8               	btfss	status,2,c
  3930  000236  D7DE               	goto	l387
  3931  000238                     l374:
  3932                           
  3933                           ; BSR set to: 1
  3934                           ;doprnt.c: 825: if(flag & (0x700)) {
  3935                           
  3936                           ; BSR set to: 1
  3937  000238  0E07               	movlw	7
  3938  00023A  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  3939  00023C  B4D8               	btfsc	status,2,c
  3940  00023E  D34F               	goto	l388
  3941                           
  3942                           ; BSR set to: 1
  3943                           ;doprnt.c: 827: if(flag & 0x1000)
  3944  000240  A90B               	btfss	(sprintf@flag+1)& (0+255),4,b
  3945  000242  D004               	goto	l389
  3946                           
  3947                           ; BSR set to: 1
  3948                           ;doprnt.c: 829: prec = 6;
  3949  000244  0E00               	movlw	0
  3950  000246  6F1D               	movwf	(sprintf@prec+1)& (0+255),b
  3951  000248  0E06               	movlw	6
  3952  00024A  6F1C               	movwf	sprintf@prec& (0+255),b
  3953  00024C                     l389:
  3954                           
  3955                           ; BSR set to: 1
  3956                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3957                           
  3958                           ; BSR set to: 1
  3959  00024C  C106  FFD9         	movff	sprintf@ap,fsr2l
  3960  000250  C107  FFDA         	movff	sprintf@ap+1,fsr2h
  3961  000254  CFDE F118          	movff	postinc2,sprintf@fval
  3962  000258  CFDE F119          	movff	postinc2,sprintf@fval+1
  3963  00025C  CFDE F11A          	movff	postinc2,sprintf@fval+2
  3964  000260  CFDE F11B          	movff	postinc2,sprintf@fval+3
  3965                           
  3966                           ; BSR set to: 1
  3967  000264  0E04               	movlw	4
  3968  000266  2706               	addwf	sprintf@ap& (0+255),f,b
  3969  000268  0E00               	movlw	0
  3970  00026A  2307               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3971                           
  3972                           ; BSR set to: 1
  3973                           ;doprnt.c: 831: if(fval < 0.0) {
  3974  00026C  AF1B               	btfss	(sprintf@fval+3)& (0+255),7,b
  3975  00026E  D015               	goto	l390
  3976                           
  3977                           ; BSR set to: 1
  3978                           ;doprnt.c: 832: fval = -fval;
  3979  000270  C118  F033         	movff	sprintf@fval,___flneg@f1
  3980  000274  C119  F034         	movff	sprintf@fval+1,___flneg@f1+1
  3981  000278  C11A  F035         	movff	sprintf@fval+2,___flneg@f1+2
  3982  00027C  C11B  F036         	movff	sprintf@fval+3,___flneg@f1+3
  3983  000280  ECC1  F017         	call	___flneg	;wreg free
  3984  000284  C033  F118         	movff	?___flneg,sprintf@fval
  3985  000288  C034  F119         	movff	?___flneg+1,sprintf@fval+1
  3986  00028C  C035  F11A         	movff	?___flneg+2,sprintf@fval+2
  3987  000290  C036  F11B         	movff	?___flneg+3,sprintf@fval+3
  3988                           
  3989                           ;doprnt.c: 833: flag |= 0x03;
  3990  000294  0E03               	movlw	3
  3991  000296  0101               	movlb	1	; () banked
  3992  000298  130A               	iorwf	sprintf@flag& (0+255),f,b
  3993  00029A                     l390:
  3994                           
  3995                           ; BSR set to: 1
  3996                           ;doprnt.c: 834: }
  3997                           ;doprnt.c: 835: exp = 0;
  3998                           
  3999                           ; BSR set to: 1
  4000  00029A  0E00               	movlw	0
  4001  00029C  6F15               	movwf	(sprintf@exp+1)& (0+255),b
  4002  00029E  0E00               	movlw	0
  4003  0002A0  6F14               	movwf	sprintf@exp& (0+255),b
  4004                           
  4005                           ; BSR set to: 1
  4006                           ;doprnt.c: 836: if( fval!=0) {
  4007  0002A2  5118               	movf	sprintf@fval& (0+255),w,b
  4008  0002A4  1119               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4009  0002A6  111A               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4010  0002A8  111B               	iorwf	(sprintf@fval+3)& (0+255),w,b
  4011  0002AA  B4D8               	btfsc	status,2,c
  4012  0002AC  D086               	goto	l395
  4013                           
  4014                           ; BSR set to: 1
  4015                           ;doprnt.c: 837: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
  4016  0002AE  351A               	rlcf	(sprintf@fval+2)& (0+255),w,b
  4017  0002B0  351B               	rlcf	(sprintf@fval+3)& (0+255),w,b
  4018  0002B2  0F82               	addlw	130
  4019  0002B4  6F14               	movwf	sprintf@exp& (0+255),b
  4020  0002B6  6B15               	clrf	(sprintf@exp+1)& (0+255),b
  4021  0002B8  0EFF               	movlw	255
  4022  0002BA  2315               	addwfc	(sprintf@exp+1)& (0+255),f,b
  4023                           
  4024                           ; BSR set to: 1
  4025                           ;doprnt.c: 838: exp--;
  4026  0002BC  0714               	decf	sprintf@exp& (0+255),f,b
  4027  0002BE  A0D8               	btfss	status,0,c
  4028  0002C0  0715               	decf	(sprintf@exp+1)& (0+255),f,b
  4029                           
  4030                           ; BSR set to: 1
  4031                           ;doprnt.c: 839: exp *= 3;
  4032  0002C2  C114  F01F         	movff	sprintf@exp,___wmul@multiplier
  4033  0002C6  C115  F020         	movff	sprintf@exp+1,___wmul@multiplier+1
  4034  0002CA  0E00               	movlw	0
  4035  0002CC  6E22               	movwf	___wmul@multiplicand+1,c
  4036  0002CE  0E03               	movlw	3
  4037  0002D0  6E21               	movwf	___wmul@multiplicand,c
  4038  0002D2  ECEF  F017         	call	___wmul	;wreg free
  4039  0002D6  C01F  F114         	movff	?___wmul,sprintf@exp
  4040  0002DA  C020  F115         	movff	?___wmul+1,sprintf@exp+1
  4041                           
  4042                           ;doprnt.c: 840: exp /= 10;
  4043  0002DE  C114  F025         	movff	sprintf@exp,___awdiv@dividend
  4044  0002E2  C115  F026         	movff	sprintf@exp+1,___awdiv@dividend+1
  4045  0002E6  0E00               	movlw	0
  4046  0002E8  6E28               	movwf	___awdiv@divisor+1,c
  4047  0002EA  0E0A               	movlw	10
  4048  0002EC  6E27               	movwf	___awdiv@divisor,c
  4049  0002EE  EC22  F015         	call	___awdiv	;wreg free
  4050  0002F2  C025  F114         	movff	?___awdiv,sprintf@exp
  4051  0002F6  C026  F115         	movff	?___awdiv+1,sprintf@exp+1
  4052                           
  4053                           ;doprnt.c: 841: if(exp < 0)
  4054  0002FA  0101               	movlb	1	; () banked
  4055  0002FC  AF15               	btfss	(sprintf@exp+1)& (0+255),7,b
  4056  0002FE  D003               	goto	l392
  4057                           
  4058                           ; BSR set to: 1
  4059                           ;doprnt.c: 842: exp--;
  4060  000300  0714               	decf	sprintf@exp& (0+255),f,b
  4061  000302  A0D8               	btfss	status,0,c
  4062  000304  0715               	decf	(sprintf@exp+1)& (0+255),f,b
  4063  000306                     l392:
  4064                           
  4065                           ; BSR set to: 1
  4066                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  4067                           
  4068                           ; BSR set to: 1
  4069  000306  5114               	movf	sprintf@exp& (0+255),w,b
  4070  000308  0800               	sublw	0
  4071  00030A  ECB6  F005         	call	_scale
  4072  00030E  C095  F10C         	movff	?_scale,sprintf@tmpval
  4073  000312  C096  F10D         	movff	?_scale+1,sprintf@tmpval+1
  4074  000316  C097  F10E         	movff	?_scale+2,sprintf@tmpval+2
  4075  00031A  C098  F10F         	movff	?_scale+3,sprintf@tmpval+3
  4076                           
  4077                           ;doprnt.c: 847: tmpval.integ *= fval;
  4078  00031E  C10C  F080         	movff	sprintf@tmpval,___flmul@b
  4079  000322  C10D  F081         	movff	sprintf@tmpval+1,___flmul@b+1
  4080  000326  C10E  F082         	movff	sprintf@tmpval+2,___flmul@b+2
  4081  00032A  C10F  F083         	movff	sprintf@tmpval+3,___flmul@b+3
  4082  00032E  C118  F084         	movff	sprintf@fval,___flmul@a
  4083  000332  C119  F085         	movff	sprintf@fval+1,___flmul@a+1
  4084  000336  C11A  F086         	movff	sprintf@fval+2,___flmul@a+2
  4085  00033A  C11B  F087         	movff	sprintf@fval+3,___flmul@a+3
  4086  00033E  ECAA  F009         	call	___flmul	;wreg free
  4087  000342  C080  F10C         	movff	?___flmul,sprintf@tmpval
  4088  000346  C081  F10D         	movff	?___flmul+1,sprintf@tmpval+1
  4089  00034A  C082  F10E         	movff	?___flmul+2,sprintf@tmpval+2
  4090  00034E  C083  F10F         	movff	?___flmul+3,sprintf@tmpval+3
  4091                           
  4092                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  4093  000352  C10C  F0B6         	movff	sprintf@tmpval,___flge@ff1
  4094  000356  C10D  F0B7         	movff	sprintf@tmpval+1,___flge@ff1+1
  4095  00035A  C10E  F0B8         	movff	sprintf@tmpval+2,___flge@ff1+2
  4096  00035E  C10F  F0B9         	movff	sprintf@tmpval+3,___flge@ff1+3
  4097  000362  0E00               	movlw	0
  4098  000364  0100               	movlb	0	; () banked
  4099  000366  6FBA               	movwf	___flge@ff2& (0+255),b
  4100  000368  0E00               	movlw	0
  4101  00036A  6FBB               	movwf	(___flge@ff2+1)& (0+255),b
  4102  00036C  0E80               	movlw	128
  4103  00036E  6FBC               	movwf	(___flge@ff2+2)& (0+255),b
  4104  000370  0E3F               	movlw	63
  4105  000372  6FBD               	movwf	(___flge@ff2+3)& (0+255),b
  4106  000374  ECFA  F012         	call	___flge	;wreg free
  4107  000378  0100               	movlb	0	; () banked
  4108  00037A  B0D8               	btfsc	status,0,c
  4109  00037C  D005               	goto	l393
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;doprnt.c: 849: exp--;
  4113  00037E  0101               	movlb	1	; () banked
  4114  000380  0714               	decf	sprintf@exp& (0+255),f,b
  4115  000382  A0D8               	btfss	status,0,c
  4116  000384  0715               	decf	(sprintf@exp+1)& (0+255),f,b
  4117  000386  D019               	goto	l395
  4118  000388                     l393:
  4119                           
  4120                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  4121                           
  4122                           ; BSR set to: 1
  4123  000388  C10C  F0B6         	movff	sprintf@tmpval,___flge@ff1
  4124  00038C  C10D  F0B7         	movff	sprintf@tmpval+1,___flge@ff1+1
  4125  000390  C10E  F0B8         	movff	sprintf@tmpval+2,___flge@ff1+2
  4126  000394  C10F  F0B9         	movff	sprintf@tmpval+3,___flge@ff1+3
  4127  000398  0E00               	movlw	0
  4128  00039A  0100               	movlb	0	; () banked
  4129  00039C  6FBA               	movwf	___flge@ff2& (0+255),b
  4130  00039E  0E00               	movlw	0
  4131  0003A0  6FBB               	movwf	(___flge@ff2+1)& (0+255),b
  4132  0003A2  0E20               	movlw	32
  4133  0003A4  6FBC               	movwf	(___flge@ff2+2)& (0+255),b
  4134  0003A6  0E41               	movlw	65
  4135  0003A8  6FBD               	movwf	(___flge@ff2+3)& (0+255),b
  4136  0003AA  ECFA  F012         	call	___flge	;wreg free
  4137  0003AE  0100               	movlb	0	; () banked
  4138  0003B0  A0D8               	btfss	status,0,c
  4139  0003B2  D003               	goto	l395
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;doprnt.c: 851: exp++;
  4143  0003B4  0101               	movlb	1	; () banked
  4144  0003B6  4B14               	infsnz	sprintf@exp& (0+255),f,b
  4145  0003B8  2B15               	incf	(sprintf@exp+1)& (0+255),f,b
  4146  0003BA                     l395:
  4147                           
  4148                           ;doprnt.c: 852: }
  4149                           ;doprnt.c: 1112: if(prec <= 12)
  4150                           
  4151                           ; BSR set to: 1
  4152                           
  4153                           ; BSR set to: 1
  4154                           
  4155                           ; BSR set to: 1
  4156  0003BA  0101               	movlb	1	; () banked
  4157  0003BC  BF1D               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4158  0003BE  D006               	goto	u6330
  4159  0003C0  511D               	movf	(sprintf@prec+1)& (0+255),w,b
  4160  0003C2  E121               	bnz	l5560
  4161  0003C4  0E0D               	movlw	13
  4162  0003C6  5D1C               	subwf	sprintf@prec& (0+255),w,b
  4163  0003C8  B0D8               	btfsc	status,0,c
  4164  0003CA  D01D               	goto	l396
  4165  0003CC                     u6330:
  4166                           
  4167                           ; BSR set to: 1
  4168                           ;doprnt.c: 1113: fval += fround(prec);
  4169  0003CC  C118  F0A2         	movff	sprintf@fval,___fladd@b
  4170  0003D0  C119  F0A3         	movff	sprintf@fval+1,___fladd@b+1
  4171  0003D4  C11A  F0A4         	movff	sprintf@fval+2,___fladd@b+2
  4172  0003D8  C11B  F0A5         	movff	sprintf@fval+3,___fladd@b+3
  4173  0003DC  511C               	movf	sprintf@prec& (0+255),w,b
  4174  0003DE  EC4C  F00E         	call	_fround
  4175  0003E2  C095  F0A6         	movff	?_fround,___fladd@a
  4176  0003E6  C096  F0A7         	movff	?_fround+1,___fladd@a+1
  4177  0003EA  C097  F0A8         	movff	?_fround+2,___fladd@a+2
  4178  0003EE  C098  F0A9         	movff	?_fround+3,___fladd@a+3
  4179  0003F2  EC53  F00B         	call	___fladd	;wreg free
  4180  0003F6  C0A2  F118         	movff	?___fladd,sprintf@fval
  4181  0003FA  C0A3  F119         	movff	?___fladd+1,sprintf@fval+1
  4182  0003FE  C0A4  F11A         	movff	?___fladd+2,sprintf@fval+2
  4183  000402  C0A5  F11B         	movff	?___fladd+3,sprintf@fval+3
  4184  000406                     l396:
  4185  000406                     l5560:
  4186                           
  4187                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4188  000406  0101               	movlb	1	; () banked
  4189  000408  BF15               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4190  00040A  D006               	goto	u6340
  4191  00040C  5115               	movf	(sprintf@exp+1)& (0+255),w,b
  4192  00040E  E124               	bnz	l5568
  4193  000410  0E0A               	movlw	10
  4194  000412  5D14               	subwf	sprintf@exp& (0+255),w,b
  4195  000414  B0D8               	btfsc	status,0,c
  4196  000416  D020               	goto	u6370
  4197  000418                     u6340:
  4198                           
  4199                           ; BSR set to: 1
  4200  000418  5118               	movf	sprintf@fval& (0+255),w,b
  4201  00041A  1119               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4202  00041C  111A               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4203  00041E  111B               	iorwf	(sprintf@fval+3)& (0+255),w,b
  4204  000420  B4D8               	btfsc	status,2,c
  4205  000422  D067               	goto	l397
  4206                           
  4207                           ; BSR set to: 1
  4208  000424  C118  F09E         	movff	sprintf@fval,___fltol@f1
  4209  000428  C119  F09F         	movff	sprintf@fval+1,___fltol@f1+1
  4210  00042C  C11A  F0A0         	movff	sprintf@fval+2,___fltol@f1+2
  4211  000430  C11B  F0A1         	movff	sprintf@fval+3,___fltol@f1+3
  4212  000434  EC02  F014         	call	___fltol	;wreg free
  4213  000438  0100               	movlb	0	; () banked
  4214  00043A  519E               	movf	?___fltol& (0+255),w,b
  4215  00043C  119F               	iorwf	(?___fltol+1)& (0+255),w,b
  4216  00043E  11A0               	iorwf	(?___fltol+2)& (0+255),w,b
  4217  000440  11A1               	iorwf	(?___fltol+3)& (0+255),w,b
  4218  000442  A4D8               	btfss	status,2,c
  4219  000444  D056               	goto	l397
  4220                           
  4221                           ; BSR set to: 0
  4222  000446  0101               	movlb	1	; () banked
  4223  000448  BF15               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4224  00044A  D053               	goto	l397
  4225  00044C  5115               	movf	(sprintf@exp+1)& (0+255),w,b
  4226  00044E  E104               	bnz	l5568
  4227  000450  0E02               	movlw	2
  4228  000452  5D14               	subwf	sprintf@exp& (0+255),w,b
  4229  000454  A0D8               	btfss	status,0,c
  4230  000456  D04D               	goto	l397
  4231  000458                     u6370:
  4232  000458                     l5568:
  4233                           
  4234                           ; BSR set to: 1
  4235                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  4236  000458  C10C  F0B6         	movff	sprintf@tmpval,___flge@ff1
  4237  00045C  C10D  F0B7         	movff	sprintf@tmpval+1,___flge@ff1+1
  4238  000460  C10E  F0B8         	movff	sprintf@tmpval+2,___flge@ff1+2
  4239  000464  C10F  F0B9         	movff	sprintf@tmpval+3,___flge@ff1+3
  4240  000468  0E5F               	movlw	95
  4241  00046A  0100               	movlb	0	; () banked
  4242  00046C  6FBA               	movwf	___flge@ff2& (0+255),b
  4243  00046E  0E70               	movlw	112
  4244  000470  6FBB               	movwf	(___flge@ff2+1)& (0+255),b
  4245  000472  0E89               	movlw	137
  4246  000474  6FBC               	movwf	(___flge@ff2+2)& (0+255),b
  4247  000476  0E40               	movlw	64
  4248  000478  6FBD               	movwf	(___flge@ff2+3)& (0+255),b
  4249  00047A  ECFA  F012         	call	___flge	;wreg free
  4250  00047E  0100               	movlb	0	; () banked
  4251  000480  B0D8               	btfsc	status,0,c
  4252  000482  D003               	goto	l400
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4256  000484  0101               	movlb	1	; () banked
  4257  000486  0EF7               	movlw	247
  4258  000488  D002               	goto	L6
  4259  00048A                     l400:
  4260                           
  4261                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4262                           
  4263                           ; BSR set to: 1
  4264  00048A  0101               	movlb	1	; () banked
  4265  00048C  0EF8               	movlw	248
  4266  00048E                     L6:
  4267  00048E  2714               	addwf	sprintf@exp& (0+255),f,b
  4268  000490  0EFF               	movlw	255
  4269  000492  2315               	addwfc	(sprintf@exp+1)& (0+255),f,b
  4270                           
  4271                           ; BSR set to: 1
  4272                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  4273                           
  4274                           ; BSR set to: 1
  4275  000494  5114               	movf	sprintf@exp& (0+255),w,b
  4276  000496  ECB6  F005         	call	_scale
  4277  00049A  C095  F10C         	movff	?_scale,sprintf@tmpval
  4278  00049E  C096  F10D         	movff	?_scale+1,sprintf@tmpval+1
  4279  0004A2  C097  F10E         	movff	?_scale+2,sprintf@tmpval+2
  4280  0004A6  C098  F10F         	movff	?_scale+3,sprintf@tmpval+3
  4281  0004AA  C118  F01F         	movff	sprintf@fval,__div_to_l_@f1
  4282  0004AE  C119  F020         	movff	sprintf@fval+1,__div_to_l_@f1+1
  4283  0004B2  C11A  F021         	movff	sprintf@fval+2,__div_to_l_@f1+2
  4284  0004B6  C11B  F022         	movff	sprintf@fval+3,__div_to_l_@f1+3
  4285  0004BA  C10C  F023         	movff	sprintf@tmpval,__div_to_l_@f2
  4286  0004BE  C10D  F024         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  4287  0004C2  C10E  F025         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  4288  0004C6  C10F  F026         	movff	sprintf@tmpval+3,__div_to_l_@f2+3
  4289  0004CA  ECD4  F011         	call	__div_to_l_	;wreg free
  4290  0004CE  C01F  F110         	movff	?__div_to_l_,sprintf@val
  4291  0004D2  C020  F111         	movff	?__div_to_l_+1,sprintf@val+1
  4292  0004D6  C021  F112         	movff	?__div_to_l_+2,sprintf@val+2
  4293  0004DA  C022  F113         	movff	?__div_to_l_+3,sprintf@val+3
  4294                           
  4295                           ;doprnt.c: 1129: fval = 0.0;
  4296  0004DE  0E00               	movlw	0
  4297  0004E0  0101               	movlb	1	; () banked
  4298  0004E2  6F18               	movwf	sprintf@fval& (0+255),b
  4299  0004E4  0E00               	movlw	0
  4300  0004E6  6F19               	movwf	(sprintf@fval+1)& (0+255),b
  4301  0004E8  0E00               	movlw	0
  4302  0004EA  6F1A               	movwf	(sprintf@fval+2)& (0+255),b
  4303  0004EC  0E00               	movlw	0
  4304  0004EE  6F1B               	movwf	(sprintf@fval+3)& (0+255),b
  4305                           
  4306                           ;doprnt.c: 1130: } else {
  4307  0004F0  D03C               	goto	l406
  4308  0004F2                     l397:
  4309                           
  4310                           ;doprnt.c: 1131: val = (unsigned long)fval;
  4311                           
  4312                           ; BSR set to: 1
  4313  0004F2  C118  F09E         	movff	sprintf@fval,___fltol@f1
  4314  0004F6  C119  F09F         	movff	sprintf@fval+1,___fltol@f1+1
  4315  0004FA  C11A  F0A0         	movff	sprintf@fval+2,___fltol@f1+2
  4316  0004FE  C11B  F0A1         	movff	sprintf@fval+3,___fltol@f1+3
  4317  000502  EC02  F014         	call	___fltol	;wreg free
  4318  000506  C09E  F110         	movff	?___fltol,sprintf@val
  4319  00050A  C09F  F111         	movff	?___fltol+1,sprintf@val+1
  4320  00050E  C0A0  F112         	movff	?___fltol+2,sprintf@val+2
  4321  000512  C0A1  F113         	movff	?___fltol+3,sprintf@val+3
  4322                           
  4323                           ;doprnt.c: 1132: fval -= (double)val;
  4324  000516  C118  F0B6         	movff	sprintf@fval,___flsub@b
  4325  00051A  C119  F0B7         	movff	sprintf@fval+1,___flsub@b+1
  4326  00051E  C11A  F0B8         	movff	sprintf@fval+2,___flsub@b+2
  4327  000522  C11B  F0B9         	movff	sprintf@fval+3,___flsub@b+3
  4328  000526  C110  F025         	movff	sprintf@val,___xxtofl@val
  4329  00052A  C111  F026         	movff	sprintf@val+1,___xxtofl@val+1
  4330  00052E  C112  F027         	movff	sprintf@val+2,___xxtofl@val+2
  4331  000532  C113  F028         	movff	sprintf@val+3,___xxtofl@val+3
  4332  000536  0E00               	movlw	0
  4333  000538  EC93  F010         	call	___xxtofl
  4334  00053C  C025  F0BA         	movff	?___xxtofl,___flsub@a
  4335  000540  C026  F0BB         	movff	?___xxtofl+1,___flsub@a+1
  4336  000544  C027  F0BC         	movff	?___xxtofl+2,___flsub@a+2
  4337  000548  C028  F0BD         	movff	?___xxtofl+3,___flsub@a+3
  4338  00054C  EC24  F017         	call	___flsub	;wreg free
  4339  000550  C0B6  F118         	movff	?___flsub,sprintf@fval
  4340  000554  C0B7  F119         	movff	?___flsub+1,sprintf@fval+1
  4341  000558  C0B8  F11A         	movff	?___flsub+2,sprintf@fval+2
  4342  00055C  C0B9  F11B         	movff	?___flsub+3,sprintf@fval+3
  4343                           
  4344                           ;doprnt.c: 1133: exp = 0;
  4345  000560  0E00               	movlw	0
  4346  000562  0101               	movlb	1	; () banked
  4347  000564  6F15               	movwf	(sprintf@exp+1)& (0+255),b
  4348  000566  0E00               	movlw	0
  4349  000568  6F14               	movwf	sprintf@exp& (0+255),b
  4350  00056A                     l406:
  4351                           
  4352                           ; BSR set to: 1
  4353                           ;doprnt.c: 1134: }
  4354                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4355                           
  4356                           ; BSR set to: 1
  4357  00056A  0E01               	movlw	1
  4358  00056C  6F1E               	movwf	sprintf@c& (0+255),b
  4359  00056E                     l5588:
  4360                           
  4361                           ; BSR set to: 1
  4362  00056E  0E0A               	movlw	10
  4363  000570  191E               	xorwf	sprintf@c& (0+255),w,b
  4364  000572  B4D8               	btfsc	status,2,c
  4365  000574  D018               	goto	u6410
  4366                           
  4367                           ; BSR set to: 1
  4368                           ;doprnt.c: 1137: if(val < dpowers[c])
  4369                           
  4370                           ; BSR set to: 1
  4371                           
  4372                           ; BSR set to: 1
  4373  000576  511E               	movf	sprintf@c& (0+255),w,b
  4374  000578  0D04               	mullw	4
  4375  00057A  0E53               	movlw	low _dpowers
  4376  00057C  24F3               	addwf	prodl,w,c
  4377  00057E  6EF6               	movwf	tblptrl,c
  4378  000580  0EFF               	movlw	high _dpowers
  4379  000582  20F4               	addwfc	prodh,w,c
  4380  000584  6EF7               	movwf	tblptrh,c
  4381  000586                     	if	0	;There are less than 3 active tblptr bytes
  4382  000586                     	endif
  4383  000586  0009               	tblrd		*+
  4384  000588  50F5               	movf	tablat,w,c
  4385  00058A  5D10               	subwf	sprintf@val& (0+255),w,b
  4386  00058C  0009               	tblrd		*+
  4387  00058E  50F5               	movf	tablat,w,c
  4388  000590  5911               	subwfb	(sprintf@val+1)& (0+255),w,b
  4389  000592  0009               	tblrd		*+
  4390  000594  50F5               	movf	tablat,w,c
  4391  000596  5912               	subwfb	(sprintf@val+2)& (0+255),w,b
  4392  000598  0009               	tblrd		*+
  4393  00059A  50F5               	movf	tablat,w,c
  4394  00059C  5913               	subwfb	(sprintf@val+3)& (0+255),w,b
  4395  00059E  A0D8               	btfss	status,0,c
  4396  0005A0  D002               	goto	u6410
  4397                           
  4398                           ; BSR set to: 1
  4399                           
  4400                           ; BSR set to: 1
  4401                           
  4402                           ; BSR set to: 1
  4403                           ;doprnt.c: 1138: break;
  4404  0005A2  2B1E               	incf	sprintf@c& (0+255),f,b
  4405  0005A4  D7E4               	goto	l5588
  4406  0005A6                     u6410:
  4407                           
  4408                           ; BSR set to: 1
  4409                           ;doprnt.c: 1142: width -= prec + c + exp;
  4410                           
  4411                           ; BSR set to: 1
  4412  0005A6  C11E  F0CA         	movff	sprintf@c,??_sprintf
  4413  0005AA  0100               	movlb	0	; () banked
  4414  0005AC  6BCB               	clrf	(??_sprintf+1)& (0+255),b
  4415  0005AE  BFCA               	btfsc	??_sprintf& (0+255),7,b
  4416  0005B0  07CB               	decf	(??_sprintf+1)& (0+255),f,b
  4417  0005B2  0101               	movlb	1	; () banked
  4418  0005B4  511C               	movf	sprintf@prec& (0+255),w,b
  4419  0005B6  0100               	movlb	0	; () banked
  4420  0005B8  27CA               	addwf	??_sprintf& (0+255),f,b
  4421  0005BA  0101               	movlb	1	; () banked
  4422  0005BC  511D               	movf	(sprintf@prec+1)& (0+255),w,b
  4423  0005BE  0100               	movlb	0	; () banked
  4424  0005C0  23CB               	addwfc	(??_sprintf+1)& (0+255),f,b
  4425  0005C2  0101               	movlb	1	; () banked
  4426  0005C4  5114               	movf	sprintf@exp& (0+255),w,b
  4427  0005C6  0100               	movlb	0	; () banked
  4428  0005C8  27CA               	addwf	??_sprintf& (0+255),f,b
  4429  0005CA  0101               	movlb	1	; () banked
  4430  0005CC  5115               	movf	(sprintf@exp+1)& (0+255),w,b
  4431  0005CE  0100               	movlb	0	; () banked
  4432  0005D0  23CB               	addwfc	(??_sprintf+1)& (0+255),f,b
  4433  0005D2  51CA               	movf	??_sprintf& (0+255),w,b
  4434  0005D4  0101               	movlb	1	; () banked
  4435  0005D6  5F16               	subwf	sprintf@width& (0+255),f,b
  4436  0005D8  0100               	movlb	0	; () banked
  4437  0005DA  51CB               	movf	(??_sprintf+1)& (0+255),w,b
  4438  0005DC  0101               	movlb	1	; () banked
  4439  0005DE  5B17               	subwfb	(sprintf@width+1)& (0+255),f,b
  4440                           
  4441                           ;doprnt.c: 1143: if(
  4442                           ;doprnt.c: 1147: prec)
  4443  0005E0  511C               	movf	sprintf@prec& (0+255),w,b
  4444  0005E2  111D               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4445  0005E4  B4D8               	btfsc	status,2,c
  4446  0005E6  D003               	goto	l410
  4447                           
  4448                           ; BSR set to: 1
  4449                           ;doprnt.c: 1148: width--;
  4450  0005E8  0716               	decf	sprintf@width& (0+255),f,b
  4451  0005EA  A0D8               	btfss	status,0,c
  4452  0005EC  0717               	decf	(sprintf@width+1)& (0+255),f,b
  4453  0005EE                     l410:
  4454                           
  4455                           ; BSR set to: 1
  4456                           ;doprnt.c: 1149: if(flag & 0x03)
  4457                           
  4458                           ; BSR set to: 1
  4459  0005EE  0E03               	movlw	3
  4460  0005F0  150A               	andwf	sprintf@flag& (0+255),w,b
  4461  0005F2  0100               	movlb	0	; () banked
  4462  0005F4  6FCA               	movwf	??_sprintf& (0+255),b
  4463  0005F6  0E00               	movlw	0
  4464  0005F8  0101               	movlb	1	; () banked
  4465  0005FA  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  4466  0005FC  0100               	movlb	0	; () banked
  4467  0005FE  6FCB               	movwf	(??_sprintf+1)& (0+255),b
  4468  000600  51CA               	movf	??_sprintf& (0+255),w,b
  4469  000602  11CB               	iorwf	(??_sprintf+1)& (0+255),w,b
  4470  000604  B4D8               	btfsc	status,2,c
  4471  000606  D00E               	goto	l412
  4472  000608  D009               	goto	l5612
  4473  00060A                     l5608:
  4474                           
  4475                           ; BSR set to: 1
  4476                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  4477  00060A  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  4478  00060E  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  4479  000612  0E20               	movlw	32
  4480  000614  6EDF               	movwf	indf2,c
  4481                           
  4482                           ; BSR set to: 1
  4483  000616  0100               	movlb	0	; () banked
  4484  000618  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  4485  00061A  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  4486  00061C                     l5612:
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;doprnt.c: 1182: width--;
  4490  00061C  0101               	movlb	1	; () banked
  4491  00061E  0716               	decf	sprintf@width& (0+255),f,b
  4492  000620  A0D8               	btfss	status,0,c
  4493  000622  0717               	decf	(sprintf@width+1)& (0+255),f,b
  4494  000624                     l412:
  4495                           
  4496                           ; BSR set to: 1
  4497  000624  0101               	movlb	1	; () banked
  4498  000626  BF17               	btfsc	(sprintf@width+1)& (0+255),7,b
  4499  000628  D005               	goto	u6440
  4500  00062A  5117               	movf	(sprintf@width+1)& (0+255),w,b
  4501  00062C  E1EE               	bnz	l5608
  4502  00062E  0516               	decf	sprintf@width& (0+255),w,b
  4503  000630  B0D8               	btfsc	status,0,c
  4504  000632  D7EB               	goto	l413
  4505  000634                     u6440:
  4506                           
  4507                           ; BSR set to: 1
  4508                           ;doprnt.c: 1183: }
  4509                           ;doprnt.c: 1188: if(flag & 0x03)
  4510                           
  4511                           ; BSR set to: 1
  4512  000634  0E03               	movlw	3
  4513  000636  150A               	andwf	sprintf@flag& (0+255),w,b
  4514  000638  0100               	movlb	0	; () banked
  4515  00063A  6FCA               	movwf	??_sprintf& (0+255),b
  4516  00063C  0E00               	movlw	0
  4517  00063E  0101               	movlb	1	; () banked
  4518  000640  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  4519  000642  0100               	movlb	0	; () banked
  4520  000644  6FCB               	movwf	(??_sprintf+1)& (0+255),b
  4521  000646  51CA               	movf	??_sprintf& (0+255),w,b
  4522  000648  11CB               	iorwf	(??_sprintf+1)& (0+255),w,b
  4523  00064A  B4D8               	btfsc	status,2,c
  4524  00064C  D053               	goto	l416
  4525                           
  4526                           ; BSR set to: 0
  4527                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  4528  00064E  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  4529  000652  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  4530  000656  0E2D               	movlw	45
  4531  000658  6EDF               	movwf	indf2,c
  4532  00065A  D04A               	goto	L7
  4533  00065C                     
  4534                           ;doprnt.c: 1200: {
  4535                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4536                           
  4537                           ; BSR set to: 0
  4538  00065C  C110  F01F         	movff	sprintf@val,___lldiv@dividend
  4539  000660  C111  F020         	movff	sprintf@val+1,___lldiv@dividend+1
  4540  000664  C112  F021         	movff	sprintf@val+2,___lldiv@dividend+2
  4541  000668  C113  F022         	movff	sprintf@val+3,___lldiv@dividend+3
  4542  00066C  0101               	movlb	1	; () banked
  4543  00066E  511E               	movf	sprintf@c& (0+255),w,b
  4544  000670  0D04               	mullw	4
  4545  000672  0E53               	movlw	low _dpowers
  4546  000674  24F3               	addwf	prodl,w,c
  4547  000676  6EF6               	movwf	tblptrl,c
  4548  000678  0EFF               	movlw	high _dpowers
  4549  00067A  20F4               	addwfc	prodh,w,c
  4550  00067C  6EF7               	movwf	tblptrh,c
  4551  00067E                     	if	0	;There are less than 3 active tblptr bytes
  4552  00067E                     	endif
  4553  00067E  0009               	tblrd		*+
  4554  000680  CFF5 F023          	movff	tablat,___lldiv@divisor
  4555  000684  0009               	tblrd		*+
  4556  000686  CFF5 F024          	movff	tablat,___lldiv@divisor+1
  4557  00068A  0009               	tblrd		*+
  4558  00068C  CFF5 F025          	movff	tablat,___lldiv@divisor+2
  4559  000690  000A               	tblrd		*-
  4560  000692  CFF5 F026          	movff	tablat,___lldiv@divisor+3
  4561  000696  EC64  F015         	call	___lldiv	;wreg free
  4562  00069A  C01F  F10C         	movff	?___lldiv,sprintf@tmpval
  4563  00069E  C020  F10D         	movff	?___lldiv+1,sprintf@tmpval+1
  4564  0006A2  C021  F10E         	movff	?___lldiv+2,sprintf@tmpval+2
  4565  0006A6  C022  F10F         	movff	?___lldiv+3,sprintf@tmpval+3
  4566                           
  4567                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4568  0006AA  C10C  F02C         	movff	sprintf@tmpval,___llmod@dividend
  4569  0006AE  C10D  F02D         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4570  0006B2  C10E  F02E         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4571  0006B6  C10F  F02F         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4572  0006BA  0E0A               	movlw	10
  4573  0006BC  6E30               	movwf	___llmod@divisor,c
  4574  0006BE  0E00               	movlw	0
  4575  0006C0  6E31               	movwf	___llmod@divisor+1,c
  4576  0006C2  0E00               	movlw	0
  4577  0006C4  6E32               	movwf	___llmod@divisor+2,c
  4578  0006C6  0E00               	movlw	0
  4579  0006C8  6E33               	movwf	___llmod@divisor+3,c
  4580  0006CA  EC15  F016         	call	___llmod	;wreg free
  4581  0006CE  C02C  F10C         	movff	?___llmod,sprintf@tmpval
  4582  0006D2  C02D  F10D         	movff	?___llmod+1,sprintf@tmpval+1
  4583  0006D6  C02E  F10E         	movff	?___llmod+2,sprintf@tmpval+2
  4584  0006DA  C02F  F10F         	movff	?___llmod+3,sprintf@tmpval+3
  4585                           
  4586                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  4587  0006DE  0101               	movlb	1	; () banked
  4588  0006E0  510C               	movf	sprintf@tmpval& (0+255),w,b
  4589  0006E2  0F30               	addlw	48
  4590  0006E4  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  4591  0006E8  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  4592  0006EC  6EDF               	movwf	indf2,c
  4593                           
  4594                           ; BSR set to: 1
  4595  0006EE  0100               	movlb	0	; () banked
  4596  0006F0                     L7:
  4597  0006F0  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  4598  0006F2  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  4599  0006F4                     l416:
  4600                           
  4601                           ; BSR set to: 0
  4602                           
  4603                           ; BSR set to: 0
  4604  0006F4  0101               	movlb	1	; () banked
  4605  0006F6  071E               	decf	sprintf@c& (0+255),f,b
  4606  0006F8  291E               	incf	sprintf@c& (0+255),w,b
  4607  0006FA  B4D8               	btfsc	status,2,c
  4608  0006FC  D00E               	goto	l419
  4609  0006FE  D7AE               	goto	l417
  4610  000700                     l5632:
  4611                           
  4612                           ; BSR set to: 1
  4613                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  4614  000700  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  4615  000704  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  4616  000708  0E30               	movlw	48
  4617  00070A  6EDF               	movwf	indf2,c
  4618                           
  4619                           ; BSR set to: 1
  4620  00070C  0100               	movlb	0	; () banked
  4621  00070E  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  4622  000710  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  4623                           
  4624                           ; BSR set to: 0
  4625                           ;doprnt.c: 1209: exp--;
  4626  000712  0101               	movlb	1	; () banked
  4627  000714  0714               	decf	sprintf@exp& (0+255),f,b
  4628  000716  A0D8               	btfss	status,0,c
  4629  000718  0715               	decf	(sprintf@exp+1)& (0+255),f,b
  4630  00071A                     l419:
  4631                           
  4632                           ; BSR set to: 1
  4633                           
  4634                           ; BSR set to: 1
  4635  00071A  BF15               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4636  00071C  D005               	goto	u6470
  4637  00071E  5115               	movf	(sprintf@exp+1)& (0+255),w,b
  4638  000720  E1EF               	bnz	l5632
  4639  000722  0514               	decf	sprintf@exp& (0+255),w,b
  4640  000724  B0D8               	btfsc	status,0,c
  4641  000726  D7EC               	goto	l420
  4642  000728                     u6470:
  4643                           
  4644                           ; BSR set to: 1
  4645                           ;doprnt.c: 1210: }
  4646                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4647                           
  4648                           ; BSR set to: 1
  4649  000728  BF1D               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4650  00072A  D009               	goto	l422
  4651  00072C  511D               	movf	(sprintf@prec+1)& (0+255),w,b
  4652  00072E  E104               	bnz	u6480
  4653  000730  0E09               	movlw	9
  4654  000732  5D1C               	subwf	sprintf@prec& (0+255),w,b
  4655  000734  A0D8               	btfss	status,0,c
  4656  000736  D003               	goto	l422
  4657  000738                     u6480:
  4658                           
  4659                           ; BSR set to: 1
  4660                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4661  000738  0E08               	movlw	8
  4662  00073A  6F1E               	movwf	sprintf@c& (0+255),b
  4663  00073C  D002               	goto	l423
  4664  00073E                     l422:
  4665                           
  4666                           ; BSR set to: 1
  4667                           ;doprnt.c: 1213: else
  4668                           ;doprnt.c: 1214: c = prec;
  4669  00073E  C11C  F11E         	movff	sprintf@prec,sprintf@c
  4670  000742                     l423:
  4671                           
  4672                           ; BSR set to: 1
  4673                           ;doprnt.c: 1215: prec -= c;
  4674                           
  4675                           ; BSR set to: 1
  4676  000742  511E               	movf	sprintf@c& (0+255),w,b
  4677  000744  5F1C               	subwf	sprintf@prec& (0+255),f,b
  4678  000746  0E00               	movlw	0
  4679  000748  BF1E               	btfsc	sprintf@c& (0+255),7,b
  4680  00074A  0EFF               	movlw	255
  4681  00074C  5B1D               	subwfb	(sprintf@prec+1)& (0+255),f,b
  4682                           
  4683                           ; BSR set to: 1
  4684                           ;doprnt.c: 1219: if(c)
  4685  00074E  511E               	movf	sprintf@c& (0+255),w,b
  4686  000750  B4D8               	btfsc	status,2,c
  4687  000752  D009               	goto	l424
  4688                           
  4689                           ; BSR set to: 1
  4690                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  4691  000754  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  4692  000758  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  4693  00075C  0E2E               	movlw	46
  4694  00075E  6EDF               	movwf	indf2,c
  4695                           
  4696                           ; BSR set to: 1
  4697  000760  0100               	movlb	0	; () banked
  4698  000762  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  4699  000764  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  4700  000766                     l424:
  4701                           
  4702                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4703                           
  4704                           ; BSR set to: 0
  4705  000766  0101               	movlb	1	; () banked
  4706  000768  511E               	movf	sprintf@c& (0+255),w,b
  4707  00076A  ECB6  F005         	call	_scale
  4708  00076E  C095  F100         	movff	?_scale,_sprintf$1989
  4709  000772  C096  F101         	movff	?_scale+1,_sprintf$1989+1
  4710  000776  C097  F102         	movff	?_scale+2,_sprintf$1989+2
  4711  00077A  C098  F103         	movff	?_scale+3,_sprintf$1989+3
  4712                           
  4713                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4714  00077E  C118  F084         	movff	sprintf@fval,___flmul@a
  4715  000782  C119  F085         	movff	sprintf@fval+1,___flmul@a+1
  4716  000786  C11A  F086         	movff	sprintf@fval+2,___flmul@a+2
  4717  00078A  C11B  F087         	movff	sprintf@fval+3,___flmul@a+3
  4718  00078E  C100  F080         	movff	_sprintf$1989,___flmul@b
  4719  000792  C101  F081         	movff	_sprintf$1989+1,___flmul@b+1
  4720  000796  C102  F082         	movff	_sprintf$1989+2,___flmul@b+2
  4721  00079A  C103  F083         	movff	_sprintf$1989+3,___flmul@b+3
  4722  00079E  ECAA  F009         	call	___flmul	;wreg free
  4723  0007A2  C080  F09E         	movff	?___flmul,___fltol@f1
  4724  0007A6  C081  F09F         	movff	?___flmul+1,___fltol@f1+1
  4725  0007AA  C082  F0A0         	movff	?___flmul+2,___fltol@f1+2
  4726  0007AE  C083  F0A1         	movff	?___flmul+3,___fltol@f1+3
  4727  0007B2  EC02  F014         	call	___fltol	;wreg free
  4728  0007B6  C09E  F110         	movff	?___fltol,sprintf@val
  4729  0007BA  C09F  F111         	movff	?___fltol+1,sprintf@val+1
  4730  0007BE  C0A0  F112         	movff	?___fltol+2,sprintf@val+2
  4731  0007C2  C0A1  F113         	movff	?___fltol+3,sprintf@val+3
  4732                           
  4733                           ;doprnt.c: 1228: while(c--) {
  4734  0007C6  D073               	goto	l425
  4735  0007C8                     
  4736                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4737  0007C8  C110  F01F         	movff	sprintf@val,___lldiv@dividend
  4738  0007CC  C111  F020         	movff	sprintf@val+1,___lldiv@dividend+1
  4739  0007D0  C112  F021         	movff	sprintf@val+2,___lldiv@dividend+2
  4740  0007D4  C113  F022         	movff	sprintf@val+3,___lldiv@dividend+3
  4741  0007D8  0101               	movlb	1	; () banked
  4742  0007DA  511E               	movf	sprintf@c& (0+255),w,b
  4743  0007DC  0D04               	mullw	4
  4744  0007DE  0E53               	movlw	low _dpowers
  4745  0007E0  24F3               	addwf	prodl,w,c
  4746  0007E2  6EF6               	movwf	tblptrl,c
  4747  0007E4  0EFF               	movlw	high _dpowers
  4748  0007E6  20F4               	addwfc	prodh,w,c
  4749  0007E8  6EF7               	movwf	tblptrh,c
  4750  0007EA                     	if	0	;There are less than 3 active tblptr bytes
  4751  0007EA                     	endif
  4752  0007EA  0009               	tblrd		*+
  4753  0007EC  CFF5 F023          	movff	tablat,___lldiv@divisor
  4754  0007F0  0009               	tblrd		*+
  4755  0007F2  CFF5 F024          	movff	tablat,___lldiv@divisor+1
  4756  0007F6  0009               	tblrd		*+
  4757  0007F8  CFF5 F025          	movff	tablat,___lldiv@divisor+2
  4758  0007FC  000A               	tblrd		*-
  4759  0007FE  CFF5 F026          	movff	tablat,___lldiv@divisor+3
  4760  000802  EC64  F015         	call	___lldiv	;wreg free
  4761  000806  C01F  F10C         	movff	?___lldiv,sprintf@tmpval
  4762  00080A  C020  F10D         	movff	?___lldiv+1,sprintf@tmpval+1
  4763  00080E  C021  F10E         	movff	?___lldiv+2,sprintf@tmpval+2
  4764  000812  C022  F10F         	movff	?___lldiv+3,sprintf@tmpval+3
  4765                           
  4766                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4767  000816  C10C  F02C         	movff	sprintf@tmpval,___llmod@dividend
  4768  00081A  C10D  F02D         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4769  00081E  C10E  F02E         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4770  000822  C10F  F02F         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4771  000826  0E0A               	movlw	10
  4772  000828  6E30               	movwf	___llmod@divisor,c
  4773  00082A  0E00               	movlw	0
  4774  00082C  6E31               	movwf	___llmod@divisor+1,c
  4775  00082E  0E00               	movlw	0
  4776  000830  6E32               	movwf	___llmod@divisor+2,c
  4777  000832  0E00               	movlw	0
  4778  000834  6E33               	movwf	___llmod@divisor+3,c
  4779  000836  EC15  F016         	call	___llmod	;wreg free
  4780  00083A  C02C  F10C         	movff	?___llmod,sprintf@tmpval
  4781  00083E  C02D  F10D         	movff	?___llmod+1,sprintf@tmpval+1
  4782  000842  C02E  F10E         	movff	?___llmod+2,sprintf@tmpval+2
  4783  000846  C02F  F10F         	movff	?___llmod+3,sprintf@tmpval+3
  4784                           
  4785                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4786  00084A  0101               	movlb	1	; () banked
  4787  00084C  510C               	movf	sprintf@tmpval& (0+255),w,b
  4788  00084E  0F30               	addlw	48
  4789  000850  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  4790  000854  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  4791  000858  6EDF               	movwf	indf2,c
  4792                           
  4793                           ; BSR set to: 1
  4794  00085A  0100               	movlb	0	; () banked
  4795  00085C  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  4796  00085E  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  4797                           
  4798                           ; BSR set to: 0
  4799                           ;doprnt.c: 1232: val %= dpowers[c];
  4800  000860  C110  F02C         	movff	sprintf@val,___llmod@dividend
  4801  000864  C111  F02D         	movff	sprintf@val+1,___llmod@dividend+1
  4802  000868  C112  F02E         	movff	sprintf@val+2,___llmod@dividend+2
  4803  00086C  C113  F02F         	movff	sprintf@val+3,___llmod@dividend+3
  4804  000870  0101               	movlb	1	; () banked
  4805  000872  511E               	movf	sprintf@c& (0+255),w,b
  4806  000874  0D04               	mullw	4
  4807  000876  0E53               	movlw	low _dpowers
  4808  000878  24F3               	addwf	prodl,w,c
  4809  00087A  6EF6               	movwf	tblptrl,c
  4810  00087C  0EFF               	movlw	high _dpowers
  4811  00087E  20F4               	addwfc	prodh,w,c
  4812  000880  6EF7               	movwf	tblptrh,c
  4813  000882                     	if	0	;There are less than 3 active tblptr bytes
  4814  000882                     	endif
  4815  000882  0009               	tblrd		*+
  4816  000884  CFF5 F030          	movff	tablat,___llmod@divisor
  4817  000888  0009               	tblrd		*+
  4818  00088A  CFF5 F031          	movff	tablat,___llmod@divisor+1
  4819  00088E  0009               	tblrd		*+
  4820  000890  CFF5 F032          	movff	tablat,___llmod@divisor+2
  4821  000894  000A               	tblrd		*-
  4822  000896  CFF5 F033          	movff	tablat,___llmod@divisor+3
  4823  00089A  EC15  F016         	call	___llmod	;wreg free
  4824  00089E  C02C  F110         	movff	?___llmod,sprintf@val
  4825  0008A2  C02D  F111         	movff	?___llmod+1,sprintf@val+1
  4826  0008A6  C02E  F112         	movff	?___llmod+2,sprintf@val+2
  4827  0008AA  C02F  F113         	movff	?___llmod+3,sprintf@val+3
  4828  0008AE                     l425:
  4829  0008AE  0101               	movlb	1	; () banked
  4830  0008B0  071E               	decf	sprintf@c& (0+255),f,b
  4831  0008B2  291E               	incf	sprintf@c& (0+255),w,b
  4832  0008B4  B4D8               	btfsc	status,2,c
  4833  0008B6  D00E               	goto	l428
  4834  0008B8  D787               	goto	l426
  4835  0008BA                     
  4836                           ; BSR set to: 1
  4837                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4838                           
  4839                           ; BSR set to: 1
  4840  0008BA  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  4841  0008BE  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  4842  0008C2  0E30               	movlw	48
  4843  0008C4  6EDF               	movwf	indf2,c
  4844                           
  4845                           ; BSR set to: 1
  4846  0008C6  0100               	movlb	0	; () banked
  4847  0008C8  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  4848  0008CA  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  4849                           
  4850                           ; BSR set to: 0
  4851                           ;doprnt.c: 1237: prec--;
  4852  0008CC  0101               	movlb	1	; () banked
  4853  0008CE  071C               	decf	sprintf@prec& (0+255),f,b
  4854  0008D0  A0D8               	btfss	status,0,c
  4855  0008D2  071D               	decf	(sprintf@prec+1)& (0+255),f,b
  4856  0008D4                     l428:
  4857                           
  4858                           ; BSR set to: 1
  4859                           
  4860                           ; BSR set to: 1
  4861  0008D4  511C               	movf	sprintf@prec& (0+255),w,b
  4862  0008D6  111D               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4863  0008D8  B4D8               	btfsc	status,2,c
  4864  0008DA  D132               	goto	u6680
  4865  0008DC  D7EE               	goto	l429
  4866  0008DE                     l388:
  4867                           
  4868                           ; BSR set to: 1
  4869                           ;doprnt.c: 1246: }
  4870                           ;doprnt.c: 1253: {
  4871                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4872                           
  4873                           ; BSR set to: 1
  4874  0008DE  C106  FFD9         	movff	sprintf@ap,fsr2l
  4875  0008E2  C107  FFDA         	movff	sprintf@ap+1,fsr2h
  4876  0008E6  CFDE F110          	movff	postinc2,sprintf@val
  4877  0008EA  CFDD F111          	movff	postdec2,sprintf@val+1
  4878  0008EE  0E00               	movlw	0
  4879  0008F0  BF11               	btfsc	(sprintf@val+1)& (0+255),7,b
  4880  0008F2  0EFF               	movlw	-1
  4881  0008F4  6F12               	movwf	(sprintf@val+2)& (0+255),b
  4882  0008F6  6F13               	movwf	(sprintf@val+3)& (0+255),b
  4883                           
  4884                           ; BSR set to: 1
  4885  0008F8  0E02               	movlw	2
  4886  0008FA  2706               	addwf	sprintf@ap& (0+255),f,b
  4887  0008FC  0E00               	movlw	0
  4888  0008FE  2307               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4889                           
  4890                           ; BSR set to: 1
  4891                           ;doprnt.c: 1261: if((long)val < 0) {
  4892  000900  AF13               	btfss	(sprintf@val+3)& (0+255),7,b
  4893  000902  D00A               	goto	l431
  4894                           
  4895                           ; BSR set to: 1
  4896                           ;doprnt.c: 1262: flag |= 0x03;
  4897  000904  0E03               	movlw	3
  4898  000906  130A               	iorwf	sprintf@flag& (0+255),f,b
  4899                           
  4900                           ; BSR set to: 1
  4901                           ;doprnt.c: 1263: val = -val;
  4902  000908  1F13               	comf	(sprintf@val+3)& (0+255),f,b
  4903  00090A  1F12               	comf	(sprintf@val+2)& (0+255),f,b
  4904  00090C  1F11               	comf	(sprintf@val+1)& (0+255),f,b
  4905  00090E  6D10               	negf	sprintf@val& (0+255),b
  4906  000910  0E00               	movlw	0
  4907  000912  2311               	addwfc	(sprintf@val+1)& (0+255),f,b
  4908  000914  2312               	addwfc	(sprintf@val+2)& (0+255),f,b
  4909  000916  2313               	addwfc	(sprintf@val+3)& (0+255),f,b
  4910  000918                     l431:
  4911                           
  4912                           ; BSR set to: 1
  4913                           ;doprnt.c: 1264: }
  4914                           ;doprnt.c: 1266: }
  4915                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4916                           
  4917                           ; BSR set to: 1
  4918  000918  511C               	movf	sprintf@prec& (0+255),w,b
  4919  00091A  111D               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4920  00091C  A4D8               	btfss	status,2,c
  4921  00091E  D008               	goto	l432
  4922                           
  4923                           ; BSR set to: 1
  4924  000920  5110               	movf	sprintf@val& (0+255),w,b
  4925  000922  1111               	iorwf	(sprintf@val+1)& (0+255),w,b
  4926  000924  1112               	iorwf	(sprintf@val+2)& (0+255),w,b
  4927  000926  1113               	iorwf	(sprintf@val+3)& (0+255),w,b
  4928  000928  A4D8               	btfss	status,2,c
  4929  00092A  D002               	goto	l432
  4930                           
  4931                           ; BSR set to: 1
  4932                           ;doprnt.c: 1291: prec++;
  4933  00092C  4B1C               	infsnz	sprintf@prec& (0+255),f,b
  4934  00092E  2B1D               	incf	(sprintf@prec+1)& (0+255),f,b
  4935  000930                     l432:
  4936                           
  4937                           ; BSR set to: 1
  4938                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4939                           
  4940                           ; BSR set to: 1
  4941  000930  0E01               	movlw	1
  4942  000932  6F1E               	movwf	sprintf@c& (0+255),b
  4943  000934                     l5694:
  4944                           
  4945                           ; BSR set to: 1
  4946  000934  0E0A               	movlw	10
  4947  000936  191E               	xorwf	sprintf@c& (0+255),w,b
  4948  000938  B4D8               	btfsc	status,2,c
  4949  00093A  D018               	goto	u6570
  4950                           
  4951                           ; BSR set to: 1
  4952                           ;doprnt.c: 1306: if(val < dpowers[c])
  4953                           
  4954                           ; BSR set to: 1
  4955                           
  4956                           ; BSR set to: 1
  4957  00093C  511E               	movf	sprintf@c& (0+255),w,b
  4958  00093E  0D04               	mullw	4
  4959  000940  0E53               	movlw	low _dpowers
  4960  000942  24F3               	addwf	prodl,w,c
  4961  000944  6EF6               	movwf	tblptrl,c
  4962  000946  0EFF               	movlw	high _dpowers
  4963  000948  20F4               	addwfc	prodh,w,c
  4964  00094A  6EF7               	movwf	tblptrh,c
  4965  00094C                     	if	0	;There are less than 3 active tblptr bytes
  4966  00094C                     	endif
  4967  00094C  0009               	tblrd		*+
  4968  00094E  50F5               	movf	tablat,w,c
  4969  000950  5D10               	subwf	sprintf@val& (0+255),w,b
  4970  000952  0009               	tblrd		*+
  4971  000954  50F5               	movf	tablat,w,c
  4972  000956  5911               	subwfb	(sprintf@val+1)& (0+255),w,b
  4973  000958  0009               	tblrd		*+
  4974  00095A  50F5               	movf	tablat,w,c
  4975  00095C  5912               	subwfb	(sprintf@val+2)& (0+255),w,b
  4976  00095E  0009               	tblrd		*+
  4977  000960  50F5               	movf	tablat,w,c
  4978  000962  5913               	subwfb	(sprintf@val+3)& (0+255),w,b
  4979  000964  A0D8               	btfss	status,0,c
  4980  000966  D002               	goto	u6570
  4981                           
  4982                           ; BSR set to: 1
  4983                           
  4984                           ; BSR set to: 1
  4985                           
  4986                           ; BSR set to: 1
  4987                           ;doprnt.c: 1307: break;
  4988  000968  2B1E               	incf	sprintf@c& (0+255),f,b
  4989  00096A  D7E4               	goto	l5694
  4990  00096C                     u6570:
  4991                           
  4992                           ; BSR set to: 1
  4993                           ;doprnt.c: 1339: if(c < prec)
  4994                           
  4995                           ; BSR set to: 1
  4996  00096C  0E80               	movlw	128
  4997  00096E  BF1E               	btfsc	sprintf@c& (0+255),7,b
  4998  000970  0E7F               	movlw	127
  4999  000972  0100               	movlb	0	; () banked
  5000  000974  6FCA               	movwf	??_sprintf& (0+255),b
  5001  000976  0101               	movlb	1	; () banked
  5002  000978  511C               	movf	sprintf@prec& (0+255),w,b
  5003  00097A  5D1E               	subwf	sprintf@c& (0+255),w,b
  5004  00097C  511D               	movf	(sprintf@prec+1)& (0+255),w,b
  5005  00097E  0A80               	xorlw	128
  5006  000980  0100               	movlb	0	; () banked
  5007  000982  59CA               	subwfb	??_sprintf& (0+255),w,b
  5008  000984  B0D8               	btfsc	status,0,c
  5009  000986  D003               	goto	l436
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;doprnt.c: 1340: c = prec;
  5013  000988  C11C  F11E         	movff	sprintf@prec,sprintf@c
  5014  00098C  D015               	goto	l438
  5015  00098E                     l436:
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;doprnt.c: 1341: else if(prec < c)
  5019                           
  5020                           ; BSR set to: 0
  5021  00098E  0101               	movlb	1	; () banked
  5022  000990  511D               	movf	(sprintf@prec+1)& (0+255),w,b
  5023  000992  0A80               	xorlw	128
  5024  000994  0100               	movlb	0	; () banked
  5025  000996  6FCA               	movwf	??_sprintf& (0+255),b
  5026  000998  0101               	movlb	1	; () banked
  5027  00099A  511E               	movf	sprintf@c& (0+255),w,b
  5028  00099C  5D1C               	subwf	sprintf@prec& (0+255),w,b
  5029  00099E  0E80               	movlw	128
  5030  0009A0  BF1E               	btfsc	sprintf@c& (0+255),7,b
  5031  0009A2  0E7F               	movlw	127
  5032  0009A4  0100               	movlb	0	; () banked
  5033  0009A6  59CA               	subwfb	??_sprintf& (0+255),w,b
  5034  0009A8  B0D8               	btfsc	status,0,c
  5035  0009AA  D006               	goto	l438
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;doprnt.c: 1342: prec = c;
  5039  0009AC  0101               	movlb	1	; () banked
  5040  0009AE  511E               	movf	sprintf@c& (0+255),w,b
  5041  0009B0  6F1C               	movwf	sprintf@prec& (0+255),b
  5042  0009B2  6B1D               	clrf	(sprintf@prec+1)& (0+255),b
  5043  0009B4  BF1C               	btfsc	sprintf@prec& (0+255),7,b
  5044  0009B6  071D               	decf	(sprintf@prec+1)& (0+255),f,b
  5045  0009B8                     l438:
  5046                           
  5047                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5048                           
  5049                           ; BSR set to: 1
  5050                           
  5051                           ; BSR set to: 1
  5052  0009B8  0101               	movlb	1	; () banked
  5053  0009BA  5116               	movf	sprintf@width& (0+255),w,b
  5054  0009BC  1117               	iorwf	(sprintf@width+1)& (0+255),w,b
  5055  0009BE  B4D8               	btfsc	status,2,c
  5056  0009C0  D011               	goto	l439
  5057                           
  5058                           ; BSR set to: 1
  5059  0009C2  0E03               	movlw	3
  5060  0009C4  150A               	andwf	sprintf@flag& (0+255),w,b
  5061  0009C6  0100               	movlb	0	; () banked
  5062  0009C8  6FCA               	movwf	??_sprintf& (0+255),b
  5063  0009CA  0E00               	movlw	0
  5064  0009CC  0101               	movlb	1	; () banked
  5065  0009CE  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  5066  0009D0  0100               	movlb	0	; () banked
  5067  0009D2  6FCB               	movwf	(??_sprintf+1)& (0+255),b
  5068  0009D4  51CA               	movf	??_sprintf& (0+255),w,b
  5069  0009D6  11CB               	iorwf	(??_sprintf+1)& (0+255),w,b
  5070  0009D8  B4D8               	btfsc	status,2,c
  5071  0009DA  D004               	goto	l439
  5072                           
  5073                           ; BSR set to: 0
  5074                           ;doprnt.c: 1346: width--;
  5075  0009DC  0101               	movlb	1	; () banked
  5076  0009DE  0716               	decf	sprintf@width& (0+255),f,b
  5077  0009E0  A0D8               	btfss	status,0,c
  5078  0009E2  0717               	decf	(sprintf@width+1)& (0+255),f,b
  5079  0009E4                     l439:
  5080                           
  5081                           ;doprnt.c: 1348: if(flag & 0x4000) {
  5082                           
  5083                           ; BSR set to: 1
  5084  0009E4  0101               	movlb	1	; () banked
  5085  0009E6  AD0B               	btfss	(sprintf@flag+1)& (0+255),6,b
  5086  0009E8  D018               	goto	l442
  5087                           
  5088                           ; BSR set to: 1
  5089                           ;doprnt.c: 1349: if(width > prec)
  5090  0009EA  5116               	movf	sprintf@width& (0+255),w,b
  5091  0009EC  5D1C               	subwf	sprintf@prec& (0+255),w,b
  5092  0009EE  511D               	movf	(sprintf@prec+1)& (0+255),w,b
  5093  0009F0  0A80               	xorlw	128
  5094  0009F2  0100               	movlb	0	; () banked
  5095  0009F4  6FCA               	movwf	??_sprintf& (0+255),b
  5096  0009F6  0101               	movlb	1	; () banked
  5097  0009F8  5117               	movf	(sprintf@width+1)& (0+255),w,b
  5098  0009FA  0A80               	xorlw	128
  5099  0009FC  0100               	movlb	0	; () banked
  5100  0009FE  59CA               	subwfb	??_sprintf& (0+255),w,b
  5101  000A00  B0D8               	btfsc	status,0,c
  5102  000A02  D006               	goto	l441
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;doprnt.c: 1350: width -= prec;
  5106  000A04  0101               	movlb	1	; () banked
  5107  000A06  511C               	movf	sprintf@prec& (0+255),w,b
  5108  000A08  5F16               	subwf	sprintf@width& (0+255),f,b
  5109  000A0A  511D               	movf	(sprintf@prec+1)& (0+255),w,b
  5110  000A0C  5B17               	subwfb	(sprintf@width+1)& (0+255),f,b
  5111  000A0E  D005               	goto	l442
  5112  000A10                     l441:
  5113                           
  5114                           ;doprnt.c: 1351: else
  5115                           ;doprnt.c: 1352: width = 0;
  5116                           
  5117                           ; BSR set to: 1
  5118  000A10  0E00               	movlw	0
  5119  000A12  0101               	movlb	1	; () banked
  5120  000A14  6F17               	movwf	(sprintf@width+1)& (0+255),b
  5121  000A16  0E00               	movlw	0
  5122  000A18  6F16               	movwf	sprintf@width& (0+255),b
  5123  000A1A                     l442:
  5124                           
  5125                           ; BSR set to: 1
  5126                           ;doprnt.c: 1353: }
  5127                           ;doprnt.c: 1381: if(width > c)
  5128                           
  5129                           ; BSR set to: 1
  5130                           
  5131                           ; BSR set to: 1
  5132  000A1A  0E80               	movlw	128
  5133  000A1C  BF1E               	btfsc	sprintf@c& (0+255),7,b
  5134  000A1E  0E7F               	movlw	127
  5135  000A20  0100               	movlb	0	; () banked
  5136  000A22  6FCA               	movwf	??_sprintf& (0+255),b
  5137  000A24  0101               	movlb	1	; () banked
  5138  000A26  5116               	movf	sprintf@width& (0+255),w,b
  5139  000A28  5D1E               	subwf	sprintf@c& (0+255),w,b
  5140  000A2A  5117               	movf	(sprintf@width+1)& (0+255),w,b
  5141  000A2C  0A80               	xorlw	128
  5142  000A2E  0100               	movlb	0	; () banked
  5143  000A30  59CA               	subwfb	??_sprintf& (0+255),w,b
  5144  000A32  B0D8               	btfsc	status,0,c
  5145  000A34  D008               	goto	l443
  5146                           
  5147                           ; BSR set to: 0
  5148                           ;doprnt.c: 1382: width -= c;
  5149  000A36  0101               	movlb	1	; () banked
  5150  000A38  511E               	movf	sprintf@c& (0+255),w,b
  5151  000A3A  5F16               	subwf	sprintf@width& (0+255),f,b
  5152  000A3C  0E00               	movlw	0
  5153  000A3E  BF1E               	btfsc	sprintf@c& (0+255),7,b
  5154  000A40  0EFF               	movlw	255
  5155  000A42  5B17               	subwfb	(sprintf@width+1)& (0+255),f,b
  5156  000A44  D005               	goto	l444
  5157  000A46                     l443:
  5158                           
  5159                           ;doprnt.c: 1383: else
  5160                           ;doprnt.c: 1384: width = 0;
  5161                           
  5162                           ; BSR set to: 1
  5163  000A46  0E00               	movlw	0
  5164  000A48  0101               	movlb	1	; () banked
  5165  000A4A  6F17               	movwf	(sprintf@width+1)& (0+255),b
  5166  000A4C  0E00               	movlw	0
  5167  000A4E  6F16               	movwf	sprintf@width& (0+255),b
  5168  000A50                     l444:
  5169                           
  5170                           ; BSR set to: 1
  5171                           ;doprnt.c: 1422: {
  5172                           ;doprnt.c: 1424: if(width
  5173                           ;doprnt.c: 1428: )
  5174                           
  5175                           ; BSR set to: 1
  5176  000A50  5116               	movf	sprintf@width& (0+255),w,b
  5177  000A52  1117               	iorwf	(sprintf@width+1)& (0+255),w,b
  5178  000A54  B4D8               	btfsc	status,2,c
  5179  000A56  D011               	goto	u6660
  5180  000A58                     u6650:
  5181                           
  5182                           ; BSR set to: 1
  5183                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5184                           
  5185                           ; BSR set to: 1
  5186                           
  5187                           ;doprnt.c: 1429: do
  5188  000A58  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  5189  000A5C  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  5190  000A60  0E20               	movlw	32
  5191  000A62  6EDF               	movwf	indf2,c
  5192                           
  5193                           ; BSR set to: 1
  5194  000A64  0100               	movlb	0	; () banked
  5195  000A66  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  5196  000A68  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  5197                           
  5198                           ; BSR set to: 0
  5199                           ;doprnt.c: 1431: while(--width);
  5200  000A6A  0101               	movlb	1	; () banked
  5201  000A6C  0716               	decf	sprintf@width& (0+255),f,b
  5202  000A6E  A0D8               	btfss	status,0,c
  5203  000A70  0717               	decf	(sprintf@width+1)& (0+255),f,b
  5204  000A72  5116               	movf	sprintf@width& (0+255),w,b
  5205  000A74  1117               	iorwf	(sprintf@width+1)& (0+255),w,b
  5206  000A76  A4D8               	btfss	status,2,c
  5207  000A78  D7EF               	goto	u6650
  5208  000A7A                     u6660:
  5209                           
  5210                           ; BSR set to: 1
  5211                           ;doprnt.c: 1438: if(flag & 0x03)
  5212                           
  5213                           ; BSR set to: 1
  5214                           
  5215                           ; BSR set to: 1
  5216  000A7A  0E03               	movlw	3
  5217  000A7C  150A               	andwf	sprintf@flag& (0+255),w,b
  5218  000A7E  0100               	movlb	0	; () banked
  5219  000A80  6FCA               	movwf	??_sprintf& (0+255),b
  5220  000A82  0E00               	movlw	0
  5221  000A84  0101               	movlb	1	; () banked
  5222  000A86  150B               	andwf	(sprintf@flag+1)& (0+255),w,b
  5223  000A88  0100               	movlb	0	; () banked
  5224  000A8A  6FCB               	movwf	(??_sprintf+1)& (0+255),b
  5225  000A8C  51CA               	movf	??_sprintf& (0+255),w,b
  5226  000A8E  11CB               	iorwf	(??_sprintf+1)& (0+255),w,b
  5227  000A90  B4D8               	btfsc	status,2,c
  5228  000A92  D04D               	goto	l449
  5229                           
  5230                           ; BSR set to: 0
  5231                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5232  000A94  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  5233  000A98  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  5234  000A9C  0E2D               	movlw	45
  5235  000A9E  6EDF               	movwf	indf2,c
  5236  000AA0  D044               	goto	L8
  5237  000AA2                     l5748:
  5238                           
  5239                           ;doprnt.c: 1478: {
  5240                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5241  000AA2  C11C  F0CA         	movff	sprintf@prec,??_sprintf
  5242  000AA6  C11D  F0CB         	movff	sprintf@prec+1,??_sprintf+1
  5243  000AAA  0100               	movlb	0	; () banked
  5244  000AAC  90D8               	bcf	status,0,c
  5245  000AAE  37CA               	rlcf	??_sprintf& (0+255),f,b
  5246  000AB0  37CB               	rlcf	(??_sprintf+1)& (0+255),f,b
  5247  000AB2  90D8               	bcf	status,0,c
  5248  000AB4  37CA               	rlcf	??_sprintf& (0+255),f,b
  5249  000AB6  37CB               	rlcf	(??_sprintf+1)& (0+255),f,b
  5250  000AB8  0E53               	movlw	low _dpowers
  5251  000ABA  25CA               	addwf	??_sprintf& (0+255),w,b
  5252  000ABC  6EF6               	movwf	tblptrl,c
  5253  000ABE  0EFF               	movlw	high _dpowers
  5254  000AC0  21CB               	addwfc	(??_sprintf+1)& (0+255),w,b
  5255  000AC2  6EF7               	movwf	tblptrh,c
  5256  000AC4                     	if	0	;There are less than 3 active tblptr bytes
  5257  000AC4                     	endif
  5258  000AC4  0009               	tblrd		*+
  5259  000AC6  CFF5 F023          	movff	tablat,___lldiv@divisor
  5260  000ACA  0009               	tblrd		*+
  5261  000ACC  CFF5 F024          	movff	tablat,___lldiv@divisor+1
  5262  000AD0  0009               	tblrd		*+
  5263  000AD2  CFF5 F025          	movff	tablat,___lldiv@divisor+2
  5264  000AD6  000A               	tblrd		*-
  5265  000AD8  CFF5 F026          	movff	tablat,___lldiv@divisor+3
  5266  000ADC  C110  F01F         	movff	sprintf@val,___lldiv@dividend
  5267  000AE0  C111  F020         	movff	sprintf@val+1,___lldiv@dividend+1
  5268  000AE4  C112  F021         	movff	sprintf@val+2,___lldiv@dividend+2
  5269  000AE8  C113  F022         	movff	sprintf@val+3,___lldiv@dividend+3
  5270  000AEC  EC64  F015         	call	___lldiv	;wreg free
  5271  000AF0  C01F  F02C         	movff	?___lldiv,___llmod@dividend
  5272  000AF4  C020  F02D         	movff	?___lldiv+1,___llmod@dividend+1
  5273  000AF8  C021  F02E         	movff	?___lldiv+2,___llmod@dividend+2
  5274  000AFC  C022  F02F         	movff	?___lldiv+3,___llmod@dividend+3
  5275  000B00  0E0A               	movlw	10
  5276  000B02  6E30               	movwf	___llmod@divisor,c
  5277  000B04  0E00               	movlw	0
  5278  000B06  6E31               	movwf	___llmod@divisor+1,c
  5279  000B08  0E00               	movlw	0
  5280  000B0A  6E32               	movwf	___llmod@divisor+2,c
  5281  000B0C  0E00               	movlw	0
  5282  000B0E  6E33               	movwf	___llmod@divisor+3,c
  5283  000B10  EC15  F016         	call	___llmod	;wreg free
  5284  000B14  502C               	movf	?___llmod,w,c
  5285  000B16  0F30               	addlw	48
  5286  000B18  0101               	movlb	1	; () banked
  5287  000B1A  6F1E               	movwf	sprintf@c& (0+255),b
  5288                           
  5289                           ; BSR set to: 1
  5290                           ;doprnt.c: 1523: }
  5291                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5292  000B1C  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  5293  000B20  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  5294  000B24  C11E  FFDF         	movff	sprintf@c,indf2
  5295                           
  5296                           ; BSR set to: 1
  5297  000B28  0100               	movlb	0	; () banked
  5298  000B2A                     L8:
  5299  000B2A  4BC2               	infsnz	sprintf@sp& (0+255),f,b
  5300  000B2C  2BC3               	incf	(sprintf@sp+1)& (0+255),f,b
  5301  000B2E                     l449:
  5302                           
  5303                           ; BSR set to: 0
  5304                           
  5305                           ; BSR set to: 0
  5306  000B2E  0101               	movlb	1	; () banked
  5307  000B30  071C               	decf	sprintf@prec& (0+255),f,b
  5308  000B32  A0D8               	btfss	status,0,c
  5309  000B34  071D               	decf	(sprintf@prec+1)& (0+255),f,b
  5310  000B36  291C               	incf	sprintf@prec& (0+255),w,b
  5311  000B38  E1B4               	bnz	l5748
  5312  000B3A  291D               	incf	(sprintf@prec+1)& (0+255),w,b
  5313  000B3C  A4D8               	btfss	status,2,c
  5314  000B3E  D7B1               	goto	l450
  5315  000B40                     u6680:
  5316                           
  5317                           ; BSR set to: 1
  5318                           
  5319                           ; BSR set to: 1
  5320  000B40  C0C4  FFF6         	movff	sprintf@f,tblptrl
  5321  000B44  C0C5  FFF7         	movff	sprintf@f+1,tblptrh
  5322  000B48  0100               	movlb	0	; () banked
  5323  000B4A  4BC4               	infsnz	sprintf@f& (0+255),f,b
  5324  000B4C  2BC5               	incf	(sprintf@f+1)& (0+255),f,b
  5325  000B4E                     	if	0	;tblptru may be non-zero
  5326  000B4E                     	endif
  5327  000B4E                     	if	0	;tblptru may be non-zero
  5328  000B4E                     	endif
  5329  000B4E  0008               	tblrd		*
  5330  000B50  CFF5 F11E          	movff	tablat,sprintf@c
  5331  000B54  0101               	movlb	1	; () banked
  5332  000B56  511E               	movf	sprintf@c& (0+255),w,b
  5333  000B58  A4D8               	btfss	status,2,c
  5334  000B5A  EF10  F000         	goto	l360
  5335  000B5E                     u6690:
  5336                           
  5337                           ; BSR set to: 1
  5338                           ;doprnt.c: 1538: *sp = 0;
  5339                           
  5340                           ; BSR set to: 1
  5341                           
  5342                           ;doprnt.c: 1525: }
  5343                           ;doprnt.c: 1533: }
  5344                           ;doprnt.c: 1535: alldone:
  5345                           
  5346                           ; BSR set to: 1
  5347  000B5E  C0C2  FFD9         	movff	sprintf@sp,fsr2l
  5348  000B62  C0C3  FFDA         	movff	sprintf@sp+1,fsr2h
  5349  000B66  0E00               	movlw	0
  5350  000B68  6EDF               	movwf	indf2,c
  5351  000B6A  0012               	return	
  5352  000B6C                     __end_of_sprintf:
  5353                           	opt stack 0
  5354                           tblptru	equ	0xFF8
  5355                           tblptrh	equ	0xFF7
  5356                           tblptrl	equ	0xFF6
  5357                           tablat	equ	0xFF5
  5358                           prodh	equ	0xFF4
  5359                           prodl	equ	0xFF3
  5360                           intcon	equ	0xFF2
  5361                           intcon2	equ	0xFF1
  5362                           intcon3	equ	0xFF0
  5363                           postinc0	equ	0xFEE
  5364                           wreg	equ	0xFE8
  5365                           indf1	equ	0xFE7
  5366                           postdec1	equ	0xFE5
  5367                           fsr1h	equ	0xFE2
  5368                           fsr1l	equ	0xFE1
  5369                           indf2	equ	0xFDF
  5370                           postinc2	equ	0xFDE
  5371                           postdec2	equ	0xFDD
  5372                           fsr2h	equ	0xFDA
  5373                           fsr2l	equ	0xFD9
  5374                           status	equ	0xFD8
  5375                           
  5376 ;; *************** function _scale *****************
  5377 ;; Defined at:
  5378 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;  scl             1    wreg     char 
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;  scl             1   29[BANK0 ] char 
  5383 ;; Return value:  Size  Location     Type
  5384 ;;                  4   21[BANK0 ] char 
  5385 ;; Registers used:
  5386 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5387 ;; Tracked objects:
  5388 ;;		On entry : 0/0
  5389 ;;		On exit  : 0/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5392 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5393 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5395 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;Total ram usage:        9 bytes
  5397 ;; Hardware stack levels used:    1
  5398 ;; Hardware stack levels required when called:    3
  5399 ;; This function calls:
  5400 ;;		___awdiv
  5401 ;;		___awmod
  5402 ;;		___flmul
  5403 ;; This function is called by:
  5404 ;;		_sprintf
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           	psect	text13
  5409  000B6C                     __ptext13:
  5410                           	opt stack 0
  5411  000B6C                     _scale:
  5412                           	opt stack 25
  5413                           
  5414                           ; BSR set to: 1
  5415                           ;incstack = 0
  5416                           ;scale@scl stored from wreg
  5417  000B6C  0100               	movlb	0	; () banked
  5418  000B6E  6F9D               	movwf	scale@scl& (0+255),b
  5419                           
  5420                           ;doprnt.c: 428: if(scl < 0) {
  5421  000B70  0100               	movlb	0	; () banked
  5422  000B72  AF9D               	btfss	scale@scl& (0+255),7,b
  5423  000B74  D112               	goto	l349
  5424                           
  5425                           ; BSR set to: 0
  5426                           ;doprnt.c: 429: scl = -scl;
  5427  000B76  6D9D               	negf	scale@scl& (0+255),b
  5428                           
  5429                           ;doprnt.c: 430: if(scl>=110)
  5430  000B78  519D               	movf	scale@scl& (0+255),w,b
  5431  000B7A  0A80               	xorlw	128
  5432  000B7C  0F12               	addlw	-238
  5433  000B7E  A0D8               	btfss	status,0,c
  5434  000B80  D09A               	goto	l350
  5435                           
  5436                           ; BSR set to: 0
  5437                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5438  000B82  0E00               	movlw	0
  5439  000B84  6E28               	movwf	___awdiv@divisor+1,c
  5440  000B86  0E0A               	movlw	10
  5441  000B88  6E27               	movwf	___awdiv@divisor,c
  5442  000B8A  0E00               	movlw	0
  5443  000B8C  6E22               	movwf	___awmod@divisor+1,c
  5444  000B8E  0E64               	movlw	100
  5445  000B90  6E21               	movwf	___awmod@divisor,c
  5446  000B92  519D               	movf	scale@scl& (0+255),w,b
  5447  000B94  6E1F               	movwf	___awmod@dividend,c
  5448  000B96  6A20               	clrf	___awmod@dividend+1,c
  5449  000B98  BE1F               	btfsc	___awmod@dividend,7,c
  5450  000B9A  0620               	decf	___awmod@dividend+1,f,c
  5451  000B9C  ECA5  F015         	call	___awmod	;wreg free
  5452  000BA0  C01F  F025         	movff	?___awmod,___awdiv@dividend
  5453  000BA4  C020  F026         	movff	?___awmod+1,___awdiv@dividend+1
  5454  000BA8  EC22  F015         	call	___awdiv	;wreg free
  5455  000BAC  90D8               	bcf	status,0,c
  5456  000BAE  3625               	rlcf	?___awdiv,f,c
  5457  000BB0  3626               	rlcf	?___awdiv+1,f,c
  5458  000BB2  90D8               	bcf	status,0,c
  5459  000BB4  3625               	rlcf	?___awdiv,f,c
  5460  000BB6  3626               	rlcf	?___awdiv+1,f,c
  5461  000BB8  0E24               	movlw	36
  5462  000BBA  2625               	addwf	?___awdiv,f,c
  5463  000BBC  0E00               	movlw	0
  5464  000BBE  2226               	addwfc	?___awdiv+1,f,c
  5465  000BC0  0E1F               	movlw	low __npowers_
  5466  000BC2  2425               	addwf	?___awdiv,w,c
  5467  000BC4  6EF6               	movwf	tblptrl,c
  5468  000BC6  0EFF               	movlw	high __npowers_
  5469  000BC8  2026               	addwfc	?___awdiv+1,w,c
  5470  000BCA  6EF7               	movwf	tblptrh,c
  5471  000BCC                     	if	0	;There are less than 3 active tblptr bytes
  5472  000BCC                     	endif
  5473  000BCC  0009               	tblrd		*+
  5474  000BCE  CFF5 F084          	movff	tablat,___flmul@a
  5475  000BD2  0009               	tblrd		*+
  5476  000BD4  CFF5 F085          	movff	tablat,___flmul@a+1
  5477  000BD8  0009               	tblrd		*+
  5478  000BDA  CFF5 F086          	movff	tablat,___flmul@a+2
  5479  000BDE  000A               	tblrd		*-
  5480  000BE0  CFF5 F087          	movff	tablat,___flmul@a+3
  5481  000BE4  0E00               	movlw	0
  5482  000BE6  6E28               	movwf	___awdiv@divisor+1,c
  5483  000BE8  0E64               	movlw	100
  5484  000BEA  6E27               	movwf	___awdiv@divisor,c
  5485  000BEC  0100               	movlb	0	; () banked
  5486  000BEE  519D               	movf	scale@scl& (0+255),w,b
  5487  000BF0  6E25               	movwf	___awdiv@dividend,c
  5488  000BF2  6A26               	clrf	___awdiv@dividend+1,c
  5489  000BF4  BE25               	btfsc	___awdiv@dividend,7,c
  5490  000BF6  0626               	decf	___awdiv@dividend+1,f,c
  5491  000BF8  EC22  F015         	call	___awdiv	;wreg free
  5492  000BFC  90D8               	bcf	status,0,c
  5493  000BFE  3625               	rlcf	?___awdiv,f,c
  5494  000C00  3626               	rlcf	?___awdiv+1,f,c
  5495  000C02  90D8               	bcf	status,0,c
  5496  000C04  3625               	rlcf	?___awdiv,f,c
  5497  000C06  3626               	rlcf	?___awdiv+1,f,c
  5498  000C08  0E48               	movlw	72
  5499  000C0A  2625               	addwf	?___awdiv,f,c
  5500  000C0C  0E00               	movlw	0
  5501  000C0E  2226               	addwfc	?___awdiv+1,f,c
  5502  000C10  0E1F               	movlw	low __npowers_
  5503  000C12  2425               	addwf	?___awdiv,w,c
  5504  000C14  6EF6               	movwf	tblptrl,c
  5505  000C16  0EFF               	movlw	high __npowers_
  5506  000C18  2026               	addwfc	?___awdiv+1,w,c
  5507  000C1A  6EF7               	movwf	tblptrh,c
  5508  000C1C                     	if	0	;There are less than 3 active tblptr bytes
  5509  000C1C                     	endif
  5510  000C1C  0009               	tblrd		*+
  5511  000C1E  CFF5 F080          	movff	tablat,___flmul@b
  5512  000C22  0009               	tblrd		*+
  5513  000C24  CFF5 F081          	movff	tablat,___flmul@b+1
  5514  000C28  0009               	tblrd		*+
  5515  000C2A  CFF5 F082          	movff	tablat,___flmul@b+2
  5516  000C2E  000A               	tblrd		*-
  5517  000C30  CFF5 F083          	movff	tablat,___flmul@b+3
  5518  000C34  ECAA  F009         	call	___flmul	;wreg free
  5519  000C38  C080  F099         	movff	?___flmul,_scale$1988
  5520  000C3C  C081  F09A         	movff	?___flmul+1,_scale$1988+1
  5521  000C40  C082  F09B         	movff	?___flmul+2,_scale$1988+2
  5522  000C44  C083  F09C         	movff	?___flmul+3,_scale$1988+3
  5523                           
  5524                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5525  000C48  C099  F080         	movff	_scale$1988,___flmul@b
  5526  000C4C  C09A  F081         	movff	_scale$1988+1,___flmul@b+1
  5527  000C50  C09B  F082         	movff	_scale$1988+2,___flmul@b+2
  5528  000C54  C09C  F083         	movff	_scale$1988+3,___flmul@b+3
  5529  000C58  0E00               	movlw	0
  5530  000C5A  6E22               	movwf	___awmod@divisor+1,c
  5531  000C5C  0E0A               	movlw	10
  5532  000C5E  6E21               	movwf	___awmod@divisor,c
  5533  000C60  0100               	movlb	0	; () banked
  5534  000C62  519D               	movf	scale@scl& (0+255),w,b
  5535  000C64  6E1F               	movwf	___awmod@dividend,c
  5536  000C66  6A20               	clrf	___awmod@dividend+1,c
  5537  000C68  BE1F               	btfsc	___awmod@dividend,7,c
  5538  000C6A  0620               	decf	___awmod@dividend+1,f,c
  5539  000C6C  ECA5  F015         	call	___awmod	;wreg free
  5540  000C70  90D8               	bcf	status,0,c
  5541  000C72  361F               	rlcf	?___awmod,f,c
  5542  000C74  3620               	rlcf	?___awmod+1,f,c
  5543  000C76  90D8               	bcf	status,0,c
  5544  000C78  361F               	rlcf	?___awmod,f,c
  5545  000C7A  3620               	rlcf	?___awmod+1,f,c
  5546  000C7C  0E1F               	movlw	low __npowers_
  5547  000C7E  241F               	addwf	?___awmod,w,c
  5548  000C80  6EF6               	movwf	tblptrl,c
  5549  000C82  0EFF               	movlw	high __npowers_
  5550  000C84  2020               	addwfc	?___awmod+1,w,c
  5551  000C86  6EF7               	movwf	tblptrh,c
  5552  000C88                     	if	0	;There are less than 3 active tblptr bytes
  5553  000C88                     	endif
  5554  000C88  0009               	tblrd		*+
  5555  000C8A  CFF5 F084          	movff	tablat,___flmul@a
  5556  000C8E  0009               	tblrd		*+
  5557  000C90  CFF5 F085          	movff	tablat,___flmul@a+1
  5558  000C94  0009               	tblrd		*+
  5559  000C96  CFF5 F086          	movff	tablat,___flmul@a+2
  5560  000C9A  000A               	tblrd		*-
  5561  000C9C  CFF5 F087          	movff	tablat,___flmul@a+3
  5562  000CA0  ECAA  F009         	call	___flmul	;wreg free
  5563  000CA4  C080  F095         	movff	?___flmul,?_scale
  5564  000CA8  C081  F096         	movff	?___flmul+1,?_scale+1
  5565  000CAC  C082  F097         	movff	?___flmul+2,?_scale+2
  5566  000CB0  C083  F098         	movff	?___flmul+3,?_scale+3
  5567  000CB4  0012               	return	
  5568  000CB6                     l350:
  5569                           
  5570                           ;doprnt.c: 432: else if(scl > 10)
  5571  000CB6  0100               	movlb	0	; () banked
  5572  000CB8  519D               	movf	scale@scl& (0+255),w,b
  5573  000CBA  0A80               	xorlw	128
  5574  000CBC  0F75               	addlw	-139
  5575  000CBE  A0D8               	btfss	status,0,c
  5576  000CC0  D056               	goto	l353
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5580  000CC2  0E00               	movlw	0
  5581  000CC4  6E28               	movwf	___awdiv@divisor+1,c
  5582  000CC6  0E0A               	movlw	10
  5583  000CC8  6E27               	movwf	___awdiv@divisor,c
  5584  000CCA  519D               	movf	scale@scl& (0+255),w,b
  5585  000CCC  6E25               	movwf	___awdiv@dividend,c
  5586  000CCE  6A26               	clrf	___awdiv@dividend+1,c
  5587  000CD0  BE25               	btfsc	___awdiv@dividend,7,c
  5588  000CD2  0626               	decf	___awdiv@dividend+1,f,c
  5589  000CD4  EC22  F015         	call	___awdiv	;wreg free
  5590  000CD8  90D8               	bcf	status,0,c
  5591  000CDA  3625               	rlcf	?___awdiv,f,c
  5592  000CDC  3626               	rlcf	?___awdiv+1,f,c
  5593  000CDE  90D8               	bcf	status,0,c
  5594  000CE0  3625               	rlcf	?___awdiv,f,c
  5595  000CE2  3626               	rlcf	?___awdiv+1,f,c
  5596  000CE4  0E24               	movlw	36
  5597  000CE6  2625               	addwf	?___awdiv,f,c
  5598  000CE8  0E00               	movlw	0
  5599  000CEA  2226               	addwfc	?___awdiv+1,f,c
  5600  000CEC  0E1F               	movlw	low __npowers_
  5601  000CEE  2425               	addwf	?___awdiv,w,c
  5602  000CF0  6EF6               	movwf	tblptrl,c
  5603  000CF2  0EFF               	movlw	high __npowers_
  5604  000CF4  2026               	addwfc	?___awdiv+1,w,c
  5605  000CF6  6EF7               	movwf	tblptrh,c
  5606  000CF8                     	if	0	;There are less than 3 active tblptr bytes
  5607  000CF8                     	endif
  5608  000CF8  0009               	tblrd		*+
  5609  000CFA  CFF5 F080          	movff	tablat,___flmul@b
  5610  000CFE  0009               	tblrd		*+
  5611  000D00  CFF5 F081          	movff	tablat,___flmul@b+1
  5612  000D04  0009               	tblrd		*+
  5613  000D06  CFF5 F082          	movff	tablat,___flmul@b+2
  5614  000D0A  000A               	tblrd		*-
  5615  000D0C  CFF5 F083          	movff	tablat,___flmul@b+3
  5616  000D10  0E00               	movlw	0
  5617  000D12  6E22               	movwf	___awmod@divisor+1,c
  5618  000D14  0E0A               	movlw	10
  5619  000D16  6E21               	movwf	___awmod@divisor,c
  5620  000D18  0100               	movlb	0	; () banked
  5621  000D1A  519D               	movf	scale@scl& (0+255),w,b
  5622  000D1C  6E1F               	movwf	___awmod@dividend,c
  5623  000D1E  6A20               	clrf	___awmod@dividend+1,c
  5624  000D20  BE1F               	btfsc	___awmod@dividend,7,c
  5625  000D22  0620               	decf	___awmod@dividend+1,f,c
  5626  000D24  ECA5  F015         	call	___awmod	;wreg free
  5627  000D28  90D8               	bcf	status,0,c
  5628  000D2A  361F               	rlcf	?___awmod,f,c
  5629  000D2C  3620               	rlcf	?___awmod+1,f,c
  5630  000D2E  90D8               	bcf	status,0,c
  5631  000D30  361F               	rlcf	?___awmod,f,c
  5632  000D32  3620               	rlcf	?___awmod+1,f,c
  5633  000D34  0E1F               	movlw	low __npowers_
  5634  000D36  241F               	addwf	?___awmod,w,c
  5635  000D38  6EF6               	movwf	tblptrl,c
  5636  000D3A  0EFF               	movlw	high __npowers_
  5637  000D3C  2020               	addwfc	?___awmod+1,w,c
  5638  000D3E  6EF7               	movwf	tblptrh,c
  5639  000D40                     	if	0	;There are less than 3 active tblptr bytes
  5640  000D40                     	endif
  5641  000D40  0009               	tblrd		*+
  5642  000D42  CFF5 F084          	movff	tablat,___flmul@a
  5643  000D46  0009               	tblrd		*+
  5644  000D48  CFF5 F085          	movff	tablat,___flmul@a+1
  5645  000D4C  0009               	tblrd		*+
  5646  000D4E  CFF5 F086          	movff	tablat,___flmul@a+2
  5647  000D52  000A               	tblrd		*-
  5648  000D54  CFF5 F087          	movff	tablat,___flmul@a+3
  5649  000D58  ECAA  F009         	call	___flmul	;wreg free
  5650  000D5C  C080  F095         	movff	?___flmul,?_scale
  5651  000D60  C081  F096         	movff	?___flmul+1,?_scale+1
  5652  000D64  C082  F097         	movff	?___flmul+2,?_scale+2
  5653  000D68  C083  F098         	movff	?___flmul+3,?_scale+3
  5654  000D6C  0012               	return	
  5655  000D6E                     l353:
  5656                           
  5657                           ;doprnt.c: 434: return _npowers_[scl];
  5658  000D6E  0100               	movlb	0	; () banked
  5659  000D70  519D               	movf	scale@scl& (0+255),w,b
  5660  000D72  0D04               	mullw	4
  5661  000D74  0E1F               	movlw	low __npowers_
  5662  000D76  24F3               	addwf	prodl,w,c
  5663  000D78  6EF6               	movwf	tblptrl,c
  5664  000D7A  0EFF               	movlw	high __npowers_
  5665  000D7C  20F4               	addwfc	prodh,w,c
  5666  000D7E  6EF7               	movwf	tblptrh,c
  5667  000D80                     	if	0	;There are less than 3 active tblptr bytes
  5668  000D80                     	endif
  5669  000D80  0009               	tblrd		*+
  5670  000D82  CFF5 F095          	movff	tablat,?_scale
  5671  000D86  0009               	tblrd		*+
  5672  000D88  CFF5 F096          	movff	tablat,?_scale+1
  5673  000D8C  0009               	tblrd		*+
  5674  000D8E  CFF5 F097          	movff	tablat,?_scale+2
  5675  000D92  000A               	tblrd		*-
  5676  000D94  CFF5 F098          	movff	tablat,?_scale+3
  5677                           
  5678                           ; BSR set to: 0
  5679  000D98  0012               	return	
  5680  000D9A                     l349:
  5681                           
  5682                           ; BSR set to: 0
  5683                           ;doprnt.c: 435: }
  5684                           ;doprnt.c: 436: if(scl>=110)
  5685                           
  5686                           ; BSR set to: 0
  5687  000D9A  519D               	movf	scale@scl& (0+255),w,b
  5688  000D9C  0A80               	xorlw	128
  5689  000D9E  0F12               	addlw	-238
  5690  000DA0  A0D8               	btfss	status,0,c
  5691  000DA2  D09A               	goto	l354
  5692                           
  5693                           ; BSR set to: 0
  5694                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5695  000DA4  0E00               	movlw	0
  5696  000DA6  6E28               	movwf	___awdiv@divisor+1,c
  5697  000DA8  0E0A               	movlw	10
  5698  000DAA  6E27               	movwf	___awdiv@divisor,c
  5699  000DAC  0E00               	movlw	0
  5700  000DAE  6E22               	movwf	___awmod@divisor+1,c
  5701  000DB0  0E64               	movlw	100
  5702  000DB2  6E21               	movwf	___awmod@divisor,c
  5703  000DB4  519D               	movf	scale@scl& (0+255),w,b
  5704  000DB6  6E1F               	movwf	___awmod@dividend,c
  5705  000DB8  6A20               	clrf	___awmod@dividend+1,c
  5706  000DBA  BE1F               	btfsc	___awmod@dividend,7,c
  5707  000DBC  0620               	decf	___awmod@dividend+1,f,c
  5708  000DBE  ECA5  F015         	call	___awmod	;wreg free
  5709  000DC2  C01F  F025         	movff	?___awmod,___awdiv@dividend
  5710  000DC6  C020  F026         	movff	?___awmod+1,___awdiv@dividend+1
  5711  000DCA  EC22  F015         	call	___awdiv	;wreg free
  5712  000DCE  90D8               	bcf	status,0,c
  5713  000DD0  3625               	rlcf	?___awdiv,f,c
  5714  000DD2  3626               	rlcf	?___awdiv+1,f,c
  5715  000DD4  90D8               	bcf	status,0,c
  5716  000DD6  3625               	rlcf	?___awdiv,f,c
  5717  000DD8  3626               	rlcf	?___awdiv+1,f,c
  5718  000DDA  0E24               	movlw	36
  5719  000DDC  2625               	addwf	?___awdiv,f,c
  5720  000DDE  0E00               	movlw	0
  5721  000DE0  2226               	addwfc	?___awdiv+1,f,c
  5722  000DE2  0EEB               	movlw	low __powers_
  5723  000DE4  2425               	addwf	?___awdiv,w,c
  5724  000DE6  6EF6               	movwf	tblptrl,c
  5725  000DE8  0EFE               	movlw	high __powers_
  5726  000DEA  2026               	addwfc	?___awdiv+1,w,c
  5727  000DEC  6EF7               	movwf	tblptrh,c
  5728  000DEE                     	if	0	;There are less than 3 active tblptr bytes
  5729  000DEE                     	endif
  5730  000DEE  0009               	tblrd		*+
  5731  000DF0  CFF5 F084          	movff	tablat,___flmul@a
  5732  000DF4  0009               	tblrd		*+
  5733  000DF6  CFF5 F085          	movff	tablat,___flmul@a+1
  5734  000DFA  0009               	tblrd		*+
  5735  000DFC  CFF5 F086          	movff	tablat,___flmul@a+2
  5736  000E00  000A               	tblrd		*-
  5737  000E02  CFF5 F087          	movff	tablat,___flmul@a+3
  5738  000E06  0E00               	movlw	0
  5739  000E08  6E28               	movwf	___awdiv@divisor+1,c
  5740  000E0A  0E64               	movlw	100
  5741  000E0C  6E27               	movwf	___awdiv@divisor,c
  5742  000E0E  0100               	movlb	0	; () banked
  5743  000E10  519D               	movf	scale@scl& (0+255),w,b
  5744  000E12  6E25               	movwf	___awdiv@dividend,c
  5745  000E14  6A26               	clrf	___awdiv@dividend+1,c
  5746  000E16  BE25               	btfsc	___awdiv@dividend,7,c
  5747  000E18  0626               	decf	___awdiv@dividend+1,f,c
  5748  000E1A  EC22  F015         	call	___awdiv	;wreg free
  5749  000E1E  90D8               	bcf	status,0,c
  5750  000E20  3625               	rlcf	?___awdiv,f,c
  5751  000E22  3626               	rlcf	?___awdiv+1,f,c
  5752  000E24  90D8               	bcf	status,0,c
  5753  000E26  3625               	rlcf	?___awdiv,f,c
  5754  000E28  3626               	rlcf	?___awdiv+1,f,c
  5755  000E2A  0E48               	movlw	72
  5756  000E2C  2625               	addwf	?___awdiv,f,c
  5757  000E2E  0E00               	movlw	0
  5758  000E30  2226               	addwfc	?___awdiv+1,f,c
  5759  000E32  0EEB               	movlw	low __powers_
  5760  000E34  2425               	addwf	?___awdiv,w,c
  5761  000E36  6EF6               	movwf	tblptrl,c
  5762  000E38  0EFE               	movlw	high __powers_
  5763  000E3A  2026               	addwfc	?___awdiv+1,w,c
  5764  000E3C  6EF7               	movwf	tblptrh,c
  5765  000E3E                     	if	0	;There are less than 3 active tblptr bytes
  5766  000E3E                     	endif
  5767  000E3E  0009               	tblrd		*+
  5768  000E40  CFF5 F080          	movff	tablat,___flmul@b
  5769  000E44  0009               	tblrd		*+
  5770  000E46  CFF5 F081          	movff	tablat,___flmul@b+1
  5771  000E4A  0009               	tblrd		*+
  5772  000E4C  CFF5 F082          	movff	tablat,___flmul@b+2
  5773  000E50  000A               	tblrd		*-
  5774  000E52  CFF5 F083          	movff	tablat,___flmul@b+3
  5775  000E56  ECAA  F009         	call	___flmul	;wreg free
  5776  000E5A  C080  F099         	movff	?___flmul,_scale$1988
  5777  000E5E  C081  F09A         	movff	?___flmul+1,_scale$1988+1
  5778  000E62  C082  F09B         	movff	?___flmul+2,_scale$1988+2
  5779  000E66  C083  F09C         	movff	?___flmul+3,_scale$1988+3
  5780                           
  5781                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5782  000E6A  C099  F080         	movff	_scale$1988,___flmul@b
  5783  000E6E  C09A  F081         	movff	_scale$1988+1,___flmul@b+1
  5784  000E72  C09B  F082         	movff	_scale$1988+2,___flmul@b+2
  5785  000E76  C09C  F083         	movff	_scale$1988+3,___flmul@b+3
  5786  000E7A  0E00               	movlw	0
  5787  000E7C  6E22               	movwf	___awmod@divisor+1,c
  5788  000E7E  0E0A               	movlw	10
  5789  000E80  6E21               	movwf	___awmod@divisor,c
  5790  000E82  0100               	movlb	0	; () banked
  5791  000E84  519D               	movf	scale@scl& (0+255),w,b
  5792  000E86  6E1F               	movwf	___awmod@dividend,c
  5793  000E88  6A20               	clrf	___awmod@dividend+1,c
  5794  000E8A  BE1F               	btfsc	___awmod@dividend,7,c
  5795  000E8C  0620               	decf	___awmod@dividend+1,f,c
  5796  000E8E  ECA5  F015         	call	___awmod	;wreg free
  5797  000E92  90D8               	bcf	status,0,c
  5798  000E94  361F               	rlcf	?___awmod,f,c
  5799  000E96  3620               	rlcf	?___awmod+1,f,c
  5800  000E98  90D8               	bcf	status,0,c
  5801  000E9A  361F               	rlcf	?___awmod,f,c
  5802  000E9C  3620               	rlcf	?___awmod+1,f,c
  5803  000E9E  0EEB               	movlw	low __powers_
  5804  000EA0  241F               	addwf	?___awmod,w,c
  5805  000EA2  6EF6               	movwf	tblptrl,c
  5806  000EA4  0EFE               	movlw	high __powers_
  5807  000EA6  2020               	addwfc	?___awmod+1,w,c
  5808  000EA8  6EF7               	movwf	tblptrh,c
  5809  000EAA                     	if	0	;There are less than 3 active tblptr bytes
  5810  000EAA                     	endif
  5811  000EAA  0009               	tblrd		*+
  5812  000EAC  CFF5 F084          	movff	tablat,___flmul@a
  5813  000EB0  0009               	tblrd		*+
  5814  000EB2  CFF5 F085          	movff	tablat,___flmul@a+1
  5815  000EB6  0009               	tblrd		*+
  5816  000EB8  CFF5 F086          	movff	tablat,___flmul@a+2
  5817  000EBC  000A               	tblrd		*-
  5818  000EBE  CFF5 F087          	movff	tablat,___flmul@a+3
  5819  000EC2  ECAA  F009         	call	___flmul	;wreg free
  5820  000EC6  C080  F095         	movff	?___flmul,?_scale
  5821  000ECA  C081  F096         	movff	?___flmul+1,?_scale+1
  5822  000ECE  C082  F097         	movff	?___flmul+2,?_scale+2
  5823  000ED2  C083  F098         	movff	?___flmul+3,?_scale+3
  5824  000ED6  0012               	return	
  5825  000ED8                     l354:
  5826                           
  5827                           ;doprnt.c: 438: else if(scl > 10)
  5828  000ED8  0100               	movlb	0	; () banked
  5829  000EDA  519D               	movf	scale@scl& (0+255),w,b
  5830  000EDC  0A80               	xorlw	128
  5831  000EDE  0F75               	addlw	-139
  5832  000EE0  A0D8               	btfss	status,0,c
  5833  000EE2  D056               	goto	l356
  5834                           
  5835                           ; BSR set to: 0
  5836                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5837  000EE4  0E00               	movlw	0
  5838  000EE6  6E28               	movwf	___awdiv@divisor+1,c
  5839  000EE8  0E0A               	movlw	10
  5840  000EEA  6E27               	movwf	___awdiv@divisor,c
  5841  000EEC  519D               	movf	scale@scl& (0+255),w,b
  5842  000EEE  6E25               	movwf	___awdiv@dividend,c
  5843  000EF0  6A26               	clrf	___awdiv@dividend+1,c
  5844  000EF2  BE25               	btfsc	___awdiv@dividend,7,c
  5845  000EF4  0626               	decf	___awdiv@dividend+1,f,c
  5846  000EF6  EC22  F015         	call	___awdiv	;wreg free
  5847  000EFA  90D8               	bcf	status,0,c
  5848  000EFC  3625               	rlcf	?___awdiv,f,c
  5849  000EFE  3626               	rlcf	?___awdiv+1,f,c
  5850  000F00  90D8               	bcf	status,0,c
  5851  000F02  3625               	rlcf	?___awdiv,f,c
  5852  000F04  3626               	rlcf	?___awdiv+1,f,c
  5853  000F06  0E24               	movlw	36
  5854  000F08  2625               	addwf	?___awdiv,f,c
  5855  000F0A  0E00               	movlw	0
  5856  000F0C  2226               	addwfc	?___awdiv+1,f,c
  5857  000F0E  0EEB               	movlw	low __powers_
  5858  000F10  2425               	addwf	?___awdiv,w,c
  5859  000F12  6EF6               	movwf	tblptrl,c
  5860  000F14  0EFE               	movlw	high __powers_
  5861  000F16  2026               	addwfc	?___awdiv+1,w,c
  5862  000F18  6EF7               	movwf	tblptrh,c
  5863  000F1A                     	if	0	;There are less than 3 active tblptr bytes
  5864  000F1A                     	endif
  5865  000F1A  0009               	tblrd		*+
  5866  000F1C  CFF5 F080          	movff	tablat,___flmul@b
  5867  000F20  0009               	tblrd		*+
  5868  000F22  CFF5 F081          	movff	tablat,___flmul@b+1
  5869  000F26  0009               	tblrd		*+
  5870  000F28  CFF5 F082          	movff	tablat,___flmul@b+2
  5871  000F2C  000A               	tblrd		*-
  5872  000F2E  CFF5 F083          	movff	tablat,___flmul@b+3
  5873  000F32  0E00               	movlw	0
  5874  000F34  6E22               	movwf	___awmod@divisor+1,c
  5875  000F36  0E0A               	movlw	10
  5876  000F38  6E21               	movwf	___awmod@divisor,c
  5877  000F3A  0100               	movlb	0	; () banked
  5878  000F3C  519D               	movf	scale@scl& (0+255),w,b
  5879  000F3E  6E1F               	movwf	___awmod@dividend,c
  5880  000F40  6A20               	clrf	___awmod@dividend+1,c
  5881  000F42  BE1F               	btfsc	___awmod@dividend,7,c
  5882  000F44  0620               	decf	___awmod@dividend+1,f,c
  5883  000F46  ECA5  F015         	call	___awmod	;wreg free
  5884  000F4A  90D8               	bcf	status,0,c
  5885  000F4C  361F               	rlcf	?___awmod,f,c
  5886  000F4E  3620               	rlcf	?___awmod+1,f,c
  5887  000F50  90D8               	bcf	status,0,c
  5888  000F52  361F               	rlcf	?___awmod,f,c
  5889  000F54  3620               	rlcf	?___awmod+1,f,c
  5890  000F56  0EEB               	movlw	low __powers_
  5891  000F58  241F               	addwf	?___awmod,w,c
  5892  000F5A  6EF6               	movwf	tblptrl,c
  5893  000F5C  0EFE               	movlw	high __powers_
  5894  000F5E  2020               	addwfc	?___awmod+1,w,c
  5895  000F60  6EF7               	movwf	tblptrh,c
  5896  000F62                     	if	0	;There are less than 3 active tblptr bytes
  5897  000F62                     	endif
  5898  000F62  0009               	tblrd		*+
  5899  000F64  CFF5 F084          	movff	tablat,___flmul@a
  5900  000F68  0009               	tblrd		*+
  5901  000F6A  CFF5 F085          	movff	tablat,___flmul@a+1
  5902  000F6E  0009               	tblrd		*+
  5903  000F70  CFF5 F086          	movff	tablat,___flmul@a+2
  5904  000F74  000A               	tblrd		*-
  5905  000F76  CFF5 F087          	movff	tablat,___flmul@a+3
  5906  000F7A  ECAA  F009         	call	___flmul	;wreg free
  5907  000F7E  C080  F095         	movff	?___flmul,?_scale
  5908  000F82  C081  F096         	movff	?___flmul+1,?_scale+1
  5909  000F86  C082  F097         	movff	?___flmul+2,?_scale+2
  5910  000F8A  C083  F098         	movff	?___flmul+3,?_scale+3
  5911  000F8E  0012               	return	
  5912  000F90                     l356:
  5913                           
  5914                           ;doprnt.c: 440: return _powers_[scl];
  5915  000F90  0100               	movlb	0	; () banked
  5916  000F92  519D               	movf	scale@scl& (0+255),w,b
  5917  000F94  0D04               	mullw	4
  5918  000F96  0EEB               	movlw	low __powers_
  5919  000F98  24F3               	addwf	prodl,w,c
  5920  000F9A  6EF6               	movwf	tblptrl,c
  5921  000F9C  0EFE               	movlw	high __powers_
  5922  000F9E  20F4               	addwfc	prodh,w,c
  5923  000FA0  6EF7               	movwf	tblptrh,c
  5924  000FA2                     	if	0	;There are less than 3 active tblptr bytes
  5925  000FA2                     	endif
  5926  000FA2  0009               	tblrd		*+
  5927  000FA4  CFF5 F095          	movff	tablat,?_scale
  5928  000FA8  0009               	tblrd		*+
  5929  000FAA  CFF5 F096          	movff	tablat,?_scale+1
  5930  000FAE  0009               	tblrd		*+
  5931  000FB0  CFF5 F097          	movff	tablat,?_scale+2
  5932  000FB4  000A               	tblrd		*-
  5933  000FB6  CFF5 F098          	movff	tablat,?_scale+3
  5934  000FBA  0012               	return	
  5935  000FBC                     __end_of_scale:
  5936                           	opt stack 0
  5937                           tblptru	equ	0xFF8
  5938                           tblptrh	equ	0xFF7
  5939                           tblptrl	equ	0xFF6
  5940                           tablat	equ	0xFF5
  5941                           prodh	equ	0xFF4
  5942                           prodl	equ	0xFF3
  5943                           intcon	equ	0xFF2
  5944                           intcon2	equ	0xFF1
  5945                           intcon3	equ	0xFF0
  5946                           postinc0	equ	0xFEE
  5947                           wreg	equ	0xFE8
  5948                           indf1	equ	0xFE7
  5949                           postdec1	equ	0xFE5
  5950                           fsr1h	equ	0xFE2
  5951                           fsr1l	equ	0xFE1
  5952                           indf2	equ	0xFDF
  5953                           postinc2	equ	0xFDE
  5954                           postdec2	equ	0xFDD
  5955                           fsr2h	equ	0xFDA
  5956                           fsr2l	equ	0xFD9
  5957                           status	equ	0xFD8
  5958                           
  5959 ;; *************** function _isdigit *****************
  5960 ;; Defined at:
  5961 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  5962 ;; Parameters:    Size  Location     Type
  5963 ;;  c               1    wreg     unsigned char 
  5964 ;; Auto vars:     Size  Location     Type
  5965 ;;  c               1   32[COMRAM] unsigned char 
  5966 ;; Return value:  Size  Location     Type
  5967 ;;		None               void
  5968 ;; Registers used:
  5969 ;;		wreg, status,2, status,0
  5970 ;; Tracked objects:
  5971 ;;		On entry : 0/0
  5972 ;;		On exit  : 0/0
  5973 ;;		Unchanged: 0/0
  5974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5976 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5977 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5978 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5979 ;;Total ram usage:        3 bytes
  5980 ;; Hardware stack levels used:    1
  5981 ;; Hardware stack levels required when called:    2
  5982 ;; This function calls:
  5983 ;;		Nothing
  5984 ;; This function is called by:
  5985 ;;		_sprintf
  5986 ;; This function uses a non-reentrant model
  5987 ;;
  5988                           
  5989                           	psect	text14
  5990  00306A                     __ptext14:
  5991                           	opt stack 0
  5992  00306A                     _isdigit:
  5993                           	opt stack 26
  5994                           
  5995                           ;incstack = 0
  5996                           ;isdigit@c stored from wreg
  5997  00306A  6E21               	movwf	isdigit@c,c
  5998  00306C  0E00               	movlw	0
  5999  00306E  6E20               	movwf	_isdigit$1613,c
  6000  003070  0E3A               	movlw	58
  6001  003072  6021               	cpfslt	isdigit@c,c
  6002  003074  D005               	goto	l817
  6003  003076  0E2F               	movlw	47
  6004  003078  6421               	cpfsgt	isdigit@c,c
  6005  00307A  D002               	goto	l817
  6006  00307C  0E01               	movlw	1
  6007  00307E  6E20               	movwf	_isdigit$1613,c
  6008  003080                     l817:
  6009  003080  C020  F01F         	movff	_isdigit$1613,??_isdigit
  6010  003084  301F               	rrcf	??_isdigit,w,c
  6011  003086  0012               	return	
  6012  003088                     __end_of_isdigit:
  6013                           	opt stack 0
  6014                           tblptru	equ	0xFF8
  6015                           tblptrh	equ	0xFF7
  6016                           tblptrl	equ	0xFF6
  6017                           tablat	equ	0xFF5
  6018                           prodh	equ	0xFF4
  6019                           prodl	equ	0xFF3
  6020                           intcon	equ	0xFF2
  6021                           intcon2	equ	0xFF1
  6022                           intcon3	equ	0xFF0
  6023                           postinc0	equ	0xFEE
  6024                           wreg	equ	0xFE8
  6025                           indf1	equ	0xFE7
  6026                           postdec1	equ	0xFE5
  6027                           fsr1h	equ	0xFE2
  6028                           fsr1l	equ	0xFE1
  6029                           indf2	equ	0xFDF
  6030                           postinc2	equ	0xFDE
  6031                           postdec2	equ	0xFDD
  6032                           fsr2h	equ	0xFDA
  6033                           fsr2l	equ	0xFD9
  6034                           status	equ	0xFD8
  6035                           
  6036 ;; *************** function _fround *****************
  6037 ;; Defined at:
  6038 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  6039 ;; Parameters:    Size  Location     Type
  6040 ;;  prec            1    wreg     unsigned char 
  6041 ;; Auto vars:     Size  Location     Type
  6042 ;;  prec            1   33[BANK0 ] unsigned char 
  6043 ;; Return value:  Size  Location     Type
  6044 ;;                  4   21[BANK0 ] unsigned char 
  6045 ;; Registers used:
  6046 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6047 ;; Tracked objects:
  6048 ;;		On entry : 0/0
  6049 ;;		On exit  : 0/0
  6050 ;;		Unchanged: 0/0
  6051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6052 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6056 ;;Total ram usage:       13 bytes
  6057 ;; Hardware stack levels used:    1
  6058 ;; Hardware stack levels required when called:    3
  6059 ;; This function calls:
  6060 ;;		___awdiv
  6061 ;;		___awmod
  6062 ;;		___flmul
  6063 ;; This function is called by:
  6064 ;;		_sprintf
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           	psect	text15
  6069  001C98                     __ptext15:
  6070                           	opt stack 0
  6071  001C98                     _fround:
  6072                           	opt stack 25
  6073                           
  6074                           ;incstack = 0
  6075                           ;fround@prec stored from wreg
  6076  001C98  0100               	movlb	0	; () banked
  6077  001C9A  6FA1               	movwf	fround@prec& (0+255),b
  6078                           
  6079                           ;doprnt.c: 413: if(prec>=110)
  6080  001C9C  0E6D               	movlw	109
  6081  001C9E  0100               	movlb	0	; () banked
  6082  001CA0  65A1               	cpfsgt	fround@prec& (0+255),b
  6083  001CA2  D0AD               	goto	l343
  6084                           
  6085                           ; BSR set to: 0
  6086                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6087  001CA4  0E00               	movlw	0
  6088  001CA6  6E28               	movwf	___awdiv@divisor+1,c
  6089  001CA8  0E0A               	movlw	10
  6090  001CAA  6E27               	movwf	___awdiv@divisor,c
  6091  001CAC  0E00               	movlw	0
  6092  001CAE  6E22               	movwf	___awmod@divisor+1,c
  6093  001CB0  0E64               	movlw	100
  6094  001CB2  6E21               	movwf	___awmod@divisor,c
  6095  001CB4  C0A1  F01F         	movff	fround@prec,___awmod@dividend
  6096  001CB8  6A20               	clrf	___awmod@dividend+1,c
  6097  001CBA  ECA5  F015         	call	___awmod	;wreg free
  6098  001CBE  C01F  F025         	movff	?___awmod,___awdiv@dividend
  6099  001CC2  C020  F026         	movff	?___awmod+1,___awdiv@dividend+1
  6100  001CC6  EC22  F015         	call	___awdiv	;wreg free
  6101  001CCA  90D8               	bcf	status,0,c
  6102  001CCC  3625               	rlcf	?___awdiv,f,c
  6103  001CCE  3626               	rlcf	?___awdiv+1,f,c
  6104  001CD0  90D8               	bcf	status,0,c
  6105  001CD2  3625               	rlcf	?___awdiv,f,c
  6106  001CD4  3626               	rlcf	?___awdiv+1,f,c
  6107  001CD6  0E24               	movlw	36
  6108  001CD8  2625               	addwf	?___awdiv,f,c
  6109  001CDA  0E00               	movlw	0
  6110  001CDC  2226               	addwfc	?___awdiv+1,f,c
  6111  001CDE  0E1F               	movlw	low __npowers_
  6112  001CE0  2425               	addwf	?___awdiv,w,c
  6113  001CE2  6EF6               	movwf	tblptrl,c
  6114  001CE4  0EFF               	movlw	high __npowers_
  6115  001CE6  2026               	addwfc	?___awdiv+1,w,c
  6116  001CE8  6EF7               	movwf	tblptrh,c
  6117  001CEA                     	if	0	;There are less than 3 active tblptr bytes
  6118  001CEA                     	endif
  6119  001CEA  0009               	tblrd		*+
  6120  001CEC  CFF5 F084          	movff	tablat,___flmul@a
  6121  001CF0  0009               	tblrd		*+
  6122  001CF2  CFF5 F085          	movff	tablat,___flmul@a+1
  6123  001CF6  0009               	tblrd		*+
  6124  001CF8  CFF5 F086          	movff	tablat,___flmul@a+2
  6125  001CFC  000A               	tblrd		*-
  6126  001CFE  CFF5 F087          	movff	tablat,___flmul@a+3
  6127  001D02  0E00               	movlw	0
  6128  001D04  6E28               	movwf	___awdiv@divisor+1,c
  6129  001D06  0E64               	movlw	100
  6130  001D08  6E27               	movwf	___awdiv@divisor,c
  6131  001D0A  C0A1  F025         	movff	fround@prec,___awdiv@dividend
  6132  001D0E  6A26               	clrf	___awdiv@dividend+1,c
  6133  001D10  EC22  F015         	call	___awdiv	;wreg free
  6134  001D14  90D8               	bcf	status,0,c
  6135  001D16  3625               	rlcf	?___awdiv,f,c
  6136  001D18  3626               	rlcf	?___awdiv+1,f,c
  6137  001D1A  90D8               	bcf	status,0,c
  6138  001D1C  3625               	rlcf	?___awdiv,f,c
  6139  001D1E  3626               	rlcf	?___awdiv+1,f,c
  6140  001D20  0E48               	movlw	72
  6141  001D22  2625               	addwf	?___awdiv,f,c
  6142  001D24  0E00               	movlw	0
  6143  001D26  2226               	addwfc	?___awdiv+1,f,c
  6144  001D28  0E1F               	movlw	low __npowers_
  6145  001D2A  2425               	addwf	?___awdiv,w,c
  6146  001D2C  6EF6               	movwf	tblptrl,c
  6147  001D2E  0EFF               	movlw	high __npowers_
  6148  001D30  2026               	addwfc	?___awdiv+1,w,c
  6149  001D32  6EF7               	movwf	tblptrh,c
  6150  001D34                     	if	0	;There are less than 3 active tblptr bytes
  6151  001D34                     	endif
  6152  001D34  0009               	tblrd		*+
  6153  001D36  CFF5 F080          	movff	tablat,___flmul@b
  6154  001D3A  0009               	tblrd		*+
  6155  001D3C  CFF5 F081          	movff	tablat,___flmul@b+1
  6156  001D40  0009               	tblrd		*+
  6157  001D42  CFF5 F082          	movff	tablat,___flmul@b+2
  6158  001D46  000A               	tblrd		*-
  6159  001D48  CFF5 F083          	movff	tablat,___flmul@b+3
  6160  001D4C  ECAA  F009         	call	___flmul	;wreg free
  6161  001D50  C080  F09D         	movff	?___flmul,_fround$1986
  6162  001D54  C081  F09E         	movff	?___flmul+1,_fround$1986+1
  6163  001D58  C082  F09F         	movff	?___flmul+2,_fround$1986+2
  6164  001D5C  C083  F0A0         	movff	?___flmul+3,_fround$1986+3
  6165                           
  6166                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6167  001D60  0E00               	movlw	0
  6168  001D62  6E22               	movwf	___awmod@divisor+1,c
  6169  001D64  0E0A               	movlw	10
  6170  001D66  6E21               	movwf	___awmod@divisor,c
  6171  001D68  C0A1  F01F         	movff	fround@prec,___awmod@dividend
  6172  001D6C  6A20               	clrf	___awmod@dividend+1,c
  6173  001D6E  ECA5  F015         	call	___awmod	;wreg free
  6174  001D72  90D8               	bcf	status,0,c
  6175  001D74  361F               	rlcf	?___awmod,f,c
  6176  001D76  3620               	rlcf	?___awmod+1,f,c
  6177  001D78  90D8               	bcf	status,0,c
  6178  001D7A  361F               	rlcf	?___awmod,f,c
  6179  001D7C  3620               	rlcf	?___awmod+1,f,c
  6180  001D7E  0E1F               	movlw	low __npowers_
  6181  001D80  241F               	addwf	?___awmod,w,c
  6182  001D82  6EF6               	movwf	tblptrl,c
  6183  001D84  0EFF               	movlw	high __npowers_
  6184  001D86  2020               	addwfc	?___awmod+1,w,c
  6185  001D88  6EF7               	movwf	tblptrh,c
  6186  001D8A                     	if	0	;There are less than 3 active tblptr bytes
  6187  001D8A                     	endif
  6188  001D8A  0009               	tblrd		*+
  6189  001D8C  CFF5 F084          	movff	tablat,___flmul@a
  6190  001D90  0009               	tblrd		*+
  6191  001D92  CFF5 F085          	movff	tablat,___flmul@a+1
  6192  001D96  0009               	tblrd		*+
  6193  001D98  CFF5 F086          	movff	tablat,___flmul@a+2
  6194  001D9C  000A               	tblrd		*-
  6195  001D9E  CFF5 F087          	movff	tablat,___flmul@a+3
  6196  001DA2  C09D  F080         	movff	_fround$1986,___flmul@b
  6197  001DA6  C09E  F081         	movff	_fround$1986+1,___flmul@b+1
  6198  001DAA  C09F  F082         	movff	_fround$1986+2,___flmul@b+2
  6199  001DAE  C0A0  F083         	movff	_fround$1986+3,___flmul@b+3
  6200  001DB2  ECAA  F009         	call	___flmul	;wreg free
  6201  001DB6  C080  F099         	movff	?___flmul,_fround$1987
  6202  001DBA  C081  F09A         	movff	?___flmul+1,_fround$1987+1
  6203  001DBE  C082  F09B         	movff	?___flmul+2,_fround$1987+2
  6204  001DC2  C083  F09C         	movff	?___flmul+3,_fround$1987+3
  6205                           
  6206                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6207  001DC6  C099  F080         	movff	_fround$1987,___flmul@b
  6208  001DCA  C09A  F081         	movff	_fround$1987+1,___flmul@b+1
  6209  001DCE  C09B  F082         	movff	_fround$1987+2,___flmul@b+2
  6210  001DD2  C09C  F083         	movff	_fround$1987+3,___flmul@b+3
  6211  001DD6  0E00               	movlw	0
  6212  001DD8  0100               	movlb	0	; () banked
  6213  001DDA  6F84               	movwf	___flmul@a& (0+255),b
  6214  001DDC  0E00               	movlw	0
  6215  001DDE  6F85               	movwf	(___flmul@a+1)& (0+255),b
  6216  001DE0  0E00               	movlw	0
  6217  001DE2  6F86               	movwf	(___flmul@a+2)& (0+255),b
  6218  001DE4  0E3F               	movlw	63
  6219  001DE6  6F87               	movwf	(___flmul@a+3)& (0+255),b
  6220  001DE8  ECAA  F009         	call	___flmul	;wreg free
  6221  001DEC  C080  F095         	movff	?___flmul,?_fround
  6222  001DF0  C081  F096         	movff	?___flmul+1,?_fround+1
  6223  001DF4  C082  F097         	movff	?___flmul+2,?_fround+2
  6224  001DF8  C083  F098         	movff	?___flmul+3,?_fround+3
  6225  001DFC  0012               	return	
  6226  001DFE                     l343:
  6227                           
  6228                           ;doprnt.c: 415: else if(prec > 10)
  6229  001DFE  0E0A               	movlw	10
  6230  001E00  0100               	movlb	0	; () banked
  6231  001E02  65A1               	cpfsgt	fround@prec& (0+255),b
  6232  001E04  D06C               	goto	l346
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6236  001E06  0E00               	movlw	0
  6237  001E08  6E22               	movwf	___awmod@divisor+1,c
  6238  001E0A  0E0A               	movlw	10
  6239  001E0C  6E21               	movwf	___awmod@divisor,c
  6240  001E0E  C0A1  F01F         	movff	fround@prec,___awmod@dividend
  6241  001E12  6A20               	clrf	___awmod@dividend+1,c
  6242  001E14  ECA5  F015         	call	___awmod	;wreg free
  6243  001E18  90D8               	bcf	status,0,c
  6244  001E1A  361F               	rlcf	?___awmod,f,c
  6245  001E1C  3620               	rlcf	?___awmod+1,f,c
  6246  001E1E  90D8               	bcf	status,0,c
  6247  001E20  361F               	rlcf	?___awmod,f,c
  6248  001E22  3620               	rlcf	?___awmod+1,f,c
  6249  001E24  0E1F               	movlw	low __npowers_
  6250  001E26  241F               	addwf	?___awmod,w,c
  6251  001E28  6EF6               	movwf	tblptrl,c
  6252  001E2A  0EFF               	movlw	high __npowers_
  6253  001E2C  2020               	addwfc	?___awmod+1,w,c
  6254  001E2E  6EF7               	movwf	tblptrh,c
  6255  001E30                     	if	0	;There are less than 3 active tblptr bytes
  6256  001E30                     	endif
  6257  001E30  0009               	tblrd		*+
  6258  001E32  CFF5 F084          	movff	tablat,___flmul@a
  6259  001E36  0009               	tblrd		*+
  6260  001E38  CFF5 F085          	movff	tablat,___flmul@a+1
  6261  001E3C  0009               	tblrd		*+
  6262  001E3E  CFF5 F086          	movff	tablat,___flmul@a+2
  6263  001E42  000A               	tblrd		*-
  6264  001E44  CFF5 F087          	movff	tablat,___flmul@a+3
  6265  001E48  0E00               	movlw	0
  6266  001E4A  6E28               	movwf	___awdiv@divisor+1,c
  6267  001E4C  0E0A               	movlw	10
  6268  001E4E  6E27               	movwf	___awdiv@divisor,c
  6269  001E50  C0A1  F025         	movff	fround@prec,___awdiv@dividend
  6270  001E54  6A26               	clrf	___awdiv@dividend+1,c
  6271  001E56  EC22  F015         	call	___awdiv	;wreg free
  6272  001E5A  90D8               	bcf	status,0,c
  6273  001E5C  3625               	rlcf	?___awdiv,f,c
  6274  001E5E  3626               	rlcf	?___awdiv+1,f,c
  6275  001E60  90D8               	bcf	status,0,c
  6276  001E62  3625               	rlcf	?___awdiv,f,c
  6277  001E64  3626               	rlcf	?___awdiv+1,f,c
  6278  001E66  0E24               	movlw	36
  6279  001E68  2625               	addwf	?___awdiv,f,c
  6280  001E6A  0E00               	movlw	0
  6281  001E6C  2226               	addwfc	?___awdiv+1,f,c
  6282  001E6E  0E1F               	movlw	low __npowers_
  6283  001E70  2425               	addwf	?___awdiv,w,c
  6284  001E72  6EF6               	movwf	tblptrl,c
  6285  001E74  0EFF               	movlw	high __npowers_
  6286  001E76  2026               	addwfc	?___awdiv+1,w,c
  6287  001E78  6EF7               	movwf	tblptrh,c
  6288  001E7A                     	if	0	;There are less than 3 active tblptr bytes
  6289  001E7A                     	endif
  6290  001E7A  0009               	tblrd		*+
  6291  001E7C  CFF5 F080          	movff	tablat,___flmul@b
  6292  001E80  0009               	tblrd		*+
  6293  001E82  CFF5 F081          	movff	tablat,___flmul@b+1
  6294  001E86  0009               	tblrd		*+
  6295  001E88  CFF5 F082          	movff	tablat,___flmul@b+2
  6296  001E8C  000A               	tblrd		*-
  6297  001E8E  CFF5 F083          	movff	tablat,___flmul@b+3
  6298  001E92  ECAA  F009         	call	___flmul	;wreg free
  6299  001E96  C080  F09D         	movff	?___flmul,_fround$1986
  6300  001E9A  C081  F09E         	movff	?___flmul+1,_fround$1986+1
  6301  001E9E  C082  F09F         	movff	?___flmul+2,_fround$1986+2
  6302  001EA2  C083  F0A0         	movff	?___flmul+3,_fround$1986+3
  6303                           
  6304                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6305  001EA6  C09D  F080         	movff	_fround$1986,___flmul@b
  6306  001EAA  C09E  F081         	movff	_fround$1986+1,___flmul@b+1
  6307  001EAE  C09F  F082         	movff	_fround$1986+2,___flmul@b+2
  6308  001EB2  C0A0  F083         	movff	_fround$1986+3,___flmul@b+3
  6309  001EB6  0E00               	movlw	0
  6310  001EB8  0100               	movlb	0	; () banked
  6311  001EBA  6F84               	movwf	___flmul@a& (0+255),b
  6312  001EBC  0E00               	movlw	0
  6313  001EBE  6F85               	movwf	(___flmul@a+1)& (0+255),b
  6314  001EC0  0E00               	movlw	0
  6315  001EC2  6F86               	movwf	(___flmul@a+2)& (0+255),b
  6316  001EC4  0E3F               	movlw	63
  6317  001EC6  6F87               	movwf	(___flmul@a+3)& (0+255),b
  6318  001EC8  ECAA  F009         	call	___flmul	;wreg free
  6319  001ECC  C080  F095         	movff	?___flmul,?_fround
  6320  001ED0  C081  F096         	movff	?___flmul+1,?_fround+1
  6321  001ED4  C082  F097         	movff	?___flmul+2,?_fround+2
  6322  001ED8  C083  F098         	movff	?___flmul+3,?_fround+3
  6323  001EDC  0012               	return	
  6324  001EDE                     l346:
  6325                           
  6326                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6327  001EDE  0100               	movlb	0	; () banked
  6328  001EE0  51A1               	movf	fround@prec& (0+255),w,b
  6329  001EE2  0D04               	mullw	4
  6330  001EE4  0E1F               	movlw	low __npowers_
  6331  001EE6  24F3               	addwf	prodl,w,c
  6332  001EE8  6EF6               	movwf	tblptrl,c
  6333  001EEA  0EFF               	movlw	high __npowers_
  6334  001EEC  20F4               	addwfc	prodh,w,c
  6335  001EEE  6EF7               	movwf	tblptrh,c
  6336  001EF0                     	if	0	;There are less than 3 active tblptr bytes
  6337  001EF0                     	endif
  6338  001EF0  0009               	tblrd		*+
  6339  001EF2  CFF5 F080          	movff	tablat,___flmul@b
  6340  001EF6  0009               	tblrd		*+
  6341  001EF8  CFF5 F081          	movff	tablat,___flmul@b+1
  6342  001EFC  0009               	tblrd		*+
  6343  001EFE  CFF5 F082          	movff	tablat,___flmul@b+2
  6344  001F02  000A               	tblrd		*-
  6345  001F04  CFF5 F083          	movff	tablat,___flmul@b+3
  6346  001F08  0E00               	movlw	0
  6347  001F0A  6F84               	movwf	___flmul@a& (0+255),b
  6348  001F0C  0E00               	movlw	0
  6349  001F0E  6F85               	movwf	(___flmul@a+1)& (0+255),b
  6350  001F10  0E00               	movlw	0
  6351  001F12  6F86               	movwf	(___flmul@a+2)& (0+255),b
  6352  001F14  0E3F               	movlw	63
  6353  001F16  6F87               	movwf	(___flmul@a+3)& (0+255),b
  6354  001F18  ECAA  F009         	call	___flmul	;wreg free
  6355  001F1C  C080  F095         	movff	?___flmul,?_fround
  6356  001F20  C081  F096         	movff	?___flmul+1,?_fround+1
  6357  001F24  C082  F097         	movff	?___flmul+2,?_fround+2
  6358  001F28  C083  F098         	movff	?___flmul+3,?_fround+3
  6359  001F2C  0012               	return	
  6360  001F2E                     __end_of_fround:
  6361                           	opt stack 0
  6362                           tblptru	equ	0xFF8
  6363                           tblptrh	equ	0xFF7
  6364                           tblptrl	equ	0xFF6
  6365                           tablat	equ	0xFF5
  6366                           prodh	equ	0xFF4
  6367                           prodl	equ	0xFF3
  6368                           intcon	equ	0xFF2
  6369                           intcon2	equ	0xFF1
  6370                           intcon3	equ	0xFF0
  6371                           postinc0	equ	0xFEE
  6372                           wreg	equ	0xFE8
  6373                           indf1	equ	0xFE7
  6374                           postdec1	equ	0xFE5
  6375                           fsr1h	equ	0xFE2
  6376                           fsr1l	equ	0xFE1
  6377                           indf2	equ	0xFDF
  6378                           postinc2	equ	0xFDE
  6379                           postdec2	equ	0xFDD
  6380                           fsr2h	equ	0xFDA
  6381                           fsr2l	equ	0xFD9
  6382                           status	equ	0xFD8
  6383                           
  6384 ;; *************** function ___flmul *****************
  6385 ;; Defined at:
  6386 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcmul.c"
  6387 ;; Parameters:    Size  Location     Type
  6388 ;;  b               4    0[BANK0 ] unsigned char 
  6389 ;;  a               4    4[BANK0 ] unsigned char 
  6390 ;; Auto vars:     Size  Location     Type
  6391 ;;  prod            4   15[BANK0 ] struct .
  6392 ;;  grs             4   10[BANK0 ] unsigned long 
  6393 ;;  temp            2   19[BANK0 ] struct .
  6394 ;;  bexp            1   14[BANK0 ] unsigned char 
  6395 ;;  aexp            1    9[BANK0 ] unsigned char 
  6396 ;;  sign            1    8[BANK0 ] unsigned char 
  6397 ;; Return value:  Size  Location     Type
  6398 ;;                  4    0[BANK0 ] unsigned char 
  6399 ;; Registers used:
  6400 ;;		wreg, status,2, status,0, prodl, prodh
  6401 ;; Tracked objects:
  6402 ;;		On entry : 0/0
  6403 ;;		On exit  : 0/0
  6404 ;;		Unchanged: 0/0
  6405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6406 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6407 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6408 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6409 ;;      Totals:         4      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6410 ;;Total ram usage:       25 bytes
  6411 ;; Hardware stack levels used:    1
  6412 ;; Hardware stack levels required when called:    2
  6413 ;; This function calls:
  6414 ;;		Nothing
  6415 ;; This function is called by:
  6416 ;;		_operation
  6417 ;;		_main
  6418 ;;		_fround
  6419 ;;		_scale
  6420 ;;		_sprintf
  6421 ;;		_set_pwm1_percent
  6422 ;;		_set_pwm1_voltage
  6423 ;;		_set_pwm1_general
  6424 ;; This function uses a non-reentrant model
  6425 ;;
  6426                           
  6427                           	psect	text16
  6428  001354                     __ptext16:
  6429                           	opt stack 0
  6430  001354                     ___flmul:
  6431                           	opt stack 27
  6432                           
  6433                           ;incstack = 0
  6434  001354  0100               	movlb	0	; () banked
  6435  001356  5183               	movf	(___flmul@b+3)& (0+255),w,b
  6436  001358  0B80               	andlw	128
  6437  00135A  6F88               	movwf	___flmul@sign& (0+255),b
  6438  00135C  5183               	movf	(___flmul@b+3)& (0+255),w,b
  6439  00135E  2583               	addwf	(___flmul@b+3)& (0+255),w,b
  6440  001360  6F8E               	movwf	___flmul@bexp& (0+255),b
  6441                           
  6442                           ; BSR set to: 0
  6443  001362  BF82               	btfsc	(___flmul@b+2)& (0+255),7,b
  6444                           
  6445                           ; BSR set to: 0
  6446  001364  818E               	bsf	___flmul@bexp& (0+255),0,b
  6447                           
  6448                           ; BSR set to: 0
  6449                           
  6450                           ; BSR set to: 0
  6451  001366  518E               	movf	___flmul@bexp& (0+255),w,b
  6452  001368  B4D8               	btfsc	status,2,c
  6453  00136A  D00D               	goto	l1016
  6454                           
  6455                           ; BSR set to: 0
  6456  00136C  298E               	incf	___flmul@bexp& (0+255),w,b
  6457  00136E  A4D8               	btfss	status,2,c
  6458  001370  D008               	goto	l1017
  6459                           
  6460                           ; BSR set to: 0
  6461  001372  0E00               	movlw	0
  6462  001374  6F80               	movwf	___flmul@b& (0+255),b
  6463  001376  0E00               	movlw	0
  6464  001378  6F81               	movwf	(___flmul@b+1)& (0+255),b
  6465  00137A  0E00               	movlw	0
  6466  00137C  6F82               	movwf	(___flmul@b+2)& (0+255),b
  6467  00137E  0E00               	movlw	0
  6468  001380  6F83               	movwf	(___flmul@b+3)& (0+255),b
  6469  001382                     l1017:
  6470                           
  6471                           ; BSR set to: 0
  6472                           
  6473                           ; BSR set to: 0
  6474  001382  8F82               	bsf	(___flmul@b+2)& (0+255),7,b
  6475  001384  D008               	goto	l1018
  6476  001386                     l1016:
  6477                           
  6478                           ; BSR set to: 0
  6479                           
  6480                           ; BSR set to: 0
  6481  001386  0E00               	movlw	0
  6482  001388  6F80               	movwf	___flmul@b& (0+255),b
  6483  00138A  0E00               	movlw	0
  6484  00138C  6F81               	movwf	(___flmul@b+1)& (0+255),b
  6485  00138E  0E00               	movlw	0
  6486  001390  6F82               	movwf	(___flmul@b+2)& (0+255),b
  6487  001392  0E00               	movlw	0
  6488  001394  6F83               	movwf	(___flmul@b+3)& (0+255),b
  6489  001396                     l1018:
  6490                           
  6491                           ; BSR set to: 0
  6492                           
  6493                           ; BSR set to: 0
  6494  001396  5187               	movf	(___flmul@a+3)& (0+255),w,b
  6495  001398  0B80               	andlw	128
  6496  00139A  1B88               	xorwf	___flmul@sign& (0+255),f,b
  6497                           
  6498                           ; BSR set to: 0
  6499  00139C  5187               	movf	(___flmul@a+3)& (0+255),w,b
  6500  00139E  2587               	addwf	(___flmul@a+3)& (0+255),w,b
  6501  0013A0  6F89               	movwf	___flmul@aexp& (0+255),b
  6502                           
  6503                           ; BSR set to: 0
  6504  0013A2  BF86               	btfsc	(___flmul@a+2)& (0+255),7,b
  6505                           
  6506                           ; BSR set to: 0
  6507  0013A4  8189               	bsf	___flmul@aexp& (0+255),0,b
  6508                           
  6509                           ; BSR set to: 0
  6510                           
  6511                           ; BSR set to: 0
  6512  0013A6  5189               	movf	___flmul@aexp& (0+255),w,b
  6513  0013A8  B4D8               	btfsc	status,2,c
  6514  0013AA  D00D               	goto	l1020
  6515                           
  6516                           ; BSR set to: 0
  6517  0013AC  2989               	incf	___flmul@aexp& (0+255),w,b
  6518  0013AE  A4D8               	btfss	status,2,c
  6519  0013B0  D008               	goto	l1021
  6520                           
  6521                           ; BSR set to: 0
  6522  0013B2  0E00               	movlw	0
  6523  0013B4  6F84               	movwf	___flmul@a& (0+255),b
  6524  0013B6  0E00               	movlw	0
  6525  0013B8  6F85               	movwf	(___flmul@a+1)& (0+255),b
  6526  0013BA  0E00               	movlw	0
  6527  0013BC  6F86               	movwf	(___flmul@a+2)& (0+255),b
  6528  0013BE  0E00               	movlw	0
  6529  0013C0  6F87               	movwf	(___flmul@a+3)& (0+255),b
  6530  0013C2                     l1021:
  6531                           
  6532                           ; BSR set to: 0
  6533                           
  6534                           ; BSR set to: 0
  6535  0013C2  8F86               	bsf	(___flmul@a+2)& (0+255),7,b
  6536  0013C4  D008               	goto	l1022
  6537  0013C6                     l1020:
  6538                           
  6539                           ; BSR set to: 0
  6540                           
  6541                           ; BSR set to: 0
  6542  0013C6  0E00               	movlw	0
  6543  0013C8  6F84               	movwf	___flmul@a& (0+255),b
  6544  0013CA  0E00               	movlw	0
  6545  0013CC  6F85               	movwf	(___flmul@a+1)& (0+255),b
  6546  0013CE  0E00               	movlw	0
  6547  0013D0  6F86               	movwf	(___flmul@a+2)& (0+255),b
  6548  0013D2  0E00               	movlw	0
  6549  0013D4  6F87               	movwf	(___flmul@a+3)& (0+255),b
  6550  0013D6                     l1022:
  6551                           
  6552                           ; BSR set to: 0
  6553  0013D6  5189               	movf	___flmul@aexp& (0+255),w,b
  6554  0013D8  B4D8               	btfsc	status,2,c
  6555  0013DA  D003               	goto	u5370
  6556                           
  6557                           ; BSR set to: 0
  6558  0013DC  518E               	movf	___flmul@bexp& (0+255),w,b
  6559  0013DE  A4D8               	btfss	status,2,c
  6560  0013E0  D009               	goto	l1023
  6561  0013E2                     u5370:
  6562                           
  6563                           ; BSR set to: 0
  6564                           
  6565                           ; BSR set to: 0
  6566  0013E2  0E00               	movlw	0
  6567  0013E4  6F80               	movwf	?___flmul& (0+255),b
  6568  0013E6  0E00               	movlw	0
  6569  0013E8  6F81               	movwf	(?___flmul+1)& (0+255),b
  6570  0013EA  0E00               	movlw	0
  6571  0013EC  6F82               	movwf	(?___flmul+2)& (0+255),b
  6572  0013EE  0E00               	movlw	0
  6573  0013F0  6F83               	movwf	(?___flmul+3)& (0+255),b
  6574                           
  6575                           ; BSR set to: 0
  6576  0013F2  0012               	return	
  6577  0013F4                     l1023:
  6578                           
  6579                           ; BSR set to: 0
  6580                           
  6581                           ; BSR set to: 0
  6582  0013F4  5186               	movf	(___flmul@a+2)& (0+255),w,b
  6583  0013F6  0380               	mulwf	___flmul@b& (0+255),b
  6584  0013F8  CFF3 F093          	movff	prodl,___flmul@temp
  6585  0013FC  CFF4 F094          	movff	prodh,___flmul@temp+1
  6586                           
  6587                           ; BSR set to: 0
  6588  001400  5193               	movf	___flmul@temp& (0+255),w,b
  6589  001402  6F8A               	movwf	___flmul@grs& (0+255),b
  6590  001404  6B8B               	clrf	(___flmul@grs+1)& (0+255),b
  6591  001406  6B8C               	clrf	(___flmul@grs+2)& (0+255),b
  6592  001408  6B8D               	clrf	(___flmul@grs+3)& (0+255),b
  6593                           
  6594                           ; BSR set to: 0
  6595  00140A  5194               	movf	(___flmul@temp+1)& (0+255),w,b
  6596  00140C  6F8F               	movwf	___flmul@prod& (0+255),b
  6597  00140E  6B90               	clrf	(___flmul@prod+1)& (0+255),b
  6598  001410  6B91               	clrf	(___flmul@prod+2)& (0+255),b
  6599  001412  6B92               	clrf	(___flmul@prod+3)& (0+255),b
  6600  001414  5185               	movf	(___flmul@a+1)& (0+255),w,b
  6601  001416  0381               	mulwf	(___flmul@b+1)& (0+255),b
  6602  001418  CFF3 F093          	movff	prodl,___flmul@temp
  6603  00141C  CFF4 F094          	movff	prodh,___flmul@temp+1
  6604                           
  6605                           ; BSR set to: 0
  6606  001420  5193               	movf	___flmul@temp& (0+255),w,b
  6607  001422  278A               	addwf	___flmul@grs& (0+255),f,b
  6608  001424  0E00               	movlw	0
  6609  001426  238B               	addwfc	(___flmul@grs+1)& (0+255),f,b
  6610  001428  238C               	addwfc	(___flmul@grs+2)& (0+255),f,b
  6611  00142A  238D               	addwfc	(___flmul@grs+3)& (0+255),f,b
  6612                           
  6613                           ; BSR set to: 0
  6614  00142C  5194               	movf	(___flmul@temp+1)& (0+255),w,b
  6615  00142E  278F               	addwf	___flmul@prod& (0+255),f,b
  6616  001430  0E00               	movlw	0
  6617  001432  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6618  001434  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6619  001436  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6620  001438  5184               	movf	___flmul@a& (0+255),w,b
  6621  00143A  0382               	mulwf	(___flmul@b+2)& (0+255),b
  6622  00143C  CFF3 F093          	movff	prodl,___flmul@temp
  6623  001440  CFF4 F094          	movff	prodh,___flmul@temp+1
  6624                           
  6625                           ; BSR set to: 0
  6626  001444  5193               	movf	___flmul@temp& (0+255),w,b
  6627  001446  278A               	addwf	___flmul@grs& (0+255),f,b
  6628  001448  0E00               	movlw	0
  6629  00144A  238B               	addwfc	(___flmul@grs+1)& (0+255),f,b
  6630  00144C  238C               	addwfc	(___flmul@grs+2)& (0+255),f,b
  6631  00144E  238D               	addwfc	(___flmul@grs+3)& (0+255),f,b
  6632                           
  6633                           ; BSR set to: 0
  6634  001450  5194               	movf	(___flmul@temp+1)& (0+255),w,b
  6635  001452  278F               	addwf	___flmul@prod& (0+255),f,b
  6636  001454  0E00               	movlw	0
  6637  001456  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6638  001458  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6639  00145A  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6640                           
  6641                           ; BSR set to: 0
  6642  00145C  C08C  F08D         	movff	___flmul@grs+2,___flmul@grs+3
  6643  001460  C08B  F08C         	movff	___flmul@grs+1,___flmul@grs+2
  6644  001464  C08A  F08B         	movff	___flmul@grs,___flmul@grs+1
  6645  001468  6B8A               	clrf	___flmul@grs& (0+255),b
  6646                           
  6647                           ; BSR set to: 0
  6648  00146A  5184               	movf	___flmul@a& (0+255),w,b
  6649  00146C  0381               	mulwf	(___flmul@b+1)& (0+255),b
  6650  00146E  CFF3 F093          	movff	prodl,___flmul@temp
  6651  001472  CFF4 F094          	movff	prodh,___flmul@temp+1
  6652                           
  6653                           ; BSR set to: 0
  6654  001476  5193               	movf	___flmul@temp& (0+255),w,b
  6655  001478  278A               	addwf	___flmul@grs& (0+255),f,b
  6656  00147A  5194               	movf	(___flmul@temp+1)& (0+255),w,b
  6657  00147C  238B               	addwfc	(___flmul@grs+1)& (0+255),f,b
  6658  00147E  0E00               	movlw	0
  6659  001480  238C               	addwfc	(___flmul@grs+2)& (0+255),f,b
  6660  001482  0E00               	movlw	0
  6661  001484  238D               	addwfc	(___flmul@grs+3)& (0+255),f,b
  6662                           
  6663                           ; BSR set to: 0
  6664  001486  5185               	movf	(___flmul@a+1)& (0+255),w,b
  6665  001488  0380               	mulwf	___flmul@b& (0+255),b
  6666  00148A  CFF3 F093          	movff	prodl,___flmul@temp
  6667  00148E  CFF4 F094          	movff	prodh,___flmul@temp+1
  6668                           
  6669                           ; BSR set to: 0
  6670  001492  5193               	movf	___flmul@temp& (0+255),w,b
  6671  001494  278A               	addwf	___flmul@grs& (0+255),f,b
  6672  001496  5194               	movf	(___flmul@temp+1)& (0+255),w,b
  6673  001498  238B               	addwfc	(___flmul@grs+1)& (0+255),f,b
  6674  00149A  0E00               	movlw	0
  6675  00149C  238C               	addwfc	(___flmul@grs+2)& (0+255),f,b
  6676  00149E  0E00               	movlw	0
  6677  0014A0  238D               	addwfc	(___flmul@grs+3)& (0+255),f,b
  6678                           
  6679                           ; BSR set to: 0
  6680  0014A2  C08C  F08D         	movff	___flmul@grs+2,___flmul@grs+3
  6681  0014A6  C08B  F08C         	movff	___flmul@grs+1,___flmul@grs+2
  6682  0014AA  C08A  F08B         	movff	___flmul@grs,___flmul@grs+1
  6683  0014AE  6B8A               	clrf	___flmul@grs& (0+255),b
  6684  0014B0  5184               	movf	___flmul@a& (0+255),w,b
  6685  0014B2  0380               	mulwf	___flmul@b& (0+255),b
  6686  0014B4  CFF3 F093          	movff	prodl,___flmul@temp
  6687  0014B8  CFF4 F094          	movff	prodh,___flmul@temp+1
  6688                           
  6689                           ; BSR set to: 0
  6690  0014BC  5193               	movf	___flmul@temp& (0+255),w,b
  6691  0014BE  278A               	addwf	___flmul@grs& (0+255),f,b
  6692  0014C0  5194               	movf	(___flmul@temp+1)& (0+255),w,b
  6693  0014C2  238B               	addwfc	(___flmul@grs+1)& (0+255),f,b
  6694  0014C4  0E00               	movlw	0
  6695  0014C6  238C               	addwfc	(___flmul@grs+2)& (0+255),f,b
  6696  0014C8  0E00               	movlw	0
  6697  0014CA  238D               	addwfc	(___flmul@grs+3)& (0+255),f,b
  6698                           
  6699                           ; BSR set to: 0
  6700  0014CC  5186               	movf	(___flmul@a+2)& (0+255),w,b
  6701  0014CE  0381               	mulwf	(___flmul@b+1)& (0+255),b
  6702  0014D0  CFF3 F093          	movff	prodl,___flmul@temp
  6703  0014D4  CFF4 F094          	movff	prodh,___flmul@temp+1
  6704  0014D8  5193               	movf	___flmul@temp& (0+255),w,b
  6705  0014DA  278F               	addwf	___flmul@prod& (0+255),f,b
  6706  0014DC  5194               	movf	(___flmul@temp+1)& (0+255),w,b
  6707  0014DE  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6708  0014E0  0E00               	movlw	0
  6709  0014E2  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6710  0014E4  0E00               	movlw	0
  6711  0014E6  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6712                           
  6713                           ; BSR set to: 0
  6714  0014E8  5185               	movf	(___flmul@a+1)& (0+255),w,b
  6715  0014EA  0382               	mulwf	(___flmul@b+2)& (0+255),b
  6716  0014EC  CFF3 F093          	movff	prodl,___flmul@temp
  6717  0014F0  CFF4 F094          	movff	prodh,___flmul@temp+1
  6718                           
  6719                           ; BSR set to: 0
  6720  0014F4  5193               	movf	___flmul@temp& (0+255),w,b
  6721  0014F6  278F               	addwf	___flmul@prod& (0+255),f,b
  6722  0014F8  5194               	movf	(___flmul@temp+1)& (0+255),w,b
  6723  0014FA  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6724  0014FC  0E00               	movlw	0
  6725  0014FE  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6726  001500  0E00               	movlw	0
  6727  001502  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6728  001504  5186               	movf	(___flmul@a+2)& (0+255),w,b
  6729  001506  0382               	mulwf	(___flmul@b+2)& (0+255),b
  6730  001508  CFF3 F093          	movff	prodl,___flmul@temp
  6731  00150C  CFF4 F094          	movff	prodh,___flmul@temp+1
  6732                           
  6733                           ; BSR set to: 0
  6734  001510  5193               	movf	___flmul@temp& (0+255),w,b
  6735  001512  6E4C               	movwf	??___flmul& (0+255),c
  6736  001514  5194               	movf	(___flmul@temp+1)& (0+255),w,b
  6737  001516  6E4D               	movwf	(??___flmul+1)& (0+255),c
  6738  001518  6A4E               	clrf	(??___flmul+2)& (0+255),c
  6739  00151A  6A4F               	clrf	(??___flmul+3)& (0+255),c
  6740  00151C  C04E  F04F         	movff	??___flmul+2,??___flmul+3
  6741  001520  C04D  F04E         	movff	??___flmul+1,??___flmul+2
  6742  001524  C04C  F04D         	movff	??___flmul,??___flmul+1
  6743  001528  6A4C               	clrf	??___flmul,c
  6744  00152A  504C               	movf	??___flmul,w,c
  6745  00152C  278F               	addwf	___flmul@prod& (0+255),f,b
  6746  00152E  504D               	movf	??___flmul+1,w,c
  6747  001530  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6748  001532  504E               	movf	??___flmul+2,w,c
  6749  001534  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6750  001536  504F               	movf	??___flmul+3,w,c
  6751  001538  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6752                           
  6753                           ; BSR set to: 0
  6754  00153A  C08A  F04C         	movff	___flmul@grs,??___flmul
  6755  00153E  C08B  F04D         	movff	___flmul@grs+1,??___flmul+1
  6756  001542  C08C  F04E         	movff	___flmul@grs+2,??___flmul+2
  6757  001546  C08D  F04F         	movff	___flmul@grs+3,??___flmul+3
  6758  00154A  0E19               	movlw	25
  6759  00154C  D005               	goto	u5380
  6760  00154E                     u5385:
  6761  00154E  90D8               	bcf	status,0,c
  6762  001550  324F               	rrcf	??___flmul+3,f,c
  6763  001552  324E               	rrcf	??___flmul+2,f,c
  6764  001554  324D               	rrcf	??___flmul+1,f,c
  6765  001556  324C               	rrcf	??___flmul,f,c
  6766  001558                     u5380:
  6767  001558  2EE8               	decfsz	wreg,f,c
  6768  00155A  D7F9               	goto	u5385
  6769  00155C  504C               	movf	??___flmul,w,c
  6770  00155E  278F               	addwf	___flmul@prod& (0+255),f,b
  6771  001560  504D               	movf	??___flmul+1,w,c
  6772  001562  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6773  001564  504E               	movf	??___flmul+2,w,c
  6774  001566  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6775  001568  504F               	movf	??___flmul+3,w,c
  6776  00156A  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6777                           
  6778                           ; BSR set to: 0
  6779  00156C  C08C  F08D         	movff	___flmul@grs+2,___flmul@grs+3
  6780  001570  C08B  F08C         	movff	___flmul@grs+1,___flmul@grs+2
  6781  001574  C08A  F08B         	movff	___flmul@grs,___flmul@grs+1
  6782  001578  6B8A               	clrf	___flmul@grs& (0+255),b
  6783                           
  6784                           ; BSR set to: 0
  6785  00157A  5189               	movf	___flmul@aexp& (0+255),w,b
  6786  00157C  C08E  F04C         	movff	___flmul@bexp,??___flmul
  6787  001580  6A4D               	clrf	(??___flmul+1)& (0+255),c
  6788  001582  264C               	addwf	??___flmul,f,c
  6789  001584  0E00               	movlw	0
  6790  001586  224D               	addwfc	??___flmul+1,f,c
  6791  001588  0E82               	movlw	130
  6792  00158A  244C               	addwf	??___flmul,w,c
  6793  00158C  6F93               	movwf	___flmul@temp& (0+255),b
  6794  00158E  0EFF               	movlw	255
  6795  001590  204D               	addwfc	??___flmul+1,w,c
  6796  001592  6F94               	movwf	(___flmul@temp+1)& (0+255),b
  6797  001594  D00F               	goto	l1027
  6798  001596                     
  6799                           ; BSR set to: 0
  6800                           
  6801                           ; BSR set to: 0
  6802  001596  90D8               	bcf	status,0,c
  6803  001598  378F               	rlcf	___flmul@prod& (0+255),f,b
  6804  00159A  3790               	rlcf	(___flmul@prod+1)& (0+255),f,b
  6805  00159C  3791               	rlcf	(___flmul@prod+2)& (0+255),f,b
  6806  00159E  3792               	rlcf	(___flmul@prod+3)& (0+255),f,b
  6807                           
  6808                           ; BSR set to: 0
  6809  0015A0  BF8D               	btfsc	(___flmul@grs+3)& (0+255),7,b
  6810                           
  6811                           ; BSR set to: 0
  6812  0015A2  818F               	bsf	___flmul@prod& (0+255),0,b
  6813                           
  6814                           ; BSR set to: 0
  6815  0015A4  90D8               	bcf	status,0,c
  6816  0015A6  378A               	rlcf	___flmul@grs& (0+255),f,b
  6817  0015A8  378B               	rlcf	(___flmul@grs+1)& (0+255),f,b
  6818  0015AA  378C               	rlcf	(___flmul@grs+2)& (0+255),f,b
  6819  0015AC  378D               	rlcf	(___flmul@grs+3)& (0+255),f,b
  6820  0015AE  0793               	decf	___flmul@temp& (0+255),f,b
  6821  0015B0  A0D8               	btfss	status,0,c
  6822  0015B2  0794               	decf	(___flmul@temp+1)& (0+255),f,b
  6823  0015B4                     l1027:
  6824                           
  6825                           ; BSR set to: 0
  6826                           
  6827                           ; BSR set to: 0
  6828  0015B4  AF91               	btfss	(___flmul@prod+2)& (0+255),7,b
  6829  0015B6  D7EF               	goto	l1028
  6830                           
  6831                           ; BSR set to: 0
  6832                           
  6833                           ; BSR set to: 0
  6834  0015B8  0E00               	movlw	0
  6835  0015BA  6F89               	movwf	___flmul@aexp& (0+255),b
  6836                           
  6837                           ; BSR set to: 0
  6838  0015BC  AF8D               	btfss	(___flmul@grs+3)& (0+255),7,b
  6839  0015BE  D016               	goto	l1034
  6840                           
  6841                           ; BSR set to: 0
  6842  0015C0  0EFF               	movlw	255
  6843  0015C2  158A               	andwf	___flmul@grs& (0+255),w,b
  6844  0015C4  6E4C               	movwf	??___flmul& (0+255),c
  6845  0015C6  0EFF               	movlw	255
  6846  0015C8  158B               	andwf	(___flmul@grs+1)& (0+255),w,b
  6847  0015CA  6E4D               	movwf	(??___flmul+1)& (0+255),c
  6848  0015CC  0EFF               	movlw	255
  6849  0015CE  158C               	andwf	(___flmul@grs+2)& (0+255),w,b
  6850  0015D0  6E4E               	movwf	(??___flmul+2)& (0+255),c
  6851  0015D2  0E7F               	movlw	127
  6852  0015D4  158D               	andwf	(___flmul@grs+3)& (0+255),w,b
  6853  0015D6  6E4F               	movwf	(??___flmul+3)& (0+255),c
  6854  0015D8  504C               	movf	??___flmul,w,c
  6855  0015DA  104D               	iorwf	??___flmul+1,w,c
  6856  0015DC  104E               	iorwf	??___flmul+2,w,c
  6857  0015DE  104F               	iorwf	??___flmul+3,w,c
  6858  0015E0  A4D8               	btfss	status,2,c
  6859  0015E2  D002               	goto	u5430
  6860                           
  6861                           ; BSR set to: 0
  6862                           
  6863                           ; BSR set to: 0
  6864  0015E4  A18F               	btfss	___flmul@prod& (0+255),0,b
  6865  0015E6  D002               	goto	l1034
  6866  0015E8                     u5430:
  6867                           
  6868                           ; BSR set to: 0
  6869  0015E8  0E01               	movlw	1
  6870  0015EA  6F89               	movwf	___flmul@aexp& (0+255),b
  6871  0015EC                     l1034:
  6872                           
  6873                           ; BSR set to: 0
  6874                           
  6875                           ; BSR set to: 0
  6876                           
  6877                           ; BSR set to: 0
  6878  0015EC  5189               	movf	___flmul@aexp& (0+255),w,b
  6879  0015EE  B4D8               	btfsc	status,2,c
  6880  0015F0  D01F               	goto	l1036
  6881                           
  6882                           ; BSR set to: 0
  6883  0015F2  0E01               	movlw	1
  6884  0015F4  278F               	addwf	___flmul@prod& (0+255),f,b
  6885  0015F6  0E00               	movlw	0
  6886  0015F8  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6887  0015FA  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6888  0015FC  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6889                           
  6890                           ; BSR set to: 0
  6891  0015FE  A192               	btfss	(___flmul@prod+3)& (0+255),0,b
  6892  001600  D017               	goto	l1036
  6893                           
  6894                           ; BSR set to: 0
  6895  001602  C08F  F04C         	movff	___flmul@prod,??___flmul
  6896  001606  C090  F04D         	movff	___flmul@prod+1,??___flmul+1
  6897  00160A  C091  F04E         	movff	___flmul@prod+2,??___flmul+2
  6898  00160E  C092  F04F         	movff	___flmul@prod+3,??___flmul+3
  6899  001612  344F               	rlcf	??___flmul+3,w,c
  6900  001614  324F               	rrcf	??___flmul+3,f,c
  6901  001616  324E               	rrcf	??___flmul+2,f,c
  6902  001618  324D               	rrcf	??___flmul+1,f,c
  6903  00161A  324C               	rrcf	??___flmul,f,c
  6904  00161C  C04C  F08F         	movff	??___flmul,___flmul@prod
  6905  001620  C04D  F090         	movff	??___flmul+1,___flmul@prod+1
  6906  001624  C04E  F091         	movff	??___flmul+2,___flmul@prod+2
  6907  001628  C04F  F092         	movff	??___flmul+3,___flmul@prod+3
  6908                           
  6909                           ; BSR set to: 0
  6910  00162C  4B93               	infsnz	___flmul@temp& (0+255),f,b
  6911  00162E  2B94               	incf	(___flmul@temp+1)& (0+255),f,b
  6912  001630                     l1036:
  6913                           
  6914                           ; BSR set to: 0
  6915                           
  6916                           ; BSR set to: 0
  6917                           
  6918                           ; BSR set to: 0
  6919  001630  BF94               	btfsc	(___flmul@temp+1)& (0+255),7,b
  6920  001632  D00D               	goto	l1037
  6921  001634  5194               	movf	(___flmul@temp+1)& (0+255),w,b
  6922  001636  E103               	bnz	u5460
  6923  001638  2993               	incf	___flmul@temp& (0+255),w,b
  6924  00163A  A0D8               	btfss	status,0,c
  6925  00163C  D008               	goto	l1037
  6926  00163E                     u5460:
  6927                           
  6928                           ; BSR set to: 0
  6929  00163E  0E00               	movlw	0
  6930  001640  6F8F               	movwf	___flmul@prod& (0+255),b
  6931  001642  0E00               	movlw	0
  6932  001644  6F90               	movwf	(___flmul@prod+1)& (0+255),b
  6933  001646  0E80               	movlw	128
  6934  001648  6F91               	movwf	(___flmul@prod+2)& (0+255),b
  6935  00164A  0E7F               	movlw	127
  6936  00164C  D020               	goto	L9
  6937  00164E                     l1037:
  6938                           
  6939                           ; BSR set to: 0
  6940                           
  6941                           ; BSR set to: 0
  6942  00164E  BF94               	btfsc	(___flmul@temp+1)& (0+255),7,b
  6943  001650  D005               	goto	u5470
  6944  001652  5194               	movf	(___flmul@temp+1)& (0+255),w,b
  6945  001654  E10E               	bnz	l1039
  6946  001656  0593               	decf	___flmul@temp& (0+255),w,b
  6947  001658  B0D8               	btfsc	status,0,c
  6948  00165A  D00B               	goto	l1039
  6949  00165C                     u5470:
  6950                           
  6951                           ; BSR set to: 0
  6952  00165C  0E00               	movlw	0
  6953  00165E  6F8F               	movwf	___flmul@prod& (0+255),b
  6954  001660  0E00               	movlw	0
  6955  001662  6F90               	movwf	(___flmul@prod+1)& (0+255),b
  6956  001664  0E00               	movlw	0
  6957  001666  6F91               	movwf	(___flmul@prod+2)& (0+255),b
  6958  001668  0E00               	movlw	0
  6959  00166A  6F92               	movwf	(___flmul@prod+3)& (0+255),b
  6960  00166C  0E00               	movlw	0
  6961  00166E  6F88               	movwf	___flmul@sign& (0+255),b
  6962  001670  D00F               	goto	l1040
  6963  001672                     l1039:
  6964                           
  6965                           ; BSR set to: 0
  6966  001672  C093  F08E         	movff	___flmul@temp,___flmul@bexp
  6967                           
  6968                           ; BSR set to: 0
  6969  001676  0EFF               	movlw	255
  6970  001678  178F               	andwf	___flmul@prod& (0+255),f,b
  6971  00167A  0EFF               	movlw	255
  6972  00167C  1790               	andwf	(___flmul@prod+1)& (0+255),f,b
  6973  00167E  0E7F               	movlw	127
  6974  001680  1791               	andwf	(___flmul@prod+2)& (0+255),f,b
  6975  001682  0E00               	movlw	0
  6976  001684  1792               	andwf	(___flmul@prod+3)& (0+255),f,b
  6977                           
  6978                           ; BSR set to: 0
  6979  001686  B18E               	btfsc	___flmul@bexp& (0+255),0,b
  6980                           
  6981                           ; BSR set to: 0
  6982  001688  8F91               	bsf	(___flmul@prod+2)& (0+255),7,b
  6983                           
  6984                           ; BSR set to: 0
  6985                           
  6986                           ; BSR set to: 0
  6987  00168A  90D8               	bcf	status,0,c
  6988  00168C  318E               	rrcf	___flmul@bexp& (0+255),w,b
  6989  00168E                     L9:
  6990  00168E  6F92               	movwf	(___flmul@prod+3)& (0+255),b
  6991  001690                     l1040:
  6992                           
  6993                           ; BSR set to: 0
  6994                           
  6995                           ; BSR set to: 0
  6996                           
  6997                           ; BSR set to: 0
  6998  001690  5188               	movf	___flmul@sign& (0+255),w,b
  6999  001692  1392               	iorwf	(___flmul@prod+3)& (0+255),f,b
  7000                           
  7001                           ; BSR set to: 0
  7002  001694  C08F  F080         	movff	___flmul@prod,?___flmul
  7003  001698  C090  F081         	movff	___flmul@prod+1,?___flmul+1
  7004  00169C  C091  F082         	movff	___flmul@prod+2,?___flmul+2
  7005  0016A0  C092  F083         	movff	___flmul@prod+3,?___flmul+3
  7006  0016A4  0012               	return	
  7007  0016A6                     __end_of___flmul:
  7008                           	opt stack 0
  7009                           tblptru	equ	0xFF8
  7010                           tblptrh	equ	0xFF7
  7011                           tblptrl	equ	0xFF6
  7012                           tablat	equ	0xFF5
  7013                           prodh	equ	0xFF4
  7014                           prodl	equ	0xFF3
  7015                           intcon	equ	0xFF2
  7016                           intcon2	equ	0xFF1
  7017                           intcon3	equ	0xFF0
  7018                           postinc0	equ	0xFEE
  7019                           wreg	equ	0xFE8
  7020                           indf1	equ	0xFE7
  7021                           postdec1	equ	0xFE5
  7022                           fsr1h	equ	0xFE2
  7023                           fsr1l	equ	0xFE1
  7024                           indf2	equ	0xFDF
  7025                           postinc2	equ	0xFDE
  7026                           postdec2	equ	0xFDD
  7027                           fsr2h	equ	0xFDA
  7028                           fsr2l	equ	0xFD9
  7029                           status	equ	0xFD8
  7030                           
  7031 ;; *************** function ___awmod *****************
  7032 ;; Defined at:
  7033 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  7034 ;; Parameters:    Size  Location     Type
  7035 ;;  dividend        2   30[COMRAM] int 
  7036 ;;  divisor         2   32[COMRAM] int 
  7037 ;; Auto vars:     Size  Location     Type
  7038 ;;  sign            1   35[COMRAM] unsigned char 
  7039 ;;  counter         1   34[COMRAM] unsigned char 
  7040 ;; Return value:  Size  Location     Type
  7041 ;;                  2   30[COMRAM] int 
  7042 ;; Registers used:
  7043 ;;		wreg, status,2, status,0
  7044 ;; Tracked objects:
  7045 ;;		On entry : 0/0
  7046 ;;		On exit  : 0/0
  7047 ;;		Unchanged: 0/0
  7048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7049 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7050 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7052 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7053 ;;Total ram usage:        6 bytes
  7054 ;; Hardware stack levels used:    1
  7055 ;; Hardware stack levels required when called:    2
  7056 ;; This function calls:
  7057 ;;		Nothing
  7058 ;; This function is called by:
  7059 ;;		_fround
  7060 ;;		_scale
  7061 ;; This function uses a non-reentrant model
  7062 ;;
  7063                           
  7064                           	psect	text17
  7065  002B4A                     __ptext17:
  7066                           	opt stack 0
  7067  002B4A                     ___awmod:
  7068                           	opt stack 25
  7069                           
  7070                           ; BSR set to: 0
  7071                           ;incstack = 0
  7072  002B4A  0E00               	movlw	0
  7073  002B4C  6E24               	movwf	___awmod@sign,c
  7074  002B4E  AE20               	btfss	___awmod@dividend+1,7,c
  7075  002B50  D006               	goto	l634
  7076  002B52  6C1F               	negf	___awmod@dividend,c
  7077  002B54  1E20               	comf	___awmod@dividend+1,f,c
  7078  002B56  B0D8               	btfsc	status,0,c
  7079  002B58  2A20               	incf	___awmod@dividend+1,f,c
  7080  002B5A  0E01               	movlw	1
  7081  002B5C  6E24               	movwf	___awmod@sign,c
  7082  002B5E                     l634:
  7083  002B5E  AE22               	btfss	___awmod@divisor+1,7,c
  7084  002B60  D004               	goto	l635
  7085  002B62  6C21               	negf	___awmod@divisor,c
  7086  002B64  1E22               	comf	___awmod@divisor+1,f,c
  7087  002B66  B0D8               	btfsc	status,0,c
  7088  002B68  2A22               	incf	___awmod@divisor+1,f,c
  7089  002B6A                     l635:
  7090  002B6A  5021               	movf	___awmod@divisor,w,c
  7091  002B6C  1022               	iorwf	___awmod@divisor+1,w,c
  7092  002B6E  B4D8               	btfsc	status,2,c
  7093  002B70  D018               	goto	l642
  7094  002B72  0E01               	movlw	1
  7095  002B74  6E23               	movwf	___awmod@counter,c
  7096  002B76  D004               	goto	l637
  7097  002B78  90D8               	bcf	status,0,c
  7098  002B7A  3621               	rlcf	___awmod@divisor,f,c
  7099  002B7C  3622               	rlcf	___awmod@divisor+1,f,c
  7100  002B7E  2A23               	incf	___awmod@counter,f,c
  7101  002B80                     l637:
  7102  002B80  AE22               	btfss	___awmod@divisor+1,7,c
  7103  002B82  D7FA               	goto	l638
  7104  002B84                     u5580:
  7105  002B84  5021               	movf	___awmod@divisor,w,c
  7106  002B86  5C1F               	subwf	___awmod@dividend,w,c
  7107  002B88  5022               	movf	___awmod@divisor+1,w,c
  7108  002B8A  5820               	subwfb	___awmod@dividend+1,w,c
  7109  002B8C  A0D8               	btfss	status,0,c
  7110  002B8E  D004               	goto	l641
  7111  002B90  5021               	movf	___awmod@divisor,w,c
  7112  002B92  5E1F               	subwf	___awmod@dividend,f,c
  7113  002B94  5022               	movf	___awmod@divisor+1,w,c
  7114  002B96  5A20               	subwfb	___awmod@dividend+1,f,c
  7115  002B98                     l641:
  7116  002B98  90D8               	bcf	status,0,c
  7117  002B9A  3222               	rrcf	___awmod@divisor+1,f,c
  7118  002B9C  3221               	rrcf	___awmod@divisor,f,c
  7119  002B9E  2E23               	decfsz	___awmod@counter,f,c
  7120  002BA0  D7F1               	goto	u5580
  7121  002BA2                     l642:
  7122  002BA2  5024               	movf	___awmod@sign,w,c
  7123  002BA4  B4D8               	btfsc	status,2,c
  7124  002BA6  D004               	goto	l643
  7125  002BA8  6C1F               	negf	___awmod@dividend,c
  7126  002BAA  1E20               	comf	___awmod@dividend+1,f,c
  7127  002BAC  B0D8               	btfsc	status,0,c
  7128  002BAE  2A20               	incf	___awmod@dividend+1,f,c
  7129  002BB0                     l643:
  7130  002BB0  C01F  F01F         	movff	___awmod@dividend,?___awmod
  7131  002BB4  C020  F020         	movff	___awmod@dividend+1,?___awmod+1
  7132  002BB8  0012               	return	
  7133  002BBA                     __end_of___awmod:
  7134                           	opt stack 0
  7135                           tblptru	equ	0xFF8
  7136                           tblptrh	equ	0xFF7
  7137                           tblptrl	equ	0xFF6
  7138                           tablat	equ	0xFF5
  7139                           prodh	equ	0xFF4
  7140                           prodl	equ	0xFF3
  7141                           intcon	equ	0xFF2
  7142                           intcon2	equ	0xFF1
  7143                           intcon3	equ	0xFF0
  7144                           postinc0	equ	0xFEE
  7145                           wreg	equ	0xFE8
  7146                           indf1	equ	0xFE7
  7147                           postdec1	equ	0xFE5
  7148                           fsr1h	equ	0xFE2
  7149                           fsr1l	equ	0xFE1
  7150                           indf2	equ	0xFDF
  7151                           postinc2	equ	0xFDE
  7152                           postdec2	equ	0xFDD
  7153                           fsr2h	equ	0xFDA
  7154                           fsr2l	equ	0xFD9
  7155                           status	equ	0xFD8
  7156                           
  7157 ;; *************** function ___awdiv *****************
  7158 ;; Defined at:
  7159 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  7160 ;; Parameters:    Size  Location     Type
  7161 ;;  dividend        2   36[COMRAM] int 
  7162 ;;  divisor         2   38[COMRAM] int 
  7163 ;; Auto vars:     Size  Location     Type
  7164 ;;  quotient        2   42[COMRAM] int 
  7165 ;;  sign            1   41[COMRAM] unsigned char 
  7166 ;;  counter         1   40[COMRAM] unsigned char 
  7167 ;; Return value:  Size  Location     Type
  7168 ;;                  2   36[COMRAM] int 
  7169 ;; Registers used:
  7170 ;;		wreg, status,2, status,0
  7171 ;; Tracked objects:
  7172 ;;		On entry : 0/0
  7173 ;;		On exit  : 0/0
  7174 ;;		Unchanged: 0/0
  7175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7176 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7177 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7179 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7180 ;;Total ram usage:        8 bytes
  7181 ;; Hardware stack levels used:    1
  7182 ;; Hardware stack levels required when called:    2
  7183 ;; This function calls:
  7184 ;;		Nothing
  7185 ;; This function is called by:
  7186 ;;		_fround
  7187 ;;		_scale
  7188 ;;		_sprintf
  7189 ;; This function uses a non-reentrant model
  7190 ;;
  7191                           
  7192                           	psect	text18
  7193  002A44                     __ptext18:
  7194                           	opt stack 0
  7195  002A44                     ___awdiv:
  7196                           	opt stack 25
  7197                           
  7198                           ;incstack = 0
  7199  002A44  0E00               	movlw	0
  7200  002A46  6E2A               	movwf	___awdiv@sign,c
  7201  002A48  AE28               	btfss	___awdiv@divisor+1,7,c
  7202  002A4A  D006               	goto	l621
  7203  002A4C  6C27               	negf	___awdiv@divisor,c
  7204  002A4E  1E28               	comf	___awdiv@divisor+1,f,c
  7205  002A50  B0D8               	btfsc	status,0,c
  7206  002A52  2A28               	incf	___awdiv@divisor+1,f,c
  7207  002A54  0E01               	movlw	1
  7208  002A56  6E2A               	movwf	___awdiv@sign,c
  7209  002A58                     l621:
  7210  002A58  AE26               	btfss	___awdiv@dividend+1,7,c
  7211  002A5A  D006               	goto	l622
  7212  002A5C  6C25               	negf	___awdiv@dividend,c
  7213  002A5E  1E26               	comf	___awdiv@dividend+1,f,c
  7214  002A60  B0D8               	btfsc	status,0,c
  7215  002A62  2A26               	incf	___awdiv@dividend+1,f,c
  7216  002A64  0E01               	movlw	1
  7217  002A66  1A2A               	xorwf	___awdiv@sign,f,c
  7218  002A68                     l622:
  7219  002A68  0E00               	movlw	0
  7220  002A6A  6E2C               	movwf	___awdiv@quotient+1,c
  7221  002A6C  0E00               	movlw	0
  7222  002A6E  6E2B               	movwf	___awdiv@quotient,c
  7223  002A70  5027               	movf	___awdiv@divisor,w,c
  7224  002A72  1028               	iorwf	___awdiv@divisor+1,w,c
  7225  002A74  B4D8               	btfsc	status,2,c
  7226  002A76  D01C               	goto	l629
  7227  002A78  0E01               	movlw	1
  7228  002A7A  6E29               	movwf	___awdiv@counter,c
  7229  002A7C  D004               	goto	l624
  7230  002A7E  90D8               	bcf	status,0,c
  7231  002A80  3627               	rlcf	___awdiv@divisor,f,c
  7232  002A82  3628               	rlcf	___awdiv@divisor+1,f,c
  7233  002A84  2A29               	incf	___awdiv@counter,f,c
  7234  002A86                     l624:
  7235  002A86  AE28               	btfss	___awdiv@divisor+1,7,c
  7236  002A88  D7FA               	goto	l625
  7237  002A8A                     u5520:
  7238  002A8A  90D8               	bcf	status,0,c
  7239  002A8C  362B               	rlcf	___awdiv@quotient,f,c
  7240  002A8E  362C               	rlcf	___awdiv@quotient+1,f,c
  7241  002A90  5027               	movf	___awdiv@divisor,w,c
  7242  002A92  5C25               	subwf	___awdiv@dividend,w,c
  7243  002A94  5028               	movf	___awdiv@divisor+1,w,c
  7244  002A96  5826               	subwfb	___awdiv@dividend+1,w,c
  7245  002A98  A0D8               	btfss	status,0,c
  7246  002A9A  D005               	goto	l628
  7247  002A9C  5027               	movf	___awdiv@divisor,w,c
  7248  002A9E  5E25               	subwf	___awdiv@dividend,f,c
  7249  002AA0  5028               	movf	___awdiv@divisor+1,w,c
  7250  002AA2  5A26               	subwfb	___awdiv@dividend+1,f,c
  7251  002AA4  802B               	bsf	___awdiv@quotient,0,c
  7252  002AA6                     l628:
  7253  002AA6  90D8               	bcf	status,0,c
  7254  002AA8  3228               	rrcf	___awdiv@divisor+1,f,c
  7255  002AAA  3227               	rrcf	___awdiv@divisor,f,c
  7256  002AAC  2E29               	decfsz	___awdiv@counter,f,c
  7257  002AAE  D7ED               	goto	u5520
  7258  002AB0                     l629:
  7259  002AB0  502A               	movf	___awdiv@sign,w,c
  7260  002AB2  B4D8               	btfsc	status,2,c
  7261  002AB4  D004               	goto	l630
  7262  002AB6  6C2B               	negf	___awdiv@quotient,c
  7263  002AB8  1E2C               	comf	___awdiv@quotient+1,f,c
  7264  002ABA  B0D8               	btfsc	status,0,c
  7265  002ABC  2A2C               	incf	___awdiv@quotient+1,f,c
  7266  002ABE                     l630:
  7267  002ABE  C02B  F025         	movff	___awdiv@quotient,?___awdiv
  7268  002AC2  C02C  F026         	movff	___awdiv@quotient+1,?___awdiv+1
  7269  002AC6  0012               	return	
  7270  002AC8                     __end_of___awdiv:
  7271                           	opt stack 0
  7272                           tblptru	equ	0xFF8
  7273                           tblptrh	equ	0xFF7
  7274                           tblptrl	equ	0xFF6
  7275                           tablat	equ	0xFF5
  7276                           prodh	equ	0xFF4
  7277                           prodl	equ	0xFF3
  7278                           intcon	equ	0xFF2
  7279                           intcon2	equ	0xFF1
  7280                           intcon3	equ	0xFF0
  7281                           postinc0	equ	0xFEE
  7282                           wreg	equ	0xFE8
  7283                           indf1	equ	0xFE7
  7284                           postdec1	equ	0xFE5
  7285                           fsr1h	equ	0xFE2
  7286                           fsr1l	equ	0xFE1
  7287                           indf2	equ	0xFDF
  7288                           postinc2	equ	0xFDE
  7289                           postdec2	equ	0xFDD
  7290                           fsr2h	equ	0xFDA
  7291                           fsr2l	equ	0xFD9
  7292                           status	equ	0xFD8
  7293                           
  7294 ;; *************** function __tdiv_to_l_ *****************
  7295 ;; Defined at:
  7296 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  7297 ;; Parameters:    Size  Location     Type
  7298 ;;  f1              4   30[COMRAM] float 
  7299 ;;  f2              4   34[COMRAM] float 
  7300 ;; Auto vars:     Size  Location     Type
  7301 ;;  quot            4   41[COMRAM] unsigned long 
  7302 ;;  exp1            1   46[COMRAM] unsigned char 
  7303 ;;  cntr            1   45[COMRAM] unsigned char 
  7304 ;; Return value:  Size  Location     Type
  7305 ;;                  4   30[COMRAM] unsigned long 
  7306 ;; Registers used:
  7307 ;;		wreg, status,2, status,0
  7308 ;; Tracked objects:
  7309 ;;		On entry : 0/0
  7310 ;;		On exit  : 0/0
  7311 ;;		Unchanged: 0/0
  7312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7313 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7314 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7315 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7316 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7317 ;;Total ram usage:       17 bytes
  7318 ;; Hardware stack levels used:    1
  7319 ;; Hardware stack levels required when called:    2
  7320 ;; This function calls:
  7321 ;;		Nothing
  7322 ;; This function is called by:
  7323 ;;		_sprintf
  7324 ;; This function uses a non-reentrant model
  7325 ;;
  7326                           
  7327                           	psect	text19
  7328  002276                     __ptext19:
  7329                           	opt stack 0
  7330  002276                     __tdiv_to_l_:
  7331                           	opt stack 26
  7332                           
  7333                           ;incstack = 0
  7334  002276  C021  F027         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7335  00227A  6A28               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7336  00227C  6A29               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7337  00227E  3420               	rlcf	__tdiv_to_l_@f1+1,w,c
  7338  002280  3627               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7339  002282  E301               	bnc	u5701
  7340  002284  8028               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7341  002286                     u5701:
  7342  002286  5027               	movf	??__tdiv_to_l_,w,c
  7343  002288  6E2F               	movwf	__tdiv_to_l_@exp1,c
  7344  00228A  502F               	movf	__tdiv_to_l_@exp1,w,c
  7345  00228C  A4D8               	btfss	status,2,c
  7346  00228E  D009               	goto	l757
  7347  002290  0E00               	movlw	0
  7348  002292  6E1F               	movwf	?__tdiv_to_l_,c
  7349  002294  0E00               	movlw	0
  7350  002296  6E20               	movwf	?__tdiv_to_l_+1,c
  7351  002298  0E00               	movlw	0
  7352  00229A  6E21               	movwf	?__tdiv_to_l_+2,c
  7353  00229C  0E00               	movlw	0
  7354  00229E  6E22               	movwf	?__tdiv_to_l_+3,c
  7355  0022A0  0012               	return	
  7356  0022A2                     l757:
  7357  0022A2  C025  F027         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7358  0022A6  6A28               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7359  0022A8  6A29               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7360  0022AA  3424               	rlcf	__tdiv_to_l_@f2+1,w,c
  7361  0022AC  3627               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7362  0022AE  E301               	bnc	u5721
  7363  0022B0  8028               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7364  0022B2                     u5721:
  7365  0022B2  5027               	movf	??__tdiv_to_l_,w,c
  7366  0022B4  6E2E               	movwf	__tdiv_to_l_@cntr,c
  7367  0022B6  502E               	movf	__tdiv_to_l_@cntr,w,c
  7368  0022B8  A4D8               	btfss	status,2,c
  7369  0022BA  D009               	goto	l759
  7370  0022BC  0E00               	movlw	0
  7371  0022BE  6E1F               	movwf	?__tdiv_to_l_,c
  7372  0022C0  0E00               	movlw	0
  7373  0022C2  6E20               	movwf	?__tdiv_to_l_+1,c
  7374  0022C4  0E00               	movlw	0
  7375  0022C6  6E21               	movwf	?__tdiv_to_l_+2,c
  7376  0022C8  0E00               	movlw	0
  7377  0022CA  6E22               	movwf	?__tdiv_to_l_+3,c
  7378  0022CC  0012               	return	
  7379  0022CE                     l759:
  7380  0022CE  8E20               	bsf	__tdiv_to_l_@f1+1,7,c
  7381  0022D0  0EFF               	movlw	255
  7382  0022D2  161F               	andwf	__tdiv_to_l_@f1,f,c
  7383  0022D4  0EFF               	movlw	255
  7384  0022D6  1620               	andwf	__tdiv_to_l_@f1+1,f,c
  7385  0022D8  0E00               	movlw	0
  7386  0022DA  1621               	andwf	__tdiv_to_l_@f1+2,f,c
  7387  0022DC  8E24               	bsf	__tdiv_to_l_@f2+1,7,c
  7388  0022DE  0EFF               	movlw	255
  7389  0022E0  1623               	andwf	__tdiv_to_l_@f2,f,c
  7390  0022E2  0EFF               	movlw	255
  7391  0022E4  1624               	andwf	__tdiv_to_l_@f2+1,f,c
  7392  0022E6  0E00               	movlw	0
  7393  0022E8  1625               	andwf	__tdiv_to_l_@f2+2,f,c
  7394  0022EA  0E00               	movlw	0
  7395  0022EC  6E2A               	movwf	__tdiv_to_l_@quot,c
  7396  0022EE  0E00               	movlw	0
  7397  0022F0  6E2B               	movwf	__tdiv_to_l_@quot+1,c
  7398  0022F2  0E00               	movlw	0
  7399  0022F4  6E2C               	movwf	__tdiv_to_l_@quot+2,c
  7400  0022F6  0E00               	movlw	0
  7401  0022F8  6E2D               	movwf	__tdiv_to_l_@quot+3,c
  7402  0022FA  0E7F               	movlw	127
  7403  0022FC  5E2F               	subwf	__tdiv_to_l_@exp1,f,c
  7404  0022FE  502E               	movf	__tdiv_to_l_@cntr,w,c
  7405  002300  0F98               	addlw	152
  7406  002302  5E2F               	subwf	__tdiv_to_l_@exp1,f,c
  7407  002304  0E18               	movlw	24
  7408  002306  6E2E               	movwf	__tdiv_to_l_@cntr,c
  7409  002308                     l760:
  7410  002308  90D8               	bcf	status,0,c
  7411  00230A  362A               	rlcf	__tdiv_to_l_@quot,f,c
  7412  00230C  362B               	rlcf	__tdiv_to_l_@quot+1,f,c
  7413  00230E  362C               	rlcf	__tdiv_to_l_@quot+2,f,c
  7414  002310  362D               	rlcf	__tdiv_to_l_@quot+3,f,c
  7415  002312  5023               	movf	__tdiv_to_l_@f2,w,c
  7416  002314  5C1F               	subwf	__tdiv_to_l_@f1,w,c
  7417  002316  5024               	movf	__tdiv_to_l_@f2+1,w,c
  7418  002318  5820               	subwfb	__tdiv_to_l_@f1+1,w,c
  7419  00231A  5025               	movf	__tdiv_to_l_@f2+2,w,c
  7420  00231C  5821               	subwfb	__tdiv_to_l_@f1+2,w,c
  7421  00231E  A0D8               	btfss	status,0,c
  7422  002320  D007               	goto	l761
  7423  002322  5023               	movf	__tdiv_to_l_@f2,w,c
  7424  002324  5E1F               	subwf	__tdiv_to_l_@f1,f,c
  7425  002326  5024               	movf	__tdiv_to_l_@f2+1,w,c
  7426  002328  5A20               	subwfb	__tdiv_to_l_@f1+1,f,c
  7427  00232A  5025               	movf	__tdiv_to_l_@f2+2,w,c
  7428  00232C  5A21               	subwfb	__tdiv_to_l_@f1+2,f,c
  7429  00232E  802A               	bsf	__tdiv_to_l_@quot,0,c
  7430  002330                     l761:
  7431  002330  90D8               	bcf	status,0,c
  7432  002332  361F               	rlcf	__tdiv_to_l_@f1,f,c
  7433  002334  3620               	rlcf	__tdiv_to_l_@f1+1,f,c
  7434  002336  3621               	rlcf	__tdiv_to_l_@f1+2,f,c
  7435  002338  2E2E               	decfsz	__tdiv_to_l_@cntr,f,c
  7436  00233A  D7E6               	goto	l760
  7437  00233C  AE2F               	btfss	__tdiv_to_l_@exp1,7,c
  7438  00233E  D016               	goto	l763
  7439  002340  502F               	movf	__tdiv_to_l_@exp1,w,c
  7440  002342  0A80               	xorlw	128
  7441  002344  0F97               	addlw	151
  7442  002346  B0D8               	btfsc	status,0,c
  7443  002348  D009               	goto	l764
  7444  00234A  0E00               	movlw	0
  7445  00234C  6E1F               	movwf	?__tdiv_to_l_,c
  7446  00234E  0E00               	movlw	0
  7447  002350  6E20               	movwf	?__tdiv_to_l_+1,c
  7448  002352  0E00               	movlw	0
  7449  002354  6E21               	movwf	?__tdiv_to_l_+2,c
  7450  002356  0E00               	movlw	0
  7451  002358  6E22               	movwf	?__tdiv_to_l_+3,c
  7452  00235A  0012               	return	
  7453  00235C                     l764:
  7454  00235C  90D8               	bcf	status,0,c
  7455  00235E  322D               	rrcf	__tdiv_to_l_@quot+3,f,c
  7456  002360  322C               	rrcf	__tdiv_to_l_@quot+2,f,c
  7457  002362  322B               	rrcf	__tdiv_to_l_@quot+1,f,c
  7458  002364  322A               	rrcf	__tdiv_to_l_@quot,f,c
  7459  002366  3E2F               	incfsz	__tdiv_to_l_@exp1,f,c
  7460  002368  D7F9               	goto	l764
  7461  00236A  D015               	goto	u5780
  7462  00236C                     l763:
  7463  00236C  0E17               	movlw	23
  7464  00236E  642F               	cpfsgt	__tdiv_to_l_@exp1,c
  7465  002370  D00F               	goto	l769
  7466  002372  0E00               	movlw	0
  7467  002374  6E1F               	movwf	?__tdiv_to_l_,c
  7468  002376  0E00               	movlw	0
  7469  002378  6E20               	movwf	?__tdiv_to_l_+1,c
  7470  00237A  0E00               	movlw	0
  7471  00237C  6E21               	movwf	?__tdiv_to_l_+2,c
  7472  00237E  0E00               	movlw	0
  7473  002380  6E22               	movwf	?__tdiv_to_l_+3,c
  7474  002382  0012               	return	
  7475  002384  90D8               	bcf	status,0,c
  7476  002386  362A               	rlcf	__tdiv_to_l_@quot,f,c
  7477  002388  362B               	rlcf	__tdiv_to_l_@quot+1,f,c
  7478  00238A  362C               	rlcf	__tdiv_to_l_@quot+2,f,c
  7479  00238C  362D               	rlcf	__tdiv_to_l_@quot+3,f,c
  7480  00238E  062F               	decf	__tdiv_to_l_@exp1,f,c
  7481  002390                     l769:
  7482  002390  502F               	movf	__tdiv_to_l_@exp1,w,c
  7483  002392  A4D8               	btfss	status,2,c
  7484  002394  D7F7               	goto	l770
  7485  002396                     u5780:
  7486  002396  C02A  F01F         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7487  00239A  C02B  F020         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7488  00239E  C02C  F021         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7489  0023A2  C02D  F022         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7490  0023A6  0012               	return		;funcret
  7491  0023A8                     __end_of__tdiv_to_l_:
  7492                           	opt stack 0
  7493                           tblptru	equ	0xFF8
  7494                           tblptrh	equ	0xFF7
  7495                           tblptrl	equ	0xFF6
  7496                           tablat	equ	0xFF5
  7497                           prodh	equ	0xFF4
  7498                           prodl	equ	0xFF3
  7499                           intcon	equ	0xFF2
  7500                           intcon2	equ	0xFF1
  7501                           intcon3	equ	0xFF0
  7502                           postinc0	equ	0xFEE
  7503                           wreg	equ	0xFE8
  7504                           indf1	equ	0xFE7
  7505                           postdec1	equ	0xFE5
  7506                           fsr1h	equ	0xFE2
  7507                           fsr1l	equ	0xFE1
  7508                           indf2	equ	0xFDF
  7509                           postinc2	equ	0xFDE
  7510                           postdec2	equ	0xFDD
  7511                           fsr2h	equ	0xFDA
  7512                           fsr2l	equ	0xFD9
  7513                           status	equ	0xFD8
  7514                           
  7515 ;; *************** function __div_to_l_ *****************
  7516 ;; Defined at:
  7517 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  7518 ;; Parameters:    Size  Location     Type
  7519 ;;  f1              4   30[COMRAM] unsigned long 
  7520 ;;  f2              4   34[COMRAM] unsigned long 
  7521 ;; Auto vars:     Size  Location     Type
  7522 ;;  quot            4   38[COMRAM] unsigned long 
  7523 ;;  exp1            1   43[COMRAM] unsigned char 
  7524 ;;  cntr            1   42[COMRAM] unsigned char 
  7525 ;; Return value:  Size  Location     Type
  7526 ;;                  4   30[COMRAM] unsigned long 
  7527 ;; Registers used:
  7528 ;;		wreg, status,2, status,0
  7529 ;; Tracked objects:
  7530 ;;		On entry : 0/0
  7531 ;;		On exit  : 0/0
  7532 ;;		Unchanged: 0/0
  7533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7534 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7537 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7538 ;;Total ram usage:       14 bytes
  7539 ;; Hardware stack levels used:    1
  7540 ;; Hardware stack levels required when called:    2
  7541 ;; This function calls:
  7542 ;;		Nothing
  7543 ;; This function is called by:
  7544 ;;		_sprintf
  7545 ;; This function uses a non-reentrant model
  7546 ;;
  7547                           
  7548                           	psect	text20
  7549  0023A8                     __ptext20:
  7550                           	opt stack 0
  7551  0023A8                     __div_to_l_:
  7552                           	opt stack 26
  7553                           
  7554                           ;incstack = 0
  7555  0023A8  3421               	rlcf	__div_to_l_@f1+2,w,c
  7556  0023AA  3422               	rlcf	__div_to_l_@f1+3,w,c
  7557  0023AC  6E2C               	movwf	__div_to_l_@exp1,c
  7558  0023AE  502C               	movf	__div_to_l_@exp1,w,c
  7559  0023B0  A4D8               	btfss	status,2,c
  7560  0023B2  D009               	goto	l653
  7561  0023B4  0E00               	movlw	0
  7562  0023B6  6E1F               	movwf	?__div_to_l_,c
  7563  0023B8  0E00               	movlw	0
  7564  0023BA  6E20               	movwf	?__div_to_l_+1,c
  7565  0023BC  0E00               	movlw	0
  7566  0023BE  6E21               	movwf	?__div_to_l_+2,c
  7567  0023C0  0E00               	movlw	0
  7568  0023C2  6E22               	movwf	?__div_to_l_+3,c
  7569  0023C4  0012               	return	
  7570  0023C6                     l653:
  7571  0023C6  3425               	rlcf	__div_to_l_@f2+2,w,c
  7572  0023C8  3426               	rlcf	__div_to_l_@f2+3,w,c
  7573  0023CA  6E2B               	movwf	__div_to_l_@cntr,c
  7574  0023CC  502B               	movf	__div_to_l_@cntr,w,c
  7575  0023CE  A4D8               	btfss	status,2,c
  7576  0023D0  D009               	goto	l655
  7577  0023D2  0E00               	movlw	0
  7578  0023D4  6E1F               	movwf	?__div_to_l_,c
  7579  0023D6  0E00               	movlw	0
  7580  0023D8  6E20               	movwf	?__div_to_l_+1,c
  7581  0023DA  0E00               	movlw	0
  7582  0023DC  6E21               	movwf	?__div_to_l_+2,c
  7583  0023DE  0E00               	movlw	0
  7584  0023E0  6E22               	movwf	?__div_to_l_+3,c
  7585  0023E2  0012               	return	
  7586  0023E4                     l655:
  7587  0023E4  8E21               	bsf	__div_to_l_@f1+2,7,c
  7588  0023E6  0EFF               	movlw	255
  7589  0023E8  161F               	andwf	__div_to_l_@f1,f,c
  7590  0023EA  0EFF               	movlw	255
  7591  0023EC  1620               	andwf	__div_to_l_@f1+1,f,c
  7592  0023EE  0EFF               	movlw	255
  7593  0023F0  1621               	andwf	__div_to_l_@f1+2,f,c
  7594  0023F2  0E00               	movlw	0
  7595  0023F4  1622               	andwf	__div_to_l_@f1+3,f,c
  7596  0023F6  8E25               	bsf	__div_to_l_@f2+2,7,c
  7597  0023F8  0EFF               	movlw	255
  7598  0023FA  1623               	andwf	__div_to_l_@f2,f,c
  7599  0023FC  0EFF               	movlw	255
  7600  0023FE  1624               	andwf	__div_to_l_@f2+1,f,c
  7601  002400  0EFF               	movlw	255
  7602  002402  1625               	andwf	__div_to_l_@f2+2,f,c
  7603  002404  0E00               	movlw	0
  7604  002406  1626               	andwf	__div_to_l_@f2+3,f,c
  7605  002408  0E00               	movlw	0
  7606  00240A  6E27               	movwf	__div_to_l_@quot,c
  7607  00240C  0E00               	movlw	0
  7608  00240E  6E28               	movwf	__div_to_l_@quot+1,c
  7609  002410  0E00               	movlw	0
  7610  002412  6E29               	movwf	__div_to_l_@quot+2,c
  7611  002414  0E00               	movlw	0
  7612  002416  6E2A               	movwf	__div_to_l_@quot+3,c
  7613  002418  0E7F               	movlw	127
  7614  00241A  5E2C               	subwf	__div_to_l_@exp1,f,c
  7615  00241C  502B               	movf	__div_to_l_@cntr,w,c
  7616  00241E  0FA0               	addlw	160
  7617  002420  5E2C               	subwf	__div_to_l_@exp1,f,c
  7618  002422  0E20               	movlw	32
  7619  002424  6E2B               	movwf	__div_to_l_@cntr,c
  7620  002426  90D8               	bcf	status,0,c
  7621  002428  3627               	rlcf	__div_to_l_@quot,f,c
  7622  00242A  3628               	rlcf	__div_to_l_@quot+1,f,c
  7623  00242C  3629               	rlcf	__div_to_l_@quot+2,f,c
  7624  00242E  362A               	rlcf	__div_to_l_@quot+3,f,c
  7625  002430  5023               	movf	__div_to_l_@f2,w,c
  7626  002432  5C1F               	subwf	__div_to_l_@f1,w,c
  7627  002434  5024               	movf	__div_to_l_@f2+1,w,c
  7628  002436  5820               	subwfb	__div_to_l_@f1+1,w,c
  7629  002438  5025               	movf	__div_to_l_@f2+2,w,c
  7630  00243A  5821               	subwfb	__div_to_l_@f1+2,w,c
  7631  00243C  5026               	movf	__div_to_l_@f2+3,w,c
  7632  00243E  5822               	subwfb	__div_to_l_@f1+3,w,c
  7633  002440  A0D8               	btfss	status,0,c
  7634  002442  D009               	goto	l657
  7635  002444  5023               	movf	__div_to_l_@f2,w,c
  7636  002446  5E1F               	subwf	__div_to_l_@f1,f,c
  7637  002448  5024               	movf	__div_to_l_@f2+1,w,c
  7638  00244A  5A20               	subwfb	__div_to_l_@f1+1,f,c
  7639  00244C  5025               	movf	__div_to_l_@f2+2,w,c
  7640  00244E  5A21               	subwfb	__div_to_l_@f1+2,f,c
  7641  002450  5026               	movf	__div_to_l_@f2+3,w,c
  7642  002452  5A22               	subwfb	__div_to_l_@f1+3,f,c
  7643  002454  8027               	bsf	__div_to_l_@quot,0,c
  7644  002456                     l657:
  7645  002456  90D8               	bcf	status,0,c
  7646  002458  361F               	rlcf	__div_to_l_@f1,f,c
  7647  00245A  3620               	rlcf	__div_to_l_@f1+1,f,c
  7648  00245C  3621               	rlcf	__div_to_l_@f1+2,f,c
  7649  00245E  3622               	rlcf	__div_to_l_@f1+3,f,c
  7650  002460  2E2B               	decfsz	__div_to_l_@cntr,f,c
  7651  002462  D7E1               	goto	l656
  7652  002464  AE2C               	btfss	__div_to_l_@exp1,7,c
  7653  002466  D016               	goto	l659
  7654  002468  502C               	movf	__div_to_l_@exp1,w,c
  7655  00246A  0A80               	xorlw	128
  7656  00246C  0F9F               	addlw	159
  7657  00246E  B0D8               	btfsc	status,0,c
  7658  002470  D009               	goto	l660
  7659  002472  0E00               	movlw	0
  7660  002474  6E1F               	movwf	?__div_to_l_,c
  7661  002476  0E00               	movlw	0
  7662  002478  6E20               	movwf	?__div_to_l_+1,c
  7663  00247A  0E00               	movlw	0
  7664  00247C  6E21               	movwf	?__div_to_l_+2,c
  7665  00247E  0E00               	movlw	0
  7666  002480  6E22               	movwf	?__div_to_l_+3,c
  7667  002482  0012               	return	
  7668  002484                     l660:
  7669  002484  90D8               	bcf	status,0,c
  7670  002486  322A               	rrcf	__div_to_l_@quot+3,f,c
  7671  002488  3229               	rrcf	__div_to_l_@quot+2,f,c
  7672  00248A  3228               	rrcf	__div_to_l_@quot+1,f,c
  7673  00248C  3227               	rrcf	__div_to_l_@quot,f,c
  7674  00248E  3E2C               	incfsz	__div_to_l_@exp1,f,c
  7675  002490  D7F9               	goto	l660
  7676  002492  D015               	goto	u5850
  7677  002494                     l659:
  7678  002494  0E1F               	movlw	31
  7679  002496  642C               	cpfsgt	__div_to_l_@exp1,c
  7680  002498  D00F               	goto	l665
  7681  00249A  0E00               	movlw	0
  7682  00249C  6E1F               	movwf	?__div_to_l_,c
  7683  00249E  0E00               	movlw	0
  7684  0024A0  6E20               	movwf	?__div_to_l_+1,c
  7685  0024A2  0E00               	movlw	0
  7686  0024A4  6E21               	movwf	?__div_to_l_+2,c
  7687  0024A6  0E00               	movlw	0
  7688  0024A8  6E22               	movwf	?__div_to_l_+3,c
  7689  0024AA  0012               	return	
  7690  0024AC  90D8               	bcf	status,0,c
  7691  0024AE  3627               	rlcf	__div_to_l_@quot,f,c
  7692  0024B0  3628               	rlcf	__div_to_l_@quot+1,f,c
  7693  0024B2  3629               	rlcf	__div_to_l_@quot+2,f,c
  7694  0024B4  362A               	rlcf	__div_to_l_@quot+3,f,c
  7695  0024B6  062C               	decf	__div_to_l_@exp1,f,c
  7696  0024B8                     l665:
  7697  0024B8  502C               	movf	__div_to_l_@exp1,w,c
  7698  0024BA  A4D8               	btfss	status,2,c
  7699  0024BC  D7F7               	goto	l666
  7700  0024BE                     u5850:
  7701  0024BE  C027  F01F         	movff	__div_to_l_@quot,?__div_to_l_
  7702  0024C2  C028  F020         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7703  0024C6  C029  F021         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7704  0024CA  C02A  F022         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7705  0024CE  0012               	return		;funcret
  7706  0024D0                     __end_of__div_to_l_:
  7707                           	opt stack 0
  7708                           tblptru	equ	0xFF8
  7709                           tblptrh	equ	0xFF7
  7710                           tblptrl	equ	0xFF6
  7711                           tablat	equ	0xFF5
  7712                           prodh	equ	0xFF4
  7713                           prodl	equ	0xFF3
  7714                           intcon	equ	0xFF2
  7715                           intcon2	equ	0xFF1
  7716                           intcon3	equ	0xFF0
  7717                           postinc0	equ	0xFEE
  7718                           wreg	equ	0xFE8
  7719                           indf1	equ	0xFE7
  7720                           postdec1	equ	0xFE5
  7721                           fsr1h	equ	0xFE2
  7722                           fsr1l	equ	0xFE1
  7723                           indf2	equ	0xFDF
  7724                           postinc2	equ	0xFDE
  7725                           postdec2	equ	0xFDD
  7726                           fsr2h	equ	0xFDA
  7727                           fsr2l	equ	0xFD9
  7728                           status	equ	0xFD8
  7729                           
  7730 ;; *************** function ___xxtofl *****************
  7731 ;; Defined at:
  7732 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\xxtofl.c"
  7733 ;; Parameters:    Size  Location     Type
  7734 ;;  sign            1    wreg     unsigned char 
  7735 ;;  val             4   36[COMRAM] long 
  7736 ;; Auto vars:     Size  Location     Type
  7737 ;;  sign            1   44[COMRAM] unsigned char 
  7738 ;;  arg             4   46[COMRAM] unsigned long 
  7739 ;;  exp             1   45[COMRAM] unsigned char 
  7740 ;; Return value:  Size  Location     Type
  7741 ;;                  4   36[COMRAM] unsigned char 
  7742 ;; Registers used:
  7743 ;;		wreg, status,2, status,0
  7744 ;; Tracked objects:
  7745 ;;		On entry : 0/0
  7746 ;;		On exit  : 0/0
  7747 ;;		Unchanged: 0/0
  7748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7749 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7750 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7751 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7752 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7753 ;;Total ram usage:       14 bytes
  7754 ;; Hardware stack levels used:    1
  7755 ;; Hardware stack levels required when called:    2
  7756 ;; This function calls:
  7757 ;;		Nothing
  7758 ;; This function is called by:
  7759 ;;		_operation
  7760 ;;		_read_adc_voltage
  7761 ;;		_sprintf
  7762 ;; This function uses a non-reentrant model
  7763 ;;
  7764                           
  7765                           	psect	text21
  7766  002126                     __ptext21:
  7767                           	opt stack 0
  7768  002126                     ___xxtofl:
  7769                           	opt stack 27
  7770                           
  7771                           ;incstack = 0
  7772                           ;___xxtofl@sign stored from wreg
  7773  002126  6E2D               	movwf	___xxtofl@sign,c
  7774  002128  502D               	movf	___xxtofl@sign,w,c
  7775  00212A  A4D8               	btfss	status,2,c
  7776  00212C  AE28               	btfss	___xxtofl@val+3,7,c
  7777  00212E  D01A               	goto	l1044
  7778  002130  C025  F029         	movff	___xxtofl@val,??___xxtofl
  7779  002134  C026  F02A         	movff	___xxtofl@val+1,??___xxtofl+1
  7780  002138  C027  F02B         	movff	___xxtofl@val+2,??___xxtofl+2
  7781  00213C  C028  F02C         	movff	___xxtofl@val+3,??___xxtofl+3
  7782  002140  1E29               	comf	??___xxtofl,f,c
  7783  002142  1E2A               	comf	??___xxtofl+1,f,c
  7784  002144  1E2B               	comf	??___xxtofl+2,f,c
  7785  002146  1E2C               	comf	??___xxtofl+3,f,c
  7786  002148  2A29               	incf	??___xxtofl,f,c
  7787  00214A  0E00               	movlw	0
  7788  00214C  222A               	addwfc	??___xxtofl+1,f,c
  7789  00214E  222B               	addwfc	??___xxtofl+2,f,c
  7790  002150  222C               	addwfc	??___xxtofl+3,f,c
  7791  002152  C029  F02F         	movff	??___xxtofl,___xxtofl@arg
  7792  002156  C02A  F030         	movff	??___xxtofl+1,___xxtofl@arg+1
  7793  00215A  C02B  F031         	movff	??___xxtofl+2,___xxtofl@arg+2
  7794  00215E  C02C  F032         	movff	??___xxtofl+3,___xxtofl@arg+3
  7795  002162  D008               	goto	l1045
  7796  002164                     l1044:
  7797  002164  C025  F02F         	movff	___xxtofl@val,___xxtofl@arg
  7798  002168  C026  F030         	movff	___xxtofl@val+1,___xxtofl@arg+1
  7799  00216C  C027  F031         	movff	___xxtofl@val+2,___xxtofl@arg+2
  7800  002170  C028  F032         	movff	___xxtofl@val+3,___xxtofl@arg+3
  7801  002174                     l1045:
  7802  002174  5025               	movf	___xxtofl@val,w,c
  7803  002176  1026               	iorwf	___xxtofl@val+1,w,c
  7804  002178  1027               	iorwf	___xxtofl@val+2,w,c
  7805  00217A  1028               	iorwf	___xxtofl@val+3,w,c
  7806  00217C  A4D8               	btfss	status,2,c
  7807  00217E  D009               	goto	l1046
  7808  002180  0E00               	movlw	0
  7809  002182  6E25               	movwf	?___xxtofl,c
  7810  002184  0E00               	movlw	0
  7811  002186  6E26               	movwf	?___xxtofl+1,c
  7812  002188  0E00               	movlw	0
  7813  00218A  6E27               	movwf	?___xxtofl+2,c
  7814  00218C  0E00               	movlw	0
  7815  00218E  6E28               	movwf	?___xxtofl+3,c
  7816  002190  0012               	return	
  7817  002192                     l1046:
  7818  002192  0E96               	movlw	150
  7819  002194  6E2E               	movwf	___xxtofl@exp,c
  7820  002196  D006               	goto	l1048
  7821  002198  2A2E               	incf	___xxtofl@exp,f,c
  7822  00219A  90D8               	bcf	status,0,c
  7823  00219C  3232               	rrcf	___xxtofl@arg+3,f,c
  7824  00219E  3231               	rrcf	___xxtofl@arg+2,f,c
  7825  0021A0  3230               	rrcf	___xxtofl@arg+1,f,c
  7826  0021A2  322F               	rrcf	___xxtofl@arg,f,c
  7827  0021A4                     l1048:
  7828  0021A4  0E00               	movlw	0
  7829  0021A6  142F               	andwf	___xxtofl@arg,w,c
  7830  0021A8  6E29               	movwf	??___xxtofl& (0+255),c
  7831  0021AA  0E00               	movlw	0
  7832  0021AC  1430               	andwf	___xxtofl@arg+1,w,c
  7833  0021AE  6E2A               	movwf	(??___xxtofl+1)& (0+255),c
  7834  0021B0  0E00               	movlw	0
  7835  0021B2  1431               	andwf	___xxtofl@arg+2,w,c
  7836  0021B4  6E2B               	movwf	(??___xxtofl+2)& (0+255),c
  7837  0021B6  0EFE               	movlw	254
  7838  0021B8  1432               	andwf	___xxtofl@arg+3,w,c
  7839  0021BA  6E2C               	movwf	(??___xxtofl+3)& (0+255),c
  7840  0021BC  5029               	movf	??___xxtofl,w,c
  7841  0021BE  102A               	iorwf	??___xxtofl+1,w,c
  7842  0021C0  102B               	iorwf	??___xxtofl+2,w,c
  7843  0021C2  102C               	iorwf	??___xxtofl+3,w,c
  7844  0021C4  B4D8               	btfsc	status,2,c
  7845  0021C6  D00D               	goto	l1051
  7846  0021C8  D7E7               	goto	l1049
  7847  0021CA  2A2E               	incf	___xxtofl@exp,f,c
  7848  0021CC  0E01               	movlw	1
  7849  0021CE  262F               	addwf	___xxtofl@arg,f,c
  7850  0021D0  0E00               	movlw	0
  7851  0021D2  2230               	addwfc	___xxtofl@arg+1,f,c
  7852  0021D4  2231               	addwfc	___xxtofl@arg+2,f,c
  7853  0021D6  2232               	addwfc	___xxtofl@arg+3,f,c
  7854  0021D8  90D8               	bcf	status,0,c
  7855  0021DA  3232               	rrcf	___xxtofl@arg+3,f,c
  7856  0021DC  3231               	rrcf	___xxtofl@arg+2,f,c
  7857  0021DE  3230               	rrcf	___xxtofl@arg+1,f,c
  7858  0021E0  322F               	rrcf	___xxtofl@arg,f,c
  7859  0021E2                     l1051:
  7860  0021E2  0E00               	movlw	0
  7861  0021E4  142F               	andwf	___xxtofl@arg,w,c
  7862  0021E6  6E29               	movwf	??___xxtofl& (0+255),c
  7863  0021E8  0E00               	movlw	0
  7864  0021EA  1430               	andwf	___xxtofl@arg+1,w,c
  7865  0021EC  6E2A               	movwf	(??___xxtofl+1)& (0+255),c
  7866  0021EE  0E00               	movlw	0
  7867  0021F0  1431               	andwf	___xxtofl@arg+2,w,c
  7868  0021F2  6E2B               	movwf	(??___xxtofl+2)& (0+255),c
  7869  0021F4  0EFF               	movlw	255
  7870  0021F6  1432               	andwf	___xxtofl@arg+3,w,c
  7871  0021F8  6E2C               	movwf	(??___xxtofl+3)& (0+255),c
  7872  0021FA  5029               	movf	??___xxtofl,w,c
  7873  0021FC  102A               	iorwf	??___xxtofl+1,w,c
  7874  0021FE  102B               	iorwf	??___xxtofl+2,w,c
  7875  002200  102C               	iorwf	??___xxtofl+3,w,c
  7876  002202  B4D8               	btfsc	status,2,c
  7877  002204  D007               	goto	l1054
  7878  002206  D7E1               	goto	l1052
  7879  002208  062E               	decf	___xxtofl@exp,f,c
  7880  00220A  90D8               	bcf	status,0,c
  7881  00220C  362F               	rlcf	___xxtofl@arg,f,c
  7882  00220E  3630               	rlcf	___xxtofl@arg+1,f,c
  7883  002210  3631               	rlcf	___xxtofl@arg+2,f,c
  7884  002212  3632               	rlcf	___xxtofl@arg+3,f,c
  7885  002214                     l1054:
  7886  002214  BE31               	btfsc	___xxtofl@arg+2,7,c
  7887  002216  D003               	goto	u6110
  7888  002218  0E02               	movlw	2
  7889  00221A  602E               	cpfslt	___xxtofl@exp,c
  7890  00221C  D7F5               	goto	l1055
  7891  00221E                     u6110:
  7892  00221E  B02E               	btfsc	___xxtofl@exp,0,c
  7893  002220  D008               	goto	l1059
  7894  002222  0EFF               	movlw	255
  7895  002224  162F               	andwf	___xxtofl@arg,f,c
  7896  002226  0EFF               	movlw	255
  7897  002228  1630               	andwf	___xxtofl@arg+1,f,c
  7898  00222A  0E7F               	movlw	127
  7899  00222C  1631               	andwf	___xxtofl@arg+2,f,c
  7900  00222E  0EFF               	movlw	255
  7901  002230  1632               	andwf	___xxtofl@arg+3,f,c
  7902  002232                     l1059:
  7903  002232  90D8               	bcf	status,0,c
  7904  002234  322E               	rrcf	___xxtofl@exp,f,c
  7905  002236  C02E  F029         	movff	___xxtofl@exp,??___xxtofl
  7906  00223A  6A2A               	clrf	(??___xxtofl+1)& (0+255),c
  7907  00223C  6A2B               	clrf	(??___xxtofl+2)& (0+255),c
  7908  00223E  6A2C               	clrf	(??___xxtofl+3)& (0+255),c
  7909  002240  C029  F02C         	movff	??___xxtofl,??___xxtofl+3
  7910  002244  6A2B               	clrf	??___xxtofl+2,c
  7911  002246  6A2A               	clrf	??___xxtofl+1,c
  7912  002248  6A29               	clrf	??___xxtofl,c
  7913  00224A  5029               	movf	??___xxtofl,w,c
  7914  00224C  122F               	iorwf	___xxtofl@arg,f,c
  7915  00224E  502A               	movf	??___xxtofl+1,w,c
  7916  002250  1230               	iorwf	___xxtofl@arg+1,f,c
  7917  002252  502B               	movf	??___xxtofl+2,w,c
  7918  002254  1231               	iorwf	___xxtofl@arg+2,f,c
  7919  002256  502C               	movf	??___xxtofl+3,w,c
  7920  002258  1232               	iorwf	___xxtofl@arg+3,f,c
  7921  00225A  502D               	movf	___xxtofl@sign,w,c
  7922  00225C  A4D8               	btfss	status,2,c
  7923  00225E  AE28               	btfss	___xxtofl@val+3,7,c
  7924  002260  D001               	goto	l1060
  7925  002262  8E32               	bsf	___xxtofl@arg+3,7,c
  7926  002264                     l1060:
  7927  002264  C02F  F025         	movff	___xxtofl@arg,?___xxtofl
  7928  002268  C030  F026         	movff	___xxtofl@arg+1,?___xxtofl+1
  7929  00226C  C031  F027         	movff	___xxtofl@arg+2,?___xxtofl+2
  7930  002270  C032  F028         	movff	___xxtofl@arg+3,?___xxtofl+3
  7931  002274  0012               	return	
  7932  002276                     __end_of___xxtofl:
  7933                           	opt stack 0
  7934                           tblptru	equ	0xFF8
  7935                           tblptrh	equ	0xFF7
  7936                           tblptrl	equ	0xFF6
  7937                           tablat	equ	0xFF5
  7938                           prodh	equ	0xFF4
  7939                           prodl	equ	0xFF3
  7940                           intcon	equ	0xFF2
  7941                           intcon2	equ	0xFF1
  7942                           intcon3	equ	0xFF0
  7943                           postinc0	equ	0xFEE
  7944                           wreg	equ	0xFE8
  7945                           indf1	equ	0xFE7
  7946                           postdec1	equ	0xFE5
  7947                           fsr1h	equ	0xFE2
  7948                           fsr1l	equ	0xFE1
  7949                           indf2	equ	0xFDF
  7950                           postinc2	equ	0xFDE
  7951                           postdec2	equ	0xFDD
  7952                           fsr2h	equ	0xFDA
  7953                           fsr2l	equ	0xFD9
  7954                           status	equ	0xFD8
  7955                           
  7956 ;; *************** function ___wmul *****************
  7957 ;; Defined at:
  7958 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  7959 ;; Parameters:    Size  Location     Type
  7960 ;;  multiplier      2   30[COMRAM] unsigned int 
  7961 ;;  multiplicand    2   32[COMRAM] unsigned int 
  7962 ;; Auto vars:     Size  Location     Type
  7963 ;;  product         2   34[COMRAM] unsigned int 
  7964 ;; Return value:  Size  Location     Type
  7965 ;;                  2   30[COMRAM] unsigned int 
  7966 ;; Registers used:
  7967 ;;		wreg, status,2, status,0, prodl, prodh
  7968 ;; Tracked objects:
  7969 ;;		On entry : 0/0
  7970 ;;		On exit  : 0/0
  7971 ;;		Unchanged: 0/0
  7972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7973 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7974 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7976 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7977 ;;Total ram usage:        6 bytes
  7978 ;; Hardware stack levels used:    1
  7979 ;; Hardware stack levels required when called:    2
  7980 ;; This function calls:
  7981 ;;		Nothing
  7982 ;; This function is called by:
  7983 ;;		_read_adc_voltage
  7984 ;;		_sprintf
  7985 ;; This function uses a non-reentrant model
  7986 ;;
  7987                           
  7988                           	psect	text22
  7989  002FDE                     __ptext22:
  7990                           	opt stack 0
  7991  002FDE                     ___wmul:
  7992                           	opt stack 27
  7993                           
  7994                           ;incstack = 0
  7995  002FDE  501F               	movf	___wmul@multiplier,w,c
  7996  002FE0  0221               	mulwf	___wmul@multiplicand,c
  7997  002FE2  CFF3 F023          	movff	prodl,___wmul@product
  7998  002FE6  CFF4 F024          	movff	prodh,___wmul@product+1
  7999  002FEA  501F               	movf	___wmul@multiplier,w,c
  8000  002FEC  0222               	mulwf	___wmul@multiplicand+1,c
  8001  002FEE  50F3               	movf	prodl,w,c
  8002  002FF0  2624               	addwf	___wmul@product+1,f,c
  8003  002FF2  5020               	movf	___wmul@multiplier+1,w,c
  8004  002FF4  0221               	mulwf	___wmul@multiplicand,c
  8005  002FF6  50F3               	movf	prodl,w,c
  8006  002FF8  2624               	addwf	___wmul@product+1,f,c
  8007  002FFA  C023  F01F         	movff	___wmul@product,?___wmul
  8008  002FFE  C024  F020         	movff	___wmul@product+1,?___wmul+1
  8009  003002  0012               	return	
  8010  003004                     __end_of___wmul:
  8011                           	opt stack 0
  8012                           tblptru	equ	0xFF8
  8013                           tblptrh	equ	0xFF7
  8014                           tblptrl	equ	0xFF6
  8015                           tablat	equ	0xFF5
  8016                           prodh	equ	0xFF4
  8017                           prodl	equ	0xFF3
  8018                           intcon	equ	0xFF2
  8019                           intcon2	equ	0xFF1
  8020                           intcon3	equ	0xFF0
  8021                           postinc0	equ	0xFEE
  8022                           wreg	equ	0xFE8
  8023                           indf1	equ	0xFE7
  8024                           postdec1	equ	0xFE5
  8025                           fsr1h	equ	0xFE2
  8026                           fsr1l	equ	0xFE1
  8027                           indf2	equ	0xFDF
  8028                           postinc2	equ	0xFDE
  8029                           postdec2	equ	0xFDD
  8030                           fsr2h	equ	0xFDA
  8031                           fsr2l	equ	0xFD9
  8032                           status	equ	0xFD8
  8033                           
  8034 ;; *************** function ___llmod *****************
  8035 ;; Defined at:
  8036 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8037 ;; Parameters:    Size  Location     Type
  8038 ;;  dividend        4   43[COMRAM] unsigned long 
  8039 ;;  divisor         4   47[COMRAM] unsigned long 
  8040 ;; Auto vars:     Size  Location     Type
  8041 ;;  counter         1   51[COMRAM] unsigned char 
  8042 ;; Return value:  Size  Location     Type
  8043 ;;                  4   43[COMRAM] unsigned long 
  8044 ;; Registers used:
  8045 ;;		wreg, status,2, status,0
  8046 ;; Tracked objects:
  8047 ;;		On entry : 0/0
  8048 ;;		On exit  : 0/0
  8049 ;;		Unchanged: 0/0
  8050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8051 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8052 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8054 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8055 ;;Total ram usage:        9 bytes
  8056 ;; Hardware stack levels used:    1
  8057 ;; Hardware stack levels required when called:    2
  8058 ;; This function calls:
  8059 ;;		Nothing
  8060 ;; This function is called by:
  8061 ;;		_sprintf
  8062 ;; This function uses a non-reentrant model
  8063 ;;
  8064                           
  8065                           	psect	text23
  8066  002C2A                     __ptext23:
  8067                           	opt stack 0
  8068  002C2A                     ___llmod:
  8069                           	opt stack 26
  8070                           
  8071                           ;incstack = 0
  8072  002C2A  5030               	movf	___llmod@divisor,w,c
  8073  002C2C  1031               	iorwf	___llmod@divisor+1,w,c
  8074  002C2E  1032               	iorwf	___llmod@divisor+2,w,c
  8075  002C30  1033               	iorwf	___llmod@divisor+3,w,c
  8076  002C32  B4D8               	btfsc	status,2,c
  8077  002C34  D024               	goto	l858
  8078  002C36  0E01               	movlw	1
  8079  002C38  6E34               	movwf	___llmod@counter,c
  8080  002C3A  D006               	goto	l853
  8081  002C3C  90D8               	bcf	status,0,c
  8082  002C3E  3630               	rlcf	___llmod@divisor,f,c
  8083  002C40  3631               	rlcf	___llmod@divisor+1,f,c
  8084  002C42  3632               	rlcf	___llmod@divisor+2,f,c
  8085  002C44  3633               	rlcf	___llmod@divisor+3,f,c
  8086  002C46  2A34               	incf	___llmod@counter,f,c
  8087  002C48                     l853:
  8088  002C48  AE33               	btfss	___llmod@divisor+3,7,c
  8089  002C4A  D7F8               	goto	l854
  8090  002C4C                     u6030:
  8091  002C4C  5030               	movf	___llmod@divisor,w,c
  8092  002C4E  5C2C               	subwf	___llmod@dividend,w,c
  8093  002C50  5031               	movf	___llmod@divisor+1,w,c
  8094  002C52  582D               	subwfb	___llmod@dividend+1,w,c
  8095  002C54  5032               	movf	___llmod@divisor+2,w,c
  8096  002C56  582E               	subwfb	___llmod@dividend+2,w,c
  8097  002C58  5033               	movf	___llmod@divisor+3,w,c
  8098  002C5A  582F               	subwfb	___llmod@dividend+3,w,c
  8099  002C5C  A0D8               	btfss	status,0,c
  8100  002C5E  D008               	goto	l857
  8101  002C60  5030               	movf	___llmod@divisor,w,c
  8102  002C62  5E2C               	subwf	___llmod@dividend,f,c
  8103  002C64  5031               	movf	___llmod@divisor+1,w,c
  8104  002C66  5A2D               	subwfb	___llmod@dividend+1,f,c
  8105  002C68  5032               	movf	___llmod@divisor+2,w,c
  8106  002C6A  5A2E               	subwfb	___llmod@dividend+2,f,c
  8107  002C6C  5033               	movf	___llmod@divisor+3,w,c
  8108  002C6E  5A2F               	subwfb	___llmod@dividend+3,f,c
  8109  002C70                     l857:
  8110  002C70  90D8               	bcf	status,0,c
  8111  002C72  3233               	rrcf	___llmod@divisor+3,f,c
  8112  002C74  3232               	rrcf	___llmod@divisor+2,f,c
  8113  002C76  3231               	rrcf	___llmod@divisor+1,f,c
  8114  002C78  3230               	rrcf	___llmod@divisor,f,c
  8115  002C7A  2E34               	decfsz	___llmod@counter,f,c
  8116  002C7C  D7E7               	goto	u6030
  8117  002C7E                     l858:
  8118  002C7E  C02C  F02C         	movff	___llmod@dividend,?___llmod
  8119  002C82  C02D  F02D         	movff	___llmod@dividend+1,?___llmod+1
  8120  002C86  C02E  F02E         	movff	___llmod@dividend+2,?___llmod+2
  8121  002C8A  C02F  F02F         	movff	___llmod@dividend+3,?___llmod+3
  8122  002C8E  0012               	return		;funcret
  8123  002C90                     __end_of___llmod:
  8124                           	opt stack 0
  8125                           tblptru	equ	0xFF8
  8126                           tblptrh	equ	0xFF7
  8127                           tblptrl	equ	0xFF6
  8128                           tablat	equ	0xFF5
  8129                           prodh	equ	0xFF4
  8130                           prodl	equ	0xFF3
  8131                           intcon	equ	0xFF2
  8132                           intcon2	equ	0xFF1
  8133                           intcon3	equ	0xFF0
  8134                           postinc0	equ	0xFEE
  8135                           wreg	equ	0xFE8
  8136                           indf1	equ	0xFE7
  8137                           postdec1	equ	0xFE5
  8138                           fsr1h	equ	0xFE2
  8139                           fsr1l	equ	0xFE1
  8140                           indf2	equ	0xFDF
  8141                           postinc2	equ	0xFDE
  8142                           postdec2	equ	0xFDD
  8143                           fsr2h	equ	0xFDA
  8144                           fsr2l	equ	0xFD9
  8145                           status	equ	0xFD8
  8146                           
  8147 ;; *************** function ___lldiv *****************
  8148 ;; Defined at:
  8149 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  8150 ;; Parameters:    Size  Location     Type
  8151 ;;  dividend        4   30[COMRAM] unsigned long 
  8152 ;;  divisor         4   34[COMRAM] unsigned long 
  8153 ;; Auto vars:     Size  Location     Type
  8154 ;;  quotient        4   38[COMRAM] unsigned long 
  8155 ;;  counter         1   42[COMRAM] unsigned char 
  8156 ;; Return value:  Size  Location     Type
  8157 ;;                  4   30[COMRAM] unsigned long 
  8158 ;; Registers used:
  8159 ;;		wreg, status,2, status,0
  8160 ;; Tracked objects:
  8161 ;;		On entry : 0/0
  8162 ;;		On exit  : 0/0
  8163 ;;		Unchanged: 0/0
  8164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8165 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8166 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8168 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8169 ;;Total ram usage:       13 bytes
  8170 ;; Hardware stack levels used:    1
  8171 ;; Hardware stack levels required when called:    2
  8172 ;; This function calls:
  8173 ;;		Nothing
  8174 ;; This function is called by:
  8175 ;;		_sprintf
  8176 ;; This function uses a non-reentrant model
  8177 ;;
  8178                           
  8179                           	psect	text24
  8180  002AC8                     __ptext24:
  8181                           	opt stack 0
  8182  002AC8                     ___lldiv:
  8183                           	opt stack 26
  8184                           
  8185                           ;incstack = 0
  8186  002AC8  0E00               	movlw	0
  8187  002ACA  6E27               	movwf	___lldiv@quotient,c
  8188  002ACC  0E00               	movlw	0
  8189  002ACE  6E28               	movwf	___lldiv@quotient+1,c
  8190  002AD0  0E00               	movlw	0
  8191  002AD2  6E29               	movwf	___lldiv@quotient+2,c
  8192  002AD4  0E00               	movlw	0
  8193  002AD6  6E2A               	movwf	___lldiv@quotient+3,c
  8194  002AD8  5023               	movf	___lldiv@divisor,w,c
  8195  002ADA  1024               	iorwf	___lldiv@divisor+1,w,c
  8196  002ADC  1025               	iorwf	___lldiv@divisor+2,w,c
  8197  002ADE  1026               	iorwf	___lldiv@divisor+3,w,c
  8198  002AE0  B4D8               	btfsc	status,2,c
  8199  002AE2  D02A               	goto	l848
  8200  002AE4  0E01               	movlw	1
  8201  002AE6  6E2B               	movwf	___lldiv@counter,c
  8202  002AE8  D006               	goto	l843
  8203  002AEA  90D8               	bcf	status,0,c
  8204  002AEC  3623               	rlcf	___lldiv@divisor,f,c
  8205  002AEE  3624               	rlcf	___lldiv@divisor+1,f,c
  8206  002AF0  3625               	rlcf	___lldiv@divisor+2,f,c
  8207  002AF2  3626               	rlcf	___lldiv@divisor+3,f,c
  8208  002AF4  2A2B               	incf	___lldiv@counter,f,c
  8209  002AF6                     l843:
  8210  002AF6  AE26               	btfss	___lldiv@divisor+3,7,c
  8211  002AF8  D7F8               	goto	l844
  8212  002AFA                     u6000:
  8213  002AFA  90D8               	bcf	status,0,c
  8214  002AFC  3627               	rlcf	___lldiv@quotient,f,c
  8215  002AFE  3628               	rlcf	___lldiv@quotient+1,f,c
  8216  002B00  3629               	rlcf	___lldiv@quotient+2,f,c
  8217  002B02  362A               	rlcf	___lldiv@quotient+3,f,c
  8218  002B04  5023               	movf	___lldiv@divisor,w,c
  8219  002B06  5C1F               	subwf	___lldiv@dividend,w,c
  8220  002B08  5024               	movf	___lldiv@divisor+1,w,c
  8221  002B0A  5820               	subwfb	___lldiv@dividend+1,w,c
  8222  002B0C  5025               	movf	___lldiv@divisor+2,w,c
  8223  002B0E  5821               	subwfb	___lldiv@dividend+2,w,c
  8224  002B10  5026               	movf	___lldiv@divisor+3,w,c
  8225  002B12  5822               	subwfb	___lldiv@dividend+3,w,c
  8226  002B14  A0D8               	btfss	status,0,c
  8227  002B16  D009               	goto	l847
  8228  002B18  5023               	movf	___lldiv@divisor,w,c
  8229  002B1A  5E1F               	subwf	___lldiv@dividend,f,c
  8230  002B1C  5024               	movf	___lldiv@divisor+1,w,c
  8231  002B1E  5A20               	subwfb	___lldiv@dividend+1,f,c
  8232  002B20  5025               	movf	___lldiv@divisor+2,w,c
  8233  002B22  5A21               	subwfb	___lldiv@dividend+2,f,c
  8234  002B24  5026               	movf	___lldiv@divisor+3,w,c
  8235  002B26  5A22               	subwfb	___lldiv@dividend+3,f,c
  8236  002B28  8027               	bsf	___lldiv@quotient,0,c
  8237  002B2A                     l847:
  8238  002B2A  90D8               	bcf	status,0,c
  8239  002B2C  3226               	rrcf	___lldiv@divisor+3,f,c
  8240  002B2E  3225               	rrcf	___lldiv@divisor+2,f,c
  8241  002B30  3224               	rrcf	___lldiv@divisor+1,f,c
  8242  002B32  3223               	rrcf	___lldiv@divisor,f,c
  8243  002B34  2E2B               	decfsz	___lldiv@counter,f,c
  8244  002B36  D7E1               	goto	u6000
  8245  002B38                     l848:
  8246  002B38  C027  F01F         	movff	___lldiv@quotient,?___lldiv
  8247  002B3C  C028  F020         	movff	___lldiv@quotient+1,?___lldiv+1
  8248  002B40  C029  F021         	movff	___lldiv@quotient+2,?___lldiv+2
  8249  002B44  C02A  F022         	movff	___lldiv@quotient+3,?___lldiv+3
  8250  002B48  0012               	return		;funcret
  8251  002B4A                     __end_of___lldiv:
  8252                           	opt stack 0
  8253                           tblptru	equ	0xFF8
  8254                           tblptrh	equ	0xFF7
  8255                           tblptrl	equ	0xFF6
  8256                           tablat	equ	0xFF5
  8257                           prodh	equ	0xFF4
  8258                           prodl	equ	0xFF3
  8259                           intcon	equ	0xFF2
  8260                           intcon2	equ	0xFF1
  8261                           intcon3	equ	0xFF0
  8262                           postinc0	equ	0xFEE
  8263                           wreg	equ	0xFE8
  8264                           indf1	equ	0xFE7
  8265                           postdec1	equ	0xFE5
  8266                           fsr1h	equ	0xFE2
  8267                           fsr1l	equ	0xFE1
  8268                           indf2	equ	0xFDF
  8269                           postinc2	equ	0xFDE
  8270                           postdec2	equ	0xFDD
  8271                           fsr2h	equ	0xFDA
  8272                           fsr2l	equ	0xFD9
  8273                           status	equ	0xFD8
  8274                           
  8275 ;; *************** function ___fltol *****************
  8276 ;; Defined at:
  8277 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fltol.c"
  8278 ;; Parameters:    Size  Location     Type
  8279 ;;  f1              4   30[BANK0 ] unsigned long 
  8280 ;; Auto vars:     Size  Location     Type
  8281 ;;  exp1            1   39[BANK0 ] unsigned char 
  8282 ;;  sign1           1   38[BANK0 ] unsigned char 
  8283 ;; Return value:  Size  Location     Type
  8284 ;;                  4   30[BANK0 ] long 
  8285 ;; Registers used:
  8286 ;;		wreg, status,2, status,0
  8287 ;; Tracked objects:
  8288 ;;		On entry : 0/0
  8289 ;;		On exit  : 0/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8292 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8293 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8294 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8295 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8296 ;;Total ram usage:       10 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; Hardware stack levels required when called:    2
  8299 ;; This function calls:
  8300 ;;		Nothing
  8301 ;; This function is called by:
  8302 ;;		_sprintf
  8303 ;;		_set_pwm1_percent
  8304 ;;		_set_pwm1_voltage
  8305 ;;		_set_pwm1_general
  8306 ;; This function uses a non-reentrant model
  8307 ;;
  8308                           
  8309                           	psect	text25
  8310  002804                     __ptext25:
  8311                           	opt stack 0
  8312  002804                     ___fltol:
  8313                           	opt stack 26
  8314                           
  8315                           ;incstack = 0
  8316  002804  0100               	movlb	0	; () banked
  8317  002806  35A0               	rlcf	(___fltol@f1+2)& (0+255),w,b
  8318  002808  35A1               	rlcf	(___fltol@f1+3)& (0+255),w,b
  8319  00280A  6FA7               	movwf	___fltol@exp1& (0+255),b
  8320  00280C  51A7               	movf	___fltol@exp1& (0+255),w,b
  8321  00280E  A4D8               	btfss	status,2,c
  8322  002810  D009               	goto	l700
  8323                           
  8324                           ; BSR set to: 0
  8325  002812  0E00               	movlw	0
  8326  002814  6F9E               	movwf	?___fltol& (0+255),b
  8327  002816  0E00               	movlw	0
  8328  002818  6F9F               	movwf	(?___fltol+1)& (0+255),b
  8329  00281A  0E00               	movlw	0
  8330  00281C  6FA0               	movwf	(?___fltol+2)& (0+255),b
  8331  00281E  0E00               	movlw	0
  8332  002820  6FA1               	movwf	(?___fltol+3)& (0+255),b
  8333                           
  8334                           ; BSR set to: 0
  8335  002822  0012               	return	
  8336  002824                     l700:
  8337                           
  8338                           ; BSR set to: 0
  8339                           
  8340                           ; BSR set to: 0
  8341  002824  C09E  F0A2         	movff	___fltol@f1,??___fltol
  8342  002828  C09F  F0A3         	movff	___fltol@f1+1,??___fltol+1
  8343  00282C  C0A0  F0A4         	movff	___fltol@f1+2,??___fltol+2
  8344  002830  C0A1  F0A5         	movff	___fltol@f1+3,??___fltol+3
  8345  002834  0E20               	movlw	32
  8346  002836  D005               	goto	u5930
  8347  002838                     u5935:
  8348  002838  90D8               	bcf	status,0,c
  8349  00283A  33A5               	rrcf	(??___fltol+3)& (0+255),f,b
  8350  00283C  33A4               	rrcf	(??___fltol+2)& (0+255),f,b
  8351  00283E  33A3               	rrcf	(??___fltol+1)& (0+255),f,b
  8352  002840  33A2               	rrcf	??___fltol& (0+255),f,b
  8353  002842                     u5930:
  8354  002842  2EE8               	decfsz	wreg,f,c
  8355  002844  D7F9               	goto	u5935
  8356  002846  51A2               	movf	??___fltol& (0+255),w,b
  8357  002848  6FA6               	movwf	___fltol@sign1& (0+255),b
  8358                           
  8359                           ; BSR set to: 0
  8360  00284A  8FA0               	bsf	(___fltol@f1+2)& (0+255),7,b
  8361                           
  8362                           ; BSR set to: 0
  8363  00284C  0EFF               	movlw	255
  8364  00284E  179E               	andwf	___fltol@f1& (0+255),f,b
  8365  002850  0EFF               	movlw	255
  8366  002852  179F               	andwf	(___fltol@f1+1)& (0+255),f,b
  8367  002854  0EFF               	movlw	255
  8368  002856  17A0               	andwf	(___fltol@f1+2)& (0+255),f,b
  8369  002858  0E00               	movlw	0
  8370  00285A  17A1               	andwf	(___fltol@f1+3)& (0+255),f,b
  8371                           
  8372                           ; BSR set to: 0
  8373  00285C  0E96               	movlw	150
  8374  00285E  5FA7               	subwf	___fltol@exp1& (0+255),f,b
  8375                           
  8376                           ; BSR set to: 0
  8377  002860  AFA7               	btfss	___fltol@exp1& (0+255),7,b
  8378  002862  D016               	goto	l702
  8379                           
  8380                           ; BSR set to: 0
  8381  002864  51A7               	movf	___fltol@exp1& (0+255),w,b
  8382  002866  0A80               	xorlw	128
  8383  002868  0F97               	addlw	151
  8384  00286A  B0D8               	btfsc	status,0,c
  8385  00286C  D009               	goto	l703
  8386                           
  8387                           ; BSR set to: 0
  8388  00286E  0E00               	movlw	0
  8389  002870  6F9E               	movwf	?___fltol& (0+255),b
  8390  002872  0E00               	movlw	0
  8391  002874  6F9F               	movwf	(?___fltol+1)& (0+255),b
  8392  002876  0E00               	movlw	0
  8393  002878  6FA0               	movwf	(?___fltol+2)& (0+255),b
  8394  00287A  0E00               	movlw	0
  8395  00287C  6FA1               	movwf	(?___fltol+3)& (0+255),b
  8396                           
  8397                           ; BSR set to: 0
  8398  00287E  0012               	return	
  8399  002880                     l703:
  8400                           
  8401                           ; BSR set to: 0
  8402                           
  8403                           ; BSR set to: 0
  8404                           
  8405                           ; BSR set to: 0
  8406  002880  90D8               	bcf	status,0,c
  8407  002882  33A1               	rrcf	(___fltol@f1+3)& (0+255),f,b
  8408  002884  33A0               	rrcf	(___fltol@f1+2)& (0+255),f,b
  8409  002886  339F               	rrcf	(___fltol@f1+1)& (0+255),f,b
  8410  002888  339E               	rrcf	___fltol@f1& (0+255),f,b
  8411                           
  8412                           ; BSR set to: 0
  8413  00288A  3FA7               	incfsz	___fltol@exp1& (0+255),f,b
  8414  00288C  D7F9               	goto	l703
  8415                           
  8416                           ; BSR set to: 0
  8417  00288E  D015               	goto	u5970
  8418  002890                     l702:
  8419                           
  8420                           ; BSR set to: 0
  8421                           
  8422                           ; BSR set to: 0
  8423  002890  0E1F               	movlw	31
  8424  002892  65A7               	cpfsgt	___fltol@exp1& (0+255),b
  8425  002894  D00F               	goto	l708
  8426                           
  8427                           ; BSR set to: 0
  8428  002896  0E00               	movlw	0
  8429  002898  6F9E               	movwf	?___fltol& (0+255),b
  8430  00289A  0E00               	movlw	0
  8431  00289C  6F9F               	movwf	(?___fltol+1)& (0+255),b
  8432  00289E  0E00               	movlw	0
  8433  0028A0  6FA0               	movwf	(?___fltol+2)& (0+255),b
  8434  0028A2  0E00               	movlw	0
  8435  0028A4  6FA1               	movwf	(?___fltol+3)& (0+255),b
  8436                           
  8437                           ; BSR set to: 0
  8438  0028A6  0012               	return	
  8439  0028A8                     
  8440                           ; BSR set to: 0
  8441                           
  8442                           ; BSR set to: 0
  8443  0028A8  90D8               	bcf	status,0,c
  8444  0028AA  379E               	rlcf	___fltol@f1& (0+255),f,b
  8445  0028AC  379F               	rlcf	(___fltol@f1+1)& (0+255),f,b
  8446  0028AE  37A0               	rlcf	(___fltol@f1+2)& (0+255),f,b
  8447  0028B0  37A1               	rlcf	(___fltol@f1+3)& (0+255),f,b
  8448  0028B2  07A7               	decf	___fltol@exp1& (0+255),f,b
  8449  0028B4                     l708:
  8450                           
  8451                           ; BSR set to: 0
  8452                           
  8453                           ; BSR set to: 0
  8454  0028B4  51A7               	movf	___fltol@exp1& (0+255),w,b
  8455  0028B6  A4D8               	btfss	status,2,c
  8456  0028B8  D7F7               	goto	l709
  8457  0028BA                     u5970:
  8458                           
  8459                           ; BSR set to: 0
  8460                           
  8461                           ; BSR set to: 0
  8462                           
  8463                           ; BSR set to: 0
  8464  0028BA  51A6               	movf	___fltol@sign1& (0+255),w,b
  8465  0028BC  B4D8               	btfsc	status,2,c
  8466  0028BE  D008               	goto	l711
  8467                           
  8468                           ; BSR set to: 0
  8469  0028C0  1FA1               	comf	(___fltol@f1+3)& (0+255),f,b
  8470  0028C2  1FA0               	comf	(___fltol@f1+2)& (0+255),f,b
  8471  0028C4  1F9F               	comf	(___fltol@f1+1)& (0+255),f,b
  8472  0028C6  6D9E               	negf	___fltol@f1& (0+255),b
  8473  0028C8  0E00               	movlw	0
  8474  0028CA  239F               	addwfc	(___fltol@f1+1)& (0+255),f,b
  8475  0028CC  23A0               	addwfc	(___fltol@f1+2)& (0+255),f,b
  8476  0028CE  23A1               	addwfc	(___fltol@f1+3)& (0+255),f,b
  8477  0028D0                     l711:
  8478                           
  8479                           ; BSR set to: 0
  8480                           
  8481                           ; BSR set to: 0
  8482  0028D0  C09E  F09E         	movff	___fltol@f1,?___fltol
  8483  0028D4  C09F  F09F         	movff	___fltol@f1+1,?___fltol+1
  8484  0028D8  C0A0  F0A0         	movff	___fltol@f1+2,?___fltol+2
  8485  0028DC  C0A1  F0A1         	movff	___fltol@f1+3,?___fltol+3
  8486  0028E0  0012               	return	
  8487  0028E2                     __end_of___fltol:
  8488                           	opt stack 0
  8489                           tblptru	equ	0xFF8
  8490                           tblptrh	equ	0xFF7
  8491                           tblptrl	equ	0xFF6
  8492                           tablat	equ	0xFF5
  8493                           prodh	equ	0xFF4
  8494                           prodl	equ	0xFF3
  8495                           intcon	equ	0xFF2
  8496                           intcon2	equ	0xFF1
  8497                           intcon3	equ	0xFF0
  8498                           postinc0	equ	0xFEE
  8499                           wreg	equ	0xFE8
  8500                           indf1	equ	0xFE7
  8501                           postdec1	equ	0xFE5
  8502                           fsr1h	equ	0xFE2
  8503                           fsr1l	equ	0xFE1
  8504                           indf2	equ	0xFDF
  8505                           postinc2	equ	0xFDE
  8506                           postdec2	equ	0xFDD
  8507                           fsr2h	equ	0xFDA
  8508                           fsr2l	equ	0xFD9
  8509                           status	equ	0xFD8
  8510                           
  8511 ;; *************** function ___flsub *****************
  8512 ;; Defined at:
  8513 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
  8514 ;; Parameters:    Size  Location     Type
  8515 ;;  b               4   54[BANK0 ] long 
  8516 ;;  a               4   58[BANK0 ] long 
  8517 ;; Auto vars:     Size  Location     Type
  8518 ;;		None
  8519 ;; Return value:  Size  Location     Type
  8520 ;;                  4   54[BANK0 ] long 
  8521 ;; Registers used:
  8522 ;;		wreg, status,2, status,0, cstack
  8523 ;; Tracked objects:
  8524 ;;		On entry : 0/0
  8525 ;;		On exit  : 0/0
  8526 ;;		Unchanged: 0/0
  8527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8528 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8531 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8532 ;;Total ram usage:        8 bytes
  8533 ;; Hardware stack levels used:    1
  8534 ;; Hardware stack levels required when called:    3
  8535 ;; This function calls:
  8536 ;;		___fladd
  8537 ;; This function is called by:
  8538 ;;		_sprintf
  8539 ;; This function uses a non-reentrant model
  8540 ;;
  8541                           
  8542                           	psect	text26
  8543  002E48                     __ptext26:
  8544                           	opt stack 0
  8545  002E48                     ___flsub:
  8546                           	opt stack 25
  8547                           
  8548                           ; BSR set to: 0
  8549                           ;incstack = 0
  8550  002E48  0E00               	movlw	0
  8551  002E4A  0100               	movlb	0	; () banked
  8552  002E4C  1BBA               	xorwf	___flsub@a& (0+255),f,b
  8553  002E4E  0E00               	movlw	0
  8554  002E50  1BBB               	xorwf	(___flsub@a+1)& (0+255),f,b
  8555  002E52  0E00               	movlw	0
  8556  002E54  1BBC               	xorwf	(___flsub@a+2)& (0+255),f,b
  8557  002E56  0E80               	movlw	128
  8558  002E58  1BBD               	xorwf	(___flsub@a+3)& (0+255),f,b
  8559                           
  8560                           ; BSR set to: 0
  8561  002E5A  C0B6  F0A2         	movff	___flsub@b,___fladd@b
  8562  002E5E  C0B7  F0A3         	movff	___flsub@b+1,___fladd@b+1
  8563  002E62  C0B8  F0A4         	movff	___flsub@b+2,___fladd@b+2
  8564  002E66  C0B9  F0A5         	movff	___flsub@b+3,___fladd@b+3
  8565  002E6A  C0BA  F0A6         	movff	___flsub@a,___fladd@a
  8566  002E6E  C0BB  F0A7         	movff	___flsub@a+1,___fladd@a+1
  8567  002E72  C0BC  F0A8         	movff	___flsub@a+2,___fladd@a+2
  8568  002E76  C0BD  F0A9         	movff	___flsub@a+3,___fladd@a+3
  8569  002E7A  EC53  F00B         	call	___fladd	;wreg free
  8570  002E7E  C0A2  F0B6         	movff	?___fladd,?___flsub
  8571  002E82  C0A3  F0B7         	movff	?___fladd+1,?___flsub+1
  8572  002E86  C0A4  F0B8         	movff	?___fladd+2,?___flsub+2
  8573  002E8A  C0A5  F0B9         	movff	?___fladd+3,?___flsub+3
  8574  002E8E  0012               	return	
  8575  002E90                     __end_of___flsub:
  8576                           	opt stack 0
  8577                           tblptru	equ	0xFF8
  8578                           tblptrh	equ	0xFF7
  8579                           tblptrl	equ	0xFF6
  8580                           tablat	equ	0xFF5
  8581                           prodh	equ	0xFF4
  8582                           prodl	equ	0xFF3
  8583                           intcon	equ	0xFF2
  8584                           intcon2	equ	0xFF1
  8585                           intcon3	equ	0xFF0
  8586                           postinc0	equ	0xFEE
  8587                           wreg	equ	0xFE8
  8588                           indf1	equ	0xFE7
  8589                           postdec1	equ	0xFE5
  8590                           fsr1h	equ	0xFE2
  8591                           fsr1l	equ	0xFE1
  8592                           indf2	equ	0xFDF
  8593                           postinc2	equ	0xFDE
  8594                           postdec2	equ	0xFDD
  8595                           fsr2h	equ	0xFDA
  8596                           fsr2l	equ	0xFD9
  8597                           status	equ	0xFD8
  8598                           
  8599 ;; *************** function ___fladd *****************
  8600 ;; Defined at:
  8601 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
  8602 ;; Parameters:    Size  Location     Type
  8603 ;;  b               4   34[BANK0 ] long 
  8604 ;;  a               4   38[BANK0 ] long 
  8605 ;; Auto vars:     Size  Location     Type
  8606 ;;  grs             1   53[BANK0 ] unsigned char 
  8607 ;;  bexp            1   52[BANK0 ] unsigned char 
  8608 ;;  aexp            1   51[BANK0 ] unsigned char 
  8609 ;;  signs           1   50[BANK0 ] unsigned char 
  8610 ;; Return value:  Size  Location     Type
  8611 ;;                  4   34[BANK0 ] unsigned char 
  8612 ;; Registers used:
  8613 ;;		wreg, status,2, status,0
  8614 ;; Tracked objects:
  8615 ;;		On entry : 0/0
  8616 ;;		On exit  : 0/0
  8617 ;;		Unchanged: 0/0
  8618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8619 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8620 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8621 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8622 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8623 ;;Total ram usage:       20 bytes
  8624 ;; Hardware stack levels used:    1
  8625 ;; Hardware stack levels required when called:    2
  8626 ;; This function calls:
  8627 ;;		Nothing
  8628 ;; This function is called by:
  8629 ;;		_operation
  8630 ;;		_sprintf
  8631 ;;		___flsub
  8632 ;;		_set_pwm1_percent
  8633 ;;		_set_pwm1_voltage
  8634 ;;		_set_pwm1_general
  8635 ;; This function uses a non-reentrant model
  8636 ;;
  8637                           
  8638                           	psect	text27
  8639  0016A6                     __ptext27:
  8640                           	opt stack 0
  8641  0016A6                     ___fladd:
  8642                           	opt stack 27
  8643                           
  8644                           ;incstack = 0
  8645  0016A6  0100               	movlb	0	; () banked
  8646  0016A8  51A5               	movf	(___fladd@b+3)& (0+255),w,b
  8647  0016AA  0B80               	andlw	128
  8648  0016AC  6FB2               	movwf	___fladd@signs& (0+255),b
  8649  0016AE  51A5               	movf	(___fladd@b+3)& (0+255),w,b
  8650  0016B0  25A5               	addwf	(___fladd@b+3)& (0+255),w,b
  8651  0016B2  6FB4               	movwf	___fladd@bexp& (0+255),b
  8652                           
  8653                           ; BSR set to: 0
  8654  0016B4  BFA4               	btfsc	(___fladd@b+2)& (0+255),7,b
  8655                           
  8656                           ; BSR set to: 0
  8657  0016B6  81B4               	bsf	___fladd@bexp& (0+255),0,b
  8658                           
  8659                           ; BSR set to: 0
  8660                           
  8661                           ; BSR set to: 0
  8662  0016B8  51B4               	movf	___fladd@bexp& (0+255),w,b
  8663  0016BA  B4D8               	btfsc	status,2,c
  8664  0016BC  D00D               	goto	l925
  8665                           
  8666                           ; BSR set to: 0
  8667  0016BE  29B4               	incf	___fladd@bexp& (0+255),w,b
  8668  0016C0  A4D8               	btfss	status,2,c
  8669  0016C2  D008               	goto	l926
  8670                           
  8671                           ; BSR set to: 0
  8672  0016C4  0E00               	movlw	0
  8673  0016C6  6FA2               	movwf	___fladd@b& (0+255),b
  8674  0016C8  0E00               	movlw	0
  8675  0016CA  6FA3               	movwf	(___fladd@b+1)& (0+255),b
  8676  0016CC  0E00               	movlw	0
  8677  0016CE  6FA4               	movwf	(___fladd@b+2)& (0+255),b
  8678  0016D0  0E00               	movlw	0
  8679  0016D2  6FA5               	movwf	(___fladd@b+3)& (0+255),b
  8680  0016D4                     l926:
  8681                           
  8682                           ; BSR set to: 0
  8683                           
  8684                           ; BSR set to: 0
  8685  0016D4  8FA4               	bsf	(___fladd@b+2)& (0+255),7,b
  8686  0016D6  D006               	goto	L10
  8687  0016D8                     l925:
  8688                           
  8689                           ; BSR set to: 0
  8690                           
  8691                           ; BSR set to: 0
  8692  0016D8  0E00               	movlw	0
  8693  0016DA  6FA2               	movwf	___fladd@b& (0+255),b
  8694  0016DC  0E00               	movlw	0
  8695  0016DE  6FA3               	movwf	(___fladd@b+1)& (0+255),b
  8696  0016E0  0E00               	movlw	0
  8697  0016E2  6FA4               	movwf	(___fladd@b+2)& (0+255),b
  8698  0016E4                     L10:
  8699  0016E4  0E00               	movlw	0
  8700  0016E6  6FA5               	movwf	(___fladd@b+3)& (0+255),b
  8701                           
  8702                           ; BSR set to: 0
  8703                           
  8704                           ; BSR set to: 0
  8705  0016E8  51A9               	movf	(___fladd@a+3)& (0+255),w,b
  8706  0016EA  0B80               	andlw	128
  8707  0016EC  6FB3               	movwf	___fladd@aexp& (0+255),b
  8708                           
  8709                           ; BSR set to: 0
  8710  0016EE  51B2               	movf	___fladd@signs& (0+255),w,b
  8711  0016F0  19B3               	xorwf	___fladd@aexp& (0+255),w,b
  8712  0016F2  A4D8               	btfss	status,2,c
  8713                           
  8714                           ; BSR set to: 0
  8715  0016F4  8DB2               	bsf	___fladd@signs& (0+255),6,b
  8716                           
  8717                           ; BSR set to: 0
  8718                           
  8719                           ; BSR set to: 0
  8720  0016F6  51A9               	movf	(___fladd@a+3)& (0+255),w,b
  8721  0016F8  25A9               	addwf	(___fladd@a+3)& (0+255),w,b
  8722  0016FA  6FB3               	movwf	___fladd@aexp& (0+255),b
  8723                           
  8724                           ; BSR set to: 0
  8725  0016FC  BFA8               	btfsc	(___fladd@a+2)& (0+255),7,b
  8726                           
  8727                           ; BSR set to: 0
  8728  0016FE  81B3               	bsf	___fladd@aexp& (0+255),0,b
  8729                           
  8730                           ; BSR set to: 0
  8731                           
  8732                           ; BSR set to: 0
  8733  001700  51B3               	movf	___fladd@aexp& (0+255),w,b
  8734  001702  B4D8               	btfsc	status,2,c
  8735  001704  D00D               	goto	l930
  8736                           
  8737                           ; BSR set to: 0
  8738  001706  29B3               	incf	___fladd@aexp& (0+255),w,b
  8739  001708  A4D8               	btfss	status,2,c
  8740  00170A  D008               	goto	l931
  8741                           
  8742                           ; BSR set to: 0
  8743  00170C  0E00               	movlw	0
  8744  00170E  6FA6               	movwf	___fladd@a& (0+255),b
  8745  001710  0E00               	movlw	0
  8746  001712  6FA7               	movwf	(___fladd@a+1)& (0+255),b
  8747  001714  0E00               	movlw	0
  8748  001716  6FA8               	movwf	(___fladd@a+2)& (0+255),b
  8749  001718  0E00               	movlw	0
  8750  00171A  6FA9               	movwf	(___fladd@a+3)& (0+255),b
  8751  00171C                     l931:
  8752                           
  8753                           ; BSR set to: 0
  8754                           
  8755                           ; BSR set to: 0
  8756  00171C  8FA8               	bsf	(___fladd@a+2)& (0+255),7,b
  8757  00171E  D006               	goto	L11
  8758  001720                     l930:
  8759                           
  8760                           ; BSR set to: 0
  8761                           
  8762                           ; BSR set to: 0
  8763  001720  0E00               	movlw	0
  8764  001722  6FA6               	movwf	___fladd@a& (0+255),b
  8765  001724  0E00               	movlw	0
  8766  001726  6FA7               	movwf	(___fladd@a+1)& (0+255),b
  8767  001728  0E00               	movlw	0
  8768  00172A  6FA8               	movwf	(___fladd@a+2)& (0+255),b
  8769  00172C                     L11:
  8770  00172C  0E00               	movlw	0
  8771  00172E  6FA9               	movwf	(___fladd@a+3)& (0+255),b
  8772                           
  8773                           ; BSR set to: 0
  8774                           
  8775                           ; BSR set to: 0
  8776  001730  51B4               	movf	___fladd@bexp& (0+255),w,b
  8777  001732  5DB3               	subwf	___fladd@aexp& (0+255),w,b
  8778  001734  B0D8               	btfsc	status,0,c
  8779  001736  D022               	goto	l933
  8780                           
  8781                           ; BSR set to: 0
  8782  001738  ADB2               	btfss	___fladd@signs& (0+255),6,b
  8783  00173A  D002               	goto	l934
  8784                           
  8785                           ; BSR set to: 0
  8786  00173C  0E80               	movlw	128
  8787  00173E  1BB2               	xorwf	___fladd@signs& (0+255),f,b
  8788  001740                     l934:
  8789                           
  8790                           ; BSR set to: 0
  8791                           
  8792                           ; BSR set to: 0
  8793  001740  C0B4  F0B5         	movff	___fladd@bexp,___fladd@grs
  8794                           
  8795                           ; BSR set to: 0
  8796  001744  C0B3  F0B4         	movff	___fladd@aexp,___fladd@bexp
  8797                           
  8798                           ; BSR set to: 0
  8799  001748  C0B5  F0B3         	movff	___fladd@grs,___fladd@aexp
  8800                           
  8801                           ; BSR set to: 0
  8802  00174C  C0A2  F0B5         	movff	___fladd@b,___fladd@grs
  8803                           
  8804                           ; BSR set to: 0
  8805  001750  C0A6  F0A2         	movff	___fladd@a,___fladd@b
  8806                           
  8807                           ; BSR set to: 0
  8808  001754  C0B5  F0A6         	movff	___fladd@grs,___fladd@a
  8809                           
  8810                           ; BSR set to: 0
  8811  001758  C0A3  F0B5         	movff	___fladd@b+1,___fladd@grs
  8812                           
  8813                           ; BSR set to: 0
  8814  00175C  C0A7  F0A3         	movff	___fladd@a+1,___fladd@b+1
  8815                           
  8816                           ; BSR set to: 0
  8817  001760  C0B5  F0A7         	movff	___fladd@grs,___fladd@a+1
  8818                           
  8819                           ; BSR set to: 0
  8820  001764  C0A4  F0B5         	movff	___fladd@b+2,___fladd@grs
  8821                           
  8822                           ; BSR set to: 0
  8823  001768  C0A8  F0A4         	movff	___fladd@a+2,___fladd@b+2
  8824                           
  8825                           ; BSR set to: 0
  8826  00176C  C0B5  F0A8         	movff	___fladd@grs,___fladd@a+2
  8827                           
  8828                           ; BSR set to: 0
  8829  001770  C0A5  F0B5         	movff	___fladd@b+3,___fladd@grs
  8830                           
  8831                           ; BSR set to: 0
  8832  001774  C0A9  F0A5         	movff	___fladd@a+3,___fladd@b+3
  8833                           
  8834                           ; BSR set to: 0
  8835  001778  C0B5  F0A9         	movff	___fladd@grs,___fladd@a+3
  8836  00177C                     l933:
  8837                           
  8838                           ; BSR set to: 0
  8839                           
  8840                           ; BSR set to: 0
  8841  00177C  0E00               	movlw	0
  8842  00177E  6FB5               	movwf	___fladd@grs& (0+255),b
  8843                           
  8844                           ; BSR set to: 0
  8845  001780  51B4               	movf	___fladd@bexp& (0+255),w,b
  8846  001782  6FAA               	movwf	??___fladd& (0+255),b
  8847  001784  6BAB               	clrf	(??___fladd+1)& (0+255),b
  8848  001786  1FAA               	comf	??___fladd& (0+255),f,b
  8849  001788  1FAB               	comf	(??___fladd+1)& (0+255),f,b
  8850  00178A  4BAA               	infsnz	??___fladd& (0+255),f,b
  8851  00178C  2BAB               	incf	(??___fladd+1)& (0+255),f,b
  8852  00178E  51B3               	movf	___fladd@aexp& (0+255),w,b
  8853  001790  6FAC               	movwf	(??___fladd+2)& (0+255),b
  8854  001792  6BAD               	clrf	(??___fladd+3)& (0+255),b
  8855  001794  51AA               	movf	??___fladd& (0+255),w,b
  8856  001796  27AC               	addwf	(??___fladd+2)& (0+255),f,b
  8857  001798  51AB               	movf	(??___fladd+1)& (0+255),w,b
  8858  00179A  23AD               	addwfc	(??___fladd+3)& (0+255),f,b
  8859  00179C  BFAD               	btfsc	(??___fladd+3)& (0+255),7,b
  8860  00179E  D02C               	goto	l937
  8861  0017A0  51AD               	movf	(??___fladd+3)& (0+255),w,b
  8862  0017A2  E104               	bnz	u5000
  8863  0017A4  0E1A               	movlw	26
  8864  0017A6  5DAC               	subwf	(??___fladd+2)& (0+255),w,b
  8865  0017A8  A0D8               	btfss	status,0,c
  8866  0017AA  D026               	goto	l937
  8867  0017AC                     u5000:
  8868                           
  8869                           ; BSR set to: 0
  8870  0017AC  51A2               	movf	___fladd@b& (0+255),w,b
  8871  0017AE  11A3               	iorwf	(___fladd@b+1)& (0+255),w,b
  8872  0017B0  11A4               	iorwf	(___fladd@b+2)& (0+255),w,b
  8873  0017B2  11A5               	iorwf	(___fladd@b+3)& (0+255),w,b
  8874  0017B4  B4D8               	btfsc	status,2,c
  8875  0017B6  D002               	goto	u5010
  8876  0017B8  0E01               	movlw	1
  8877  0017BA  D001               	goto	u5020
  8878  0017BC                     u5010:
  8879  0017BC  0E00               	movlw	0
  8880  0017BE                     u5020:
  8881  0017BE  6FB5               	movwf	___fladd@grs& (0+255),b
  8882                           
  8883                           ; BSR set to: 0
  8884  0017C0  0E00               	movlw	0
  8885  0017C2  6FA2               	movwf	___fladd@b& (0+255),b
  8886  0017C4  0E00               	movlw	0
  8887  0017C6  6FA3               	movwf	(___fladd@b+1)& (0+255),b
  8888  0017C8  0E00               	movlw	0
  8889  0017CA  6FA4               	movwf	(___fladd@b+2)& (0+255),b
  8890  0017CC  0E00               	movlw	0
  8891  0017CE  6FA5               	movwf	(___fladd@b+3)& (0+255),b
  8892                           
  8893                           ; BSR set to: 0
  8894  0017D0  C0B3  F0B4         	movff	___fladd@aexp,___fladd@bexp
  8895  0017D4  D015               	goto	u5050
  8896  0017D6                     l938:
  8897                           
  8898                           ; BSR set to: 0
  8899  0017D6  A1B5               	btfss	___fladd@grs& (0+255),0,b
  8900  0017D8  D005               	goto	l939
  8901                           
  8902                           ; BSR set to: 0
  8903  0017DA  90D8               	bcf	status,0,c
  8904  0017DC  31B5               	rrcf	___fladd@grs& (0+255),w,b
  8905  0017DE  0901               	iorlw	1
  8906  0017E0  6FB5               	movwf	___fladd@grs& (0+255),b
  8907  0017E2  D002               	goto	l940
  8908  0017E4                     l939:
  8909                           
  8910                           ; BSR set to: 0
  8911                           
  8912                           ; BSR set to: 0
  8913  0017E4  90D8               	bcf	status,0,c
  8914  0017E6  33B5               	rrcf	___fladd@grs& (0+255),f,b
  8915  0017E8                     l940:
  8916                           
  8917                           ; BSR set to: 0
  8918                           
  8919                           ; BSR set to: 0
  8920  0017E8  B1A2               	btfsc	___fladd@b& (0+255),0,b
  8921                           
  8922                           ; BSR set to: 0
  8923  0017EA  8FB5               	bsf	___fladd@grs& (0+255),7,b
  8924                           
  8925                           ; BSR set to: 0
  8926                           
  8927                           ; BSR set to: 0
  8928  0017EC  35A5               	rlcf	(___fladd@b+3)& (0+255),w,b
  8929  0017EE  33A5               	rrcf	(___fladd@b+3)& (0+255),f,b
  8930  0017F0  33A4               	rrcf	(___fladd@b+2)& (0+255),f,b
  8931  0017F2  33A3               	rrcf	(___fladd@b+1)& (0+255),f,b
  8932  0017F4  33A2               	rrcf	___fladd@b& (0+255),f,b
  8933                           
  8934                           ; BSR set to: 0
  8935  0017F6  2BB4               	incf	___fladd@bexp& (0+255),f,b
  8936  0017F8                     l937:
  8937                           
  8938                           ; BSR set to: 0
  8939  0017F8  51B3               	movf	___fladd@aexp& (0+255),w,b
  8940  0017FA  5DB4               	subwf	___fladd@bexp& (0+255),w,b
  8941  0017FC  A0D8               	btfss	status,0,c
  8942  0017FE  D7EB               	goto	l938
  8943  001800                     u5050:
  8944                           
  8945                           ; BSR set to: 0
  8946                           
  8947                           ; BSR set to: 0
  8948  001800  BDB2               	btfsc	___fladd@signs& (0+255),6,b
  8949  001802  D029               	goto	l943
  8950                           
  8951                           ; BSR set to: 0
  8952  001804  51B4               	movf	___fladd@bexp& (0+255),w,b
  8953  001806  A4D8               	btfss	status,2,c
  8954  001808  D009               	goto	l944
  8955                           
  8956                           ; BSR set to: 0
  8957  00180A  0E00               	movlw	0
  8958  00180C  6FA2               	movwf	?___fladd& (0+255),b
  8959  00180E  0E00               	movlw	0
  8960  001810  6FA3               	movwf	(?___fladd+1)& (0+255),b
  8961  001812  0E00               	movlw	0
  8962  001814  6FA4               	movwf	(?___fladd+2)& (0+255),b
  8963  001816  0E00               	movlw	0
  8964  001818  6FA5               	movwf	(?___fladd+3)& (0+255),b
  8965                           
  8966                           ; BSR set to: 0
  8967  00181A  0012               	return	
  8968  00181C                     l944:
  8969                           
  8970                           ; BSR set to: 0
  8971                           
  8972                           ; BSR set to: 0
  8973  00181C  51A6               	movf	___fladd@a& (0+255),w,b
  8974  00181E  27A2               	addwf	___fladd@b& (0+255),f,b
  8975  001820  51A7               	movf	(___fladd@a+1)& (0+255),w,b
  8976  001822  23A3               	addwfc	(___fladd@b+1)& (0+255),f,b
  8977  001824  51A8               	movf	(___fladd@a+2)& (0+255),w,b
  8978  001826  23A4               	addwfc	(___fladd@b+2)& (0+255),f,b
  8979  001828  51A9               	movf	(___fladd@a+3)& (0+255),w,b
  8980  00182A  23A5               	addwfc	(___fladd@b+3)& (0+255),f,b
  8981                           
  8982                           ; BSR set to: 0
  8983  00182C  A1A5               	btfss	(___fladd@b+3)& (0+255),0,b
  8984  00182E  D083               	goto	u5180
  8985                           
  8986                           ; BSR set to: 0
  8987  001830  A1B5               	btfss	___fladd@grs& (0+255),0,b
  8988  001832  D006               	goto	l947
  8989                           
  8990                           ; BSR set to: 0
  8991  001834  90D8               	bcf	status,0,c
  8992  001836  33B5               	rrcf	___fladd@grs& (0+255),f,b
  8993  001838  51B5               	movf	___fladd@grs& (0+255),w,b
  8994  00183A  0901               	iorlw	1
  8995  00183C  6FB5               	movwf	___fladd@grs& (0+255),b
  8996  00183E  D002               	goto	l948
  8997  001840                     l947:
  8998                           
  8999                           ; BSR set to: 0
  9000                           
  9001                           ; BSR set to: 0
  9002  001840  90D8               	bcf	status,0,c
  9003  001842  33B5               	rrcf	___fladd@grs& (0+255),f,b
  9004  001844                     l948:
  9005                           
  9006                           ; BSR set to: 0
  9007                           
  9008                           ; BSR set to: 0
  9009  001844  B1A2               	btfsc	___fladd@b& (0+255),0,b
  9010                           
  9011                           ; BSR set to: 0
  9012  001846  8FB5               	bsf	___fladd@grs& (0+255),7,b
  9013                           
  9014                           ; BSR set to: 0
  9015                           
  9016                           ; BSR set to: 0
  9017  001848  35A5               	rlcf	(___fladd@b+3)& (0+255),w,b
  9018  00184A  33A5               	rrcf	(___fladd@b+3)& (0+255),f,b
  9019  00184C  33A4               	rrcf	(___fladd@b+2)& (0+255),f,b
  9020  00184E  33A3               	rrcf	(___fladd@b+1)& (0+255),f,b
  9021  001850  33A2               	rrcf	___fladd@b& (0+255),f,b
  9022                           
  9023                           ; BSR set to: 0
  9024  001852  2BB4               	incf	___fladd@bexp& (0+255),f,b
  9025                           
  9026                           ; BSR set to: 0
  9027  001854  D070               	goto	u5180
  9028  001856                     l943:
  9029                           
  9030                           ; BSR set to: 0
  9031                           
  9032                           ; BSR set to: 0
  9033  001856  51A6               	movf	___fladd@a& (0+255),w,b
  9034  001858  5DA2               	subwf	___fladd@b& (0+255),w,b
  9035  00185A  51A7               	movf	(___fladd@a+1)& (0+255),w,b
  9036  00185C  59A3               	subwfb	(___fladd@b+1)& (0+255),w,b
  9037  00185E  51A8               	movf	(___fladd@a+2)& (0+255),w,b
  9038  001860  59A4               	subwfb	(___fladd@b+2)& (0+255),w,b
  9039  001862  51A5               	movf	(___fladd@b+3)& (0+255),w,b
  9040  001864  0A80               	xorlw	128
  9041  001866  6FAA               	movwf	??___fladd& (0+255),b
  9042  001868  51A9               	movf	(___fladd@a+3)& (0+255),w,b
  9043  00186A  0A80               	xorlw	128
  9044  00186C  59AA               	subwfb	??___fladd& (0+255),w,b
  9045  00186E  B0D8               	btfsc	status,0,c
  9046  001870  D036               	goto	l951
  9047                           
  9048                           ; BSR set to: 0
  9049  001872  C0A2  F0AA         	movff	___fladd@b,??___fladd
  9050  001876  C0A3  F0AB         	movff	___fladd@b+1,??___fladd+1
  9051  00187A  C0A4  F0AC         	movff	___fladd@b+2,??___fladd+2
  9052  00187E  C0A5  F0AD         	movff	___fladd@b+3,??___fladd+3
  9053  001882  1FAA               	comf	??___fladd& (0+255),f,b
  9054  001884  1FAB               	comf	(??___fladd+1)& (0+255),f,b
  9055  001886  1FAC               	comf	(??___fladd+2)& (0+255),f,b
  9056  001888  1FAD               	comf	(??___fladd+3)& (0+255),f,b
  9057  00188A  2BAA               	incf	??___fladd& (0+255),f,b
  9058  00188C  0E00               	movlw	0
  9059  00188E  23AB               	addwfc	(??___fladd+1)& (0+255),f,b
  9060  001890  23AC               	addwfc	(??___fladd+2)& (0+255),f,b
  9061  001892  23AD               	addwfc	(??___fladd+3)& (0+255),f,b
  9062  001894  51A6               	movf	___fladd@a& (0+255),w,b
  9063  001896  25AA               	addwf	??___fladd& (0+255),w,b
  9064  001898  6FAE               	movwf	(??___fladd+4)& (0+255),b
  9065  00189A  51A7               	movf	(___fladd@a+1)& (0+255),w,b
  9066  00189C  21AB               	addwfc	(??___fladd+1)& (0+255),w,b
  9067  00189E  6FAF               	movwf	(??___fladd+5)& (0+255),b
  9068  0018A0  51A8               	movf	(___fladd@a+2)& (0+255),w,b
  9069  0018A2  21AC               	addwfc	(??___fladd+2)& (0+255),w,b
  9070  0018A4  6FB0               	movwf	(??___fladd+6)& (0+255),b
  9071  0018A6  51A9               	movf	(___fladd@a+3)& (0+255),w,b
  9072  0018A8  21AD               	addwfc	(??___fladd+3)& (0+255),w,b
  9073  0018AA  6FB1               	movwf	(??___fladd+7)& (0+255),b
  9074  0018AC  0EFF               	movlw	255
  9075  0018AE  25AE               	addwf	(??___fladd+4)& (0+255),w,b
  9076  0018B0  6FA2               	movwf	___fladd@b& (0+255),b
  9077  0018B2  0EFF               	movlw	255
  9078  0018B4  21AF               	addwfc	(??___fladd+5)& (0+255),w,b
  9079  0018B6  6FA3               	movwf	(___fladd@b+1)& (0+255),b
  9080  0018B8  0EFF               	movlw	255
  9081  0018BA  21B0               	addwfc	(??___fladd+6)& (0+255),w,b
  9082  0018BC  6FA4               	movwf	(___fladd@b+2)& (0+255),b
  9083  0018BE  0EFF               	movlw	255
  9084  0018C0  21B1               	addwfc	(??___fladd+7)& (0+255),w,b
  9085  0018C2  6FA5               	movwf	(___fladd@b+3)& (0+255),b
  9086  0018C4  0E80               	movlw	128
  9087  0018C6  1BB2               	xorwf	___fladd@signs& (0+255),f,b
  9088                           
  9089                           ; BSR set to: 0
  9090  0018C8  6DB5               	negf	___fladd@grs& (0+255),b
  9091                           
  9092                           ; BSR set to: 0
  9093  0018CA  51B5               	movf	___fladd@grs& (0+255),w,b
  9094  0018CC  A4D8               	btfss	status,2,c
  9095  0018CE  D00F               	goto	l953
  9096                           
  9097                           ; BSR set to: 0
  9098  0018D0  0E01               	movlw	1
  9099  0018D2  27A2               	addwf	___fladd@b& (0+255),f,b
  9100  0018D4  0E00               	movlw	0
  9101  0018D6  23A3               	addwfc	(___fladd@b+1)& (0+255),f,b
  9102  0018D8  23A4               	addwfc	(___fladd@b+2)& (0+255),f,b
  9103  0018DA  23A5               	addwfc	(___fladd@b+3)& (0+255),f,b
  9104                           
  9105                           ; BSR set to: 0
  9106  0018DC  D008               	goto	l953
  9107  0018DE                     l951:
  9108                           
  9109                           ; BSR set to: 0
  9110                           
  9111                           ; BSR set to: 0
  9112  0018DE  51A6               	movf	___fladd@a& (0+255),w,b
  9113  0018E0  5FA2               	subwf	___fladd@b& (0+255),f,b
  9114  0018E2  51A7               	movf	(___fladd@a+1)& (0+255),w,b
  9115  0018E4  5BA3               	subwfb	(___fladd@b+1)& (0+255),f,b
  9116  0018E6  51A8               	movf	(___fladd@a+2)& (0+255),w,b
  9117  0018E8  5BA4               	subwfb	(___fladd@b+2)& (0+255),f,b
  9118  0018EA  51A9               	movf	(___fladd@a+3)& (0+255),w,b
  9119  0018EC  5BA5               	subwfb	(___fladd@b+3)& (0+255),f,b
  9120  0018EE                     l953:
  9121                           
  9122                           ; BSR set to: 0
  9123  0018EE  51A2               	movf	___fladd@b& (0+255),w,b
  9124  0018F0  11A3               	iorwf	(___fladd@b+1)& (0+255),w,b
  9125  0018F2  11A4               	iorwf	(___fladd@b+2)& (0+255),w,b
  9126  0018F4  11A5               	iorwf	(___fladd@b+3)& (0+255),w,b
  9127  0018F6  A4D8               	btfss	status,2,c
  9128  0018F8  D01C               	goto	l960
  9129                           
  9130                           ; BSR set to: 0
  9131  0018FA  51B5               	movf	___fladd@grs& (0+255),w,b
  9132  0018FC  A4D8               	btfss	status,2,c
  9133  0018FE  D019               	goto	l960
  9134                           
  9135                           ; BSR set to: 0
  9136  001900  0E00               	movlw	0
  9137  001902  6FA2               	movwf	?___fladd& (0+255),b
  9138  001904  0E00               	movlw	0
  9139  001906  6FA3               	movwf	(?___fladd+1)& (0+255),b
  9140  001908  0E00               	movlw	0
  9141  00190A  6FA4               	movwf	(?___fladd+2)& (0+255),b
  9142  00190C  0E00               	movlw	0
  9143  00190E  6FA5               	movwf	(?___fladd+3)& (0+255),b
  9144                           
  9145                           ; BSR set to: 0
  9146  001910  0012               	return	
  9147  001912                     
  9148                           ; BSR set to: 0
  9149                           
  9150                           ; BSR set to: 0
  9151  001912  90D8               	bcf	status,0,c
  9152  001914  37A2               	rlcf	___fladd@b& (0+255),f,b
  9153  001916  37A3               	rlcf	(___fladd@b+1)& (0+255),f,b
  9154  001918  37A4               	rlcf	(___fladd@b+2)& (0+255),f,b
  9155  00191A  37A5               	rlcf	(___fladd@b+3)& (0+255),f,b
  9156                           
  9157                           ; BSR set to: 0
  9158  00191C  BFB5               	btfsc	___fladd@grs& (0+255),7,b
  9159                           
  9160                           ; BSR set to: 0
  9161  00191E  81A2               	bsf	___fladd@b& (0+255),0,b
  9162                           
  9163                           ; BSR set to: 0
  9164                           
  9165                           ; BSR set to: 0
  9166  001920  A1B5               	btfss	___fladd@grs& (0+255),0,b
  9167  001922  D002               	goto	l958
  9168                           
  9169                           ; BSR set to: 0
  9170  001924  80D8               	bsf	status,0,c
  9171  001926  D001               	goto	L12
  9172  001928                     l958:
  9173                           
  9174                           ; BSR set to: 0
  9175                           
  9176                           ; BSR set to: 0
  9177  001928  90D8               	bcf	status,0,c
  9178  00192A                     L12:
  9179  00192A  37B5               	rlcf	___fladd@grs& (0+255),f,b
  9180                           
  9181                           ; BSR set to: 0
  9182                           
  9183                           ; BSR set to: 0
  9184  00192C  51B4               	movf	___fladd@bexp& (0+255),w,b
  9185  00192E  A4D8               	btfss	status,2,c
  9186                           
  9187                           ; BSR set to: 0
  9188  001930  07B4               	decf	___fladd@bexp& (0+255),f,b
  9189  001932                     l960:
  9190                           
  9191                           ; BSR set to: 0
  9192                           
  9193                           ; BSR set to: 0
  9194                           
  9195                           ; BSR set to: 0
  9196  001932  AFA4               	btfss	(___fladd@b+2)& (0+255),7,b
  9197  001934  D7EE               	goto	l956
  9198  001936                     u5180:
  9199                           
  9200                           ; BSR set to: 0
  9201                           
  9202                           ; BSR set to: 0
  9203                           
  9204                           ; BSR set to: 0
  9205  001936  0E00               	movlw	0
  9206  001938  6FB3               	movwf	___fladd@aexp& (0+255),b
  9207                           
  9208                           ; BSR set to: 0
  9209  00193A  AFB5               	btfss	___fladd@grs& (0+255),7,b
  9210  00193C  D00A               	goto	l965
  9211                           
  9212                           ; BSR set to: 0
  9213  00193E  C0B5  F0AA         	movff	___fladd@grs,??___fladd
  9214  001942  0E7F               	movlw	127
  9215  001944  17AA               	andwf	??___fladd& (0+255),f,b
  9216  001946  A4D8               	btfss	status,2,c
  9217  001948  D002               	goto	u5210
  9218                           
  9219                           ; BSR set to: 0
  9220                           
  9221                           ; BSR set to: 0
  9222  00194A  A1A2               	btfss	___fladd@b& (0+255),0,b
  9223  00194C  D002               	goto	l965
  9224  00194E                     u5210:
  9225                           
  9226                           ; BSR set to: 0
  9227  00194E  0E01               	movlw	1
  9228  001950  6FB3               	movwf	___fladd@aexp& (0+255),b
  9229  001952                     l965:
  9230                           
  9231                           ; BSR set to: 0
  9232                           
  9233                           ; BSR set to: 0
  9234                           
  9235                           ; BSR set to: 0
  9236  001952  51B3               	movf	___fladd@aexp& (0+255),w,b
  9237  001954  B4D8               	btfsc	status,2,c
  9238  001956  D020               	goto	l968
  9239                           
  9240                           ; BSR set to: 0
  9241  001958  0E01               	movlw	1
  9242  00195A  27A2               	addwf	___fladd@b& (0+255),f,b
  9243  00195C  0E00               	movlw	0
  9244  00195E  23A3               	addwfc	(___fladd@b+1)& (0+255),f,b
  9245  001960  23A4               	addwfc	(___fladd@b+2)& (0+255),f,b
  9246  001962  23A5               	addwfc	(___fladd@b+3)& (0+255),f,b
  9247                           
  9248                           ; BSR set to: 0
  9249  001964  A1A5               	btfss	(___fladd@b+3)& (0+255),0,b
  9250  001966  D018               	goto	l968
  9251                           
  9252                           ; BSR set to: 0
  9253  001968  C0A2  F0AA         	movff	___fladd@b,??___fladd
  9254  00196C  C0A3  F0AB         	movff	___fladd@b+1,??___fladd+1
  9255  001970  C0A4  F0AC         	movff	___fladd@b+2,??___fladd+2
  9256  001974  C0A5  F0AD         	movff	___fladd@b+3,??___fladd+3
  9257  001978  35AD               	rlcf	(??___fladd+3)& (0+255),w,b
  9258  00197A  33AD               	rrcf	(??___fladd+3)& (0+255),f,b
  9259  00197C  33AC               	rrcf	(??___fladd+2)& (0+255),f,b
  9260  00197E  33AB               	rrcf	(??___fladd+1)& (0+255),f,b
  9261  001980  33AA               	rrcf	??___fladd& (0+255),f,b
  9262  001982  C0AA  F0A2         	movff	??___fladd,___fladd@b
  9263  001986  C0AB  F0A3         	movff	??___fladd+1,___fladd@b+1
  9264  00198A  C0AC  F0A4         	movff	??___fladd+2,___fladd@b+2
  9265  00198E  C0AD  F0A5         	movff	??___fladd+3,___fladd@b+3
  9266  001992  29B4               	incf	___fladd@bexp& (0+255),w,b
  9267  001994  A4D8               	btfss	status,2,c
  9268                           
  9269                           ; BSR set to: 0
  9270  001996  2BB4               	incf	___fladd@bexp& (0+255),f,b
  9271  001998                     l968:
  9272                           
  9273                           ; BSR set to: 0
  9274                           
  9275                           ; BSR set to: 0
  9276                           
  9277                           ; BSR set to: 0
  9278                           
  9279                           ; BSR set to: 0
  9280  001998  29B4               	incf	___fladd@bexp& (0+255),w,b
  9281  00199A  B4D8               	btfsc	status,2,c
  9282  00199C  D003               	goto	u5260
  9283                           
  9284                           ; BSR set to: 0
  9285  00199E  51B4               	movf	___fladd@bexp& (0+255),w,b
  9286  0019A0  A4D8               	btfss	status,2,c
  9287  0019A2  D00D               	goto	l972
  9288  0019A4                     u5260:
  9289                           
  9290                           ; BSR set to: 0
  9291                           
  9292                           ; BSR set to: 0
  9293  0019A4  0E00               	movlw	0
  9294  0019A6  6FA2               	movwf	___fladd@b& (0+255),b
  9295  0019A8  0E00               	movlw	0
  9296  0019AA  6FA3               	movwf	(___fladd@b+1)& (0+255),b
  9297  0019AC  0E00               	movlw	0
  9298  0019AE  6FA4               	movwf	(___fladd@b+2)& (0+255),b
  9299  0019B0  0E00               	movlw	0
  9300  0019B2  6FA5               	movwf	(___fladd@b+3)& (0+255),b
  9301  0019B4  51B4               	movf	___fladd@bexp& (0+255),w,b
  9302  0019B6  A4D8               	btfss	status,2,c
  9303  0019B8  D002               	goto	l972
  9304                           
  9305                           ; BSR set to: 0
  9306  0019BA  0E00               	movlw	0
  9307  0019BC  6FB2               	movwf	___fladd@signs& (0+255),b
  9308  0019BE                     l972:
  9309                           
  9310                           ; BSR set to: 0
  9311                           
  9312                           ; BSR set to: 0
  9313                           
  9314                           ; BSR set to: 0
  9315  0019BE  A1B4               	btfss	___fladd@bexp& (0+255),0,b
  9316  0019C0  D002               	goto	l973
  9317                           
  9318                           ; BSR set to: 0
  9319  0019C2  8FA4               	bsf	(___fladd@b+2)& (0+255),7,b
  9320  0019C4  D001               	goto	l974
  9321  0019C6                     l973:
  9322                           
  9323                           ; BSR set to: 0
  9324                           
  9325                           ; BSR set to: 0
  9326  0019C6  9FA4               	bcf	(___fladd@b+2)& (0+255),7,b
  9327  0019C8                     l974:
  9328                           
  9329                           ; BSR set to: 0
  9330                           
  9331                           ; BSR set to: 0
  9332  0019C8  90D8               	bcf	status,0,c
  9333  0019CA  31B4               	rrcf	___fladd@bexp& (0+255),w,b
  9334  0019CC  6FA5               	movwf	(___fladd@b+3)& (0+255),b
  9335                           
  9336                           ; BSR set to: 0
  9337  0019CE  BFB2               	btfsc	___fladd@signs& (0+255),7,b
  9338                           
  9339                           ; BSR set to: 0
  9340  0019D0  8FA5               	bsf	(___fladd@b+3)& (0+255),7,b
  9341                           
  9342                           ; BSR set to: 0
  9343                           
  9344                           ; BSR set to: 0
  9345  0019D2  C0A2  F0A2         	movff	___fladd@b,?___fladd
  9346  0019D6  C0A3  F0A3         	movff	___fladd@b+1,?___fladd+1
  9347  0019DA  C0A4  F0A4         	movff	___fladd@b+2,?___fladd+2
  9348  0019DE  C0A5  F0A5         	movff	___fladd@b+3,?___fladd+3
  9349  0019E2  0012               	return	
  9350  0019E4                     __end_of___fladd:
  9351                           	opt stack 0
  9352                           tblptru	equ	0xFF8
  9353                           tblptrh	equ	0xFF7
  9354                           tblptrl	equ	0xFF6
  9355                           tablat	equ	0xFF5
  9356                           prodh	equ	0xFF4
  9357                           prodl	equ	0xFF3
  9358                           intcon	equ	0xFF2
  9359                           intcon2	equ	0xFF1
  9360                           intcon3	equ	0xFF0
  9361                           postinc0	equ	0xFEE
  9362                           wreg	equ	0xFE8
  9363                           indf1	equ	0xFE7
  9364                           postdec1	equ	0xFE5
  9365                           fsr1h	equ	0xFE2
  9366                           fsr1l	equ	0xFE1
  9367                           indf2	equ	0xFDF
  9368                           postinc2	equ	0xFDE
  9369                           postdec2	equ	0xFDD
  9370                           fsr2h	equ	0xFDA
  9371                           fsr2l	equ	0xFD9
  9372                           status	equ	0xFD8
  9373                           
  9374 ;; *************** function ___flneg *****************
  9375 ;; Defined at:
  9376 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flneg.c"
  9377 ;; Parameters:    Size  Location     Type
  9378 ;;  f1              4   50[COMRAM] unsigned char 
  9379 ;; Auto vars:     Size  Location     Type
  9380 ;;		None
  9381 ;; Return value:  Size  Location     Type
  9382 ;;                  4   50[COMRAM] unsigned char 
  9383 ;; Registers used:
  9384 ;;		wreg, status,2, status,0
  9385 ;; Tracked objects:
  9386 ;;		On entry : 0/0
  9387 ;;		On exit  : 0/0
  9388 ;;		Unchanged: 0/0
  9389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9390 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9393 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9394 ;;Total ram usage:        4 bytes
  9395 ;; Hardware stack levels used:    1
  9396 ;; Hardware stack levels required when called:    2
  9397 ;; This function calls:
  9398 ;;		Nothing
  9399 ;; This function is called by:
  9400 ;;		_operation
  9401 ;;		_sprintf
  9402 ;;		_set_pwm1_general
  9403 ;; This function uses a non-reentrant model
  9404 ;;
  9405                           
  9406                           	psect	text28
  9407  002F82                     __ptext28:
  9408                           	opt stack 0
  9409  002F82                     ___flneg:
  9410                           	opt stack 27
  9411                           
  9412                           ; BSR set to: 0
  9413                           ;incstack = 0
  9414  002F82  5033               	movf	___flneg@f1,w,c
  9415  002F84  1034               	iorwf	___flneg@f1+1,w,c
  9416  002F86  1035               	iorwf	___flneg@f1+2,w,c
  9417  002F88  1036               	iorwf	___flneg@f1+3,w,c
  9418  002F8A  B4D8               	btfsc	status,2,c
  9419  002F8C  D008               	goto	l677
  9420  002F8E  0E00               	movlw	0
  9421  002F90  1A33               	xorwf	___flneg@f1,f,c
  9422  002F92  0E00               	movlw	0
  9423  002F94  1A34               	xorwf	___flneg@f1+1,f,c
  9424  002F96  0E00               	movlw	0
  9425  002F98  1A35               	xorwf	___flneg@f1+2,f,c
  9426  002F9A  0E80               	movlw	128
  9427  002F9C  1A36               	xorwf	___flneg@f1+3,f,c
  9428  002F9E                     l677:
  9429  002F9E  C033  F033         	movff	___flneg@f1,?___flneg
  9430  002FA2  C034  F034         	movff	___flneg@f1+1,?___flneg+1
  9431  002FA6  C035  F035         	movff	___flneg@f1+2,?___flneg+2
  9432  002FAA  C036  F036         	movff	___flneg@f1+3,?___flneg+3
  9433  002FAE  0012               	return	
  9434  002FB0                     __end_of___flneg:
  9435                           	opt stack 0
  9436                           tblptru	equ	0xFF8
  9437                           tblptrh	equ	0xFF7
  9438                           tblptrl	equ	0xFF6
  9439                           tablat	equ	0xFF5
  9440                           prodh	equ	0xFF4
  9441                           prodl	equ	0xFF3
  9442                           intcon	equ	0xFF2
  9443                           intcon2	equ	0xFF1
  9444                           intcon3	equ	0xFF0
  9445                           postinc0	equ	0xFEE
  9446                           wreg	equ	0xFE8
  9447                           indf1	equ	0xFE7
  9448                           postdec1	equ	0xFE5
  9449                           fsr1h	equ	0xFE2
  9450                           fsr1l	equ	0xFE1
  9451                           indf2	equ	0xFDF
  9452                           postinc2	equ	0xFDE
  9453                           postdec2	equ	0xFDD
  9454                           fsr2h	equ	0xFDA
  9455                           fsr2l	equ	0xFD9
  9456                           status	equ	0xFD8
  9457                           
  9458 ;; *************** function ___flge *****************
  9459 ;; Defined at:
  9460 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flge.c"
  9461 ;; Parameters:    Size  Location     Type
  9462 ;;  ff1             4   54[BANK0 ] unsigned char 
  9463 ;;  ff2             4   58[BANK0 ] unsigned char 
  9464 ;; Auto vars:     Size  Location     Type
  9465 ;;		None
  9466 ;; Return value:  Size  Location     Type
  9467 ;;		None               void
  9468 ;; Registers used:
  9469 ;;		wreg, status,2, status,0
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9475 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9477 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9478 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9479 ;;Total ram usage:       12 bytes
  9480 ;; Hardware stack levels used:    1
  9481 ;; Hardware stack levels required when called:    2
  9482 ;; This function calls:
  9483 ;;		Nothing
  9484 ;; This function is called by:
  9485 ;;		_operation
  9486 ;;		_sprintf
  9487 ;; This function uses a non-reentrant model
  9488 ;;
  9489                           
  9490                           	psect	text29
  9491  0025F4                     __ptext29:
  9492                           	opt stack 0
  9493  0025F4                     ___flge:
  9494                           	opt stack 27
  9495                           
  9496                           ;incstack = 0
  9497  0025F4  0E00               	movlw	0
  9498  0025F6  0100               	movlb	0	; () banked
  9499  0025F8  15B6               	andwf	___flge@ff1& (0+255),w,b
  9500  0025FA  6FBE               	movwf	??___flge& (0+255),b
  9501  0025FC  0E00               	movlw	0
  9502  0025FE  15B7               	andwf	(___flge@ff1+1)& (0+255),w,b
  9503  002600  6FBF               	movwf	(??___flge+1)& (0+255),b
  9504  002602  0E80               	movlw	128
  9505  002604  15B8               	andwf	(___flge@ff1+2)& (0+255),w,b
  9506  002606  6FC0               	movwf	(??___flge+2)& (0+255),b
  9507  002608  0E7F               	movlw	127
  9508  00260A  15B9               	andwf	(___flge@ff1+3)& (0+255),w,b
  9509  00260C  6FC1               	movwf	(??___flge+3)& (0+255),b
  9510  00260E  51BE               	movf	??___flge& (0+255),w,b
  9511  002610  11BF               	iorwf	(??___flge+1)& (0+255),w,b
  9512  002612  11C0               	iorwf	(??___flge+2)& (0+255),w,b
  9513  002614  11C1               	iorwf	(??___flge+3)& (0+255),w,b
  9514  002616  A4D8               	btfss	status,2,c
  9515  002618  D008               	goto	l670
  9516                           
  9517                           ; BSR set to: 0
  9518  00261A  0E00               	movlw	0
  9519  00261C  6FB6               	movwf	___flge@ff1& (0+255),b
  9520  00261E  0E00               	movlw	0
  9521  002620  6FB7               	movwf	(___flge@ff1+1)& (0+255),b
  9522  002622  0E00               	movlw	0
  9523  002624  6FB8               	movwf	(___flge@ff1+2)& (0+255),b
  9524  002626  0E00               	movlw	0
  9525  002628  6FB9               	movwf	(___flge@ff1+3)& (0+255),b
  9526  00262A                     l670:
  9527                           
  9528                           ; BSR set to: 0
  9529                           
  9530                           ; BSR set to: 0
  9531  00262A  0E00               	movlw	0
  9532  00262C  15BA               	andwf	___flge@ff2& (0+255),w,b
  9533  00262E  6FBE               	movwf	??___flge& (0+255),b
  9534  002630  0E00               	movlw	0
  9535  002632  15BB               	andwf	(___flge@ff2+1)& (0+255),w,b
  9536  002634  6FBF               	movwf	(??___flge+1)& (0+255),b
  9537  002636  0E80               	movlw	128
  9538  002638  15BC               	andwf	(___flge@ff2+2)& (0+255),w,b
  9539  00263A  6FC0               	movwf	(??___flge+2)& (0+255),b
  9540  00263C  0E7F               	movlw	127
  9541  00263E  15BD               	andwf	(___flge@ff2+3)& (0+255),w,b
  9542  002640  6FC1               	movwf	(??___flge+3)& (0+255),b
  9543  002642  51BE               	movf	??___flge& (0+255),w,b
  9544  002644  11BF               	iorwf	(??___flge+1)& (0+255),w,b
  9545  002646  11C0               	iorwf	(??___flge+2)& (0+255),w,b
  9546  002648  11C1               	iorwf	(??___flge+3)& (0+255),w,b
  9547  00264A  A4D8               	btfss	status,2,c
  9548  00264C  D008               	goto	l671
  9549                           
  9550                           ; BSR set to: 0
  9551  00264E  0E00               	movlw	0
  9552  002650  6FBA               	movwf	___flge@ff2& (0+255),b
  9553  002652  0E00               	movlw	0
  9554  002654  6FBB               	movwf	(___flge@ff2+1)& (0+255),b
  9555  002656  0E00               	movlw	0
  9556  002658  6FBC               	movwf	(___flge@ff2+2)& (0+255),b
  9557  00265A  0E00               	movlw	0
  9558  00265C  6FBD               	movwf	(___flge@ff2+3)& (0+255),b
  9559  00265E                     l671:
  9560                           
  9561                           ; BSR set to: 0
  9562                           
  9563                           ; BSR set to: 0
  9564  00265E  AFB9               	btfss	(___flge@ff1+3)& (0+255),7,b
  9565  002660  D01D               	goto	l672
  9566                           
  9567                           ; BSR set to: 0
  9568  002662  C0B6  F0BE         	movff	___flge@ff1,??___flge
  9569  002666  C0B7  F0BF         	movff	___flge@ff1+1,??___flge+1
  9570  00266A  C0B8  F0C0         	movff	___flge@ff1+2,??___flge+2
  9571  00266E  C0B9  F0C1         	movff	___flge@ff1+3,??___flge+3
  9572  002672  1FBE               	comf	??___flge& (0+255),f,b
  9573  002674  1FBF               	comf	(??___flge+1)& (0+255),f,b
  9574  002676  1FC0               	comf	(??___flge+2)& (0+255),f,b
  9575  002678  1FC1               	comf	(??___flge+3)& (0+255),f,b
  9576  00267A  2BBE               	incf	??___flge& (0+255),f,b
  9577  00267C  0E00               	movlw	0
  9578  00267E  23BF               	addwfc	(??___flge+1)& (0+255),f,b
  9579  002680  23C0               	addwfc	(??___flge+2)& (0+255),f,b
  9580  002682  23C1               	addwfc	(??___flge+3)& (0+255),f,b
  9581  002684  0E00               	movlw	0
  9582  002686  25BE               	addwf	??___flge& (0+255),w,b
  9583  002688  6FB6               	movwf	___flge@ff1& (0+255),b
  9584  00268A  0E00               	movlw	0
  9585  00268C  21BF               	addwfc	(??___flge+1)& (0+255),w,b
  9586  00268E  6FB7               	movwf	(___flge@ff1+1)& (0+255),b
  9587  002690  0E00               	movlw	0
  9588  002692  21C0               	addwfc	(??___flge+2)& (0+255),w,b
  9589  002694  6FB8               	movwf	(___flge@ff1+2)& (0+255),b
  9590  002696  0E80               	movlw	128
  9591  002698  21C1               	addwfc	(??___flge+3)& (0+255),w,b
  9592  00269A  6FB9               	movwf	(___flge@ff1+3)& (0+255),b
  9593  00269C                     l672:
  9594                           
  9595                           ; BSR set to: 0
  9596                           
  9597                           ; BSR set to: 0
  9598  00269C  AFBD               	btfss	(___flge@ff2+3)& (0+255),7,b
  9599  00269E  D01D               	goto	l673
  9600                           
  9601                           ; BSR set to: 0
  9602  0026A0  C0BA  F0BE         	movff	___flge@ff2,??___flge
  9603  0026A4  C0BB  F0BF         	movff	___flge@ff2+1,??___flge+1
  9604  0026A8  C0BC  F0C0         	movff	___flge@ff2+2,??___flge+2
  9605  0026AC  C0BD  F0C1         	movff	___flge@ff2+3,??___flge+3
  9606  0026B0  1FBE               	comf	??___flge& (0+255),f,b
  9607  0026B2  1FBF               	comf	(??___flge+1)& (0+255),f,b
  9608  0026B4  1FC0               	comf	(??___flge+2)& (0+255),f,b
  9609  0026B6  1FC1               	comf	(??___flge+3)& (0+255),f,b
  9610  0026B8  2BBE               	incf	??___flge& (0+255),f,b
  9611  0026BA  0E00               	movlw	0
  9612  0026BC  23BF               	addwfc	(??___flge+1)& (0+255),f,b
  9613  0026BE  23C0               	addwfc	(??___flge+2)& (0+255),f,b
  9614  0026C0  23C1               	addwfc	(??___flge+3)& (0+255),f,b
  9615  0026C2  0E00               	movlw	0
  9616  0026C4  25BE               	addwf	??___flge& (0+255),w,b
  9617  0026C6  6FBA               	movwf	___flge@ff2& (0+255),b
  9618  0026C8  0E00               	movlw	0
  9619  0026CA  21BF               	addwfc	(??___flge+1)& (0+255),w,b
  9620  0026CC  6FBB               	movwf	(___flge@ff2+1)& (0+255),b
  9621  0026CE  0E00               	movlw	0
  9622  0026D0  21C0               	addwfc	(??___flge+2)& (0+255),w,b
  9623  0026D2  6FBC               	movwf	(___flge@ff2+2)& (0+255),b
  9624  0026D4  0E80               	movlw	128
  9625  0026D6  21C1               	addwfc	(??___flge+3)& (0+255),w,b
  9626  0026D8  6FBD               	movwf	(___flge@ff2+3)& (0+255),b
  9627  0026DA                     l673:
  9628                           
  9629                           ; BSR set to: 0
  9630  0026DA  0E00               	movlw	0
  9631  0026DC  1BB6               	xorwf	___flge@ff1& (0+255),f,b
  9632  0026DE  0E00               	movlw	0
  9633  0026E0  1BB7               	xorwf	(___flge@ff1+1)& (0+255),f,b
  9634  0026E2  0E00               	movlw	0
  9635  0026E4  1BB8               	xorwf	(___flge@ff1+2)& (0+255),f,b
  9636  0026E6  0E80               	movlw	128
  9637  0026E8  1BB9               	xorwf	(___flge@ff1+3)& (0+255),f,b
  9638  0026EA  0E00               	movlw	0
  9639  0026EC  1BBA               	xorwf	___flge@ff2& (0+255),f,b
  9640  0026EE  0E00               	movlw	0
  9641  0026F0  1BBB               	xorwf	(___flge@ff2+1)& (0+255),f,b
  9642  0026F2  0E00               	movlw	0
  9643  0026F4  1BBC               	xorwf	(___flge@ff2+2)& (0+255),f,b
  9644  0026F6  0E80               	movlw	128
  9645  0026F8  1BBD               	xorwf	(___flge@ff2+3)& (0+255),f,b
  9646  0026FA  51BA               	movf	___flge@ff2& (0+255),w,b
  9647  0026FC  5DB6               	subwf	___flge@ff1& (0+255),w,b
  9648  0026FE  51BB               	movf	(___flge@ff2+1)& (0+255),w,b
  9649  002700  59B7               	subwfb	(___flge@ff1+1)& (0+255),w,b
  9650  002702  51BC               	movf	(___flge@ff2+2)& (0+255),w,b
  9651  002704  59B8               	subwfb	(___flge@ff1+2)& (0+255),w,b
  9652  002706  51BD               	movf	(___flge@ff2+3)& (0+255),w,b
  9653  002708  59B9               	subwfb	(___flge@ff1+3)& (0+255),w,b
  9654  00270A  B0D8               	btfsc	status,0,c
  9655  00270C  D002               	goto	l4658
  9656                           
  9657                           ; BSR set to: 0
  9658  00270E  90D8               	bcf	status,0,c
  9659  002710  0012               	return	
  9660  002712                     l4658:
  9661                           
  9662                           ; BSR set to: 0
  9663                           
  9664                           ; BSR set to: 0
  9665  002712  80D8               	bsf	status,0,c
  9666                           
  9667                           ; BSR set to: 0
  9668  002714  0012               	return	
  9669  002716                     __end_of___flge:
  9670                           	opt stack 0
  9671                           tblptru	equ	0xFF8
  9672                           tblptrh	equ	0xFF7
  9673                           tblptrl	equ	0xFF6
  9674                           tablat	equ	0xFF5
  9675                           prodh	equ	0xFF4
  9676                           prodl	equ	0xFF3
  9677                           intcon	equ	0xFF2
  9678                           intcon2	equ	0xFF1
  9679                           intcon3	equ	0xFF0
  9680                           postinc0	equ	0xFEE
  9681                           wreg	equ	0xFE8
  9682                           indf1	equ	0xFE7
  9683                           postdec1	equ	0xFE5
  9684                           fsr1h	equ	0xFE2
  9685                           fsr1l	equ	0xFE1
  9686                           indf2	equ	0xFDF
  9687                           postinc2	equ	0xFDE
  9688                           postdec2	equ	0xFDD
  9689                           fsr2h	equ	0xFDA
  9690                           fsr2l	equ	0xFD9
  9691                           status	equ	0xFD8
  9692                           
  9693 ;; *************** function _lcd_puts *****************
  9694 ;; Defined at:
  9695 ;;		line 120 in file "lcd_x8.c"
  9696 ;; Parameters:    Size  Location     Type
  9697 ;;  s               2   44[COMRAM] PTR unsigned char 
  9698 ;;		 -> STR_6(4), display@LCD(64), display@LCDP(64), 
  9699 ;; Auto vars:     Size  Location     Type
  9700 ;;		None
  9701 ;; Return value:  Size  Location     Type
  9702 ;;                  1    wreg      void 
  9703 ;; Registers used:
  9704 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9705 ;; Tracked objects:
  9706 ;;		On entry : 0/0
  9707 ;;		On exit  : 0/0
  9708 ;;		Unchanged: 0/0
  9709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9710 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9713 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9714 ;;Total ram usage:        2 bytes
  9715 ;; Hardware stack levels used:    1
  9716 ;; Hardware stack levels required when called:    7
  9717 ;; This function calls:
  9718 ;;		_lcd_putc
  9719 ;; This function is called by:
  9720 ;;		_display
  9721 ;; This function uses a non-reentrant model
  9722 ;;
  9723                           
  9724                           	psect	text30
  9725  002D4A                     __ptext30:
  9726                           	opt stack 0
  9727  002D4A                     _lcd_puts:
  9728                           	opt stack 22
  9729                           
  9730                           ;lcd_x8.c: 121: while (*s) {
  9731                           
  9732                           ; BSR set to: 0
  9733                           ;incstack = 0
  9734  002D4A  D015               	goto	l215
  9735  002D4C                     
  9736                           ;lcd_x8.c: 122: lcd_putc(*s);
  9737  002D4C  C02D  FFF6         	movff	lcd_puts@s,tblptrl
  9738  002D50  C02E  FFF7         	movff	lcd_puts@s+1,tblptrh
  9739  002D54  0E00               	movlw	low (__mediumconst shr (0+16))
  9740  002D56  6EF8               	movwf	tblptru,c
  9741  002D58  0E0F               	movlw	(high __ramtop+-1)
  9742  002D5A  64F7               	cpfsgt	tblptrh,c
  9743  002D5C  D003               	bra	u4317
  9744  002D5E  0008               	tblrd		*
  9745  002D60  50F5               	movf	tablat,w,c
  9746  002D62  D005               	bra	u4310
  9747  002D64                     u4317:
  9748  002D64  CFF6 FFE1          	movff	tblptrl,fsr1l
  9749  002D68  CFF7 FFE2          	movff	tblptrh,fsr1h
  9750  002D6C  50E7               	movf	indf1,w,c
  9751  002D6E                     u4310:
  9752  002D6E  ECD0  F016         	call	_lcd_putc
  9753                           
  9754                           ;lcd_x8.c: 123: s++;
  9755  002D72  4A2D               	infsnz	lcd_puts@s,f,c
  9756  002D74  2A2E               	incf	lcd_puts@s+1,f,c
  9757  002D76                     l215:
  9758  002D76  C02D  FFF6         	movff	lcd_puts@s,tblptrl
  9759  002D7A  C02E  FFF7         	movff	lcd_puts@s+1,tblptrh
  9760  002D7E  0E00               	movlw	low (__mediumconst shr (0+16))
  9761  002D80  6EF8               	movwf	tblptru,c
  9762  002D82  0E0F               	movlw	(high __ramtop+-1)
  9763  002D84  64F7               	cpfsgt	tblptrh,c
  9764  002D86  D003               	bra	u4327
  9765  002D88  0008               	tblrd		*
  9766  002D8A  50F5               	movf	tablat,w,c
  9767  002D8C  D005               	bra	u4320
  9768  002D8E                     u4327:
  9769  002D8E  CFF6 FFE1          	movff	tblptrl,fsr1l
  9770  002D92  CFF7 FFE2          	movff	tblptrh,fsr1h
  9771  002D96  50E7               	movf	indf1,w,c
  9772  002D98                     u4320:
  9773  002D98  0900               	iorlw	0
  9774  002D9A  B4D8               	btfsc	status,2,c
  9775  002D9C  0012               	return	
  9776  002D9E  D7D6               	goto	l216
  9777  002DA0                     __end_of_lcd_puts:
  9778                           	opt stack 0
  9779                           tblptru	equ	0xFF8
  9780                           tblptrh	equ	0xFF7
  9781                           tblptrl	equ	0xFF6
  9782                           tablat	equ	0xFF5
  9783                           prodh	equ	0xFF4
  9784                           prodl	equ	0xFF3
  9785                           intcon	equ	0xFF2
  9786                           intcon2	equ	0xFF1
  9787                           intcon3	equ	0xFF0
  9788                           postinc0	equ	0xFEE
  9789                           wreg	equ	0xFE8
  9790                           indf1	equ	0xFE7
  9791                           postdec1	equ	0xFE5
  9792                           fsr1h	equ	0xFE2
  9793                           fsr1l	equ	0xFE1
  9794                           indf2	equ	0xFDF
  9795                           postinc2	equ	0xFDE
  9796                           postdec2	equ	0xFDD
  9797                           fsr2h	equ	0xFDA
  9798                           fsr2l	equ	0xFD9
  9799                           status	equ	0xFD8
  9800                           
  9801 ;; *************** function _lcd_putc *****************
  9802 ;; Defined at:
  9803 ;;		line 106 in file "lcd_x8.c"
  9804 ;; Parameters:    Size  Location     Type
  9805 ;;  c               1    wreg     unsigned char 
  9806 ;; Auto vars:     Size  Location     Type
  9807 ;;  c               1   43[COMRAM] unsigned char 
  9808 ;; Return value:  Size  Location     Type
  9809 ;;                  1    wreg      void 
  9810 ;; Registers used:
  9811 ;;		wreg, status,2, status,0, cstack
  9812 ;; Tracked objects:
  9813 ;;		On entry : 0/0
  9814 ;;		On exit  : 0/0
  9815 ;;		Unchanged: 0/0
  9816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9818 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9820 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9821 ;;Total ram usage:        1 bytes
  9822 ;; Hardware stack levels used:    1
  9823 ;; Hardware stack levels required when called:    6
  9824 ;; This function calls:
  9825 ;;		_delay_ms
  9826 ;;		_lcd_gotoxy
  9827 ;;		_lcd_send_byte
  9828 ;; This function is called by:
  9829 ;;		_display
  9830 ;;		_main
  9831 ;;		_lcd_puts
  9832 ;; This function uses a non-reentrant model
  9833 ;;
  9834                           
  9835                           	psect	text31
  9836  002DA0                     __ptext31:
  9837                           	opt stack 0
  9838  002DA0                     _lcd_putc:
  9839                           	opt stack 24
  9840                           
  9841                           ;incstack = 0
  9842                           ;lcd_putc@c stored from wreg
  9843  002DA0  6E2C               	movwf	lcd_putc@c,c
  9844                           
  9845                           ;lcd_x8.c: 107: switch (c) {
  9846  002DA2  D01E               	goto	l206
  9847  002DA4  0E01               	movlw	1
  9848  002DA6  6E27               	movwf	lcd_send_byte@n,c
  9849  002DA8  0E00               	movlw	0
  9850  002DAA  EC48  F017         	call	_lcd_send_byte
  9851                           
  9852                           ;lcd_x8.c: 109: delay_ms(2);
  9853  002DAE  0E00               	movlw	0
  9854  002DB0  6E20               	movwf	delay_ms@n+1,c
  9855  002DB2  0E02               	movlw	2
  9856  002DB4  6E1F               	movwf	delay_ms@n,c
  9857  002DB6  EC02  F018         	call	_delay_ms	;wreg free
  9858                           
  9859                           ;lcd_x8.c: 110: break;
  9860  002DBA  0012               	return	
  9861  002DBC  0E02               	movlw	2
  9862  002DBE  6E29               	movwf	lcd_gotoxy@y,c
  9863  002DC0  0E01               	movlw	1
  9864  002DC2  EC6C  F017         	call	_lcd_gotoxy
  9865                           
  9866                           ;lcd_x8.c: 112: break;
  9867  002DC6  0012               	return	
  9868  002DC8  0E10               	movlw	16
  9869  002DCA  6E27               	movwf	lcd_send_byte@n,c
  9870  002DCC  0E00               	movlw	0
  9871  002DCE  EC48  F017         	call	_lcd_send_byte
  9872                           
  9873                           ;lcd_x8.c: 114: break;
  9874  002DD2  0012               	return	
  9875  002DD4  C02C  F027         	movff	lcd_putc@c,lcd_send_byte@n
  9876  002DD8  0E01               	movlw	1
  9877  002DDA  EC48  F017         	call	_lcd_send_byte
  9878                           
  9879                           ;lcd_x8.c: 117: }
  9880                           
  9881                           ;lcd_x8.c: 116: break;
  9882  002DDE  0012               	return	
  9883  002DE0                     l206:
  9884  002DE0  502C               	movf	lcd_putc@c,w,c
  9885                           
  9886                           ; Switch size 1, requested type "space"
  9887                           ; Number of cases is 3, Range of values is 8 to 12
  9888                           ; switch strategies available:
  9889                           ; Name         Instructions Cycles
  9890                           ; simple_byte           10     6 (average)
  9891                           ;	Chosen strategy is simple_byte
  9892  002DE2  0A08               	xorlw	8	; case 8
  9893  002DE4  B4D8               	btfsc	status,2,c
  9894  002DE6  D7F0               	goto	l210
  9895  002DE8  0A02               	xorlw	2	; case 10
  9896  002DEA  B4D8               	btfsc	status,2,c
  9897  002DEC  D7E7               	goto	l209
  9898  002DEE  0A06               	xorlw	6	; case 12
  9899  002DF0  B4D8               	btfsc	status,2,c
  9900  002DF2  D7D8               	goto	l207
  9901  002DF4  D7EF               	goto	l211
  9902  002DF6                     __end_of_lcd_putc:
  9903                           	opt stack 0
  9904                           tblptru	equ	0xFF8
  9905                           tblptrh	equ	0xFF7
  9906                           tblptrl	equ	0xFF6
  9907                           tablat	equ	0xFF5
  9908                           prodh	equ	0xFF4
  9909                           prodl	equ	0xFF3
  9910                           intcon	equ	0xFF2
  9911                           intcon2	equ	0xFF1
  9912                           intcon3	equ	0xFF0
  9913                           postinc0	equ	0xFEE
  9914                           wreg	equ	0xFE8
  9915                           indf1	equ	0xFE7
  9916                           postdec1	equ	0xFE5
  9917                           fsr1h	equ	0xFE2
  9918                           fsr1l	equ	0xFE1
  9919                           indf2	equ	0xFDF
  9920                           postinc2	equ	0xFDE
  9921                           postdec2	equ	0xFDD
  9922                           fsr2h	equ	0xFDA
  9923                           fsr2l	equ	0xFD9
  9924                           status	equ	0xFD8
  9925                           
  9926 ;; *************** function _lcd_gotoxy *****************
  9927 ;; Defined at:
  9928 ;;		line 89 in file "lcd_x8.c"
  9929 ;; Parameters:    Size  Location     Type
  9930 ;;  x               1    wreg     unsigned char 
  9931 ;;  y               1   40[COMRAM] unsigned char 
  9932 ;; Auto vars:     Size  Location     Type
  9933 ;;  x               1   41[COMRAM] unsigned char 
  9934 ;;  address         1   42[COMRAM] unsigned char 
  9935 ;; Return value:  Size  Location     Type
  9936 ;;                  1    wreg      void 
  9937 ;; Registers used:
  9938 ;;		wreg, status,2, status,0, cstack
  9939 ;; Tracked objects:
  9940 ;;		On entry : 0/0
  9941 ;;		On exit  : 0/0
  9942 ;;		Unchanged: 0/0
  9943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9944 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9945 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9947 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9948 ;;Total ram usage:        3 bytes
  9949 ;; Hardware stack levels used:    1
  9950 ;; Hardware stack levels required when called:    5
  9951 ;; This function calls:
  9952 ;;		_lcd_send_byte
  9953 ;; This function is called by:
  9954 ;;		_display
  9955 ;;		_lcd_putc
  9956 ;; This function uses a non-reentrant model
  9957 ;;
  9958                           
  9959                           	psect	text32
  9960  002ED8                     __ptext32:
  9961                           	opt stack 0
  9962  002ED8                     _lcd_gotoxy:
  9963                           	opt stack 24
  9964                           
  9965                           ;incstack = 0
  9966                           ;lcd_gotoxy@x stored from wreg
  9967  002ED8  6E2A               	movwf	lcd_gotoxy@x,c
  9968                           
  9969                           ;lcd_x8.c: 90: unsigned char address;
  9970                           ;lcd_x8.c: 92: switch (y) {
  9971  002EDA  D009               	goto	l197
  9972  002EDC  0E80               	movlw	128
  9973  002EDE  D005               	goto	L15
  9974  002EE0  0EC0               	movlw	192
  9975  002EE2  D003               	goto	L15
  9976  002EE4  0E90               	movlw	144
  9977  002EE6  D001               	goto	L15
  9978  002EE8  0ED0               	movlw	208
  9979  002EEA                     L15:
  9980  002EEA  6E2B               	movwf	lcd_gotoxy@address,c
  9981                           
  9982                           ;lcd_x8.c: 101: }
  9983                           
  9984                           ;lcd_x8.c: 100: break;
  9985  002EEC  D00D               	goto	l199
  9986  002EEE                     l197:
  9987  002EEE  5029               	movf	lcd_gotoxy@y,w,c
  9988                           
  9989                           ; Switch size 1, requested type "space"
  9990                           ; Number of cases is 4, Range of values is 1 to 4
  9991                           ; switch strategies available:
  9992                           ; Name         Instructions Cycles
  9993                           ; simple_byte           13     7 (average)
  9994                           ;	Chosen strategy is simple_byte
  9995  002EF0  0A01               	xorlw	1	; case 1
  9996  002EF2  B4D8               	btfsc	status,2,c
  9997  002EF4  D7F3               	goto	l198
  9998  002EF6  0A03               	xorlw	3	; case 2
  9999  002EF8  B4D8               	btfsc	status,2,c
 10000  002EFA  D7F2               	goto	l200
 10001  002EFC  0A01               	xorlw	1	; case 3
 10002  002EFE  B4D8               	btfsc	status,2,c
 10003  002F00  D7F1               	goto	l201
 10004  002F02  0A07               	xorlw	7	; case 4
 10005  002F04  B4D8               	btfsc	status,2,c
 10006  002F06  D7F0               	goto	l202
 10007  002F08                     l199:
 10008                           
 10009                           ;lcd_x8.c: 102: address += x - 1;
 10010  002F08  042A               	decf	lcd_gotoxy@x,w,c
 10011  002F0A  262B               	addwf	lcd_gotoxy@address,f,c
 10012                           
 10013                           ;lcd_x8.c: 103: lcd_send_byte(0, (unsigned char) (0x80 | address));
 10014  002F0C  502B               	movf	lcd_gotoxy@address,w,c
 10015  002F0E  0980               	iorlw	128
 10016  002F10  6E27               	movwf	lcd_send_byte@n,c
 10017  002F12  0E00               	movlw	0
 10018  002F14  EC48  F017         	call	_lcd_send_byte
 10019  002F18  0012               	return		;funcret
 10020  002F1A                     __end_of_lcd_gotoxy:
 10021                           	opt stack 0
 10022                           tblptru	equ	0xFF8
 10023                           tblptrh	equ	0xFF7
 10024                           tblptrl	equ	0xFF6
 10025                           tablat	equ	0xFF5
 10026                           prodh	equ	0xFF4
 10027                           prodl	equ	0xFF3
 10028                           intcon	equ	0xFF2
 10029                           intcon2	equ	0xFF1
 10030                           intcon3	equ	0xFF0
 10031                           postinc0	equ	0xFEE
 10032                           wreg	equ	0xFE8
 10033                           indf1	equ	0xFE7
 10034                           postdec1	equ	0xFE5
 10035                           fsr1h	equ	0xFE2
 10036                           fsr1l	equ	0xFE1
 10037                           indf2	equ	0xFDF
 10038                           postinc2	equ	0xFDE
 10039                           postdec2	equ	0xFDD
 10040                           fsr2h	equ	0xFDA
 10041                           fsr2l	equ	0xFD9
 10042                           status	equ	0xFD8
 10043                           
 10044 ;; *************** function _lcd_send_byte *****************
 10045 ;; Defined at:
 10046 ;;		line 39 in file "lcd_x8.c"
 10047 ;; Parameters:    Size  Location     Type
 10048 ;;  cm_data         1    wreg     unsigned char 
 10049 ;;  n               1   38[COMRAM] unsigned char 
 10050 ;; Auto vars:     Size  Location     Type
 10051 ;;  cm_data         1   39[COMRAM] unsigned char 
 10052 ;; Return value:  Size  Location     Type
 10053 ;;                  1    wreg      void 
 10054 ;; Registers used:
 10055 ;;		wreg, status,2, status,0, cstack
 10056 ;; Tracked objects:
 10057 ;;		On entry : 0/0
 10058 ;;		On exit  : 0/0
 10059 ;;		Unchanged: 0/0
 10060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10061 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10062 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10064 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10065 ;;Total ram usage:        2 bytes
 10066 ;; Hardware stack levels used:    1
 10067 ;; Hardware stack levels required when called:    4
 10068 ;; This function calls:
 10069 ;;		_delay_cycles
 10070 ;;		_delay_ms
 10071 ;;		_lcd_send_nibble
 10072 ;; This function is called by:
 10073 ;;		_lcd_init
 10074 ;;		_lcd_gotoxy
 10075 ;;		_lcd_putc
 10076 ;;		_Lcd_Shift_Right
 10077 ;;		_Lcd_Shift_Left
 10078 ;; This function uses a non-reentrant model
 10079 ;;
 10080                           
 10081                           	psect	text33
 10082  002E90                     __ptext33:
 10083                           	opt stack 0
 10084  002E90                     _lcd_send_byte:
 10085                           	opt stack 25
 10086                           
 10087                           ;incstack = 0
 10088                           ;lcd_send_byte@cm_data stored from wreg
 10089  002E90  6E28               	movwf	lcd_send_byte@cm_data,c
 10090                           
 10091                           ;lcd_x8.c: 43: PORTEbits.RE2 = cm_data;
 10092  002E92  B028               	btfsc	lcd_send_byte@cm_data,0,c
 10093  002E94  D002               	bra	u2505
 10094  002E96  9484               	bcf	3972,2,c	;volatile
 10095  002E98  D001               	bra	u2506
 10096  002E9A                     u2505:
 10097  002E9A  8484               	bsf	3972,2,c	;volatile
 10098  002E9C                     u2506:
 10099                           
 10100                           ;lcd_x8.c: 44: delay_cycles(1);
 10101  002E9C  0E01               	movlw	1
 10102  002E9E  ECD8  F017         	call	_delay_cycles
 10103                           
 10104                           ;lcd_x8.c: 46: delay_cycles(1);
 10105  002EA2  0E01               	movlw	1
 10106  002EA4  ECD8  F017         	call	_delay_cycles
 10107                           
 10108                           ;lcd_x8.c: 47: PORTEbits.RE1 = 0;
 10109  002EA8  9284               	bcf	3972,1,c	;volatile
 10110                           
 10111                           ;lcd_x8.c: 48: lcd_send_nibble(n >> 4);
 10112  002EAA  3827               	swapf	lcd_send_byte@n,w,c
 10113  002EAC  0B0F               	andlw	15
 10114  002EAE  EC15  F018         	call	_lcd_send_nibble
 10115                           
 10116                           ;lcd_x8.c: 49: lcd_send_nibble(n & 0x0f);
 10117  002EB2  5027               	movf	lcd_send_byte@n,w,c
 10118  002EB4  0B0F               	andlw	15
 10119  002EB6  EC15  F018         	call	_lcd_send_nibble
 10120                           
 10121                           ;lcd_x8.c: 50: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
 10122  002EBA  5028               	movf	lcd_send_byte@cm_data,w,c
 10123  002EBC  B4D8               	btfsc	status,2,c
 10124  002EBE  D005               	goto	l185
 10125  002EC0  0E32               	movlw	50
 10126  002EC2                     u7047:
 10127  002EC2  0004               	clrwdt	
 10128  002EC4  2EE8               	decfsz	wreg,f,c
 10129  002EC6  D7FD               	bra	u7047
 10130  002EC8  0012               	return	
 10131  002ECA                     l185:
 10132                           
 10133                           ;lcd_x8.c: 51: else
 10134                           ;lcd_x8.c: 52: delay_ms(2);
 10135  002ECA  0E00               	movlw	0
 10136  002ECC  6E20               	movwf	delay_ms@n+1,c
 10137  002ECE  0E02               	movlw	2
 10138  002ED0  6E1F               	movwf	delay_ms@n,c
 10139  002ED2  EC02  F018         	call	_delay_ms	;wreg free
 10140  002ED6  0012               	return	
 10141  002ED8                     __end_of_lcd_send_byte:
 10142                           	opt stack 0
 10143                           tblptru	equ	0xFF8
 10144                           tblptrh	equ	0xFF7
 10145                           tblptrl	equ	0xFF6
 10146                           tablat	equ	0xFF5
 10147                           prodh	equ	0xFF4
 10148                           prodl	equ	0xFF3
 10149                           intcon	equ	0xFF2
 10150                           intcon2	equ	0xFF1
 10151                           intcon3	equ	0xFF0
 10152                           postinc0	equ	0xFEE
 10153                           wreg	equ	0xFE8
 10154                           indf1	equ	0xFE7
 10155                           postdec1	equ	0xFE5
 10156                           fsr1h	equ	0xFE2
 10157                           fsr1l	equ	0xFE1
 10158                           indf2	equ	0xFDF
 10159                           postinc2	equ	0xFDE
 10160                           postdec2	equ	0xFDD
 10161                           fsr2h	equ	0xFDA
 10162                           fsr2l	equ	0xFD9
 10163                           status	equ	0xFD8
 10164                           
 10165 ;; *************** function _lcd_send_nibble *****************
 10166 ;; Defined at:
 10167 ;;		line 29 in file "lcd_x8.c"
 10168 ;; Parameters:    Size  Location     Type
 10169 ;;  n               1    wreg     unsigned char 
 10170 ;; Auto vars:     Size  Location     Type
 10171 ;;  n               1   37[COMRAM] unsigned char 
 10172 ;; Return value:  Size  Location     Type
 10173 ;;                  1    wreg      void 
 10174 ;; Registers used:
 10175 ;;		wreg, status,2, status,0, cstack
 10176 ;; Tracked objects:
 10177 ;;		On entry : 0/0
 10178 ;;		On exit  : 0/0
 10179 ;;		Unchanged: 0/0
 10180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10182 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10183 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10184 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10185 ;;Total ram usage:        2 bytes
 10186 ;; Hardware stack levels used:    1
 10187 ;; Hardware stack levels required when called:    3
 10188 ;; This function calls:
 10189 ;;		_delay_cycles
 10190 ;; This function is called by:
 10191 ;;		_lcd_send_byte
 10192 ;;		_lcd_init
 10193 ;; This function uses a non-reentrant model
 10194 ;;
 10195                           
 10196                           	psect	text34
 10197  00302A                     __ptext34:
 10198                           	opt stack 0
 10199  00302A                     _lcd_send_nibble:
 10200                           	opt stack 25
 10201                           
 10202                           ;incstack = 0
 10203                           ;lcd_send_nibble@n stored from wreg
 10204  00302A  6E26               	movwf	lcd_send_nibble@n,c
 10205                           
 10206                           ;lcd_x8.c: 31: lcd.data = n;
 10207  00302C  C026  F025         	movff	lcd_send_nibble@n,??_lcd_send_nibble
 10208  003030  3A25               	swapf	??_lcd_send_nibble,f,c
 10209  003032  5083               	movf	3971,w,c
 10210  003034  1825               	xorwf	??_lcd_send_nibble,w,c
 10211  003036  0B0F               	andlw	-241
 10212  003038  1825               	xorwf	??_lcd_send_nibble,w,c
 10213  00303A  6E83               	movwf	3971,c
 10214                           
 10215                           ;lcd_x8.c: 33: delay_cycles(1);
 10216  00303C  0E01               	movlw	1
 10217  00303E  ECD8  F017         	call	_delay_cycles
 10218                           
 10219                           ;lcd_x8.c: 34: PORTEbits.RE1 = 1;
 10220  003042  8284               	bsf	3972,1,c	;volatile
 10221                           
 10222                           ;lcd_x8.c: 35: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
 10223  003044  0004               	clrwdt	
 10224  003046  F000               	nop		;2 cycle nop
 10225                           
 10226                           ;lcd_x8.c: 36: PORTEbits.RE1 = 0;
 10227  003048  9284               	bcf	3972,1,c	;volatile
 10228  00304A  0012               	return		;funcret
 10229  00304C                     __end_of_lcd_send_nibble:
 10230                           	opt stack 0
 10231                           tblptru	equ	0xFF8
 10232                           tblptrh	equ	0xFF7
 10233                           tblptrl	equ	0xFF6
 10234                           tablat	equ	0xFF5
 10235                           prodh	equ	0xFF4
 10236                           prodl	equ	0xFF3
 10237                           intcon	equ	0xFF2
 10238                           intcon2	equ	0xFF1
 10239                           intcon3	equ	0xFF0
 10240                           postinc0	equ	0xFEE
 10241                           wreg	equ	0xFE8
 10242                           indf1	equ	0xFE7
 10243                           postdec1	equ	0xFE5
 10244                           fsr1h	equ	0xFE2
 10245                           fsr1l	equ	0xFE1
 10246                           indf2	equ	0xFDF
 10247                           postinc2	equ	0xFDE
 10248                           postdec2	equ	0xFDD
 10249                           fsr2h	equ	0xFDA
 10250                           fsr2l	equ	0xFD9
 10251                           status	equ	0xFD8
 10252                           
 10253 ;; *************** function _delay_cycles *****************
 10254 ;; Defined at:
 10255 ;;		line 20 in file "lcd_x8.c"
 10256 ;; Parameters:    Size  Location     Type
 10257 ;;  n               1    wreg     unsigned char 
 10258 ;; Auto vars:     Size  Location     Type
 10259 ;;  n               1   33[COMRAM] unsigned char 
 10260 ;;  x               2   34[COMRAM] int 
 10261 ;; Return value:  Size  Location     Type
 10262 ;;                  1    wreg      void 
 10263 ;; Registers used:
 10264 ;;		wreg, status,2, status,0
 10265 ;; Tracked objects:
 10266 ;;		On entry : 0/0
 10267 ;;		On exit  : 0/0
 10268 ;;		Unchanged: 0/0
 10269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10271 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10272 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10273 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10274 ;;Total ram usage:        6 bytes
 10275 ;; Hardware stack levels used:    1
 10276 ;; Hardware stack levels required when called:    2
 10277 ;; This function calls:
 10278 ;;		Nothing
 10279 ;; This function is called by:
 10280 ;;		_lcd_send_nibble
 10281 ;;		_lcd_send_byte
 10282 ;; This function uses a non-reentrant model
 10283 ;;
 10284                           
 10285                           	psect	text35
 10286  002FB0                     __ptext35:
 10287                           	opt stack 0
 10288  002FB0                     _delay_cycles:
 10289                           	opt stack 25
 10290                           
 10291                           ;incstack = 0
 10292                           ;delay_cycles@n stored from wreg
 10293  002FB0  6E22               	movwf	delay_cycles@n,c
 10294                           
 10295                           ;lcd_x8.c: 21: int x;
 10296                           ;lcd_x8.c: 22: for (x = 0; x <= n; x++) {
 10297  002FB2  0E00               	movlw	0
 10298  002FB4  6E24               	movwf	delay_cycles@x+1,c
 10299  002FB6  0E00               	movlw	0
 10300  002FB8  6E23               	movwf	delay_cycles@x,c
 10301  002FBA  D003               	goto	l176
 10302  002FBC                     l177:
 10303  002FBC  0004               	clrwdt		;# 
 10304  002FBE  4A23               	infsnz	delay_cycles@x,f,c
 10305  002FC0  2A24               	incf	delay_cycles@x+1,f,c
 10306  002FC2                     l176:
 10307  002FC2  5022               	movf	delay_cycles@n,w,c
 10308  002FC4  6E1F               	movwf	??_delay_cycles& (0+255),c
 10309  002FC6  6A20               	clrf	(??_delay_cycles+1)& (0+255),c
 10310  002FC8  5023               	movf	delay_cycles@x,w,c
 10311  002FCA  5C1F               	subwf	??_delay_cycles,w,c
 10312  002FCC  5020               	movf	??_delay_cycles+1,w,c
 10313  002FCE  0A80               	xorlw	128
 10314  002FD0  6E21               	movwf	(??_delay_cycles+2)& (0+255),c
 10315  002FD2  5024               	movf	delay_cycles@x+1,w,c
 10316  002FD4  0A80               	xorlw	128
 10317  002FD6  5821               	subwfb	(??_delay_cycles+2)& (0+255),w,c
 10318  002FD8  A0D8               	btfss	status,0,c
 10319  002FDA  0012               	return	
 10320  002FDC  D7EF               	goto	l177
 10321  002FDE                     __end_of_delay_cycles:
 10322                           	opt stack 0
 10323                           tblptru	equ	0xFF8
 10324                           tblptrh	equ	0xFF7
 10325                           tblptrl	equ	0xFF6
 10326                           tablat	equ	0xFF5
 10327                           prodh	equ	0xFF4
 10328                           prodl	equ	0xFF3
 10329                           intcon	equ	0xFF2
 10330                           intcon2	equ	0xFF1
 10331                           intcon3	equ	0xFF0
 10332                           postinc0	equ	0xFEE
 10333                           wreg	equ	0xFE8
 10334                           indf1	equ	0xFE7
 10335                           postdec1	equ	0xFE5
 10336                           fsr1h	equ	0xFE2
 10337                           fsr1l	equ	0xFE1
 10338                           indf2	equ	0xFDF
 10339                           postinc2	equ	0xFDE
 10340                           postdec2	equ	0xFDD
 10341                           fsr2h	equ	0xFDA
 10342                           fsr2l	equ	0xFD9
 10343                           status	equ	0xFD8
 10344                           
 10345 ;; *************** function _delay_ms *****************
 10346 ;; Defined at:
 10347 ;;		line 12 in file "lcd_x8.c"
 10348 ;; Parameters:    Size  Location     Type
 10349 ;;  n               2   30[COMRAM] unsigned int 
 10350 ;; Auto vars:     Size  Location     Type
 10351 ;;  x               2   32[COMRAM] int 
 10352 ;; Return value:  Size  Location     Type
 10353 ;;                  1    wreg      void 
 10354 ;; Registers used:
 10355 ;;		wreg, status,2, status,0
 10356 ;; Tracked objects:
 10357 ;;		On entry : 0/0
 10358 ;;		On exit  : 0/0
 10359 ;;		Unchanged: 0/0
 10360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10361 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10362 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10364 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10365 ;;Total ram usage:        4 bytes
 10366 ;; Hardware stack levels used:    1
 10367 ;; Hardware stack levels required when called:    2
 10368 ;; This function calls:
 10369 ;;		Nothing
 10370 ;; This function is called by:
 10371 ;;		_operation
 10372 ;;		_main
 10373 ;;		_lcd_send_byte
 10374 ;;		_lcd_init
 10375 ;;		_lcd_putc
 10376 ;; This function uses a non-reentrant model
 10377 ;;
 10378                           
 10379                           	psect	text36
 10380  003004                     __ptext36:
 10381                           	opt stack 0
 10382  003004                     _delay_ms:
 10383                           	opt stack 27
 10384                           
 10385                           ;lcd_x8.c: 13: int x;
 10386                           ;lcd_x8.c: 14: for (x = 0; x <= n; x++) {
 10387                           
 10388                           ;incstack = 0
 10389  003004  0E00               	movlw	0
 10390  003006  6E22               	movwf	delay_ms@x+1,c
 10391  003008  0E00               	movlw	0
 10392  00300A  6E21               	movwf	delay_ms@x,c
 10393  00300C  D007               	goto	l170
 10394  00300E                     
 10395                           ;lcd_x8.c: 15: _delaywdt((unsigned long)((1)*(4000000UL/4000.0)));
 10396  00300E  0EC8               	movlw	200
 10397  003010                     u7057:
 10398  003010  0004               	clrwdt	
 10399  003012  0004               	clrwdt	
 10400  003014  2EE8               	decfsz	wreg,f,c
 10401  003016  D7FC               	bra	u7057
 10402  003018  4A21               	infsnz	delay_ms@x,f,c
 10403  00301A  2A22               	incf	delay_ms@x+1,f,c
 10404  00301C                     l170:
 10405  00301C  5021               	movf	delay_ms@x,w,c
 10406  00301E  5C1F               	subwf	delay_ms@n,w,c
 10407  003020  5022               	movf	delay_ms@x+1,w,c
 10408  003022  5820               	subwfb	delay_ms@n+1,w,c
 10409  003024  A0D8               	btfss	status,0,c
 10410  003026  0012               	return	
 10411  003028  D7F2               	goto	l171
 10412  00302A                     __end_of_delay_ms:
 10413                           	opt stack 0
 10414                           tblptru	equ	0xFF8
 10415                           tblptrh	equ	0xFF7
 10416                           tblptrl	equ	0xFF6
 10417                           tablat	equ	0xFF5
 10418                           prodh	equ	0xFF4
 10419                           prodl	equ	0xFF3
 10420                           intcon	equ	0xFF2
 10421                           intcon2	equ	0xFF1
 10422                           intcon3	equ	0xFF0
 10423                           postinc0	equ	0xFEE
 10424                           wreg	equ	0xFE8
 10425                           indf1	equ	0xFE7
 10426                           postdec1	equ	0xFE5
 10427                           fsr1h	equ	0xFE2
 10428                           fsr1l	equ	0xFE1
 10429                           indf2	equ	0xFDF
 10430                           postinc2	equ	0xFDE
 10431                           postdec2	equ	0xFDD
 10432                           fsr2h	equ	0xFDA
 10433                           fsr2l	equ	0xFD9
 10434                           status	equ	0xFD8
 10435                           
 10436 ;; *************** function _highIsr *****************
 10437 ;; Defined at:
 10438 ;;		line 149 in file "pwm_asl.c"
 10439 ;; Parameters:    Size  Location     Type
 10440 ;;		None
 10441 ;; Auto vars:     Size  Location     Type
 10442 ;;		None
 10443 ;; Return value:  Size  Location     Type
 10444 ;;                  1    wreg      void 
 10445 ;; Registers used:
 10446 ;;		wreg, status,2, status,0, cstack
 10447 ;; Tracked objects:
 10448 ;;		On entry : 0/0
 10449 ;;		On exit  : 0/0
 10450 ;;		Unchanged: 0/0
 10451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10454 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10455 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10456 ;;Total ram usage:       20 bytes
 10457 ;; Hardware stack levels used:    1
 10458 ;; Hardware stack levels required when called:    1
 10459 ;; This function calls:
 10460 ;;		i2___awmod
 10461 ;;		i2___fltol
 10462 ;; This function is called by:
 10463 ;;		Interrupt level 2
 10464 ;; This function uses a non-reentrant model
 10465 ;;
 10466                           
 10467                           	psect	intcode
 10468  000008                     __pintcode:
 10469                           	opt stack 0
 10470  000008                     _highIsr:
 10471                           	opt stack 22
 10472                           
 10473                           ;incstack = 0
 10474  000008  8260               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10475  00000A  ED68  F012         	call	int_func,f	;refresh shadow registers
 10476                           tblptru	equ	0xFF8
 10477                           tblptrh	equ	0xFF7
 10478                           tblptrl	equ	0xFF6
 10479                           tablat	equ	0xFF5
 10480                           prodh	equ	0xFF4
 10481                           prodl	equ	0xFF3
 10482                           intcon	equ	0xFF2
 10483                           intcon2	equ	0xFF1
 10484                           intcon3	equ	0xFF0
 10485                           postinc0	equ	0xFEE
 10486                           wreg	equ	0xFE8
 10487                           indf1	equ	0xFE7
 10488                           postdec1	equ	0xFE5
 10489                           fsr1h	equ	0xFE2
 10490                           fsr1l	equ	0xFE1
 10491                           indf2	equ	0xFDF
 10492                           postinc2	equ	0xFDE
 10493                           postdec2	equ	0xFDD
 10494                           fsr2h	equ	0xFDA
 10495                           fsr2l	equ	0xFD9
 10496                           status	equ	0xFD8
 10497                           
 10498                           	psect	intcode_body
 10499  0024D0                     __pintcode_body:
 10500                           	opt stack 22
 10501  0024D0                     int_func:
 10502                           	opt stack 22
 10503  0024D0  0006               	pop		; remove dummy address from shadow register refresh
 10504  0024D2  CFFA F00D          	movff	pclath,??_highIsr+2
 10505  0024D6  CFFB F00E          	movff	pclatu,??_highIsr+3
 10506  0024DA  CFE9 F00F          	movff	fsr0l,??_highIsr+4
 10507  0024DE  CFEA F010          	movff	fsr0h,??_highIsr+5
 10508  0024E2  CFE1 F011          	movff	fsr1l,??_highIsr+6
 10509  0024E6  CFE2 F012          	movff	fsr1h,??_highIsr+7
 10510  0024EA  CFD9 F013          	movff	fsr2l,??_highIsr+8
 10511  0024EE  CFDA F014          	movff	fsr2h,??_highIsr+9
 10512  0024F2  CFF3 F015          	movff	prodl,??_highIsr+10
 10513  0024F6  CFF4 F016          	movff	prodh,??_highIsr+11
 10514  0024FA  CFF6 F017          	movff	tblptrl,??_highIsr+12
 10515  0024FE  CFF7 F018          	movff	tblptrh,??_highIsr+13
 10516  002502  CFF8 F019          	movff	tblptru,??_highIsr+14
 10517  002506  CFF5 F01A          	movff	tablat,??_highIsr+15
 10518  00250A  C060  F01B         	movff	btemp,??_highIsr+16
 10519  00250E  C061  F01C         	movff	btemp+1,??_highIsr+17
 10520  002512  C062  F01D         	movff	btemp+2,??_highIsr+18
 10521  002516  C063  F01E         	movff	btemp+3,??_highIsr+19
 10522                           
 10523                           ;pwm_asl.c: 151: if (INTCONbits.INT0IF) {
 10524  00251A  A2F2               	btfss	intcon,1,c	;volatile
 10525  00251C  D011               	goto	i2l120
 10526                           
 10527                           ;pwm_asl.c: 152: _delay((unsigned long)((250)*(4000000UL/4000.0)));
 10528  00251E  0E02               	movlw	2
 10529  002520  6E0C               	movwf	(??_highIsr+1)& (0+255),c
 10530  002522  0E45               	movlw	69
 10531  002524  6E0B               	movwf	??_highIsr& (0+255),c
 10532  002526  0EAA               	movlw	170
 10533  002528                     i2u706_47:
 10534  002528  2EE8               	decfsz	wreg,f,c
 10535  00252A  D7FE               	bra	i2u706_47
 10536  00252C  2E0B               	decfsz	??_highIsr& (0+255),f,c
 10537  00252E  D7FC               	bra	i2u706_47
 10538  002530  2E0C               	decfsz	(??_highIsr+1)& (0+255),f,c
 10539  002532  D7FA               	bra	i2u706_47
 10540                           
 10541                           ;pwm_asl.c: 153: if (INTCONbits.INT0IF) {
 10542  002534  A2F2               	btfss	intcon,1,c	;volatile
 10543  002536  D004               	goto	i2l120
 10544                           
 10545                           ;pwm_asl.c: 154: mode = (mode + 1) % 4;
 10546  002538  285A               	incf	_mode,w,c
 10547  00253A  0B03               	andlw	3
 10548  00253C  6E5A               	movwf	_mode,c
 10549                           
 10550                           ;pwm_asl.c: 155: INTCONbits.INT0IF = 0;
 10551  00253E  92F2               	bcf	intcon,1,c	;volatile
 10552  002540                     i2l120:
 10553                           
 10554                           ;pwm_asl.c: 156: }
 10555                           ;pwm_asl.c: 158: }
 10556                           ;pwm_asl.c: 159: if (INTCON3bits.INT2IF) {
 10557  002540  A2F0               	btfss	intcon3,1,c	;volatile
 10558  002542  D01C               	goto	i2l122
 10559                           
 10560                           ;pwm_asl.c: 160: _delay((unsigned long)((250)*(4000000UL/4000.0)));
 10561  002544  0E02               	movlw	2
 10562  002546  6E0C               	movwf	(??_highIsr+1)& (0+255),c
 10563  002548  0E45               	movlw	69
 10564  00254A  6E0B               	movwf	??_highIsr& (0+255),c
 10565  00254C  0EAA               	movlw	170
 10566  00254E                     i2u707_47:
 10567  00254E  2EE8               	decfsz	wreg,f,c
 10568  002550  D7FE               	bra	i2u707_47
 10569  002552  2E0B               	decfsz	??_highIsr& (0+255),f,c
 10570  002554  D7FC               	bra	i2u707_47
 10571  002556  2E0C               	decfsz	(??_highIsr+1)& (0+255),f,c
 10572  002558  D7FA               	bra	i2u707_47
 10573                           
 10574                           ;pwm_asl.c: 161: if (INTCON3bits.INT2IF) {
 10575  00255A  A2F0               	btfss	intcon3,1,c	;volatile
 10576  00255C  D00F               	goto	i2l122
 10577                           
 10578                           ;pwm_asl.c: 162: HS = (HS + 1) % (HS_4 + 1);
 10579  00255E  0E01               	movlw	1
 10580  002560  245B               	addwf	_HS,w,c
 10581  002562  6E01               	movwf	i2___awmod@dividend,c
 10582  002564  6A02               	clrf	i2___awmod@dividend+1,c
 10583  002566  0E00               	movlw	0
 10584  002568  2202               	addwfc	i2___awmod@dividend+1,f,c
 10585  00256A  0E00               	movlw	0
 10586  00256C  6E04               	movwf	i2___awmod@divisor+1,c
 10587  00256E  0E05               	movlw	5
 10588  002570  6E03               	movwf	i2___awmod@divisor,c
 10589  002572  ECDD  F015         	call	i2___awmod	;wreg free
 10590  002576  5001               	movf	?i2___awmod,w,c
 10591  002578  6E5B               	movwf	_HS,c
 10592                           
 10593                           ;pwm_asl.c: 163: INTCON3bits.INT2IF = 0;
 10594  00257A  92F0               	bcf	intcon3,1,c	;volatile
 10595  00257C                     i2l122:
 10596                           
 10597                           ;pwm_asl.c: 164: }
 10598                           ;pwm_asl.c: 165: }
 10599                           ;pwm_asl.c: 167: if (PIR2bits.TMR3IF)
 10600  00257C  A2A1               	btfss	4001,1,c	;volatile
 10601  00257E  D010               	goto	i2l123
 10602                           
 10603                           ;pwm_asl.c: 168: {
 10604                           ;pwm_asl.c: 170: PIR2bits.TMR3IF = 0;
 10605  002580  92A1               	bcf	4001,1,c	;volatile
 10606                           
 10607                           ;pwm_asl.c: 173: LATCbits.LATC5 = 1;
 10608  002582  8A8B               	bsf	3979,5,c	;volatile
 10609                           
 10610                           ;pwm_asl.c: 176: CCPR2 = compare;
 10611  002584  C050  F001         	movff	_compare,i2___fltol@f1
 10612  002588  C051  F002         	movff	_compare+1,i2___fltol@f1+1
 10613  00258C  C052  F003         	movff	_compare+2,i2___fltol@f1+2
 10614  002590  C053  F004         	movff	_compare+3,i2___fltol@f1+3
 10615  002594  EC71  F014         	call	i2___fltol	;wreg free
 10616  002598  C001  FFBB         	movff	?i2___fltol,4027	;volatile
 10617  00259C  C002  FFBC         	movff	?i2___fltol+1,4028	;volatile
 10618  0025A0                     i2l123:
 10619                           
 10620                           ;pwm_asl.c: 177: }
 10621                           ;pwm_asl.c: 180: if (PIR2bits.CCP2IF)
 10622  0025A0  A0A1               	btfss	4001,0,c	;volatile
 10623  0025A2  D002               	goto	i2l124
 10624                           
 10625                           ;pwm_asl.c: 181: {
 10626                           ;pwm_asl.c: 182: PIR2bits.CCP2IF = 0;
 10627  0025A4  90A1               	bcf	4001,0,c	;volatile
 10628                           
 10629                           ;pwm_asl.c: 185: LATCbits.LATC5 = 0;
 10630  0025A6  9A8B               	bcf	3979,5,c	;volatile
 10631  0025A8                     i2l124:
 10632  0025A8  C01E  F063         	movff	??_highIsr+19,btemp+3
 10633  0025AC  C01D  F062         	movff	??_highIsr+18,btemp+2
 10634  0025B0  C01C  F061         	movff	??_highIsr+17,btemp+1
 10635  0025B4  C01B  F060         	movff	??_highIsr+16,btemp
 10636  0025B8  C01A  FFF5         	movff	??_highIsr+15,tablat
 10637  0025BC  C019  FFF8         	movff	??_highIsr+14,tblptru
 10638  0025C0  C018  FFF7         	movff	??_highIsr+13,tblptrh
 10639  0025C4  C017  FFF6         	movff	??_highIsr+12,tblptrl
 10640  0025C8  C016  FFF4         	movff	??_highIsr+11,prodh
 10641  0025CC  C015  FFF3         	movff	??_highIsr+10,prodl
 10642  0025D0  C014  FFDA         	movff	??_highIsr+9,fsr2h
 10643  0025D4  C013  FFD9         	movff	??_highIsr+8,fsr2l
 10644  0025D8  C012  FFE2         	movff	??_highIsr+7,fsr1h
 10645  0025DC  C011  FFE1         	movff	??_highIsr+6,fsr1l
 10646  0025E0  C010  FFEA         	movff	??_highIsr+5,fsr0h
 10647  0025E4  C00F  FFE9         	movff	??_highIsr+4,fsr0l
 10648  0025E8  C00E  FFFB         	movff	??_highIsr+3,pclatu
 10649  0025EC  C00D  FFFA         	movff	??_highIsr+2,pclath
 10650  0025F0  9260               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10651  0025F2  0011               	retfie		f
 10652  0025F4                     __end_of_highIsr:
 10653                           	opt stack 0
 10654                           pclatu	equ	0xFFB
 10655                           pclath	equ	0xFFA
 10656                           tblptru	equ	0xFF8
 10657                           tblptrh	equ	0xFF7
 10658                           tblptrl	equ	0xFF6
 10659                           tablat	equ	0xFF5
 10660                           prodh	equ	0xFF4
 10661                           prodl	equ	0xFF3
 10662                           intcon	equ	0xFF2
 10663                           intcon2	equ	0xFF1
 10664                           intcon3	equ	0xFF0
 10665                           postinc0	equ	0xFEE
 10666                           fsr0h	equ	0xFEA
 10667                           fsr0l	equ	0xFE9
 10668                           wreg	equ	0xFE8
 10669                           indf1	equ	0xFE7
 10670                           postdec1	equ	0xFE5
 10671                           fsr1h	equ	0xFE2
 10672                           fsr1l	equ	0xFE1
 10673                           indf2	equ	0xFDF
 10674                           postinc2	equ	0xFDE
 10675                           postdec2	equ	0xFDD
 10676                           fsr2h	equ	0xFDA
 10677                           fsr2l	equ	0xFD9
 10678                           status	equ	0xFD8
 10679                           
 10680 ;; *************** function i2___fltol *****************
 10681 ;; Defined at:
 10682 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fltol.c"
 10683 ;; Parameters:    Size  Location     Type
 10684 ;;  f1              4    0[COMRAM] void 
 10685 ;; Auto vars:     Size  Location     Type
 10686 ;;  __fltol         1    9[COMRAM] unsigned char 
 10687 ;;  __fltol         1    8[COMRAM] unsigned char 
 10688 ;; Return value:  Size  Location     Type
 10689 ;;                  4    0[COMRAM] long 
 10690 ;; Registers used:
 10691 ;;		wreg, status,2, status,0
 10692 ;; Tracked objects:
 10693 ;;		On entry : 0/0
 10694 ;;		On exit  : 0/0
 10695 ;;		Unchanged: 0/0
 10696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10697 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10698 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10699 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10700 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10701 ;;Total ram usage:       10 bytes
 10702 ;; Hardware stack levels used:    1
 10703 ;; This function calls:
 10704 ;;		Nothing
 10705 ;; This function is called by:
 10706 ;;		_highIsr
 10707 ;; This function uses a non-reentrant model
 10708 ;;
 10709                           
 10710                           	psect	text38
 10711  0028E2                     __ptext38:
 10712                           	opt stack 0
 10713  0028E2                     i2___fltol:
 10714                           	opt stack 22
 10715                           
 10716                           ;incstack = 0
 10717  0028E2  3403               	rlcf	i2___fltol@f1+2,w,c
 10718  0028E4  3404               	rlcf	i2___fltol@f1+3,w,c
 10719  0028E6  6E0A               	movwf	i2___fltol@exp1,c
 10720  0028E8  500A               	movf	i2___fltol@exp1,w,c
 10721  0028EA  A4D8               	btfss	status,2,c
 10722  0028EC  D009               	goto	i2l700
 10723  0028EE  0E00               	movlw	0
 10724  0028F0  6E01               	movwf	?i2___fltol,c
 10725  0028F2  0E00               	movlw	0
 10726  0028F4  6E02               	movwf	?i2___fltol+1,c
 10727  0028F6  0E00               	movlw	0
 10728  0028F8  6E03               	movwf	?i2___fltol+2,c
 10729  0028FA  0E00               	movlw	0
 10730  0028FC  6E04               	movwf	?i2___fltol+3,c
 10731  0028FE  0012               	return	
 10732  002900                     i2l700:
 10733  002900  C001  F005         	movff	i2___fltol@f1,??i2___fltol
 10734  002904  C002  F006         	movff	i2___fltol@f1+1,??i2___fltol+1
 10735  002908  C003  F007         	movff	i2___fltol@f1+2,??i2___fltol+2
 10736  00290C  C004  F008         	movff	i2___fltol@f1+3,??i2___fltol+3
 10737  002910  0E20               	movlw	32
 10738  002912  D005               	goto	i2u474_40
 10739  002914                     i2u474_45:
 10740  002914  90D8               	bcf	status,0,c
 10741  002916  3208               	rrcf	??i2___fltol+3,f,c
 10742  002918  3207               	rrcf	??i2___fltol+2,f,c
 10743  00291A  3206               	rrcf	??i2___fltol+1,f,c
 10744  00291C  3205               	rrcf	??i2___fltol,f,c
 10745  00291E                     i2u474_40:
 10746  00291E  2EE8               	decfsz	wreg,f,c
 10747  002920  D7F9               	goto	i2u474_45
 10748  002922  5005               	movf	??i2___fltol,w,c
 10749  002924  6E09               	movwf	i2___fltol@sign1,c
 10750  002926  8E03               	bsf	i2___fltol@f1+2,7,c
 10751  002928  0EFF               	movlw	255
 10752  00292A  1601               	andwf	i2___fltol@f1,f,c
 10753  00292C  0EFF               	movlw	255
 10754  00292E  1602               	andwf	i2___fltol@f1+1,f,c
 10755  002930  0EFF               	movlw	255
 10756  002932  1603               	andwf	i2___fltol@f1+2,f,c
 10757  002934  0E00               	movlw	0
 10758  002936  1604               	andwf	i2___fltol@f1+3,f,c
 10759  002938  0E96               	movlw	150
 10760  00293A  5E0A               	subwf	i2___fltol@exp1,f,c
 10761  00293C  AE0A               	btfss	i2___fltol@exp1,7,c
 10762  00293E  D016               	goto	i2l702
 10763  002940  500A               	movf	i2___fltol@exp1,w,c
 10764  002942  0A80               	xorlw	128
 10765  002944  0F97               	addlw	151
 10766  002946  B0D8               	btfsc	status,0,c
 10767  002948  D009               	goto	i2l703
 10768  00294A  0E00               	movlw	0
 10769  00294C  6E01               	movwf	?i2___fltol,c
 10770  00294E  0E00               	movlw	0
 10771  002950  6E02               	movwf	?i2___fltol+1,c
 10772  002952  0E00               	movlw	0
 10773  002954  6E03               	movwf	?i2___fltol+2,c
 10774  002956  0E00               	movlw	0
 10775  002958  6E04               	movwf	?i2___fltol+3,c
 10776  00295A  0012               	return	
 10777  00295C                     i2l703:
 10778  00295C  90D8               	bcf	status,0,c
 10779  00295E  3204               	rrcf	i2___fltol@f1+3,f,c
 10780  002960  3203               	rrcf	i2___fltol@f1+2,f,c
 10781  002962  3202               	rrcf	i2___fltol@f1+1,f,c
 10782  002964  3201               	rrcf	i2___fltol@f1,f,c
 10783  002966  3E0A               	incfsz	i2___fltol@exp1,f,c
 10784  002968  D7F9               	goto	i2l703
 10785  00296A  D015               	goto	i2u478_40
 10786  00296C                     i2l702:
 10787  00296C  0E1F               	movlw	31
 10788  00296E  640A               	cpfsgt	i2___fltol@exp1,c
 10789  002970  D00F               	goto	i2l708
 10790  002972  0E00               	movlw	0
 10791  002974  6E01               	movwf	?i2___fltol,c
 10792  002976  0E00               	movlw	0
 10793  002978  6E02               	movwf	?i2___fltol+1,c
 10794  00297A  0E00               	movlw	0
 10795  00297C  6E03               	movwf	?i2___fltol+2,c
 10796  00297E  0E00               	movlw	0
 10797  002980  6E04               	movwf	?i2___fltol+3,c
 10798  002982  0012               	return	
 10799  002984  90D8               	bcf	status,0,c
 10800  002986  3601               	rlcf	i2___fltol@f1,f,c
 10801  002988  3602               	rlcf	i2___fltol@f1+1,f,c
 10802  00298A  3603               	rlcf	i2___fltol@f1+2,f,c
 10803  00298C  3604               	rlcf	i2___fltol@f1+3,f,c
 10804  00298E  060A               	decf	i2___fltol@exp1,f,c
 10805  002990                     i2l708:
 10806  002990  500A               	movf	i2___fltol@exp1,w,c
 10807  002992  A4D8               	btfss	status,2,c
 10808  002994  D7F7               	goto	i2l709
 10809  002996                     i2u478_40:
 10810  002996  5009               	movf	i2___fltol@sign1,w,c
 10811  002998  B4D8               	btfsc	status,2,c
 10812  00299A  D008               	goto	i2l711
 10813  00299C  1E04               	comf	i2___fltol@f1+3,f,c
 10814  00299E  1E03               	comf	i2___fltol@f1+2,f,c
 10815  0029A0  1E02               	comf	i2___fltol@f1+1,f,c
 10816  0029A2  6C01               	negf	i2___fltol@f1,c
 10817  0029A4  0E00               	movlw	0
 10818  0029A6  2202               	addwfc	i2___fltol@f1+1,f,c
 10819  0029A8  2203               	addwfc	i2___fltol@f1+2,f,c
 10820  0029AA  2204               	addwfc	i2___fltol@f1+3,f,c
 10821  0029AC                     i2l711:
 10822  0029AC  C001  F001         	movff	i2___fltol@f1,?i2___fltol
 10823  0029B0  C002  F002         	movff	i2___fltol@f1+1,?i2___fltol+1
 10824  0029B4  C003  F003         	movff	i2___fltol@f1+2,?i2___fltol+2
 10825  0029B8  C004  F004         	movff	i2___fltol@f1+3,?i2___fltol+3
 10826  0029BC  0012               	return	
 10827  0029BE                     __end_ofi2___fltol:
 10828                           	opt stack 0
 10829                           pclatu	equ	0xFFB
 10830                           pclath	equ	0xFFA
 10831                           tblptru	equ	0xFF8
 10832                           tblptrh	equ	0xFF7
 10833                           tblptrl	equ	0xFF6
 10834                           tablat	equ	0xFF5
 10835                           prodh	equ	0xFF4
 10836                           prodl	equ	0xFF3
 10837                           intcon	equ	0xFF2
 10838                           intcon2	equ	0xFF1
 10839                           intcon3	equ	0xFF0
 10840                           postinc0	equ	0xFEE
 10841                           fsr0h	equ	0xFEA
 10842                           fsr0l	equ	0xFE9
 10843                           wreg	equ	0xFE8
 10844                           indf1	equ	0xFE7
 10845                           postdec1	equ	0xFE5
 10846                           fsr1h	equ	0xFE2
 10847                           fsr1l	equ	0xFE1
 10848                           indf2	equ	0xFDF
 10849                           postinc2	equ	0xFDE
 10850                           postdec2	equ	0xFDD
 10851                           fsr2h	equ	0xFDA
 10852                           fsr2l	equ	0xFD9
 10853                           status	equ	0xFD8
 10854                           
 10855 ;; *************** function i2___awmod *****************
 10856 ;; Defined at:
 10857 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 10858 ;; Parameters:    Size  Location     Type
 10859 ;;  dividend        2    0[COMRAM] int 
 10860 ;;  divisor         2    2[COMRAM] int 
 10861 ;; Auto vars:     Size  Location     Type
 10862 ;;  __awmod         1    5[COMRAM] unsigned char 
 10863 ;;  __awmod         1    4[COMRAM] unsigned char 
 10864 ;; Return value:  Size  Location     Type
 10865 ;;                  2    0[COMRAM] int 
 10866 ;; Registers used:
 10867 ;;		wreg, status,2, status,0
 10868 ;; Tracked objects:
 10869 ;;		On entry : 0/0
 10870 ;;		On exit  : 0/0
 10871 ;;		Unchanged: 0/0
 10872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10873 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10874 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10876 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10877 ;;Total ram usage:        6 bytes
 10878 ;; Hardware stack levels used:    1
 10879 ;; This function calls:
 10880 ;;		Nothing
 10881 ;; This function is called by:
 10882 ;;		_highIsr
 10883 ;; This function uses a non-reentrant model
 10884 ;;
 10885                           
 10886                           	psect	text39
 10887  002BBA                     __ptext39:
 10888                           	opt stack 0
 10889  002BBA                     i2___awmod:
 10890                           	opt stack 22
 10891                           
 10892                           ;incstack = 0
 10893  002BBA  0E00               	movlw	0
 10894  002BBC  6E06               	movwf	i2___awmod@sign,c
 10895  002BBE  AE02               	btfss	i2___awmod@dividend+1,7,c
 10896  002BC0  D006               	goto	i2l634
 10897  002BC2  6C01               	negf	i2___awmod@dividend,c
 10898  002BC4  1E02               	comf	i2___awmod@dividend+1,f,c
 10899  002BC6  B0D8               	btfsc	status,0,c
 10900  002BC8  2A02               	incf	i2___awmod@dividend+1,f,c
 10901  002BCA  0E01               	movlw	1
 10902  002BCC  6E06               	movwf	i2___awmod@sign,c
 10903  002BCE                     i2l634:
 10904  002BCE  AE04               	btfss	i2___awmod@divisor+1,7,c
 10905  002BD0  D004               	goto	i2l635
 10906  002BD2  6C03               	negf	i2___awmod@divisor,c
 10907  002BD4  1E04               	comf	i2___awmod@divisor+1,f,c
 10908  002BD6  B0D8               	btfsc	status,0,c
 10909  002BD8  2A04               	incf	i2___awmod@divisor+1,f,c
 10910  002BDA                     i2l635:
 10911  002BDA  5003               	movf	i2___awmod@divisor,w,c
 10912  002BDC  1004               	iorwf	i2___awmod@divisor+1,w,c
 10913  002BDE  B4D8               	btfsc	status,2,c
 10914  002BE0  D018               	goto	i2l642
 10915  002BE2  0E01               	movlw	1
 10916  002BE4  6E05               	movwf	i2___awmod@counter,c
 10917  002BE6  D004               	goto	i2l637
 10918  002BE8  90D8               	bcf	status,0,c
 10919  002BEA  3603               	rlcf	i2___awmod@divisor,f,c
 10920  002BEC  3604               	rlcf	i2___awmod@divisor+1,f,c
 10921  002BEE  2A05               	incf	i2___awmod@counter,f,c
 10922  002BF0                     i2l637:
 10923  002BF0  AE04               	btfss	i2___awmod@divisor+1,7,c
 10924  002BF2  D7FA               	goto	i2l638
 10925  002BF4                     i2u470_40:
 10926  002BF4  5003               	movf	i2___awmod@divisor,w,c
 10927  002BF6  5C01               	subwf	i2___awmod@dividend,w,c
 10928  002BF8  5004               	movf	i2___awmod@divisor+1,w,c
 10929  002BFA  5802               	subwfb	i2___awmod@dividend+1,w,c
 10930  002BFC  A0D8               	btfss	status,0,c
 10931  002BFE  D004               	goto	i2l641
 10932  002C00  5003               	movf	i2___awmod@divisor,w,c
 10933  002C02  5E01               	subwf	i2___awmod@dividend,f,c
 10934  002C04  5004               	movf	i2___awmod@divisor+1,w,c
 10935  002C06  5A02               	subwfb	i2___awmod@dividend+1,f,c
 10936  002C08                     i2l641:
 10937  002C08  90D8               	bcf	status,0,c
 10938  002C0A  3204               	rrcf	i2___awmod@divisor+1,f,c
 10939  002C0C  3203               	rrcf	i2___awmod@divisor,f,c
 10940  002C0E  2E05               	decfsz	i2___awmod@counter,f,c
 10941  002C10  D7F1               	goto	i2u470_40
 10942  002C12                     i2l642:
 10943  002C12  5006               	movf	i2___awmod@sign,w,c
 10944  002C14  B4D8               	btfsc	status,2,c
 10945  002C16  D004               	goto	i2l643
 10946  002C18  6C01               	negf	i2___awmod@dividend,c
 10947  002C1A  1E02               	comf	i2___awmod@dividend+1,f,c
 10948  002C1C  B0D8               	btfsc	status,0,c
 10949  002C1E  2A02               	incf	i2___awmod@dividend+1,f,c
 10950  002C20                     i2l643:
 10951  002C20  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 10952  002C24  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 10953  002C28  0012               	return	
 10954  002C2A                     __end_ofi2___awmod:
 10955                           	opt stack 0
 10956                           pclatu	equ	0xFFB
 10957                           pclath	equ	0xFFA
 10958                           tblptru	equ	0xFF8
 10959                           tblptrh	equ	0xFF7
 10960                           tblptrl	equ	0xFF6
 10961                           tablat	equ	0xFF5
 10962                           prodh	equ	0xFF4
 10963                           prodl	equ	0xFF3
 10964                           intcon	equ	0xFF2
 10965                           intcon2	equ	0xFF1
 10966                           intcon3	equ	0xFF0
 10967                           postinc0	equ	0xFEE
 10968                           fsr0h	equ	0xFEA
 10969                           fsr0l	equ	0xFE9
 10970                           wreg	equ	0xFE8
 10971                           indf1	equ	0xFE7
 10972                           postdec1	equ	0xFE5
 10973                           fsr1h	equ	0xFE2
 10974                           fsr1l	equ	0xFE1
 10975                           indf2	equ	0xFDF
 10976                           postinc2	equ	0xFDE
 10977                           postdec2	equ	0xFDD
 10978                           fsr2h	equ	0xFDA
 10979                           fsr2l	equ	0xFD9
 10980                           status	equ	0xFD8
 10981                           pclatu	equ	0xFFB
 10982                           pclath	equ	0xFFA
 10983                           tblptru	equ	0xFF8
 10984                           tblptrh	equ	0xFF7
 10985                           tblptrl	equ	0xFF6
 10986                           tablat	equ	0xFF5
 10987                           prodh	equ	0xFF4
 10988                           prodl	equ	0xFF3
 10989                           intcon	equ	0xFF2
 10990                           intcon2	equ	0xFF1
 10991                           intcon3	equ	0xFF0
 10992                           postinc0	equ	0xFEE
 10993                           fsr0h	equ	0xFEA
 10994                           fsr0l	equ	0xFE9
 10995                           wreg	equ	0xFE8
 10996                           indf1	equ	0xFE7
 10997                           postdec1	equ	0xFE5
 10998                           fsr1h	equ	0xFE2
 10999                           fsr1l	equ	0xFE1
 11000                           indf2	equ	0xFDF
 11001                           postinc2	equ	0xFDE
 11002                           postdec2	equ	0xFDD
 11003                           fsr2h	equ	0xFDA
 11004                           fsr2l	equ	0xFD9
 11005                           status	equ	0xFD8
 11006                           
 11007                           	psect	rparam
 11008  0000                     pclatu	equ	0xFFB
 11009                           pclath	equ	0xFFA
 11010                           tblptru	equ	0xFF8
 11011                           tblptrh	equ	0xFF7
 11012                           tblptrl	equ	0xFF6
 11013                           tablat	equ	0xFF5
 11014                           prodh	equ	0xFF4
 11015                           prodl	equ	0xFF3
 11016                           intcon	equ	0xFF2
 11017                           intcon2	equ	0xFF1
 11018                           intcon3	equ	0xFF0
 11019                           postinc0	equ	0xFEE
 11020                           fsr0h	equ	0xFEA
 11021                           fsr0l	equ	0xFE9
 11022                           wreg	equ	0xFE8
 11023                           indf1	equ	0xFE7
 11024                           postdec1	equ	0xFE5
 11025                           fsr1h	equ	0xFE2
 11026                           fsr1l	equ	0xFE1
 11027                           indf2	equ	0xFDF
 11028                           postinc2	equ	0xFDE
 11029                           postdec2	equ	0xFDD
 11030                           fsr2h	equ	0xFDA
 11031                           fsr2l	equ	0xFD9
 11032                           status	equ	0xFD8
 11033                           
 11034                           	psect	temp
 11035  000060                     btemp:
 11036                           	opt stack 0
 11037  000060                     	ds	1
 11038  0000                     int$flags	set	btemp
 11039  0000                     wtemp6	set	btemp+1
 11040                           pclatu	equ	0xFFB
 11041                           pclath	equ	0xFFA
 11042                           tblptru	equ	0xFF8
 11043                           tblptrh	equ	0xFF7
 11044                           tblptrl	equ	0xFF6
 11045                           tablat	equ	0xFF5
 11046                           prodh	equ	0xFF4
 11047                           prodl	equ	0xFF3
 11048                           intcon	equ	0xFF2
 11049                           intcon2	equ	0xFF1
 11050                           intcon3	equ	0xFF0
 11051                           postinc0	equ	0xFEE
 11052                           fsr0h	equ	0xFEA
 11053                           fsr0l	equ	0xFE9
 11054                           wreg	equ	0xFE8
 11055                           indf1	equ	0xFE7
 11056                           postdec1	equ	0xFE5
 11057                           fsr1h	equ	0xFE2
 11058                           fsr1l	equ	0xFE1
 11059                           indf2	equ	0xFDF
 11060                           postinc2	equ	0xFDE
 11061                           postdec2	equ	0xFDD
 11062                           fsr2h	equ	0xFDA
 11063                           fsr2l	equ	0xFD9
 11064                           status	equ	0xFD8


Data Sizes:
    Strings     132
    Constant    144
    Data        4
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     79      95
    BANK0           128     83     105
    BANK1           256    161     197
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK1[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_10(CODE[4]), STR_9(CODE[12]), STR_8(CODE[7]), STR_7(CODE[12]), 
		 -> STR_5(CODE[11]), STR_4(CODE[19]), STR_3(CODE[21]), STR_2(CODE[21]), 
		 -> STR_1(CODE[21]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 64
		 -> display@LCD(BANK1[64]), display@LCDP(BANK1[64]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 64
		 -> STR_6(CODE[4]), display@LCD(BANK1[64]), display@LCDP(BANK1[64]), 


Critical Paths under _main in COMRAM

    _main->___flmul
    _main->_read_adc_voltage
    _read_adc_voltage->___fldiv
    _operation->___flmul
    ___fldiv->___xxtofl
    _lcd_init->_lcd_send_byte
    _sprintf->___flmul
    _scale->___flmul
    _fround->___flmul
    ___flmul->___fldiv
    ___awdiv->___awmod
    ___xxtofl->___wmul
    ___llmod->___lldiv
    ___fltol->___flmul
    ___flneg->___xxtofl
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles

Critical Paths under _highIsr in COMRAM

    _highIsr->i2___fltol

Critical Paths under _main in BANK0

    _operation->___flge
    _display->_sprintf
    _sprintf->___flge
    _scale->___flmul
    _fround->___flmul
    ___fltol->_scale
    ___flsub->___fladd
    ___fladd->_fround
    ___flge->___fladd

Critical Paths under _highIsr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_display
    _display->_sprintf

Critical Paths under _highIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _highIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _highIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _highIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _highIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _highIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _highIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _highIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _highIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _highIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _highIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _highIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _highIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _highIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  102051
                                             78 BANK0      5     5      0
                            ___flmul
                           _delay_ms
                            _display
                     _initInterrupts
                    _init_adc_no_lib
                          _init_pwm1
                           _lcd_init
                           _lcd_putc
                          _operation
                   _read_adc_voltage
                         _setupPorts
 ---------------------------------------------------------------------------------
 (1) _setupPorts                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_adc_voltage                                    11     7      4    4967
                                             75 COMRAM     4     0      4
                                              0 BANK0      7     7      0
                            ___fldiv
                             ___wmul
                           ___xxtofl
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (1) _operation                                           10    10      0   18208
                                             66 BANK0     10    10      0
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                           ___xxtofl
                           _delay_ms
                _read_adc_raw_no_lib
                       _set_pwm1_raw
 ---------------------------------------------------------------------------------
 (2) _set_pwm1_raw                                         4     2      2     652
                                             30 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _read_adc_raw_no_lib                                  7     5      2      65
                                             30 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    3015
                                             50 COMRAM    25    17      8
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    1920
                                             40 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (1) _init_pwm1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_adc_no_lib                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initInterrupts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _display                                            130   130      0   65968
                                             31 BANK1    130   130      0
                         _lcd_gotoxy
                           _lcd_putc
                           _lcd_puts
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             44    36      8   54895
                                             66 BANK0     12     4      8
                                              0 BANK1     31    31      0
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                9     5      4   11510
                                             21 BANK0      9     5      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             30 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13     9      4   11231
                                             21 BANK0     13     9      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    6473
                                             75 COMRAM     4     4      0
                                              0 BANK0     21    13      8
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2163
                                             30 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2245
                                             36 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         17     9      8     634
                                             30 COMRAM    17     9      8
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          14     6      8     634
                                             30 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     836
                                             36 COMRAM    14    10      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     952
                                             30 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     952
                                             43 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     781
                                             30 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     932
                                             30 BANK0     10     6      4
                            ___flmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    5087
                                             54 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fladd                                             20    12      8    4702
                                             34 BANK0     20    12      8
                            ___flneg (ARG)
                           ___xxtofl (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flneg                                              4     0      4     515
                                             50 COMRAM     4     0      4
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    1346
                                             54 BANK0     12     4      8
                            ___fladd (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             2     0      2    4426
                                             44 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (1) _lcd_putc                                             1     1      0    3849
                                             43 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           3     2      1    2067
                                             40 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        2     1      1    1236
                                             38 COMRAM     2     1      1
                       _delay_cycles
                           _delay_ms
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_send_nibble                                      2     2      0      68
                                             36 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (4) _delay_cycles                                         6     6      0      46
                                             30 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             4     2      2     502
                                             30 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _highIsr                                             20    20      0     603
                                             10 COMRAM    20    20      0
                          i2___awmod
                          i2___fltol
 ---------------------------------------------------------------------------------
 (9) i2___fltol                                           10     6      4     255
                                              0 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (9) i2___awmod                                            6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___flmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___fldiv (ARG)
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
   _delay_ms
   _display
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_putc
       _delay_ms
       _lcd_gotoxy
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___fladd
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fldiv (ARG)
               ___wmul (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
       ___flge
         ___fladd (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fldiv (ARG)
                 ___wmul (ARG)
                 ___xxtofl (ARG)
                   ___wmul (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
       ___flneg
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___flsub
         ___fladd
           ___flneg (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fldiv (ARG)
                 ___wmul (ARG)
                 ___xxtofl (ARG)
                   ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___fltol
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fldiv (ARG)
               ___wmul (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       ___xxtofl
         ___wmul (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
   _initInterrupts
   _init_adc_no_lib
   _init_pwm1
   _lcd_init
     _delay_ms
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _lcd_putc
     _delay_ms
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _operation
     ___fladd
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
     ___fldiv
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___flge
       ___fladd (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fldiv (ARG)
               ___wmul (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___fldiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
     ___flneg
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___xxtofl
       ___wmul (ARG)
     _delay_ms
     _read_adc_raw_no_lib
     _set_pwm1_raw
   _read_adc_voltage
     ___fldiv
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___wmul
     ___xxtofl
       ___wmul (ARG)
     _read_adc_raw_no_lib
   _setupPorts

 _highIsr (ROOT)
   i2___awmod
   i2___fltol

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     A1      C5       7       77.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     53      69       5       82.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     4F      5F       1       75.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     18D      34        0.0%
DATA                 0      0     18D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Jun 25 22:32:47 2024

            ?_read_adc_voltage 004C                   ___fldiv@aexp 004B                   ___fldiv@bexp 004A  
                 ___fldiv@sign 003F             ??_read_adc_voltage 0050                             _AN 00D3  
                           _HC 01C1                             _HS 005B                 ?_lcd_send_byte 0027  
                 ___awdiv@sign 002A                             _ft 0054                             _sp 00DF  
          ___wmul@multiplicand 0021                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                  __CFG_OSC$XT 000000                    __CFG_LVP$ON 000000                    __CFG_WDT$ON 000000  
                          l200 2EE0                            l201 2EE4                            l202 2EE8  
                          l210 2DC8                            l211 2DD4                            l133 0FFA  
                          l206 2DE0                            l134 1076                            l207 2DA4  
                          l215 2D76                            l143 1FA8                            l135 1130  
                          l216 2D4C                            l400 048A                            l144 1F30  
                          l128 1338                            l136 1290                            l209 2DBC  
                          l145 1FC2                            l241 2F30                            l137 1214  
                          l129 0FBE                            l170 301C                            l410 05EE  
                          l146 1F4A                            l154 2738                            l171 300E  
                          l147 1F6A                            l155 2754                            l420 0700  
                          l412 0624                            l148 1F8A                            l413 060A  
                          l350 0CB6                            l422 073E                            l406 056A  
                          l190 2CAC                            l343 1DFE                            l431 0918  
                          l423 0742                            l176 2FC2                            l432 0930  
                          l424 0766                            l416 06F4                            l360 0020  
                          l192 2CD4                            l177 2FBC                            l185 2ECA  
                          l353 0D6E                            l441 0A10                            l425 08AE  
                          l417 065C                            l361 003E                            l346 1EDE  
                          l354 0ED8                            l450 0AA2                            l442 0A1A  
                          l426 07C8                            l370 0206                            l443 0A46  
                          l419 071A                            l363 006E                            l700 2824  
                          l356 0F90                            l444 0A50                            l436 098E  
                          l428 08D4                            l197 2EEE                            l621 2A58  
                          l349 0D9A                            l429 08BA                            l381 01AC  
                          l373 015A                            l365 014C                            l198 2EDC  
                          l702 2890                            l630 2ABE                            l622 2A68  
                          l438 09B8                            l390 029A                            l374 0238  
                          l382 019A                            l366 0136                            l199 2F08  
                          l711 28D0                            l703 2880                            l439 09E4  
                          l367 00FC                            l624 2A86                            l392 0306  
                          l384 01DE                            l625 2A7E                            l641 2B98  
                          l449 0B2E                            l393 0388                            l385 01C0  
                          l377 015E                            l642 2BA2                            l634 2B5E  
                          l378 017A                            l643 2BB0                            l635 2B6A  
                          l395 03BA                            l387 01F4                            l379 0190  
                          l708 28B4                            l660 2484                            l628 2AA6  
                          l388 08DE                            l396 0406                            l709 28A8  
                          l653 23C6                            l629 2AB0                            l637 2B80  
                          l397 04F2                            l389 024C                            l670 262A  
                          l638 2B78                            l671 265E                            l655 23E4  
                          l672 269C                            l656 2426                            l760 2308  
                          l673 26DA                            l665 24B8                            l657 2456  
                          l761 2330                            l817 3080                            l930 1720  
                          l666 24AC                            l770 2384                            l931 171C  
                          l843 2AF6                            l659 2494                            l763 236C  
                          l940 17E8                            l844 2AEA                            l764 235C  
                          l677 2F9E                            l933 177C                            l925 16D8  
                          l853 2C48                            l757 22A2                            l934 1740  
                          l926 16D4                            l854 2C3C                            l951 18DE  
                          l943 1856                            l847 2B2A                            l759 22CE  
                          l960 1932                            l944 181C                            l848 2B38  
                          l953 18EE                            l937 17F8                            l857 2C70  
                          l769 2390                            l938 17D6                            l858 2C7E  
                          l947 1840                            l939 17E4                            l972 19BE  
                          l956 1912                            l948 1844                            l973 19C6  
                          l965 1952                            l974 19C8                            l958 1928  
                          l982 1A14                            l991 1AC2                            l983 1A10  
                          l968 1998                            l992 1B70                            l993 1B20  
                          l994 1B48                            l986 1A54                            l987 1A50  
                          l996 1B6E                            l989 1A9A                            l999 1BA4  
                 __CFG_CPB$OFF 000000                            _PR2 000FCB                   __CFG_CPD$OFF 000000  
                          _RPS 0056                            _lcd 000F83                   ___awmod@sign 0024  
                          prod 000FF3      read_adc_voltage@raw_value 0085                            wreg 000FE8  
                 ___flmul@aexp 0089                   ___flmul@bexp 008E                   ___flmul@sign 0088  
                 ___flmul@temp 0093                   ___flmul@prod 008F                    main@channel 00D2  
                  lcd_gotoxy@x 002A                    lcd_gotoxy@y 0029                   ___fltol@exp1 00A7  
                  display@LCDP 011F                           l1000 1B86                           l1010 1C6E  
                         l1011 1C7A                           l1020 13C6                           l1012 1C7C  
                         l1021 13C2                           l1022 13D6                           l1006 1BDC  
                         l1023 13F4                           l1040 1690                           l1016 1386  
                         l1008 1C20                           l1017 1382                           l1009 1C44  
                         l1034 15EC                           l1018 1396                           l1051 21E2  
                         l1027 15B4                           l1060 2264                           l1052 21CA  
                         l1044 2164                           l1036 1630                           l1028 1596  
                         l1045 2174                           l1037 164E                           l1054 2214  
                         l1046 2192                           l1055 2208                           l1039 1672  
                         l1048 21A4                           l1049 2198                           l1059 2232  
                         l4450 2CCC                           l4436 2CA4                           l6082 274C  
                         l5612 061C                           l5632 0700                           l5608 060A  
                         l5560 0406                           l4658 2712                           l5490 019A  
                         l5568 0458                           l5496 01C0                           l5748 0AA2  
                         l5588 056E                           l5694 0934                           l5882 1C6E  
                         l5984 1F46                           l5998 1F84                           STR_1 FF7B  
                         STR_2 FF90                           STR_3 FFA5                           STR_4 FFBA  
                         STR_5 FFE5                           STR_6 FFFB                           STR_7 FFCD  
                         STR_8 FFF0                           STR_9 FFD9                           u5000 17AC  
                         u2505 2E9A                           u2506 2E9C                           u5010 17BC  
                         u5020 17BE                           _IPR1 000F9F                           u4310 2D6E  
                         _IPR2 000FA2                           _PIE1 000F9D                           u4320 2D98  
                         u6000 2AFA                           _PIE2 000FA0                           u5210 194E  
                         u5050 1800                           u4317 2D64                           u6030 2C4C  
                         u6110 221E                           u4327 2D8E                           u7000 2790  
                         u5260 19A4                           u5180 1936                           u5430 15E8  
                         u5520 2A8A                           u4640 2CC2                           u5370 13E2  
                         u6410 05A6                           u6330 03CC                           u5460 163E  
                         u5380 1558                           u6340 0418                           u6180 00D4  
                         u5701 2286                           u5470 165C                           u7047 2EC2  
                         u6440 0634                           u7057 3010                           u5721 22B2  
                         u5385 154E                           _PIR1 000F9E                           u6370 0458  
                         _PIR2 000FA1                           u5580 2B84                           u6470 0728  
                         u6480 0738                           u5930 2842                           u5850 24BE  
                         u6650 0A58                           u6570 096C                           u5780 2396  
                         u6660 0A7A                           u6900 1C2E                           u6910 1C52  
                         u5935 2838                           u6680 0B40                           u5970 28BA  
                         u6690 0B5E                           u6870 1BD8                           u6955 10E8  
                         _TMR3 000FB2               ?_lcd_send_nibble 0001                           _main 2716  
                         _mode 005A                           _temp 00E3                           fsr0h 000FEA  
                         fsr1h 000FE2                           fsr2h 000FDA                           fsr0l 000FE9  
                         indf1 000FE7                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 0060                           prodh 000FF4  
                         prodl 000FF3                           start 000E                  __CFG_IESO$OFF 000000  
                 i2___fltol@f1 0001                ___fldiv@new_exp 0044                    main@voltage 00CE  
                 _sprintf$1989 0100                  __CFG_MCLRE$ON 000000                   ___param_bank 000000  
         __end_of_delay_cycles 2FDE                  ___fltol@sign1 00A6                __end_of___fladd 19E4  
                        ?_main 0001                __end_of___fldiv 1C98                __end_of___awdiv 2AC8  
              __end_of___flneg 2FB0                          STR_10 FFF7                          _CCPR2 000FBB  
              __end_of___awmod 2BBA                __end_of___flmul 16A6                __end_of___flsub 2E90  
              __end_of___fltol 28E2                __end_of___lldiv 2B4A                ___awdiv@divisor 0027  
              __end_of___llmod 2C90                          _T2CON 000FCA                          _T3CON 000FB1  
                        i2l120 2540                          i2l122 257C                          i2l123 25A0  
                        i2l124 25A8                          i2l700 2900                          i2l702 296C  
                        i2l711 29AC                          i2l703 295C                          i2l641 2C08  
                        i2l642 2C12                          i2l634 2BCE                          i2l643 2C20  
                        i2l635 2BDA                          i2l708 2990                          i2l637 2BF0  
                        i2l709 2984                          i2l638 2BE8                ___awdiv@counter 0029  
                        _RCREG 000FAE                          _RCSTA 000FAB                          _SPBRG 000FAF  
      read_adc_voltage@channel 0084                          _TRISA 000F92                          _TRISB 000F93  
                        _TRISC 000F94                          _TRISD 000F95                          _TRISE 000F96  
                        _TXREG 000FAD                          _TXSTA 000FAC                  __CFG_PWRT$OFF 000000  
                __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000  
                __CFG_WRT3$OFF 000000                 __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000  
               __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000  
              __end_of_highIsr 25F4                  __CFG_WRTB$OFF 000000                __end_of_display 2126  
                __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000                 __CFG_EBTRB$OFF 000000  
              __end_of_dpowers FF7B                          _scale 0B6C                __end_of_isdigit 3088  
              _init_adc_no_lib 30A0                          pclath 000FFA                          tablat 000FF5  
                        status 000FD8        read_adc_voltage@voltage 0080                          wtemp6 0061  
              __end_of_sprintf 0B6C             __size_ofi2___awmod 0070                 __CFG_PBADEN$ON 000000  
           __size_ofi2___fltol 00DC                __initialization 2DF6                   __end_of_main 2804  
              ??_lcd_send_byte 0028                         ??_main 0050                  __activetblptr 000002  
         __size_of__tdiv_to_l_ 0132                         _ADCON0 000FC2                         _ADCON1 000FC1  
                       _ADCON2 000FC0               ___llmod@dividend 002C                         ?_scale 0095  
                       _ADRESH 000FC4                         _ADRESL 000FC3                         _CCPR1L 000FBE  
             ___awdiv@dividend 0025                         _INTCON 000FF2                         _SPBRGH 000FB0  
             __end_of___xxtofl 2276               __end_of_delay_ms 302A                         _Buffer 01A1  
               __CFG_XINST$OFF 000000               __end_of__powers_ FF1F               __end_of_lcd_init 2CF2  
                       ___flge 25F4               __end_of_lcd_putc 2DF6               __end_of_lcd_puts 2DA0  
                    ??___fladd 00AA                         ___wmul 2FDE                      ??___fldiv 003B  
                    ??___awdiv 0029                      ??___flneg 0037                 __CFG_STVREN$ON 000000  
                    ??___awmod 0023                      ??___flmul 004C                      ??___flsub 0050  
                    ??___fltol 00A2                      ??___lldiv 0027                      ??___llmod 0034  
                       _fround 1C98                         clear_0 2E1C                         clear_1 2E28  
                       clear_2 2E34               ___awdiv@quotient 002B                ___awmod@divisor 0021  
              ___awmod@counter 0023                      ??_highIsr 000B                      ??_display 0050  
      __end_of_init_adc_no_lib 30AC                   __pdataCOMRAM 005C                      ??_isdigit 001F  
            __end_ofi2___awmod 2C2A              __end_ofi2___fltol 29BE                   __mediumconst FEEA  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
               i2___awmod@sign 0006                      ??_sprintf 00CA                     ___flge@ff1 00B6  
                   ___flge@ff2 00BA                   ___xxtofl@arg 002F                   ___xxtofl@exp 002E  
                 ___xxtofl@val 0025                     __accesstop 0080        __end_of__initialization 2E3A  
               i2___fltol@exp1 000A                     ___flneg@f1 0033                  ___rparam_used 000001  
                   ___fltol@f1 009E                 __pcstackCOMRAM 0001          __size_of_delay_cycles 002E  
      __size_of_initInterrupts 0058                  __end_of_scale 0FBC                     __div_to_l_ 23A8  
    __size_of_read_adc_voltage 0086              lcd_gotoxy@address 002B                __div_to_l_@exp1 002C  
              __div_to_l_@cntr 002B                        ??_scale 0050                __div_to_l_@quot 0027  
                 sprintf@width 0116                     __pbssBANK0 00D3                     __pbssBANK1 01A1  
  __end_of_read_adc_raw_no_lib 2F54                   _delay_cycles 2FB0                  __div_to_l_@f1 001F  
                __div_to_l_@f2 0023             __size_of_init_pwm1 0018                 lcd_send_byte@n 0027  
                      ?___flge 00B6                        ?___wmul 001F               lcd_send_nibble@n 0026  
                      _CCP1CON 000FBD                        _CCP2CON 000FBA                        ?_fround 0095  
           __size_of_operation 0398               ?_init_adc_no_lib 0001                        _INTCON2 000FF1  
                    ?___xxtofl 0025                      ?_delay_ms 001F                     _lcd_gotoxy 2ED8  
                    ?_lcd_init 0001                      ?_lcd_putc 0001                      ?_lcd_puts 002D  
            __end_of__npowers_ FF53                        __Hparam 0000                     _scale$1988 0099  
                      __Lparam 0000       __size_of_lcd_send_nibble 0022                __size_of___flge 0122  
                      ___fladd 16A6                        ___fldiv 19E4                        ___awdiv 2A44  
                      ___flneg 2F82                        ___awmod 2B4A                        ___flmul 1354  
                      ___flsub 2E48                        ___fltol 2804                        ___lldiv 2AC8  
              __size_of___wmul 0026                        ___llmod 2C2A                  ?_set_pwm1_raw 001F  
                      __pcinit 2DF6                __size_of_fround 0296                        __ramtop 1000  
                      __ptext0 2716                        __ptext1 304C                        __ptext2 29BE  
                      __ptext3 0FBC                        __ptext4 2F54                        __ptext5 2F1A  
                      __ptext6 19E4                        __ptext7 2C90                        __ptext8 3088  
                      __ptext9 30A0                        _highIsr 0008                        _display 1F2E  
                      _compare 0050                    ?__div_to_l_ 001F                        _dpowers FF53  
                    _T2CONbits 000FCA                        _isdigit 306A                     ??___xxtofl 0029  
                    _T3CONbits 000FB1              __end_of_init_pwm1 30A0               ___awmod@dividend 001F  
                      _raw_val 00E7                     ??_delay_ms 0021                        _sprintf 0012  
                   ??_lcd_init 0029                 __pintcode_body 24D0                     ??_lcd_putc 002C  
                   ??_lcd_puts 002F           end_of_initialization 2E3A                  __Lmediumconst FEEA  
                      int_func 24D0              __end_of_operation 1354           lcd_send_byte@cm_data 0028  
              ___lldiv@divisor 0023                ___lldiv@counter 002B                      _RCSTAbits 000FAB  
                      postdec1 000FE5                        postdec2 000FDD                 _initInterrupts 2CF2  
                      postinc0 000FEE                        postinc2 000FDE                 ??_set_pwm1_raw 0021  
               __tdiv_to_l_@f1 001F                 __tdiv_to_l_@f2 0023          __end_of_lcd_send_byte 2ED8  
                ??__tdiv_to_l_ 0027                      _PORTBbits 000F81                      _PORTCbits 000F82  
                    _PORTEbits 000F84                     _setupPorts 304C                    ___fladd@grs 00B5  
                ___xxtofl@sign 002D               _read_adc_voltage 29BE                      _TRISCbits 000F94  
                  ?_lcd_gotoxy 0029                    ___fldiv@grs 0046                    ___fldiv@rem 0040  
              i2___fltol@sign1 0009                      i2___awmod 2BBA                _LCD_INIT_STRING 005C  
                    i2___fltol 28E2                      _RPS_count 0058                    ___flmul@grs 008A  
                  _CCP1CONbits 000FBD                     display@LCD 015F                      _TXSTAbits 000FAC  
          __size_of__div_to_l_ 0128         __end_of_initInterrupts 2D4A                 __end_of___flge 2716  
               __end_of___wmul 3004                    _BAUDCONbits 000FB8                  __pidataCOMRAM 30AC  
                delay_cycles@n 0022                  delay_cycles@x 0023              ??_lcd_send_nibble 0025  
               __end_of_fround 1F2E            start_initialization 2DF6            __end_of__tdiv_to_l_ 23A8  
                   ?i2___awmod 0001                     ?i2___fltol 0001                ___llmod@divisor 0030  
              ___llmod@counter 0034                ?_initInterrupts 0001                       ??___flge 00BE  
          __size_of_lcd_gotoxy 0042                       ??___wmul 0023   read_adc_raw_no_lib@raw_value 0024  
             __CFG_LPT1OSC$OFF 000000                       ??_fround 0050                  sprintf@tmpval 010C  
                  ?_setupPorts 0001                      ___fladd@a 00A6                      ___fladd@b 00A2  
                   fround@prec 00A1                      ___fldiv@a 0037                      ___fldiv@b 0033  
                    ___flmul@a 0084                      ___flmul@b 0080                    __pbssCOMRAM 0050  
                    ___flsub@a 00BA                      ___flsub@b 00B6                  __pcstackBANK0 0080  
                __pcstackBANK1 0100              __size_of___xxtofl 0150                   _isdigit$1613 0020  
            __size_of_delay_ms 0026           __end_of_set_pwm1_raw 2F82              __size_of_lcd_init 0062  
                  sprintf@flag 010A              __size_of_lcd_putc 0056              __size_of_lcd_puts 0056  
                  sprintf@fval 0118                    sprintf@prec 011C              __CFG_CCP2MX$PORTC 000000  
                    __pintcode 0008   __size_of_read_adc_raw_no_lib 003A                  __pmediumconst FEEA  
                     ?___fladd 00A2                       ?___fldiv 0033                       ?___awdiv 0025  
                     ?___flneg 0033                       ?___awmod 001F                       ?___flmul 0080  
                     ?___flsub 00B6                       ?___fltol 009E                       ?___lldiv 001F  
                     ?___llmod 002C                      __npowers_ FF1F                    __tdiv_to_l_ 2276  
                     ?_highIsr 0001                       ?_display 0001                   ??__div_to_l_ 0027  
                     ?_isdigit 0001                    ??i2___awmod 0005                       ?_sprintf 00C2  
                  ??i2___fltol 0005                      _init_pwm1 3088                 __size_of_scale 0450  
     __size_of_init_adc_no_lib 000C                 ___wmul@product 0023                       _LATCbits 000F8B  
                    delay_ms@n 001F                      delay_ms@x 0021                       _PIE2bits 000FA0  
          __size_of_setupPorts 001E                       _PIR1bits 000F9E             __end_of__div_to_l_ 24D0  
                     _PIR2bits 000FA1       __end_of_read_adc_voltage 2A44                       i2u470_40 2BF4  
                    _operation 0FBC                       i2u474_40 291E                       i2u474_45 2914  
                     i2u706_47 2528                       i2u707_47 254E                       i2u478_40 2996  
                     _RCONbits 000FD0               __CFG_WDTPS$32768 000000     read_adc_raw_no_lib@channel 0023  
                   _ADCON0bits 000FC2              ___wmul@multiplier 001F                      lcd_init@i 0029  
                    lcd_putc@c 002C                      lcd_puts@s 002D                   ??_lcd_gotoxy 002A  
                   ?_init_pwm1 0001                    _INTCON2bits 000FF1                    _INTCON3bits 000FF0  
                    copy_data0 2E0A             i2___awmod@dividend 0001                _lcd_send_nibble 302A  
                     __Hrparam 0000          set_pwm1_raw@raw_value 001F                     ?_operation 0001  
                     __Lrparam 0000             __CFG_BOREN$SBORDIS 000000             __end_of_lcd_gotoxy 2F1A  
             __size_of___fladd 033E               __size_of___fldiv 02B4               __size_of___awdiv 0084  
             __size_of___flneg 002E               __size_of___awmod 0070               __size_of___flmul 0352  
             __size_of___flsub 0048               __size_of___fltol 00DE               __size_of___lldiv 0082  
             __size_of___llmod 0066                    _fround$1986 009D                    _fround$1987 0099  
             __size_of_highIsr 25EC               __size_of_display 01F8                     sprintf@len 0108  
                   sprintf@exp 0114                     sprintf@val 0110                       ___xxtofl 2126  
        __size_of_set_pwm1_raw 002E               __size_of_isdigit 001E                       _delay_ms 3004  
                     __ptext10 2CF2                       __ptext11 1F2E                       __ptext20 23A8  
                     __ptext12 0012                       __ptext21 2126                       __ptext13 0B6C  
                     __ptext30 2D4A                       __ptext22 2FDE                       __ptext14 306A  
                     __ptext31 2DA0                       __ptext23 2C2A                       __ptext15 1C98  
                     __ptext32 2ED8                       __ptext24 2AC8                       __ptext16 1354  
                     __ptext33 2E90                       __ptext25 2804                       __ptext17 2B4A  
                     __ptext34 302A                       __ptext26 2E48                       __ptext18 2A44  
                     __ptext35 2FB0                       __ptext27 16A6                       __ptext19 2276  
                     __ptext36 3004                       __ptext28 2F82                       __ptext29 25F4  
                     __ptext38 28E2                       __ptext39 2BBA                       __powers_ FEEB  
                     _lcd_init 2C90                       _lcd_putc 2DA0                       _lcd_puts 2D4A  
             __size_of_sprintf 0B5A               ??_initInterrupts 001F         __size_of_lcd_send_byte 0048  
                ?_delay_cycles 0001             operation@CoolError 00C8                  __size_of_main 00EE  
            ??_init_adc_no_lib 001F                       int$flags 0060                   _set_pwm1_raw 2F54  
                     display@C 019F                       display@H 01A0                   ??_setupPorts 001F  
            i2___awmod@divisor 0003              i2___awmod@counter 0005                     _INTCONbits 000FF2  
                     isdigit@c 0021            _read_adc_raw_no_lib 2F1A  operation@PWM_percentage_value 00C4  
                     scale@scl 009D                    ??_init_pwm1 001F                       intlevel2 0000  
                    sprintf@ap 0106                      sprintf@cp 0104        __end_of_lcd_send_nibble 304C  
             __tdiv_to_l_@exp1 002F               __tdiv_to_l_@cntr 002E                      sprintf@sp 00C2  
               ??_delay_cycles 001F               __tdiv_to_l_@quot 002A               ___lldiv@dividend 001F  
           __end_of_setupPorts 306A                    ??_operation 00C2           ?_read_adc_raw_no_lib 001F  
                _lcd_send_byte 2E90                   ?__tdiv_to_l_ 001F                       sprintf@c 011E  
                     sprintf@f 00C4               ___lldiv@quotient 0027                  ___fladd@signs 00B2  
                 ___fladd@aexp 00B3                   ___fladd@bexp 00B4          ??_read_adc_raw_no_lib 0021  
