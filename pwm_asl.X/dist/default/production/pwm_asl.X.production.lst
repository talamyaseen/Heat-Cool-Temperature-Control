

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jun 23 22:02:15 2024

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    57                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    58  0000                     
    59                           ; Version 1.45
    60                           ; Generated 16/11/2017 GMT
    61                           ; 
    62                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC18F4620 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     
    94                           	psect	idataCOMRAM
    95  002E8A                     __pidataCOMRAM:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _LCD_INIT_STRING
    99  002E8A  28                 	db	40
   100  002E8B  0C                 	db	12
   101  002E8C  01                 	db	1
   102  002E8D  06                 	db	6
   103                           
   104                           	psect	mediumconst
   105  00FEEA                     __pmediumconst:
   106                           	opt stack 0
   107  00FEEA  00                 	db	0
   108  00FEEB                     __powers_:
   109                           	opt stack 0
   110  00FEEB  0000               	dw	0
   111  00FEED  3F80               	dw	16256
   112  00FEEF  0000               	dw	0
   113  00FEF1  4120               	dw	16672
   114  00FEF3  0000               	dw	0
   115  00FEF5  42C8               	dw	17096
   116  00FEF7  0000               	dw	0
   117  00FEF9  447A               	dw	17530
   118  00FEFB  4000               	dw	16384
   119  00FEFD  461C               	dw	17948
   120  00FEFF  5000               	dw	20480
   121  00FF01  47C3               	dw	18371
   122  00FF03  2400               	dw	9216
   123  00FF05  4974               	dw	18804
   124  00FF07  9680               	dw	38528
   125  00FF09  4B18               	dw	19224
   126  00FF0B  BC20               	dw	48160
   127  00FF0D  4CBE               	dw	19646
   128  00FF0F  6B28               	dw	27432
   129  00FF11  4E6E               	dw	20078
   130  00FF13  02F9               	dw	761
   131  00FF15  5015               	dw	20501
   132  00FF17  78EC               	dw	30956
   133  00FF19  60AD               	dw	24749
   134  00FF1B  F2CA               	dw	62154
   135  00FF1D  7149               	dw	29001
   136  00FF1F                     __end_of__powers_:
   137                           	opt stack 0
   138  00FF1F                     __npowers_:
   139                           	opt stack 0
   140  00FF1F  0000               	dw	0
   141  00FF21  3F80               	dw	16256
   142  00FF23  CCCD               	dw	52429
   143  00FF25  3DCC               	dw	15820
   144  00FF27  D70A               	dw	55050
   145  00FF29  3C23               	dw	15395
   146  00FF2B  126F               	dw	4719
   147  00FF2D  3A83               	dw	14979
   148  00FF2F  B717               	dw	46871
   149  00FF31  38D1               	dw	14545
   150  00FF33  C5AC               	dw	50604
   151  00FF35  3727               	dw	14119
   152  00FF37  37BD               	dw	14269
   153  00FF39  3586               	dw	13702
   154  00FF3B  BF95               	dw	49045
   155  00FF3D  33D6               	dw	13270
   156  00FF3F  CC77               	dw	52343
   157  00FF41  322B               	dw	12843
   158  00FF43  705F               	dw	28767
   159  00FF45  3089               	dw	12425
   160  00FF47  E6FF               	dw	59135
   161  00FF49  2EDB               	dw	11995
   162  00FF4B  E508               	dw	58632
   163  00FF4D  1E3C               	dw	7740
   164  00FF4F  4260               	dw	16992
   165  00FF51  0DA2               	dw	3490
   166  00FF53                     __end_of__npowers_:
   167                           	opt stack 0
   168  00FF53                     _dpowers:
   169                           	opt stack 0
   170  00FF53  0001               	dw	1
   171  00FF55  0000               	dw	0
   172  00FF57  000A               	dw	10
   173  00FF59  0000               	dw	0
   174  00FF5B  0064               	dw	100
   175  00FF5D  0000               	dw	0
   176  00FF5F  03E8               	dw	1000
   177  00FF61  0000               	dw	0
   178  00FF63  2710               	dw	10000
   179  00FF65  0000               	dw	0
   180  00FF67  86A0               	dw	34464
   181  00FF69  0001               	dw	1
   182  00FF6B  4240               	dw	16960
   183  00FF6D  000F               	dw	15
   184  00FF6F  9680               	dw	38528
   185  00FF71  0098               	dw	152
   186  00FF73  E100               	dw	57600
   187  00FF75  05F5               	dw	1525
   188  00FF77  CA00               	dw	51712
   189  00FF79  3B9A               	dw	15258
   190  00FF7B                     __end_of_dpowers:
   191                           	opt stack 0
   192  0000                     _TXREG	set	4013
   193  0000                     _PIR1bits	set	3998
   194  0000                     _RCREG	set	4014
   195  0000                     _RCSTAbits	set	4011
   196  0000                     _RCSTA	set	4011
   197  0000                     _TXSTAbits	set	4012
   198  0000                     _SPBRGH	set	4016
   199  0000                     _SPBRG	set	4015
   200  0000                     _TXSTA	set	4012
   201  0000                     _BAUDCONbits	set	4024
   202  0000                     _CCP1CONbits	set	4029
   203  0000                     _CCPR1L	set	4030
   204  0000                     _TRISCbits	set	3988
   205  0000                     _CCP1CON	set	4029
   206  0000                     _T2CONbits	set	4042
   207  0000                     _T2CON	set	4042
   208  0000                     _PR2	set	4043
   209  0000                     _ADRESL	set	4035
   210  0000                     _ADRESH	set	4036
   211  0000                     _ADCON2	set	4032
   212  0000                     _ADCON0bits	set	4034
   213  0000                     _PORTEbits	set	3972
   214  0000                     _CCPR2L	set	4027
   215  0000                     _CCPR2H	set	4028
   216  0000                     _PORTCbits	set	3970
   217  0000                     _PORTBbits	set	3969
   218  0000                     _PIE2bits	set	4000
   219  0000                     _IPR2	set	4002
   220  0000                     _PIR2	set	4001
   221  0000                     _PIE2	set	4000
   222  0000                     _IPR1	set	3999
   223  0000                     _PIR1	set	3998
   224  0000                     _PIE1	set	3997
   225  0000                     _INTCON2bits	set	4081
   226  0000                     _T3CONbits	set	4017
   227  0000                     _T3CON	set	4017
   228  0000                     _PIR2bits	set	4001
   229  0000                     _INTCON3bits	set	4080
   230  0000                     _INTCONbits	set	4082
   231  0000                     _CCP2CON	set	4026
   232  0000                     _RCONbits	set	4048
   233  0000                     _INTCON	set	4082
   234  0000                     _TRISE	set	3990
   235  0000                     _TRISD	set	3989
   236  0000                     _TRISA	set	3986
   237  0000                     _TRISC	set	3988
   238  0000                     _TRISB	set	3987
   239  0000                     _ADCON1	set	4033
   240  0000                     _ADCON0	set	4034
   241  0000                     _INTCON2	set	4081
   242  00FF7B                     STR_1:
   243  00FF7B  4F                 	db	79	;'O'
   244  00FF7C  46                 	db	70	;'F'
   245  00FF7D  46                 	db	70	;'F'
   246  00FF7E  20                 	db	32
   247  00FF7F  20                 	db	32
   248  00FF80  20                 	db	32
   249  00FF81  20                 	db	32
   250  00FF82  20                 	db	32
   251  00FF83  20                 	db	32
   252  00FF84  20                 	db	32
   253  00FF85  20                 	db	32
   254  00FF86  20                 	db	32
   255  00FF87  20                 	db	32
   256  00FF88  20                 	db	32
   257  00FF89  20                 	db	32
   258  00FF8A  20                 	db	32
   259  00FF8B  20                 	db	32
   260  00FF8C  20                 	db	32
   261  00FF8D  20                 	db	32
   262  00FF8E  20                 	db	32
   263  00FF8F  00                 	db	0
   264  00FF90                     STR_2:
   265  00FF90  43                 	db	67	;'C'
   266  00FF91  6F                 	db	111	;'o'
   267  00FF92  6F                 	db	111	;'o'
   268  00FF93  6C                 	db	108	;'l'
   269  00FF94  20                 	db	32
   270  00FF95  20                 	db	32
   271  00FF96  20                 	db	32
   272  00FF97  20                 	db	32
   273  00FF98  20                 	db	32
   274  00FF99  20                 	db	32
   275  00FF9A  20                 	db	32
   276  00FF9B  20                 	db	32
   277  00FF9C  20                 	db	32
   278  00FF9D  20                 	db	32
   279  00FF9E  20                 	db	32
   280  00FF9F  20                 	db	32
   281  00FFA0  20                 	db	32
   282  00FFA1  20                 	db	32
   283  00FFA2  20                 	db	32
   284  00FFA3  20                 	db	32
   285  00FFA4  00                 	db	0
   286  00FFA5                     STR_3:
   287  00FFA5  48                 	db	72	;'H'
   288  00FFA6  65                 	db	101	;'e'
   289  00FFA7  61                 	db	97	;'a'
   290  00FFA8  74                 	db	116	;'t'
   291  00FFA9  20                 	db	32
   292  00FFAA  20                 	db	32
   293  00FFAB  20                 	db	32
   294  00FFAC  20                 	db	32
   295  00FFAD  20                 	db	32
   296  00FFAE  20                 	db	32
   297  00FFAF  20                 	db	32
   298  00FFB0  20                 	db	32
   299  00FFB1  20                 	db	32
   300  00FFB2  20                 	db	32
   301  00FFB3  20                 	db	32
   302  00FFB4  20                 	db	32
   303  00FFB5  20                 	db	32
   304  00FFB6  20                 	db	32
   305  00FFB7  20                 	db	32
   306  00FFB8  20                 	db	32
   307  00FFB9  00                 	db	0
   308  00FFBA                     STR_4:
   309  00FFBA  41                 	db	65	;'A'
   310  00FFBB  75                 	db	117	;'u'
   311  00FFBC  74                 	db	116	;'t'
   312  00FFBD  6F                 	db	111	;'o'
   313  00FFBE  20                 	db	32
   314  00FFBF  43                 	db	67	;'C'
   315  00FFC0  6F                 	db	111	;'o'
   316  00FFC1  6F                 	db	111	;'o'
   317  00FFC2  6C                 	db	108	;'l'
   318  00FFC3  20                 	db	32
   319  00FFC4  20                 	db	32
   320  00FFC5  20                 	db	32
   321  00FFC6  20                 	db	32
   322  00FFC7  20                 	db	32
   323  00FFC8  20                 	db	32
   324  00FFC9  20                 	db	32
   325  00FFCA  20                 	db	32
   326  00FFCB  20                 	db	32
   327  00FFCC  00                 	db	0
   328  00FFCD                     STR_7:
   329  00FFCD  53                 	db	83	;'S'
   330  00FFCE  50                 	db	80	;'P'
   331  00FFCF  3A                 	db	58	;':'
   332  00FFD0  20                 	db	32
   333  00FFD1  25                 	db	37
   334  00FFD2  34                 	db	52	;'4'
   335  00FFD3  2E                 	db	46
   336  00FFD4  31                 	db	49	;'1'
   337  00FFD5  66                 	db	102	;'f'
   338  00FFD6  43                 	db	67	;'C'
   339  00FFD7  20                 	db	32
   340  00FFD8  00                 	db	0
   341  00FFD9                     STR_9:
   342  00FFD9  48                 	db	72	;'H'
   343  00FFDA  43                 	db	67	;'C'
   344  00FFDB  3A                 	db	58	;':'
   345  00FFDC  20                 	db	32
   346  00FFDD  25                 	db	37
   347  00FFDE  34                 	db	52	;'4'
   348  00FFDF  2E                 	db	46
   349  00FFE0  31                 	db	49	;'1'
   350  00FFE1  66                 	db	102	;'f'
   351  00FFE2  25                 	db	37
   352  00FFE3  25                 	db	37
   353  00FFE4  00                 	db	0
   354  00FFE5                     STR_5:
   355  00FFE5  52                 	db	82	;'R'
   356  00FFE6  54                 	db	84	;'T'
   357  00FFE7  3A                 	db	58	;':'
   358  00FFE8  20                 	db	32
   359  00FFE9  25                 	db	37
   360  00FFEA  34                 	db	52	;'4'
   361  00FFEB  2E                 	db	46
   362  00FFEC  31                 	db	49	;'1'
   363  00FFED  66                 	db	102	;'f'
   364  00FFEE  43                 	db	67	;'C'
   365  00FFEF  00                 	db	0
   366  00FFF0                     STR_8:
   367  00FFF0  48                 	db	72	;'H'
   368  00FFF1  53                 	db	83	;'S'
   369  00FFF2  3A                 	db	58	;':'
   370  00FFF3  20                 	db	32
   371  00FFF4  25                 	db	37
   372  00FFF5  64                 	db	100	;'d'
   373  00FFF6  00                 	db	0
   374  00FFF7                     STR_10:
   375  00FFF7  4D                 	db	77	;'M'
   376  00FFF8  44                 	db	68	;'D'
   377  00FFF9  3A                 	db	58	;':'
   378  00FFFA  00                 	db	0
   379  00FFFB                     STR_6:
   380  00FFFB  48                 	db	72	;'H'
   381  00FFFC  20                 	db	32
   382  00FFFD  43                 	db	67	;'C'
   383  00FFFE  00                 	db	0
   384                           
   385                           ; #config settings
   386  00FFFF  00                 	db	0	; dummy byte at the end
   387  0000                     
   388                           	psect	cinit
   389  002B90                     __pcinit:
   390                           	opt stack 0
   391  002B90                     start_initialization:
   392                           	opt stack 0
   393  002B90                     __initialization:
   394                           	opt stack 0
   395                           
   396                           ; Initialize objects allocated to COMRAM (4 bytes)
   397                           ; load TBLPTR registers with __pidataCOMRAM
   398  002B90  0E8A               	movlw	low __pidataCOMRAM
   399  002B92  6EF6               	movwf	tblptrl,c
   400  002B94  0E2E               	movlw	high __pidataCOMRAM
   401  002B96  6EF7               	movwf	tblptrh,c
   402  002B98  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   403  002B9A  6EF8               	movwf	tblptru,c
   404  002B9C  EE00  F060         	lfsr	0,__pdataCOMRAM
   405  002BA0  EE10 F004          	lfsr	1,4
   406  002BA4                     copy_data0:
   407  002BA4  0009               	tblrd		*+
   408  002BA6  CFF5 FFEE          	movff	tablat,postinc0
   409  002BAA  50E5               	movf	postdec1,w,c
   410  002BAC  50E1               	movf	fsr1l,w,c
   411  002BAE  E1FA               	bnz	copy_data0
   412                           
   413                           ; Clear objects allocated to BANK1 (36 bytes)
   414  002BB0  EE01  F082         	lfsr	0,__pbssBANK1
   415  002BB4  0E24               	movlw	36
   416  002BB6                     clear_0:
   417  002BB6  6AEE               	clrf	postinc0,c
   418  002BB8  06E8               	decf	wreg,f,c
   419  002BBA  E1FD               	bnz	clear_0
   420                           
   421                           ; Clear objects allocated to BANK0 (22 bytes)
   422  002BBC  EE00  F0E6         	lfsr	0,__pbssBANK0
   423  002BC0  0E16               	movlw	22
   424  002BC2                     clear_1:
   425  002BC2  6AEE               	clrf	postinc0,c
   426  002BC4  06E8               	decf	wreg,f,c
   427  002BC6  E1FD               	bnz	clear_1
   428                           
   429                           ; Clear objects allocated to COMRAM (8 bytes)
   430  002BC8  EE00  F058         	lfsr	0,__pbssCOMRAM
   431  002BCC  0E08               	movlw	8
   432  002BCE                     clear_2:
   433  002BCE  6AEE               	clrf	postinc0,c
   434  002BD0  06E8               	decf	wreg,f,c
   435  002BD2  E1FD               	bnz	clear_2
   436  002BD4                     end_of_initialization:
   437                           	opt stack 0
   438  002BD4                     __end_of__initialization:
   439                           	opt stack 0
   440  002BD4  9064               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   441  002BD6  9264               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   442  002BD8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   443  002BDA  6EF8               	movwf	tblptru,c
   444  002BDC  0100               	movlb	0
   445  002BDE  EFF5  F012         	goto	_main	;jump to C main() function
   446                           tblptru	equ	0xFF8
   447                           tblptrh	equ	0xFF7
   448                           tblptrl	equ	0xFF6
   449                           tablat	equ	0xFF5
   450                           postinc0	equ	0xFEE
   451                           wreg	equ	0xFE8
   452                           postdec1	equ	0xFE5
   453                           fsr1l	equ	0xFE1
   454                           
   455                           	psect	bssCOMRAM
   456  000058                     __pbssCOMRAM:
   457                           	opt stack 0
   458  000058                     _ft:
   459                           	opt stack 0
   460  000058                     	ds	2
   461  00005A                     _RPS:
   462                           	opt stack 0
   463  00005A                     	ds	2
   464  00005C                     _RPS_count:
   465                           	opt stack 0
   466  00005C                     	ds	2
   467  00005E                     _mode:
   468                           	opt stack 0
   469  00005E                     	ds	1
   470  00005F                     _HS:
   471                           	opt stack 0
   472  00005F                     	ds	1
   473                           tblptru	equ	0xFF8
   474                           tblptrh	equ	0xFF7
   475                           tblptrl	equ	0xFF6
   476                           tablat	equ	0xFF5
   477                           postinc0	equ	0xFEE
   478                           wreg	equ	0xFE8
   479                           postdec1	equ	0xFE5
   480                           fsr1l	equ	0xFE1
   481                           
   482                           	psect	dataCOMRAM
   483  000060                     __pdataCOMRAM:
   484                           	opt stack 0
   485  000060                     _LCD_INIT_STRING:
   486                           	opt stack 0
   487  000060                     	ds	4
   488                           tblptru	equ	0xFF8
   489                           tblptrh	equ	0xFF7
   490                           tblptrl	equ	0xFF6
   491                           tablat	equ	0xFF5
   492                           postinc0	equ	0xFEE
   493                           wreg	equ	0xFE8
   494                           postdec1	equ	0xFE5
   495                           fsr1l	equ	0xFE1
   496                           
   497                           	psect	bssBANK0
   498  0000E6                     __pbssBANK0:
   499                           	opt stack 0
   500  0000E6                     _AN:
   501                           	opt stack 0
   502  0000E6                     	ds	12
   503  0000F2                     _sp:
   504                           	opt stack 0
   505  0000F2                     	ds	4
   506  0000F6                     _temp:
   507                           	opt stack 0
   508  0000F6                     	ds	4
   509  0000FA                     _raw_val:
   510                           	opt stack 0
   511  0000FA                     	ds	2
   512                           tblptru	equ	0xFF8
   513                           tblptrh	equ	0xFF7
   514                           tblptrl	equ	0xFF6
   515                           tablat	equ	0xFF5
   516                           postinc0	equ	0xFEE
   517                           wreg	equ	0xFE8
   518                           postdec1	equ	0xFE5
   519                           fsr1l	equ	0xFE1
   520                           
   521                           	psect	bssBANK1
   522  000182                     __pbssBANK1:
   523                           	opt stack 0
   524  000182                     _Buffer:
   525                           	opt stack 0
   526  000182                     	ds	32
   527  0001A2                     _HC:
   528                           	opt stack 0
   529  0001A2                     	ds	4
   530                           tblptru	equ	0xFF8
   531                           tblptrh	equ	0xFF7
   532                           tblptrl	equ	0xFF6
   533                           tablat	equ	0xFF5
   534                           postinc0	equ	0xFEE
   535                           wreg	equ	0xFE8
   536                           postdec1	equ	0xFE5
   537                           fsr1l	equ	0xFE1
   538                           
   539                           	psect	cstackBANK1
   540  000100                     __pcstackBANK1:
   541                           	opt stack 0
   542  000100                     display@LCDP:
   543                           	opt stack 0
   544                           
   545                           ; 64 bytes @ 0x0
   546  000100                     	ds	64
   547  000140                     display@LCD:
   548                           	opt stack 0
   549                           
   550                           ; 64 bytes @ 0x40
   551  000140                     	ds	64
   552  000180                     display@C:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0x80
   556  000180                     	ds	1
   557  000181                     display@H:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x81
   561  000181                     	ds	1
   562                           tblptru	equ	0xFF8
   563                           tblptrh	equ	0xFF7
   564                           tblptrl	equ	0xFF6
   565                           tablat	equ	0xFF5
   566                           postinc0	equ	0xFEE
   567                           wreg	equ	0xFE8
   568                           postdec1	equ	0xFE5
   569                           fsr1l	equ	0xFE1
   570                           
   571                           	psect	cstackBANK0
   572  000080                     __pcstackBANK0:
   573                           	opt stack 0
   574  000080                     ___flmul@sign:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x0
   578  000080                     	ds	1
   579  000081                     ___flmul@aexp:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x1
   583  000081                     	ds	1
   584  000082                     ___flmul@grs:
   585                           	opt stack 0
   586                           
   587                           ; 4 bytes @ 0x2
   588  000082                     	ds	4
   589  000086                     ___flmul@bexp:
   590                           	opt stack 0
   591                           
   592                           ; 1 bytes @ 0x6
   593  000086                     	ds	1
   594  000087                     ___flmul@prod:
   595                           	opt stack 0
   596                           
   597                           ; 4 bytes @ 0x7
   598  000087                     	ds	4
   599  00008B                     ___flmul@temp:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0xB
   603  00008B                     	ds	2
   604  00008D                     _fround$1939:
   605                           	opt stack 0
   606  00008D                     _scale$1940:
   607                           	opt stack 0
   608                           
   609                           ; 4 bytes @ 0xD
   610  00008D                     	ds	4
   611  000091                     scale@scl:
   612                           	opt stack 0
   613  000091                     _fround$1938:
   614                           	opt stack 0
   615                           
   616                           ; 4 bytes @ 0x11
   617  000091                     	ds	1
   618  000092                     ?___fltol:
   619                           	opt stack 0
   620  000092                     ___fltol@f1:
   621                           	opt stack 0
   622                           
   623                           ; 4 bytes @ 0x12
   624  000092                     	ds	3
   625  000095                     fround@prec:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0x15
   629  000095                     	ds	1
   630  000096                     ??___fltol:
   631  000096                     ?___fladd:
   632                           	opt stack 0
   633  000096                     ___fladd@b:
   634                           	opt stack 0
   635                           
   636                           ; 4 bytes @ 0x16
   637  000096                     	ds	4
   638  00009A                     ___fltol@sign1:
   639                           	opt stack 0
   640  00009A                     ___fladd@a:
   641                           	opt stack 0
   642                           
   643                           ; 4 bytes @ 0x1A
   644  00009A                     	ds	1
   645  00009B                     ___fltol@exp1:
   646                           	opt stack 0
   647                           
   648                           ; 1 bytes @ 0x1B
   649  00009B                     	ds	3
   650  00009E                     ??___fladd:
   651                           
   652                           ; 1 bytes @ 0x1E
   653  00009E                     	ds	8
   654  0000A6                     ___fladd@signs:
   655                           	opt stack 0
   656                           
   657                           ; 1 bytes @ 0x26
   658  0000A6                     	ds	1
   659  0000A7                     ___fladd@aexp:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x27
   663  0000A7                     	ds	1
   664  0000A8                     ___fladd@bexp:
   665                           	opt stack 0
   666                           
   667                           ; 1 bytes @ 0x28
   668  0000A8                     	ds	1
   669  0000A9                     ___fladd@grs:
   670                           	opt stack 0
   671                           
   672                           ; 1 bytes @ 0x29
   673  0000A9                     	ds	1
   674  0000AA                     ?___flsub:
   675                           	opt stack 0
   676  0000AA                     ___flge@ff1:
   677                           	opt stack 0
   678  0000AA                     ___flsub@b:
   679                           	opt stack 0
   680                           
   681                           ; 4 bytes @ 0x2A
   682  0000AA                     	ds	4
   683  0000AE                     ___flge@ff2:
   684                           	opt stack 0
   685  0000AE                     ___flsub@a:
   686                           	opt stack 0
   687                           
   688                           ; 4 bytes @ 0x2E
   689  0000AE                     	ds	4
   690  0000B2                     ??___flge:
   691                           
   692                           ; 1 bytes @ 0x32
   693  0000B2                     	ds	4
   694  0000B6                     ??_operation:
   695  0000B6                     ?_sprintf:
   696                           	opt stack 0
   697  0000B6                     sprintf@sp:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0x36
   701  0000B6                     	ds	2
   702  0000B8                     sprintf@f:
   703                           	opt stack 0
   704  0000B8                     operation@CoolError:
   705                           	opt stack 0
   706                           
   707                           ; 4 bytes @ 0x38
   708  0000B8                     	ds	4
   709  0000BC                     operation@PWM_percentage_value:
   710                           	opt stack 0
   711                           
   712                           ; 4 bytes @ 0x3C
   713  0000BC                     	ds	2
   714  0000BE                     ??_sprintf:
   715                           
   716                           ; 1 bytes @ 0x3E
   717  0000BE                     	ds	2
   718  0000C0                     operation@compare_value:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x40
   722  0000C0                     	ds	2
   723  0000C2                     _sprintf$1941:
   724                           	opt stack 0
   725                           
   726                           ; 4 bytes @ 0x42
   727  0000C2                     	ds	4
   728  0000C6                     sprintf@cp:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x46
   732  0000C6                     	ds	2
   733  0000C8                     sprintf@ap:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x48
   737  0000C8                     	ds	2
   738  0000CA                     sprintf@len:
   739                           	opt stack 0
   740                           
   741                           ; 2 bytes @ 0x4A
   742  0000CA                     	ds	2
   743  0000CC                     sprintf@flag:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x4C
   747  0000CC                     	ds	2
   748  0000CE                     sprintf@tmpval:
   749                           	opt stack 0
   750                           
   751                           ; 4 bytes @ 0x4E
   752  0000CE                     	ds	4
   753  0000D2                     sprintf@val:
   754                           	opt stack 0
   755                           
   756                           ; 4 bytes @ 0x52
   757  0000D2                     	ds	4
   758  0000D6                     sprintf@exp:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x56
   762  0000D6                     	ds	2
   763  0000D8                     sprintf@width:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0x58
   767  0000D8                     	ds	2
   768  0000DA                     sprintf@fval:
   769                           	opt stack 0
   770                           
   771                           ; 4 bytes @ 0x5A
   772  0000DA                     	ds	4
   773  0000DE                     sprintf@prec:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0x5E
   777  0000DE                     	ds	2
   778  0000E0                     sprintf@c:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0x60
   782  0000E0                     	ds	1
   783  0000E1                     main@voltage:
   784                           	opt stack 0
   785                           
   786                           ; 4 bytes @ 0x61
   787  0000E1                     	ds	4
   788  0000E5                     main@channel:
   789                           	opt stack 0
   790                           
   791                           ; 1 bytes @ 0x65
   792  0000E5                     	ds	1
   793                           tblptru	equ	0xFF8
   794                           tblptrh	equ	0xFF7
   795                           tblptrl	equ	0xFF6
   796                           tablat	equ	0xFF5
   797                           postinc0	equ	0xFEE
   798                           wreg	equ	0xFE8
   799                           postdec1	equ	0xFE5
   800                           fsr1l	equ	0xFE1
   801                           
   802                           	psect	cstackCOMRAM
   803  000001                     __pcstackCOMRAM:
   804                           	opt stack 0
   805  000001                     ?i2___awmod:
   806                           	opt stack 0
   807  000001                     i2___awmod@dividend:
   808                           	opt stack 0
   809                           
   810                           ; 2 bytes @ 0x0
   811  000001                     	ds	2
   812  000003                     i2___awmod@divisor:
   813                           	opt stack 0
   814                           
   815                           ; 2 bytes @ 0x2
   816  000003                     	ds	2
   817  000005                     i2___awmod@counter:
   818                           	opt stack 0
   819                           
   820                           ; 1 bytes @ 0x4
   821  000005                     	ds	1
   822  000006                     i2___awmod@sign:
   823                           	opt stack 0
   824                           
   825                           ; 1 bytes @ 0x5
   826  000006                     	ds	1
   827  000007                     ??_highIsr:
   828                           
   829                           ; 1 bytes @ 0x6
   830  000007                     	ds	20
   831  00001B                     ??_isdigit:
   832  00001B                     ??_delay_cycles:
   833  00001B                     ?_read_adc_raw_no_lib:
   834                           	opt stack 0
   835  00001B                     ?___wmul:
   836                           	opt stack 0
   837  00001B                     ?___awmod:
   838                           	opt stack 0
   839  00001B                     ?__tdiv_to_l_:
   840                           	opt stack 0
   841  00001B                     ?__div_to_l_:
   842                           	opt stack 0
   843  00001B                     ?___lldiv:
   844                           	opt stack 0
   845  00001B                     delay_ms@n:
   846                           	opt stack 0
   847  00001B                     set_pwm1_raw@raw_value:
   848                           	opt stack 0
   849  00001B                     ___wmul@multiplier:
   850                           	opt stack 0
   851  00001B                     ___awmod@dividend:
   852                           	opt stack 0
   853  00001B                     __div_to_l_@f1:
   854                           	opt stack 0
   855  00001B                     __tdiv_to_l_@f1:
   856                           	opt stack 0
   857  00001B                     ___lldiv@dividend:
   858                           	opt stack 0
   859                           
   860                           ; 4 bytes @ 0x1A
   861  00001B                     	ds	1
   862  00001C                     _isdigit$1565:
   863                           	opt stack 0
   864                           
   865                           ; 1 bytes @ 0x1B
   866  00001C                     	ds	1
   867  00001D                     ??_set_pwm1_raw:
   868  00001D                     ??_read_adc_raw_no_lib:
   869  00001D                     isdigit@c:
   870                           	opt stack 0
   871  00001D                     delay_ms@x:
   872                           	opt stack 0
   873  00001D                     ___wmul@multiplicand:
   874                           	opt stack 0
   875  00001D                     ___awmod@divisor:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x1C
   879  00001D                     	ds	1
   880  00001E                     delay_cycles@n:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x1D
   884  00001E                     	ds	1
   885  00001F                     ___awmod@counter:
   886                           	opt stack 0
   887  00001F                     delay_cycles@x:
   888                           	opt stack 0
   889  00001F                     read_adc_raw_no_lib@raw_value:
   890                           	opt stack 0
   891  00001F                     ___wmul@product:
   892                           	opt stack 0
   893  00001F                     __div_to_l_@f2:
   894                           	opt stack 0
   895  00001F                     __tdiv_to_l_@f2:
   896                           	opt stack 0
   897  00001F                     ___lldiv@divisor:
   898                           	opt stack 0
   899                           
   900                           ; 4 bytes @ 0x1E
   901  00001F                     	ds	1
   902  000020                     ___awmod@sign:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x1F
   906  000020                     	ds	1
   907  000021                     ??_lcd_send_nibble:
   908  000021                     ?___awdiv:
   909                           	opt stack 0
   910  000021                     ?___xxtofl:
   911                           	opt stack 0
   912  000021                     read_adc_raw_no_lib@channel:
   913                           	opt stack 0
   914  000021                     ___awdiv@dividend:
   915                           	opt stack 0
   916  000021                     ___xxtofl@val:
   917                           	opt stack 0
   918                           
   919                           ; 4 bytes @ 0x20
   920  000021                     	ds	1
   921  000022                     lcd_send_nibble@n:
   922                           	opt stack 0
   923                           
   924                           ; 1 bytes @ 0x21
   925  000022                     	ds	1
   926  000023                     ??__tdiv_to_l_:
   927  000023                     lcd_send_byte@n:
   928                           	opt stack 0
   929  000023                     ___awdiv@divisor:
   930                           	opt stack 0
   931  000023                     __div_to_l_@quot:
   932                           	opt stack 0
   933  000023                     ___lldiv@quotient:
   934                           	opt stack 0
   935                           
   936                           ; 4 bytes @ 0x22
   937  000023                     	ds	1
   938  000024                     lcd_send_byte@cm_data:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x23
   942  000024                     	ds	1
   943  000025                     ??___xxtofl:
   944  000025                     lcd_init@i:
   945                           	opt stack 0
   946  000025                     lcd_gotoxy@y:
   947                           	opt stack 0
   948  000025                     ___awdiv@counter:
   949                           	opt stack 0
   950                           
   951                           ; 1 bytes @ 0x24
   952  000025                     	ds	1
   953  000026                     lcd_gotoxy@x:
   954                           	opt stack 0
   955  000026                     ___awdiv@sign:
   956                           	opt stack 0
   957  000026                     __tdiv_to_l_@quot:
   958                           	opt stack 0
   959                           
   960                           ; 4 bytes @ 0x25
   961  000026                     	ds	1
   962  000027                     lcd_gotoxy@address:
   963                           	opt stack 0
   964  000027                     __div_to_l_@cntr:
   965                           	opt stack 0
   966  000027                     ___lldiv@counter:
   967                           	opt stack 0
   968  000027                     ___awdiv@quotient:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0x26
   972  000027                     	ds	1
   973  000028                     ?___llmod:
   974                           	opt stack 0
   975  000028                     lcd_putc@c:
   976                           	opt stack 0
   977  000028                     __div_to_l_@exp1:
   978                           	opt stack 0
   979  000028                     ___llmod@dividend:
   980                           	opt stack 0
   981                           
   982                           ; 4 bytes @ 0x27
   983  000028                     	ds	1
   984  000029                     ___xxtofl@sign:
   985                           	opt stack 0
   986  000029                     lcd_puts@s:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0x28
   990  000029                     	ds	1
   991  00002A                     __tdiv_to_l_@cntr:
   992                           	opt stack 0
   993  00002A                     ___xxtofl@exp:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0x29
   997  00002A                     	ds	1
   998  00002B                     __tdiv_to_l_@exp1:
   999                           	opt stack 0
  1000  00002B                     ___xxtofl@arg:
  1001                           	opt stack 0
  1002                           
  1003                           ; 4 bytes @ 0x2A
  1004  00002B                     	ds	1
  1005  00002C                     ___llmod@divisor:
  1006                           	opt stack 0
  1007                           
  1008                           ; 4 bytes @ 0x2B
  1009  00002C                     	ds	3
  1010  00002F                     ?___fldiv:
  1011                           	opt stack 0
  1012  00002F                     ?___flneg:
  1013                           	opt stack 0
  1014  00002F                     ___flneg@f1:
  1015                           	opt stack 0
  1016  00002F                     ___fldiv@b:
  1017                           	opt stack 0
  1018                           
  1019                           ; 4 bytes @ 0x2E
  1020  00002F                     	ds	1
  1021  000030                     ___llmod@counter:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x2F
  1025  000030                     	ds	3
  1026  000033                     ___fldiv@a:
  1027                           	opt stack 0
  1028                           
  1029                           ; 4 bytes @ 0x32
  1030  000033                     	ds	4
  1031  000037                     ??___fldiv:
  1032                           
  1033                           ; 1 bytes @ 0x36
  1034  000037                     	ds	4
  1035  00003B                     ___fldiv@sign:
  1036                           	opt stack 0
  1037                           
  1038                           ; 1 bytes @ 0x3A
  1039  00003B                     	ds	1
  1040  00003C                     ___fldiv@rem:
  1041                           	opt stack 0
  1042                           
  1043                           ; 4 bytes @ 0x3B
  1044  00003C                     	ds	4
  1045  000040                     ___fldiv@new_exp:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x3F
  1049  000040                     	ds	2
  1050  000042                     ___fldiv@grs:
  1051                           	opt stack 0
  1052                           
  1053                           ; 4 bytes @ 0x41
  1054  000042                     	ds	4
  1055  000046                     ___fldiv@bexp:
  1056                           	opt stack 0
  1057                           
  1058                           ; 1 bytes @ 0x45
  1059  000046                     	ds	1
  1060  000047                     ___fldiv@aexp:
  1061                           	opt stack 0
  1062                           
  1063                           ; 1 bytes @ 0x46
  1064  000047                     	ds	1
  1065  000048                     ?_read_adc_voltage:
  1066                           	opt stack 0
  1067  000048                     ?___flmul:
  1068                           	opt stack 0
  1069  000048                     ___flmul@b:
  1070                           	opt stack 0
  1071                           
  1072                           ; 4 bytes @ 0x47
  1073  000048                     	ds	4
  1074  00004C                     read_adc_voltage@voltage:
  1075                           	opt stack 0
  1076  00004C                     ___flmul@a:
  1077                           	opt stack 0
  1078                           
  1079                           ; 4 bytes @ 0x4B
  1080  00004C                     	ds	4
  1081  000050                     ??___flmul:
  1082  000050                     read_adc_voltage@raw_value:
  1083                           	opt stack 0
  1084                           
  1085                           ; 2 bytes @ 0x4F
  1086  000050                     	ds	2
  1087  000052                     read_adc_voltage@channel:
  1088                           	opt stack 0
  1089                           
  1090                           ; 1 bytes @ 0x51
  1091  000052                     	ds	2
  1092  000054                     ?_fround:
  1093                           	opt stack 0
  1094  000054                     ?_scale:
  1095                           	opt stack 0
  1096                           
  1097                           ; 4 bytes @ 0x53
  1098  000054                     	ds	4
  1099  000058                     tblptru	equ	0xFF8
  1100                           tblptrh	equ	0xFF7
  1101                           tblptrl	equ	0xFF6
  1102                           tablat	equ	0xFF5
  1103                           postinc0	equ	0xFEE
  1104                           wreg	equ	0xFE8
  1105                           postdec1	equ	0xFE5
  1106                           fsr1l	equ	0xFE1
  1107                           
  1108                           ; 1 bytes @ 0x57
  1109 ;;
  1110 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1111 ;;
  1112 ;; *************** function _main *****************
  1113 ;; Defined at:
  1114 ;;		line 301 in file "pwm_asl.c"
  1115 ;; Parameters:    Size  Location     Type
  1116 ;;		None
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;  voltage         4   97[BANK0 ] float 
  1119 ;;  channel         1  101[BANK0 ] unsigned char 
  1120 ;; Return value:  Size  Location     Type
  1121 ;;                  1    wreg      void 
  1122 ;; Registers used:
  1123 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1124 ;; Tracked objects:
  1125 ;;		On entry : 0/0
  1126 ;;		On exit  : 0/0
  1127 ;;		Unchanged: 0/0
  1128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1130 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1132 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1133 ;;Total ram usage:        5 bytes
  1134 ;; Hardware stack levels required when called:    9
  1135 ;; This function calls:
  1136 ;;		___flmul
  1137 ;;		_delay_ms
  1138 ;;		_display
  1139 ;;		_initInterrupts
  1140 ;;		_init_adc_no_lib
  1141 ;;		_init_pwm1
  1142 ;;		_lcd_init
  1143 ;;		_lcd_putc
  1144 ;;		_operation
  1145 ;;		_read_adc_voltage
  1146 ;;		_setupPorts
  1147 ;; This function is called by:
  1148 ;;		Startup code after reset
  1149 ;; This function uses a non-reentrant model
  1150 ;;
  1151                           
  1152                           	psect	text0
  1153  0025EA                     __ptext0:
  1154                           	opt stack 0
  1155  0025EA                     _main:
  1156                           	opt stack 22
  1157                           
  1158                           ;pwm_asl.c: 302: unsigned char channel;
  1159                           ;pwm_asl.c: 303: float voltage;
  1160                           ;pwm_asl.c: 304: setupPorts();
  1161                           
  1162                           ;incstack = 0
  1163  0025EA  EC15  F017         	call	_setupPorts	;wreg free
  1164                           
  1165                           ;pwm_asl.c: 305: initInterrupts();
  1166  0025EE  EC39  F016         	call	_initInterrupts	;wreg free
  1167                           
  1168                           ;pwm_asl.c: 306: lcd_init();
  1169  0025F2  EC41  F015         	call	_lcd_init	;wreg free
  1170                           
  1171                           ;pwm_asl.c: 307: init_adc_no_lib();
  1172  0025F6  EC3F  F017         	call	_init_adc_no_lib	;wreg free
  1173                           
  1174                           ;pwm_asl.c: 308: init_pwm1();
  1175  0025FA  EC33  F017         	call	_init_pwm1	;wreg free
  1176                           
  1177                           ;pwm_asl.c: 309: lcd_putc('\f');
  1178  0025FE  0E0C               	movlw	12
  1179  002600  EC9D  F015         	call	_lcd_putc
  1180                           
  1181                           ;pwm_asl.c: 310: mode = OFF;
  1182  002604  0E00               	movlw	0
  1183  002606  6E5E               	movwf	_mode,c
  1184                           
  1185                           ;pwm_asl.c: 311: HS = HS_0;
  1186  002608  0E00               	movlw	0
  1187  00260A  6E5F               	movwf	_HS,c
  1188  00260C                     l150:
  1189  00260C  0004               	clrwdt		;# 
  1190                           
  1191                           ;pwm_asl.c: 314: delay_ms(200);
  1192  00260E  0E00               	movlw	0
  1193  002610  6E1C               	movwf	delay_ms@n+1,c
  1194  002612  0EC8               	movlw	200
  1195  002614  6E1B               	movwf	delay_ms@n,c
  1196  002616  ECF1  F016         	call	_delay_ms	;wreg free
  1197                           
  1198                           ;pwm_asl.c: 315: for (channel = 0; channel < 3; channel++) {
  1199  00261A  0E00               	movlw	0
  1200  00261C  0100               	movlb	0	; () banked
  1201  00261E  6FE5               	movwf	main@channel& (0+255),b
  1202  002620                     l5174:
  1203                           
  1204                           ; BSR set to: 0
  1205  002620  0E02               	movlw	2
  1206  002622  65E5               	cpfsgt	main@channel& (0+255),b
  1207  002624  D001               	goto	l151
  1208  002626  D01E               	goto	u5620
  1209  002628                     l151:
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;pwm_asl.c: 316: voltage = read_adc_voltage((unsigned char) channel);
  1213                           
  1214                           ; BSR set to: 0
  1215  002628  51E5               	movf	main@channel& (0+255),w,b
  1216  00262A  EC1C  F014         	call	_read_adc_voltage
  1217  00262E  C048  F0E1         	movff	?_read_adc_voltage,main@voltage
  1218  002632  C049  F0E2         	movff	?_read_adc_voltage+1,main@voltage+1
  1219  002636  C04A  F0E3         	movff	?_read_adc_voltage+2,main@voltage+2
  1220  00263A  C04B  F0E4         	movff	?_read_adc_voltage+3,main@voltage+3
  1221                           
  1222                           ;pwm_asl.c: 317: AN[channel] = voltage;
  1223  00263E  0100               	movlb	0	; () banked
  1224  002640  51E5               	movf	main@channel& (0+255),w,b
  1225  002642  0D04               	mullw	4
  1226  002644  0EE6               	movlw	low _AN
  1227  002646  24F3               	addwf	prodl,w,c
  1228  002648  6ED9               	movwf	fsr2l,c
  1229  00264A  0E00               	movlw	high _AN
  1230  00264C  20F4               	addwfc	prodh,w,c
  1231  00264E  6EDA               	movwf	fsr2h,c
  1232  002650  C0E1  FFDE         	movff	main@voltage,postinc2
  1233  002654  C0E2  FFDE         	movff	main@voltage+1,postinc2
  1234  002658  C0E3  FFDE         	movff	main@voltage+2,postinc2
  1235  00265C  C0E4  FFDE         	movff	main@voltage+3,postinc2
  1236                           
  1237                           ; BSR set to: 0
  1238  002660  2BE5               	incf	main@channel& (0+255),f,b
  1239  002662  D7DE               	goto	l5174
  1240  002664                     u5620:
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;pwm_asl.c: 318: }
  1244                           ;pwm_asl.c: 319: sp=AN[0]*20;
  1245                           
  1246                           ; BSR set to: 0
  1247  002664  C0E6  F048         	movff	_AN,___flmul@b
  1248  002668  C0E7  F049         	movff	_AN+1,___flmul@b+1
  1249  00266C  C0E8  F04A         	movff	_AN+2,___flmul@b+2
  1250  002670  C0E9  F04B         	movff	_AN+3,___flmul@b+3
  1251  002674  0E00               	movlw	0
  1252  002676  6E4C               	movwf	___flmul@a,c
  1253  002678  0E00               	movlw	0
  1254  00267A  6E4D               	movwf	___flmul@a+1,c
  1255  00267C  0EA0               	movlw	160
  1256  00267E  6E4E               	movwf	___flmul@a+2,c
  1257  002680  0E41               	movlw	65
  1258  002682  6E4F               	movwf	___flmul@a+3,c
  1259  002684  EC84  F007         	call	___flmul	;wreg free
  1260  002688  C048  F0F2         	movff	?___flmul,_sp
  1261  00268C  C049  F0F3         	movff	?___flmul+1,_sp+1
  1262  002690  C04A  F0F4         	movff	?___flmul+2,_sp+2
  1263  002694  C04B  F0F5         	movff	?___flmul+3,_sp+3
  1264                           
  1265                           ;pwm_asl.c: 320: temp=AN[2]*100.0;
  1266  002698  C0EE  F048         	movff	_AN+8,___flmul@b
  1267  00269C  C0EF  F049         	movff	_AN+9,___flmul@b+1
  1268  0026A0  C0F0  F04A         	movff	_AN+10,___flmul@b+2
  1269  0026A4  C0F1  F04B         	movff	_AN+11,___flmul@b+3
  1270  0026A8  0E00               	movlw	0
  1271  0026AA  6E4C               	movwf	___flmul@a,c
  1272  0026AC  0E00               	movlw	0
  1273  0026AE  6E4D               	movwf	___flmul@a+1,c
  1274  0026B0  0EC8               	movlw	200
  1275  0026B2  6E4E               	movwf	___flmul@a+2,c
  1276  0026B4  0E42               	movlw	66
  1277  0026B6  6E4F               	movwf	___flmul@a+3,c
  1278  0026B8  EC84  F007         	call	___flmul	;wreg free
  1279  0026BC  C048  F0F6         	movff	?___flmul,_temp
  1280  0026C0  C049  F0F7         	movff	?___flmul+1,_temp+1
  1281  0026C4  C04A  F0F8         	movff	?___flmul+2,_temp+2
  1282  0026C8  C04B  F0F9         	movff	?___flmul+3,_temp+3
  1283                           
  1284                           ;pwm_asl.c: 321: operation();
  1285  0026CC  EC2D  F009         	call	_operation	;wreg free
  1286                           
  1287                           ;pwm_asl.c: 322: display();
  1288  0026D0  EC15  F00F         	call	_display	;wreg free
  1289  0026D4  D79B               	goto	l150
  1290  0026D6                     __end_of_main:
  1291                           	opt stack 0
  1292                           tblptru	equ	0xFF8
  1293                           tblptrh	equ	0xFF7
  1294                           tblptrl	equ	0xFF6
  1295                           tablat	equ	0xFF5
  1296                           prodh	equ	0xFF4
  1297                           prodl	equ	0xFF3
  1298                           postinc0	equ	0xFEE
  1299                           wreg	equ	0xFE8
  1300                           postdec1	equ	0xFE5
  1301                           fsr1l	equ	0xFE1
  1302                           postinc2	equ	0xFDE
  1303                           fsr2h	equ	0xFDA
  1304                           fsr2l	equ	0xFD9
  1305                           
  1306 ;; *************** function _setupPorts *****************
  1307 ;; Defined at:
  1308 ;;		line 103 in file "pwm_asl.c"
  1309 ;; Parameters:    Size  Location     Type
  1310 ;;		None
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;		None
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  1    wreg      void 
  1315 ;; Registers used:
  1316 ;;		wreg, status,2
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1326 ;;Total ram usage:        0 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; Hardware stack levels required when called:    2
  1329 ;; This function calls:
  1330 ;;		Nothing
  1331 ;; This function is called by:
  1332 ;;		_main
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           	psect	text1
  1337  002E2A                     __ptext1:
  1338                           	opt stack 0
  1339  002E2A                     _setupPorts:
  1340                           	opt stack 28
  1341                           
  1342                           ;pwm_asl.c: 104: INTCON2 =0 ;
  1343                           
  1344                           ;incstack = 0
  1345  002E2A  0E00               	movlw	0
  1346  002E2C  6EF1               	movwf	intcon2,c	;volatile
  1347                           
  1348                           ;pwm_asl.c: 105: ADCON0 = 0;
  1349  002E2E  0E00               	movlw	0
  1350  002E30  6EC2               	movwf	4034,c	;volatile
  1351                           
  1352                           ;pwm_asl.c: 106: ADCON1 = 0b00001100;
  1353  002E32  0E0C               	movlw	12
  1354  002E34  6EC1               	movwf	4033,c	;volatile
  1355                           
  1356                           ;pwm_asl.c: 107: TRISB = 0xFF;
  1357  002E36  6893               	setf	3987,c	;volatile
  1358                           
  1359                           ;pwm_asl.c: 108: TRISC = 0x80;
  1360  002E38  0E80               	movlw	128
  1361  002E3A  6E94               	movwf	3988,c	;volatile
  1362                           
  1363                           ;pwm_asl.c: 109: TRISA = 0xFF;
  1364  002E3C  6892               	setf	3986,c	;volatile
  1365                           
  1366                           ;pwm_asl.c: 110: TRISD = 0x00;
  1367  002E3E  0E00               	movlw	0
  1368  002E40  6E95               	movwf	3989,c	;volatile
  1369                           
  1370                           ;pwm_asl.c: 111: TRISE = 0x00;
  1371  002E42  0E00               	movlw	0
  1372  002E44  6E96               	movwf	3990,c	;volatile
  1373  002E46  0012               	return		;funcret
  1374  002E48                     __end_of_setupPorts:
  1375                           	opt stack 0
  1376                           tblptru	equ	0xFF8
  1377                           tblptrh	equ	0xFF7
  1378                           tblptrl	equ	0xFF6
  1379                           tablat	equ	0xFF5
  1380                           prodh	equ	0xFF4
  1381                           prodl	equ	0xFF3
  1382                           intcon2	equ	0xFF1
  1383                           postinc0	equ	0xFEE
  1384                           wreg	equ	0xFE8
  1385                           postdec1	equ	0xFE5
  1386                           fsr1l	equ	0xFE1
  1387                           postinc2	equ	0xFDE
  1388                           fsr2h	equ	0xFDA
  1389                           fsr2l	equ	0xFD9
  1390                           
  1391 ;; *************** function _read_adc_voltage *****************
  1392 ;; Defined at:
  1393 ;;		line 48 in file "my_adc.c"
  1394 ;; Parameters:    Size  Location     Type
  1395 ;;  channel         1    wreg     unsigned char 
  1396 ;; Auto vars:     Size  Location     Type
  1397 ;;  channel         1   81[COMRAM] unsigned char 
  1398 ;;  voltage         4   75[COMRAM] float 
  1399 ;;  raw_value       2   79[COMRAM] int 
  1400 ;; Return value:  Size  Location     Type
  1401 ;;                  4   71[COMRAM] float 
  1402 ;; Registers used:
  1403 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1404 ;; Tracked objects:
  1405 ;;		On entry : 0/0
  1406 ;;		On exit  : 0/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1409 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1410 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1412 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1413 ;;Total ram usage:       11 bytes
  1414 ;; Hardware stack levels used:    1
  1415 ;; Hardware stack levels required when called:    3
  1416 ;; This function calls:
  1417 ;;		___fldiv
  1418 ;;		___wmul
  1419 ;;		___xxtofl
  1420 ;;		_read_adc_raw_no_lib
  1421 ;; This function is called by:
  1422 ;;		_main
  1423 ;; This function uses a non-reentrant model
  1424 ;;
  1425                           
  1426                           	psect	text2
  1427  002838                     __ptext2:
  1428                           	opt stack 0
  1429  002838                     _read_adc_voltage:
  1430                           	opt stack 27
  1431                           
  1432                           ;incstack = 0
  1433                           ;read_adc_voltage@channel stored from wreg
  1434  002838  6E52               	movwf	read_adc_voltage@channel,c
  1435                           
  1436                           ;my_adc.c: 49: int raw_value;
  1437                           ;my_adc.c: 50: float voltage;
  1438                           ;my_adc.c: 51: raw_value = read_adc_raw_no_lib(channel);
  1439  00283A  5052               	movf	read_adc_voltage@channel,w,c
  1440  00283C  EC7C  F016         	call	_read_adc_raw_no_lib
  1441  002840  C01B  F050         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  1442  002844  C01C  F051         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  1443                           
  1444                           ;my_adc.c: 52: voltage = (raw_value * 5) / 1023.0;
  1445  002848  C050  F01B         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  1446  00284C  C051  F01C         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  1447  002850  0E00               	movlw	0
  1448  002852  6E1E               	movwf	___wmul@multiplicand+1,c
  1449  002854  0E05               	movlw	5
  1450  002856  6E1D               	movwf	___wmul@multiplicand,c
  1451  002858  ECDE  F016         	call	___wmul	;wreg free
  1452  00285C  C01B  F021         	movff	?___wmul,___xxtofl@val
  1453  002860  C01C  F022         	movff	?___wmul+1,___xxtofl@val+1
  1454  002864  0E00               	movlw	0
  1455  002866  BE22               	btfsc	___xxtofl@val+1,7,c
  1456  002868  0EFF               	movlw	-1
  1457  00286A  6E23               	movwf	___xxtofl@val+2,c
  1458  00286C  6E24               	movwf	___xxtofl@val+3,c
  1459  00286E  0E01               	movlw	1
  1460  002870  EC11  F010         	call	___xxtofl
  1461  002874  C021  F02F         	movff	?___xxtofl,___fldiv@b
  1462  002878  C022  F030         	movff	?___xxtofl+1,___fldiv@b+1
  1463  00287C  C023  F031         	movff	?___xxtofl+2,___fldiv@b+2
  1464  002880  C024  F032         	movff	?___xxtofl+3,___fldiv@b+3
  1465  002884  0E00               	movlw	0
  1466  002886  6E33               	movwf	___fldiv@a,c
  1467  002888  0EC0               	movlw	192
  1468  00288A  6E34               	movwf	___fldiv@a+1,c
  1469  00288C  0E7F               	movlw	127
  1470  00288E  6E35               	movwf	___fldiv@a+2,c
  1471  002890  0E44               	movlw	68
  1472  002892  6E36               	movwf	___fldiv@a+3,c
  1473  002894  EC72  F00C         	call	___fldiv	;wreg free
  1474  002898  C02F  F04C         	movff	?___fldiv,read_adc_voltage@voltage
  1475  00289C  C030  F04D         	movff	?___fldiv+1,read_adc_voltage@voltage+1
  1476  0028A0  C031  F04E         	movff	?___fldiv+2,read_adc_voltage@voltage+2
  1477  0028A4  C032  F04F         	movff	?___fldiv+3,read_adc_voltage@voltage+3
  1478                           
  1479                           ;my_adc.c: 53: return voltage;
  1480  0028A8  C04C  F048         	movff	read_adc_voltage@voltage,?_read_adc_voltage
  1481  0028AC  C04D  F049         	movff	read_adc_voltage@voltage+1,?_read_adc_voltage+1
  1482  0028B0  C04E  F04A         	movff	read_adc_voltage@voltage+2,?_read_adc_voltage+2
  1483  0028B4  C04F  F04B         	movff	read_adc_voltage@voltage+3,?_read_adc_voltage+3
  1484  0028B8  0012               	return	
  1485  0028BA                     __end_of_read_adc_voltage:
  1486                           	opt stack 0
  1487                           tblptru	equ	0xFF8
  1488                           tblptrh	equ	0xFF7
  1489                           tblptrl	equ	0xFF6
  1490                           tablat	equ	0xFF5
  1491                           prodh	equ	0xFF4
  1492                           prodl	equ	0xFF3
  1493                           intcon2	equ	0xFF1
  1494                           postinc0	equ	0xFEE
  1495                           wreg	equ	0xFE8
  1496                           postdec1	equ	0xFE5
  1497                           fsr1l	equ	0xFE1
  1498                           postinc2	equ	0xFDE
  1499                           fsr2h	equ	0xFDA
  1500                           fsr2l	equ	0xFD9
  1501                           
  1502 ;; *************** function _operation *****************
  1503 ;; Defined at:
  1504 ;;		line 168 in file "pwm_asl.c"
  1505 ;; Parameters:    Size  Location     Type
  1506 ;;		None
  1507 ;; Auto vars:     Size  Location     Type
  1508 ;;  PWM_percenta    4   60[BANK0 ] float 
  1509 ;;  compare_valu    2   64[BANK0 ] int 
  1510 ;;  CoolError       4   56[BANK0 ] float 
  1511 ;; Return value:  Size  Location     Type
  1512 ;;                  1    wreg      void 
  1513 ;; Registers used:
  1514 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1521 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1522 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1523 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1524 ;;Total ram usage:       12 bytes
  1525 ;; Hardware stack levels used:    1
  1526 ;; Hardware stack levels required when called:    3
  1527 ;; This function calls:
  1528 ;;		___fladd
  1529 ;;		___fldiv
  1530 ;;		___flge
  1531 ;;		___flmul
  1532 ;;		___flneg
  1533 ;;		___fltol
  1534 ;;		___xxtofl
  1535 ;;		_delay_ms
  1536 ;;		_read_adc_raw_no_lib
  1537 ;;		_set_pwm1_raw
  1538 ;; This function is called by:
  1539 ;;		_main
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           	psect	text3
  1544  00125A                     __ptext3:
  1545                           	opt stack 0
  1546  00125A                     _operation:
  1547                           	opt stack 27
  1548                           
  1549                           ;pwm_asl.c: 169: float CoolError;
  1550                           ;pwm_asl.c: 170: switch(mode) {
  1551                           
  1552                           ;incstack = 0
  1553  00125A  D197               	goto	l123
  1554  00125C                     l124:
  1555                           
  1556                           ;pwm_asl.c: 172: if(PORTBbits.RB3==0){
  1557  00125C  B681               	btfsc	3969,3,c	;volatile
  1558  00125E  0012               	return	
  1559                           
  1560                           ;pwm_asl.c: 173: delay_ms(250);
  1561  001260  0E00               	movlw	0
  1562  001262  6E1C               	movwf	delay_ms@n+1,c
  1563  001264  0EFA               	movlw	250
  1564  001266  6E1B               	movwf	delay_ms@n,c
  1565  001268  ECF1  F016         	call	_delay_ms	;wreg free
  1566                           
  1567                           ;pwm_asl.c: 174: if(PORTBbits.RB3==0)
  1568  00126C  B681               	btfsc	3969,3,c	;volatile
  1569  00126E  0012               	return	
  1570                           
  1571                           ;pwm_asl.c: 175: {
  1572                           ;pwm_asl.c: 176: set_pwm1_raw(0);
  1573  001270  0E00               	movlw	0
  1574  001272  6E1C               	movwf	set_pwm1_raw@raw_value+1,c
  1575  001274  0E00               	movlw	0
  1576  001276  6E1B               	movwf	set_pwm1_raw@raw_value,c
  1577  001278  EC99  F016         	call	_set_pwm1_raw	;wreg free
  1578                           
  1579                           ;pwm_asl.c: 177: PORTCbits.RC2=0;
  1580  00127C  9482               	bcf	3970,2,c	;volatile
  1581                           
  1582                           ;pwm_asl.c: 178: HC=0;
  1583  00127E  0E00               	movlw	0
  1584  001280  0101               	movlb	1	; () banked
  1585  001282  6FA2               	movwf	_HC& (0+255),b
  1586  001284  0E00               	movlw	0
  1587  001286  6FA3               	movwf	(_HC+1)& (0+255),b
  1588  001288  0E00               	movlw	0
  1589  00128A  6FA4               	movwf	(_HC+2)& (0+255),b
  1590  00128C  0E00               	movlw	0
  1591  00128E  6FA5               	movwf	(_HC+3)& (0+255),b
  1592                           
  1593                           ; BSR set to: 1
  1594                           ;pwm_asl.c: 179: PIE2bits.CCP2IE = 0;
  1595  001290  90A0               	bcf	4000,0,c	;volatile
  1596                           
  1597                           ; BSR set to: 1
  1598                           ;pwm_asl.c: 180: }
  1599                           ;pwm_asl.c: 181: }
  1600                           ;pwm_asl.c: 182: break;
  1601                           
  1602                           ; BSR set to: 1
  1603  001292  0012               	return	
  1604  001294                     
  1605                           ;pwm_asl.c: 185: HC =(AN[1]/5.0)*100.0;
  1606                           
  1607                           ; BSR set to: 1
  1608  001294  0E00               	movlw	0
  1609  001296  6E33               	movwf	___fldiv@a,c
  1610  001298  0E00               	movlw	0
  1611  00129A  6E34               	movwf	___fldiv@a+1,c
  1612  00129C  0EA0               	movlw	160
  1613  00129E  6E35               	movwf	___fldiv@a+2,c
  1614  0012A0  0E40               	movlw	64
  1615  0012A2  6E36               	movwf	___fldiv@a+3,c
  1616  0012A4  C0EA  F02F         	movff	_AN+4,___fldiv@b
  1617  0012A8  C0EB  F030         	movff	_AN+5,___fldiv@b+1
  1618  0012AC  C0EC  F031         	movff	_AN+6,___fldiv@b+2
  1619  0012B0  C0ED  F032         	movff	_AN+7,___fldiv@b+3
  1620  0012B4  EC72  F00C         	call	___fldiv	;wreg free
  1621  0012B8  C02F  F048         	movff	?___fldiv,___flmul@b
  1622  0012BC  C030  F049         	movff	?___fldiv+1,___flmul@b+1
  1623  0012C0  C031  F04A         	movff	?___fldiv+2,___flmul@b+2
  1624  0012C4  C032  F04B         	movff	?___fldiv+3,___flmul@b+3
  1625  0012C8  0E00               	movlw	0
  1626  0012CA  6E4C               	movwf	___flmul@a,c
  1627  0012CC  0E00               	movlw	0
  1628  0012CE  6E4D               	movwf	___flmul@a+1,c
  1629  0012D0  0EC8               	movlw	200
  1630  0012D2  6E4E               	movwf	___flmul@a+2,c
  1631  0012D4  0E42               	movlw	66
  1632  0012D6  6E4F               	movwf	___flmul@a+3,c
  1633  0012D8  EC84  F007         	call	___flmul	;wreg free
  1634  0012DC  C048  F1A2         	movff	?___flmul,_HC
  1635  0012E0  C049  F1A3         	movff	?___flmul+1,_HC+1
  1636  0012E4  C04A  F1A4         	movff	?___flmul+2,_HC+2
  1637  0012E8  C04B  F1A5         	movff	?___flmul+3,_HC+3
  1638                           
  1639                           ;pwm_asl.c: 186: raw_val = read_adc_raw_no_lib(1);
  1640  0012EC  0E01               	movlw	1
  1641  0012EE  EC7C  F016         	call	_read_adc_raw_no_lib
  1642  0012F2  C01B  F0FA         	movff	?_read_adc_raw_no_lib,_raw_val
  1643  0012F6  C01C  F0FB         	movff	?_read_adc_raw_no_lib+1,_raw_val+1
  1644                           
  1645                           ;pwm_asl.c: 187: set_pwm1_raw(raw_val);
  1646  0012FA  C0FA  F01B         	movff	_raw_val,set_pwm1_raw@raw_value
  1647  0012FE  C0FB  F01C         	movff	_raw_val+1,set_pwm1_raw@raw_value+1
  1648  001302  EC99  F016         	call	_set_pwm1_raw	;wreg free
  1649                           
  1650                           ;pwm_asl.c: 188: break;
  1651  001306  0012               	return	
  1652  001308                     
  1653                           ;pwm_asl.c: 191: HC = (AN[1] / 5.0) * 100.0;
  1654  001308  0E00               	movlw	0
  1655  00130A  6E33               	movwf	___fldiv@a,c
  1656  00130C  0E00               	movlw	0
  1657  00130E  6E34               	movwf	___fldiv@a+1,c
  1658  001310  0EA0               	movlw	160
  1659  001312  6E35               	movwf	___fldiv@a+2,c
  1660  001314  0E40               	movlw	64
  1661  001316  6E36               	movwf	___fldiv@a+3,c
  1662  001318  C0EA  F02F         	movff	_AN+4,___fldiv@b
  1663  00131C  C0EB  F030         	movff	_AN+5,___fldiv@b+1
  1664  001320  C0EC  F031         	movff	_AN+6,___fldiv@b+2
  1665  001324  C0ED  F032         	movff	_AN+7,___fldiv@b+3
  1666  001328  EC72  F00C         	call	___fldiv	;wreg free
  1667  00132C  C02F  F048         	movff	?___fldiv,___flmul@b
  1668  001330  C030  F049         	movff	?___fldiv+1,___flmul@b+1
  1669  001334  C031  F04A         	movff	?___fldiv+2,___flmul@b+2
  1670  001338  C032  F04B         	movff	?___fldiv+3,___flmul@b+3
  1671  00133C  0E00               	movlw	0
  1672  00133E  6E4C               	movwf	___flmul@a,c
  1673  001340  0E00               	movlw	0
  1674  001342  6E4D               	movwf	___flmul@a+1,c
  1675  001344  0EC8               	movlw	200
  1676  001346  6E4E               	movwf	___flmul@a+2,c
  1677  001348  0E42               	movlw	66
  1678  00134A  6E4F               	movwf	___flmul@a+3,c
  1679  00134C  EC84  F007         	call	___flmul	;wreg free
  1680  001350  C048  F1A2         	movff	?___flmul,_HC
  1681  001354  C049  F1A3         	movff	?___flmul+1,_HC+1
  1682  001358  C04A  F1A4         	movff	?___flmul+2,_HC+2
  1683  00135C  C04B  F1A5         	movff	?___flmul+3,_HC+3
  1684                           
  1685                           ;pwm_asl.c: 194: raw_val = read_adc_raw_no_lib(1);
  1686  001360  0E01               	movlw	1
  1687  001362  EC7C  F016         	call	_read_adc_raw_no_lib
  1688  001366  C01B  F0FA         	movff	?_read_adc_raw_no_lib,_raw_val
  1689  00136A  C01C  F0FB         	movff	?_read_adc_raw_no_lib+1,_raw_val+1
  1690                           
  1691                           ;pwm_asl.c: 197: int compare_value = raw_val * 64;
  1692  00136E  C0FA  F0B6         	movff	_raw_val,??_operation
  1693  001372  C0FB  F0B7         	movff	_raw_val+1,??_operation+1
  1694  001376  0E06               	movlw	6
  1695  001378                     u5575:
  1696  001378  90D8               	bcf	status,0,c
  1697  00137A  0100               	movlb	0	; () banked
  1698  00137C  37B6               	rlcf	??_operation& (0+255),f,b
  1699  00137E  37B7               	rlcf	(??_operation+1)& (0+255),f,b
  1700  001380  2EE8               	decfsz	wreg,f,c
  1701  001382  D7FA               	goto	u5575
  1702  001384  C0B6  F0C0         	movff	??_operation,operation@compare_value
  1703  001388  C0B7  F0C1         	movff	??_operation+1,operation@compare_value+1
  1704                           
  1705                           ; BSR set to: 0
  1706                           ;pwm_asl.c: 200: }
  1707                           ;pwm_asl.c: 205: PIE2bits.CCP2IE = 1;
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;pwm_asl.c: 199: compare_value = 65535;
  1711                           
  1712                           ;pwm_asl.c: 198: if (compare_value > 65535) {
  1713  00138C  80A0               	bsf	4000,0,c	;volatile
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;pwm_asl.c: 208: CCPR2H = (compare_value >> 8) & 0xFF;
  1717  00138E  51C1               	movf	(operation@compare_value+1)& (0+255),w,b
  1718  001390  6EBC               	movwf	4028,c	;volatile
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;pwm_asl.c: 209: CCPR2L = compare_value & 0xFF;
  1722  001392  C0C0  FFBB         	movff	operation@compare_value,4027	;volatile
  1723                           
  1724                           ; BSR set to: 0
  1725                           ;pwm_asl.c: 212: T3CONbits.TMR3ON = 1;
  1726  001396  80B1               	bsf	4017,0,c	;volatile
  1727                           
  1728                           ;pwm_asl.c: 213: break;
  1729  001398  0012               	return	
  1730  00139A                     
  1731                           ;pwm_asl.c: 216: CoolError = temp - sp;
  1732                           
  1733                           ; BSR set to: 0
  1734  00139A  C0F2  F02F         	movff	_sp,___flneg@f1
  1735  00139E  C0F3  F030         	movff	_sp+1,___flneg@f1+1
  1736  0013A2  C0F4  F031         	movff	_sp+2,___flneg@f1+2
  1737  0013A6  C0F5  F032         	movff	_sp+3,___flneg@f1+3
  1738  0013AA  ECB0  F016         	call	___flneg	;wreg free
  1739  0013AE  C02F  F096         	movff	?___flneg,___fladd@b
  1740  0013B2  C030  F097         	movff	?___flneg+1,___fladd@b+1
  1741  0013B6  C031  F098         	movff	?___flneg+2,___fladd@b+2
  1742  0013BA  C032  F099         	movff	?___flneg+3,___fladd@b+3
  1743  0013BE  C0F6  F09A         	movff	_temp,___fladd@a
  1744  0013C2  C0F7  F09B         	movff	_temp+1,___fladd@a+1
  1745  0013C6  C0F8  F09C         	movff	_temp+2,___fladd@a+2
  1746  0013CA  C0F9  F09D         	movff	_temp+3,___fladd@a+3
  1747  0013CE  ECD3  F00A         	call	___fladd	;wreg free
  1748  0013D2  C096  F0B8         	movff	?___fladd,operation@CoolError
  1749  0013D6  C097  F0B9         	movff	?___fladd+1,operation@CoolError+1
  1750  0013DA  C098  F0BA         	movff	?___fladd+2,operation@CoolError+2
  1751  0013DE  C099  F0BB         	movff	?___fladd+3,operation@CoolError+3
  1752                           
  1753                           ;pwm_asl.c: 217: if (CoolError > 0) {
  1754  0013E2  0E00               	movlw	0
  1755  0013E4  0100               	movlb	0	; () banked
  1756  0013E6  6FAA               	movwf	___flge@ff1& (0+255),b
  1757  0013E8  0E00               	movlw	0
  1758  0013EA  6FAB               	movwf	(___flge@ff1+1)& (0+255),b
  1759  0013EC  0E00               	movlw	0
  1760  0013EE  6FAC               	movwf	(___flge@ff1+2)& (0+255),b
  1761  0013F0  0E00               	movlw	0
  1762  0013F2  6FAD               	movwf	(___flge@ff1+3)& (0+255),b
  1763  0013F4  C0B8  F0AE         	movff	operation@CoolError,___flge@ff2
  1764  0013F8  C0B9  F0AF         	movff	operation@CoolError+1,___flge@ff2+1
  1765  0013FC  C0BA  F0B0         	movff	operation@CoolError+2,___flge@ff2+2
  1766  001400  C0BB  F0B1         	movff	operation@CoolError+3,___flge@ff2+3
  1767  001404  ECE6  F011         	call	___flge	;wreg free
  1768  001408  0100               	movlb	0	; () banked
  1769  00140A  B0D8               	btfsc	status,0,c
  1770  00140C  D073               	goto	l132
  1771                           
  1772                           ; BSR set to: 0
  1773                           ;pwm_asl.c: 218: float PWM_percentage_value = CoolError * 10;
  1774  00140E  C0B8  F048         	movff	operation@CoolError,___flmul@b
  1775  001412  C0B9  F049         	movff	operation@CoolError+1,___flmul@b+1
  1776  001416  C0BA  F04A         	movff	operation@CoolError+2,___flmul@b+2
  1777  00141A  C0BB  F04B         	movff	operation@CoolError+3,___flmul@b+3
  1778  00141E  0E00               	movlw	0
  1779  001420  6E4C               	movwf	___flmul@a,c
  1780  001422  0E00               	movlw	0
  1781  001424  6E4D               	movwf	___flmul@a+1,c
  1782  001426  0E20               	movlw	32
  1783  001428  6E4E               	movwf	___flmul@a+2,c
  1784  00142A  0E41               	movlw	65
  1785  00142C  6E4F               	movwf	___flmul@a+3,c
  1786  00142E  EC84  F007         	call	___flmul	;wreg free
  1787  001432  C048  F0BC         	movff	?___flmul,operation@PWM_percentage_value
  1788  001436  C049  F0BD         	movff	?___flmul+1,operation@PWM_percentage_value+1
  1789  00143A  C04A  F0BE         	movff	?___flmul+2,operation@PWM_percentage_value+2
  1790  00143E  C04B  F0BF         	movff	?___flmul+3,operation@PWM_percentage_value+3
  1791                           
  1792                           ;pwm_asl.c: 219: if (PWM_percentage_value < 25) {
  1793  001442  C0BC  F0AA         	movff	operation@PWM_percentage_value,___flge@ff1
  1794  001446  C0BD  F0AB         	movff	operation@PWM_percentage_value+1,___flge@ff1+1
  1795  00144A  C0BE  F0AC         	movff	operation@PWM_percentage_value+2,___flge@ff1+2
  1796  00144E  C0BF  F0AD         	movff	operation@PWM_percentage_value+3,___flge@ff1+3
  1797  001452  0E00               	movlw	0
  1798  001454  0100               	movlb	0	; () banked
  1799  001456  6FAE               	movwf	___flge@ff2& (0+255),b
  1800  001458  0E00               	movlw	0
  1801  00145A  6FAF               	movwf	(___flge@ff2+1)& (0+255),b
  1802  00145C  0EC8               	movlw	200
  1803  00145E  6FB0               	movwf	(___flge@ff2+2)& (0+255),b
  1804  001460  0E41               	movlw	65
  1805  001462  6FB1               	movwf	(___flge@ff2+3)& (0+255),b
  1806  001464  ECE6  F011         	call	___flge	;wreg free
  1807  001468  0100               	movlb	0	; () banked
  1808  00146A  B0D8               	btfsc	status,0,c
  1809  00146C  D008               	goto	l133
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;pwm_asl.c: 220: PWM_percentage_value = 25;
  1813  00146E  0E00               	movlw	0
  1814  001470  6FBC               	movwf	operation@PWM_percentage_value& (0+255),b
  1815  001472  0E00               	movlw	0
  1816  001474  6FBD               	movwf	(operation@PWM_percentage_value+1)& (0+255),b
  1817  001476  0EC8               	movlw	200
  1818  001478  6FBE               	movwf	(operation@PWM_percentage_value+2)& (0+255),b
  1819  00147A  0E41               	movlw	65
  1820  00147C  6FBF               	movwf	(operation@PWM_percentage_value+3)& (0+255),b
  1821  00147E                     l133:
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;pwm_asl.c: 221: }
  1825                           ;pwm_asl.c: 222: raw_val = (int)(PWM_percentage_value * 1023.0 / 100.0);
  1826                           
  1827                           ; BSR set to: 0
  1828  00147E  0E00               	movlw	0
  1829  001480  6E33               	movwf	___fldiv@a,c
  1830  001482  0E00               	movlw	0
  1831  001484  6E34               	movwf	___fldiv@a+1,c
  1832  001486  0EC8               	movlw	200
  1833  001488  6E35               	movwf	___fldiv@a+2,c
  1834  00148A  0E42               	movlw	66
  1835  00148C  6E36               	movwf	___fldiv@a+3,c
  1836  00148E  0E00               	movlw	0
  1837  001490  6E4C               	movwf	___flmul@a,c
  1838  001492  0EC0               	movlw	192
  1839  001494  6E4D               	movwf	___flmul@a+1,c
  1840  001496  0E7F               	movlw	127
  1841  001498  6E4E               	movwf	___flmul@a+2,c
  1842  00149A  0E44               	movlw	68
  1843  00149C  6E4F               	movwf	___flmul@a+3,c
  1844  00149E  C0BC  F048         	movff	operation@PWM_percentage_value,___flmul@b
  1845  0014A2  C0BD  F049         	movff	operation@PWM_percentage_value+1,___flmul@b+1
  1846  0014A6  C0BE  F04A         	movff	operation@PWM_percentage_value+2,___flmul@b+2
  1847  0014AA  C0BF  F04B         	movff	operation@PWM_percentage_value+3,___flmul@b+3
  1848  0014AE  EC84  F007         	call	___flmul	;wreg free
  1849  0014B2  C048  F02F         	movff	?___flmul,___fldiv@b
  1850  0014B6  C049  F030         	movff	?___flmul+1,___fldiv@b+1
  1851  0014BA  C04A  F031         	movff	?___flmul+2,___fldiv@b+2
  1852  0014BE  C04B  F032         	movff	?___flmul+3,___fldiv@b+3
  1853  0014C2  EC72  F00C         	call	___fldiv	;wreg free
  1854  0014C6  C02F  F092         	movff	?___fldiv,___fltol@f1
  1855  0014CA  C030  F093         	movff	?___fldiv+1,___fltol@f1+1
  1856  0014CE  C031  F094         	movff	?___fldiv+2,___fltol@f1+2
  1857  0014D2  C032  F095         	movff	?___fldiv+3,___fltol@f1+3
  1858  0014D6  EC6B  F013         	call	___fltol	;wreg free
  1859  0014DA  C092  F0FA         	movff	?___fltol,_raw_val
  1860  0014DE  C093  F0FB         	movff	?___fltol+1,_raw_val+1
  1861                           
  1862                           ;pwm_asl.c: 223: set_pwm1_raw(raw_val);
  1863  0014E2  C0FA  F01B         	movff	_raw_val,set_pwm1_raw@raw_value
  1864  0014E6  C0FB  F01C         	movff	_raw_val+1,set_pwm1_raw@raw_value+1
  1865  0014EA  EC99  F016         	call	_set_pwm1_raw	;wreg free
  1866                           
  1867                           ;pwm_asl.c: 224: PORTCbits.RC5 = 0;
  1868  0014EE  9A82               	bcf	3970,5,c	;volatile
  1869                           
  1870                           ;pwm_asl.c: 225: PIE2bits.CCP2IE = 0;
  1871  0014F0  90A0               	bcf	4000,0,c	;volatile
  1872                           
  1873                           ;pwm_asl.c: 226: } else if (temp < (sp - HS)) {
  1874  0014F2  0012               	return	
  1875  0014F4                     l132:
  1876  0014F4  C0F6  F0AA         	movff	_temp,___flge@ff1
  1877  0014F8  C0F7  F0AB         	movff	_temp+1,___flge@ff1+1
  1878  0014FC  C0F8  F0AC         	movff	_temp+2,___flge@ff1+2
  1879  001500  C0F9  F0AD         	movff	_temp+3,___flge@ff1+3
  1880  001504  C0F2  F09A         	movff	_sp,___fladd@a
  1881  001508  C0F3  F09B         	movff	_sp+1,___fladd@a+1
  1882  00150C  C0F4  F09C         	movff	_sp+2,___fladd@a+2
  1883  001510  C0F5  F09D         	movff	_sp+3,___fladd@a+3
  1884  001514  505F               	movf	_HS,w,c
  1885  001516  6E21               	movwf	___xxtofl@val,c
  1886  001518  6A22               	clrf	___xxtofl@val+1,c
  1887  00151A  6A23               	clrf	___xxtofl@val+2,c
  1888  00151C  6A24               	clrf	___xxtofl@val+3,c
  1889  00151E  0E00               	movlw	0
  1890  001520  EC11  F010         	call	___xxtofl
  1891  001524  C021  F02F         	movff	?___xxtofl,___flneg@f1
  1892  001528  C022  F030         	movff	?___xxtofl+1,___flneg@f1+1
  1893  00152C  C023  F031         	movff	?___xxtofl+2,___flneg@f1+2
  1894  001530  C024  F032         	movff	?___xxtofl+3,___flneg@f1+3
  1895  001534  ECB0  F016         	call	___flneg	;wreg free
  1896  001538  C02F  F096         	movff	?___flneg,___fladd@b
  1897  00153C  C030  F097         	movff	?___flneg+1,___fladd@b+1
  1898  001540  C031  F098         	movff	?___flneg+2,___fladd@b+2
  1899  001544  C032  F099         	movff	?___flneg+3,___fladd@b+3
  1900  001548  ECD3  F00A         	call	___fladd	;wreg free
  1901  00154C  C096  F0AE         	movff	?___fladd,___flge@ff2
  1902  001550  C097  F0AF         	movff	?___fladd+1,___flge@ff2+1
  1903  001554  C098  F0B0         	movff	?___fladd+2,___flge@ff2+2
  1904  001558  C099  F0B1         	movff	?___fladd+3,___flge@ff2+3
  1905  00155C  ECE6  F011         	call	___flge	;wreg free
  1906  001560  0100               	movlb	0	; () banked
  1907  001562  B0D8               	btfsc	status,0,c
  1908  001564  0012               	return	
  1909                           
  1910                           ; BSR set to: 0
  1911                           ;pwm_asl.c: 227: set_pwm1_raw(0);
  1912  001566  0E00               	movlw	0
  1913  001568  6E1C               	movwf	set_pwm1_raw@raw_value+1,c
  1914  00156A  0E00               	movlw	0
  1915  00156C  6E1B               	movwf	set_pwm1_raw@raw_value,c
  1916  00156E  EC99  F016         	call	_set_pwm1_raw	;wreg free
  1917                           
  1918                           ;pwm_asl.c: 228: PORTCbits.RC2 = 0;
  1919  001572  9482               	bcf	3970,2,c	;volatile
  1920                           
  1921                           ;pwm_asl.c: 229: HC = 50.0;
  1922  001574  0E00               	movlw	0
  1923  001576  0101               	movlb	1	; () banked
  1924  001578  6FA2               	movwf	_HC& (0+255),b
  1925  00157A  0E00               	movlw	0
  1926  00157C  6FA3               	movwf	(_HC+1)& (0+255),b
  1927  00157E  0E48               	movlw	72
  1928  001580  6FA4               	movwf	(_HC+2)& (0+255),b
  1929  001582  0E42               	movlw	66
  1930  001584  6FA5               	movwf	(_HC+3)& (0+255),b
  1931                           
  1932                           ; BSR set to: 1
  1933                           ;pwm_asl.c: 230: PIE2bits.CCP2IE = 1;
  1934  001586  80A0               	bsf	4000,0,c	;volatile
  1935                           
  1936                           ; BSR set to: 1
  1937                           ;pwm_asl.c: 233: }
  1938                           
  1939                           ; BSR set to: 1
  1940                           ;pwm_asl.c: 231: }
  1941                           ;pwm_asl.c: 232: break;
  1942                           
  1943                           ; BSR set to: 1
  1944  001588  0012               	return	
  1945  00158A                     l123:
  1946                           
  1947                           ; BSR set to: 1
  1948  00158A  505E               	movf	_mode,w,c
  1949                           
  1950                           ; Switch size 1, requested type "space"
  1951                           ; Number of cases is 4, Range of values is 0 to 3
  1952                           ; switch strategies available:
  1953                           ; Name         Instructions Cycles
  1954                           ; simple_byte           13     7 (average)
  1955                           ;	Chosen strategy is simple_byte
  1956  00158C  0A00               	xorlw	0	; case 0
  1957  00158E  B4D8               	btfsc	status,2,c
  1958  001590  D665               	goto	l124
  1959  001592  0A01               	xorlw	1	; case 1
  1960  001594  B4D8               	btfsc	status,2,c
  1961  001596  D67E               	goto	l128
  1962  001598  0A03               	xorlw	3	; case 2
  1963  00159A  B4D8               	btfsc	status,2,c
  1964  00159C  D6B5               	goto	l129
  1965  00159E  0A01               	xorlw	1	; case 3
  1966  0015A0  A4D8               	btfss	status,2,c
  1967  0015A2  0012               	return	
  1968  0015A4  D6FA               	goto	l131
  1969  0015A6                     __end_of_operation:
  1970                           	opt stack 0
  1971                           tblptru	equ	0xFF8
  1972                           tblptrh	equ	0xFF7
  1973                           tblptrl	equ	0xFF6
  1974                           tablat	equ	0xFF5
  1975                           prodh	equ	0xFF4
  1976                           prodl	equ	0xFF3
  1977                           intcon2	equ	0xFF1
  1978                           postinc0	equ	0xFEE
  1979                           wreg	equ	0xFE8
  1980                           postdec1	equ	0xFE5
  1981                           fsr1l	equ	0xFE1
  1982                           postinc2	equ	0xFDE
  1983                           fsr2h	equ	0xFDA
  1984                           fsr2l	equ	0xFD9
  1985                           status	equ	0xFD8
  1986                           
  1987 ;; *************** function _set_pwm1_raw *****************
  1988 ;; Defined at:
  1989 ;;		line 17 in file "my_pwm.c"
  1990 ;; Parameters:    Size  Location     Type
  1991 ;;  raw_value       2   26[COMRAM] unsigned int 
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;		None
  1994 ;; Return value:  Size  Location     Type
  1995 ;;                  1    wreg      void 
  1996 ;; Registers used:
  1997 ;;		wreg, status,2, status,0
  1998 ;; Tracked objects:
  1999 ;;		On entry : 0/0
  2000 ;;		On exit  : 0/0
  2001 ;;		Unchanged: 0/0
  2002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2003 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2005 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2006 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2007 ;;Total ram usage:        4 bytes
  2008 ;; Hardware stack levels used:    1
  2009 ;; Hardware stack levels required when called:    2
  2010 ;; This function calls:
  2011 ;;		Nothing
  2012 ;; This function is called by:
  2013 ;;		_operation
  2014 ;;		_set_pwm1_percent
  2015 ;;		_set_pwm1_voltage
  2016 ;;		_set_pwm1_general
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020                           	psect	text4
  2021  002D32                     __ptext4:
  2022                           	opt stack 0
  2023  002D32                     _set_pwm1_raw:
  2024                           	opt stack 27
  2025                           
  2026                           ;my_pwm.c: 19: CCPR1L = (raw_value >> 2) & 0x00FF;
  2027                           
  2028                           ;incstack = 0
  2029  002D32  C01B  F01D         	movff	set_pwm1_raw@raw_value,??_set_pwm1_raw
  2030  002D36  C01C  F01E         	movff	set_pwm1_raw@raw_value+1,??_set_pwm1_raw+1
  2031  002D3A  90D8               	bcf	status,0,c
  2032  002D3C  321E               	rrcf	??_set_pwm1_raw+1,f,c
  2033  002D3E  321D               	rrcf	??_set_pwm1_raw,f,c
  2034  002D40  90D8               	bcf	status,0,c
  2035  002D42  321E               	rrcf	??_set_pwm1_raw+1,f,c
  2036  002D44  321D               	rrcf	??_set_pwm1_raw,f,c
  2037  002D46  501D               	movf	??_set_pwm1_raw,w,c
  2038  002D48  6EBE               	movwf	4030,c	;volatile
  2039                           
  2040                           ;my_pwm.c: 20: CCP1CONbits.DC1B = raw_value & 0x0003;
  2041  002D4A  C01B  F01D         	movff	set_pwm1_raw@raw_value,??_set_pwm1_raw
  2042  002D4E  0E03               	movlw	3
  2043  002D50  161D               	andwf	??_set_pwm1_raw,f,c
  2044  002D52  3A1D               	swapf	??_set_pwm1_raw,f,c
  2045  002D54  50BD               	movf	4029,w,c	;volatile
  2046  002D56  181D               	xorwf	??_set_pwm1_raw,w,c
  2047  002D58  0BCF               	andlw	-49
  2048  002D5A  181D               	xorwf	??_set_pwm1_raw,w,c
  2049  002D5C  6EBD               	movwf	4029,c	;volatile
  2050  002D5E  0012               	return		;funcret
  2051  002D60                     __end_of_set_pwm1_raw:
  2052                           	opt stack 0
  2053                           tblptru	equ	0xFF8
  2054                           tblptrh	equ	0xFF7
  2055                           tblptrl	equ	0xFF6
  2056                           tablat	equ	0xFF5
  2057                           prodh	equ	0xFF4
  2058                           prodl	equ	0xFF3
  2059                           intcon2	equ	0xFF1
  2060                           postinc0	equ	0xFEE
  2061                           wreg	equ	0xFE8
  2062                           postdec1	equ	0xFE5
  2063                           fsr1l	equ	0xFE1
  2064                           postinc2	equ	0xFDE
  2065                           fsr2h	equ	0xFDA
  2066                           fsr2l	equ	0xFD9
  2067                           status	equ	0xFD8
  2068                           
  2069 ;; *************** function _read_adc_raw_no_lib *****************
  2070 ;; Defined at:
  2071 ;;		line 32 in file "my_adc.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;  channel         1    wreg     unsigned char 
  2074 ;; Auto vars:     Size  Location     Type
  2075 ;;  channel         1   32[COMRAM] unsigned char 
  2076 ;;  raw_value       2   30[COMRAM] int 
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  2   26[COMRAM] int 
  2079 ;; Registers used:
  2080 ;;		wreg, status,2, status,0
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2086 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2087 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2088 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2089 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;Total ram usage:        7 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; Hardware stack levels required when called:    2
  2093 ;; This function calls:
  2094 ;;		Nothing
  2095 ;; This function is called by:
  2096 ;;		_operation
  2097 ;;		_read_adc_voltage
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           	psect	text5
  2102  002CF8                     __ptext5:
  2103                           	opt stack 0
  2104  002CF8                     _read_adc_raw_no_lib:
  2105                           	opt stack 27
  2106                           
  2107                           ;incstack = 0
  2108                           ;read_adc_raw_no_lib@channel stored from wreg
  2109  002CF8  6E21               	movwf	read_adc_raw_no_lib@channel,c
  2110                           
  2111                           ;my_adc.c: 33: int raw_value;
  2112                           ;my_adc.c: 34: ADCON0bits.CHS = channel;
  2113  002CFA  C021  F01D         	movff	read_adc_raw_no_lib@channel,??_read_adc_raw_no_lib
  2114  002CFE  461D               	rlncf	??_read_adc_raw_no_lib,f,c
  2115  002D00  461D               	rlncf	??_read_adc_raw_no_lib,f,c
  2116  002D02  50C2               	movf	4034,w,c	;volatile
  2117  002D04  181D               	xorwf	??_read_adc_raw_no_lib,w,c
  2118  002D06  0BC3               	andlw	-61
  2119  002D08  181D               	xorwf	??_read_adc_raw_no_lib,w,c
  2120  002D0A  6EC2               	movwf	4034,c	;volatile
  2121                           
  2122                           ;my_adc.c: 37: ADCON0bits.GO = 1;
  2123  002D0C  82C2               	bsf	4034,1,c	;volatile
  2124  002D0E  B2C2               	btfsc	4034,1,c	;volatile
  2125  002D10  D7FE               	goto	l237
  2126                           
  2127                           ;my_adc.c: 41: raw_value = ADRESH << 8 | ADRESL;
  2128  002D12  50C3               	movf	4035,w,c	;volatile
  2129  002D14  CFC4 F01D          	movff	4036,??_read_adc_raw_no_lib	;volatile
  2130  002D18  6A1E               	clrf	(??_read_adc_raw_no_lib+1)& (0+255),c
  2131  002D1A  C01D  F01E         	movff	??_read_adc_raw_no_lib,??_read_adc_raw_no_lib+1
  2132  002D1E  6A1D               	clrf	??_read_adc_raw_no_lib,c
  2133  002D20  101D               	iorwf	??_read_adc_raw_no_lib,w,c
  2134  002D22  6E1F               	movwf	read_adc_raw_no_lib@raw_value,c
  2135  002D24  501E               	movf	??_read_adc_raw_no_lib+1,w,c
  2136  002D26  6E20               	movwf	read_adc_raw_no_lib@raw_value+1,c
  2137                           
  2138                           ;my_adc.c: 45: return raw_value;
  2139  002D28  C01F  F01B         	movff	read_adc_raw_no_lib@raw_value,?_read_adc_raw_no_lib
  2140  002D2C  C020  F01C         	movff	read_adc_raw_no_lib@raw_value+1,?_read_adc_raw_no_lib+1
  2141  002D30  0012               	return	
  2142  002D32                     __end_of_read_adc_raw_no_lib:
  2143                           	opt stack 0
  2144                           tblptru	equ	0xFF8
  2145                           tblptrh	equ	0xFF7
  2146                           tblptrl	equ	0xFF6
  2147                           tablat	equ	0xFF5
  2148                           prodh	equ	0xFF4
  2149                           prodl	equ	0xFF3
  2150                           intcon2	equ	0xFF1
  2151                           postinc0	equ	0xFEE
  2152                           wreg	equ	0xFE8
  2153                           postdec1	equ	0xFE5
  2154                           fsr1l	equ	0xFE1
  2155                           postinc2	equ	0xFDE
  2156                           fsr2h	equ	0xFDA
  2157                           fsr2l	equ	0xFD9
  2158                           status	equ	0xFD8
  2159                           
  2160 ;; *************** function ___fldiv *****************
  2161 ;; Defined at:
  2162 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcdiv.c"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;  b               4   46[COMRAM] int 
  2165 ;;  a               4   50[COMRAM] int 
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;  grs             4   65[COMRAM] unsigned long 
  2168 ;;  rem             4   59[COMRAM] unsigned long 
  2169 ;;  new_exp         2   63[COMRAM] int 
  2170 ;;  aexp            1   70[COMRAM] unsigned char 
  2171 ;;  bexp            1   69[COMRAM] unsigned char 
  2172 ;;  sign            1   58[COMRAM] unsigned char 
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  4   46[COMRAM] unsigned char 
  2175 ;; Registers used:
  2176 ;;		wreg, status,2, status,0
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2182 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2183 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2184 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2185 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2186 ;;Total ram usage:       25 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    2
  2189 ;; This function calls:
  2190 ;;		Nothing
  2191 ;; This function is called by:
  2192 ;;		_operation
  2193 ;;		_read_adc_voltage
  2194 ;;		_set_pwm1_percent
  2195 ;;		_set_pwm1_voltage
  2196 ;;		_set_pwm1_general
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           	psect	text6
  2201  0018E4                     __ptext6:
  2202                           	opt stack 0
  2203  0018E4                     ___fldiv:
  2204                           	opt stack 27
  2205                           
  2206                           ;incstack = 0
  2207  0018E4  5032               	movf	___fldiv@b+3,w,c
  2208  0018E6  0B80               	andlw	128
  2209  0018E8  6E3B               	movwf	___fldiv@sign,c
  2210  0018EA  5032               	movf	___fldiv@b+3,w,c
  2211  0018EC  2432               	addwf	___fldiv@b+3,w,c
  2212  0018EE  6E46               	movwf	___fldiv@bexp,c
  2213  0018F0  BE31               	btfsc	___fldiv@b+2,7,c
  2214  0018F2  8046               	bsf	___fldiv@bexp,0,c
  2215  0018F4  5046               	movf	___fldiv@bexp,w,c
  2216  0018F6  B4D8               	btfsc	status,2,c
  2217  0018F8  D00D               	goto	l978
  2218  0018FA  2846               	incf	___fldiv@bexp,w,c
  2219  0018FC  A4D8               	btfss	status,2,c
  2220  0018FE  D008               	goto	l979
  2221  001900  0E00               	movlw	0
  2222  001902  6E2F               	movwf	___fldiv@b,c
  2223  001904  0E00               	movlw	0
  2224  001906  6E30               	movwf	___fldiv@b+1,c
  2225  001908  0E00               	movlw	0
  2226  00190A  6E31               	movwf	___fldiv@b+2,c
  2227  00190C  0E00               	movlw	0
  2228  00190E  6E32               	movwf	___fldiv@b+3,c
  2229  001910                     l979:
  2230  001910  8E31               	bsf	___fldiv@b+2,7,c
  2231  001912  D006               	goto	L1
  2232  001914                     l978:
  2233  001914  0E00               	movlw	0
  2234  001916  6E2F               	movwf	___fldiv@b,c
  2235  001918  0E00               	movlw	0
  2236  00191A  6E30               	movwf	___fldiv@b+1,c
  2237  00191C  0E00               	movlw	0
  2238  00191E  6E31               	movwf	___fldiv@b+2,c
  2239  001920                     L1:
  2240  001920  0E00               	movlw	0
  2241  001922  6E32               	movwf	___fldiv@b+3,c
  2242  001924  5036               	movf	___fldiv@a+3,w,c
  2243  001926  0B80               	andlw	128
  2244  001928  1A3B               	xorwf	___fldiv@sign,f,c
  2245  00192A  5036               	movf	___fldiv@a+3,w,c
  2246  00192C  2436               	addwf	___fldiv@a+3,w,c
  2247  00192E  6E47               	movwf	___fldiv@aexp,c
  2248  001930  BE35               	btfsc	___fldiv@a+2,7,c
  2249  001932  8047               	bsf	___fldiv@aexp,0,c
  2250  001934  5047               	movf	___fldiv@aexp,w,c
  2251  001936  B4D8               	btfsc	status,2,c
  2252  001938  D00D               	goto	l982
  2253  00193A  2847               	incf	___fldiv@aexp,w,c
  2254  00193C  A4D8               	btfss	status,2,c
  2255  00193E  D008               	goto	l983
  2256  001940  0E00               	movlw	0
  2257  001942  6E33               	movwf	___fldiv@a,c
  2258  001944  0E00               	movlw	0
  2259  001946  6E34               	movwf	___fldiv@a+1,c
  2260  001948  0E00               	movlw	0
  2261  00194A  6E35               	movwf	___fldiv@a+2,c
  2262  00194C  0E00               	movlw	0
  2263  00194E  6E36               	movwf	___fldiv@a+3,c
  2264  001950                     l983:
  2265  001950  8E35               	bsf	___fldiv@a+2,7,c
  2266  001952  D006               	goto	L2
  2267  001954                     l982:
  2268  001954  0E00               	movlw	0
  2269  001956  6E33               	movwf	___fldiv@a,c
  2270  001958  0E00               	movlw	0
  2271  00195A  6E34               	movwf	___fldiv@a+1,c
  2272  00195C  0E00               	movlw	0
  2273  00195E  6E35               	movwf	___fldiv@a+2,c
  2274  001960                     L2:
  2275  001960  0E00               	movlw	0
  2276  001962  6E36               	movwf	___fldiv@a+3,c
  2277  001964  5033               	movf	___fldiv@a,w,c
  2278  001966  1034               	iorwf	___fldiv@a+1,w,c
  2279  001968  1035               	iorwf	___fldiv@a+2,w,c
  2280  00196A  1036               	iorwf	___fldiv@a+3,w,c
  2281  00196C  A4D8               	btfss	status,2,c
  2282  00196E  D015               	goto	l985
  2283  001970  0E00               	movlw	0
  2284  001972  6E2F               	movwf	___fldiv@b,c
  2285  001974  0E00               	movlw	0
  2286  001976  6E30               	movwf	___fldiv@b+1,c
  2287  001978  0E00               	movlw	0
  2288  00197A  6E31               	movwf	___fldiv@b+2,c
  2289  00197C  0E00               	movlw	0
  2290  00197E  6E32               	movwf	___fldiv@b+3,c
  2291  001980  0E80               	movlw	128
  2292  001982  1231               	iorwf	___fldiv@b+2,f,c
  2293  001984  0E7F               	movlw	127
  2294  001986  1232               	iorwf	___fldiv@b+3,f,c
  2295  001988  C02F  F02F         	movff	___fldiv@b,?___fldiv
  2296  00198C  C030  F030         	movff	___fldiv@b+1,?___fldiv+1
  2297  001990  C031  F031         	movff	___fldiv@b+2,?___fldiv+2
  2298  001994  C032  F032         	movff	___fldiv@b+3,?___fldiv+3
  2299  001998  0012               	return	
  2300  00199A                     l985:
  2301  00199A  5046               	movf	___fldiv@bexp,w,c
  2302  00199C  A4D8               	btfss	status,2,c
  2303  00199E  D011               	goto	l987
  2304  0019A0  0E00               	movlw	0
  2305  0019A2  6E2F               	movwf	___fldiv@b,c
  2306  0019A4  0E00               	movlw	0
  2307  0019A6  6E30               	movwf	___fldiv@b+1,c
  2308  0019A8  0E00               	movlw	0
  2309  0019AA  6E31               	movwf	___fldiv@b+2,c
  2310  0019AC  0E00               	movlw	0
  2311  0019AE  6E32               	movwf	___fldiv@b+3,c
  2312  0019B0  C02F  F02F         	movff	___fldiv@b,?___fldiv
  2313  0019B4  C030  F030         	movff	___fldiv@b+1,?___fldiv+1
  2314  0019B8  C031  F031         	movff	___fldiv@b+2,?___fldiv+2
  2315  0019BC  C032  F032         	movff	___fldiv@b+3,?___fldiv+3
  2316  0019C0  0012               	return	
  2317  0019C2                     l987:
  2318  0019C2  5047               	movf	___fldiv@aexp,w,c
  2319  0019C4  6E37               	movwf	??___fldiv& (0+255),c
  2320  0019C6  6A38               	clrf	(??___fldiv+1)& (0+255),c
  2321  0019C8  1E37               	comf	??___fldiv,f,c
  2322  0019CA  1E38               	comf	??___fldiv+1,f,c
  2323  0019CC  4A37               	infsnz	??___fldiv,f,c
  2324  0019CE  2A38               	incf	??___fldiv+1,f,c
  2325  0019D0  5046               	movf	___fldiv@bexp,w,c
  2326  0019D2  6E39               	movwf	(??___fldiv+2)& (0+255),c
  2327  0019D4  6A3A               	clrf	(??___fldiv+3)& (0+255),c
  2328  0019D6  5037               	movf	??___fldiv,w,c
  2329  0019D8  2639               	addwf	??___fldiv+2,f,c
  2330  0019DA  5038               	movf	??___fldiv+1,w,c
  2331  0019DC  223A               	addwfc	??___fldiv+3,f,c
  2332  0019DE  0E7F               	movlw	127
  2333  0019E0  2439               	addwf	??___fldiv+2,w,c
  2334  0019E2  6E40               	movwf	___fldiv@new_exp,c
  2335  0019E4  0E00               	movlw	0
  2336  0019E6  203A               	addwfc	??___fldiv+3,w,c
  2337  0019E8  6E41               	movwf	___fldiv@new_exp+1,c
  2338  0019EA  C02F  F03C         	movff	___fldiv@b,___fldiv@rem
  2339  0019EE  C030  F03D         	movff	___fldiv@b+1,___fldiv@rem+1
  2340  0019F2  C031  F03E         	movff	___fldiv@b+2,___fldiv@rem+2
  2341  0019F6  C032  F03F         	movff	___fldiv@b+3,___fldiv@rem+3
  2342  0019FA  0E00               	movlw	0
  2343  0019FC  6E2F               	movwf	___fldiv@b,c
  2344  0019FE  0E00               	movlw	0
  2345  001A00  6E30               	movwf	___fldiv@b+1,c
  2346  001A02  0E00               	movlw	0
  2347  001A04  6E31               	movwf	___fldiv@b+2,c
  2348  001A06  0E00               	movlw	0
  2349  001A08  6E32               	movwf	___fldiv@b+3,c
  2350  001A0A  0E00               	movlw	0
  2351  001A0C  6E42               	movwf	___fldiv@grs,c
  2352  001A0E  0E00               	movlw	0
  2353  001A10  6E43               	movwf	___fldiv@grs+1,c
  2354  001A12  0E00               	movlw	0
  2355  001A14  6E44               	movwf	___fldiv@grs+2,c
  2356  001A16  0E00               	movlw	0
  2357  001A18  6E45               	movwf	___fldiv@grs+3,c
  2358  001A1A  0E00               	movlw	0
  2359  001A1C  6E47               	movwf	___fldiv@aexp,c
  2360  001A1E  D028               	goto	l988
  2361  001A20  5047               	movf	___fldiv@aexp,w,c
  2362  001A22  B4D8               	btfsc	status,2,c
  2363  001A24  D011               	goto	l990
  2364  001A26  90D8               	bcf	status,0,c
  2365  001A28  363C               	rlcf	___fldiv@rem,f,c
  2366  001A2A  363D               	rlcf	___fldiv@rem+1,f,c
  2367  001A2C  363E               	rlcf	___fldiv@rem+2,f,c
  2368  001A2E  363F               	rlcf	___fldiv@rem+3,f,c
  2369  001A30  90D8               	bcf	status,0,c
  2370  001A32  362F               	rlcf	___fldiv@b,f,c
  2371  001A34  3630               	rlcf	___fldiv@b+1,f,c
  2372  001A36  3631               	rlcf	___fldiv@b+2,f,c
  2373  001A38  3632               	rlcf	___fldiv@b+3,f,c
  2374  001A3A  BE45               	btfsc	___fldiv@grs+3,7,c
  2375  001A3C  802F               	bsf	___fldiv@b,0,c
  2376  001A3E  90D8               	bcf	status,0,c
  2377  001A40  3642               	rlcf	___fldiv@grs,f,c
  2378  001A42  3643               	rlcf	___fldiv@grs+1,f,c
  2379  001A44  3644               	rlcf	___fldiv@grs+2,f,c
  2380  001A46  3645               	rlcf	___fldiv@grs+3,f,c
  2381  001A48                     l990:
  2382  001A48  5033               	movf	___fldiv@a,w,c
  2383  001A4A  5C3C               	subwf	___fldiv@rem,w,c
  2384  001A4C  5034               	movf	___fldiv@a+1,w,c
  2385  001A4E  583D               	subwfb	___fldiv@rem+1,w,c
  2386  001A50  5035               	movf	___fldiv@a+2,w,c
  2387  001A52  583E               	subwfb	___fldiv@rem+2,w,c
  2388  001A54  5036               	movf	___fldiv@a+3,w,c
  2389  001A56  583F               	subwfb	___fldiv@rem+3,w,c
  2390  001A58  A0D8               	btfss	status,0,c
  2391  001A5A  D009               	goto	l992
  2392  001A5C  8C45               	bsf	___fldiv@grs+3,6,c
  2393  001A5E  5033               	movf	___fldiv@a,w,c
  2394  001A60  5E3C               	subwf	___fldiv@rem,f,c
  2395  001A62  5034               	movf	___fldiv@a+1,w,c
  2396  001A64  5A3D               	subwfb	___fldiv@rem+1,f,c
  2397  001A66  5035               	movf	___fldiv@a+2,w,c
  2398  001A68  5A3E               	subwfb	___fldiv@rem+2,f,c
  2399  001A6A  5036               	movf	___fldiv@a+3,w,c
  2400  001A6C  5A3F               	subwfb	___fldiv@rem+3,f,c
  2401  001A6E                     l992:
  2402  001A6E  2A47               	incf	___fldiv@aexp,f,c
  2403  001A70                     l988:
  2404  001A70  0E19               	movlw	25
  2405  001A72  6447               	cpfsgt	___fldiv@aexp,c
  2406  001A74  D7D5               	goto	l989
  2407  001A76  503C               	movf	___fldiv@rem,w,c
  2408  001A78  103D               	iorwf	___fldiv@rem+1,w,c
  2409  001A7A  103E               	iorwf	___fldiv@rem+2,w,c
  2410  001A7C  103F               	iorwf	___fldiv@rem+3,w,c
  2411  001A7E  B4D8               	btfsc	status,2,c
  2412  001A80  D011               	goto	l995
  2413  001A82  8042               	bsf	___fldiv@grs,0,c
  2414  001A84  D00F               	goto	l995
  2415  001A86  90D8               	bcf	status,0,c
  2416  001A88  362F               	rlcf	___fldiv@b,f,c
  2417  001A8A  3630               	rlcf	___fldiv@b+1,f,c
  2418  001A8C  3631               	rlcf	___fldiv@b+2,f,c
  2419  001A8E  3632               	rlcf	___fldiv@b+3,f,c
  2420  001A90  BE45               	btfsc	___fldiv@grs+3,7,c
  2421  001A92  802F               	bsf	___fldiv@b,0,c
  2422  001A94  90D8               	bcf	status,0,c
  2423  001A96  3642               	rlcf	___fldiv@grs,f,c
  2424  001A98  3643               	rlcf	___fldiv@grs+1,f,c
  2425  001A9A  3644               	rlcf	___fldiv@grs+2,f,c
  2426  001A9C  3645               	rlcf	___fldiv@grs+3,f,c
  2427  001A9E  0640               	decf	___fldiv@new_exp,f,c
  2428  001AA0  A0D8               	btfss	status,0,c
  2429  001AA2  0641               	decf	___fldiv@new_exp+1,f,c
  2430  001AA4                     l995:
  2431  001AA4  AE31               	btfss	___fldiv@b+2,7,c
  2432  001AA6  D7EF               	goto	l996
  2433  001AA8  0E00               	movlw	0
  2434  001AAA  6E47               	movwf	___fldiv@aexp,c
  2435  001AAC  AE45               	btfss	___fldiv@grs+3,7,c
  2436  001AAE  D016               	goto	l1002
  2437  001AB0  0EFF               	movlw	255
  2438  001AB2  1442               	andwf	___fldiv@grs,w,c
  2439  001AB4  6E37               	movwf	??___fldiv& (0+255),c
  2440  001AB6  0EFF               	movlw	255
  2441  001AB8  1443               	andwf	___fldiv@grs+1,w,c
  2442  001ABA  6E38               	movwf	(??___fldiv+1)& (0+255),c
  2443  001ABC  0EFF               	movlw	255
  2444  001ABE  1444               	andwf	___fldiv@grs+2,w,c
  2445  001AC0  6E39               	movwf	(??___fldiv+2)& (0+255),c
  2446  001AC2  0E7F               	movlw	127
  2447  001AC4  1445               	andwf	___fldiv@grs+3,w,c
  2448  001AC6  6E3A               	movwf	(??___fldiv+3)& (0+255),c
  2449  001AC8  5037               	movf	??___fldiv,w,c
  2450  001ACA  1038               	iorwf	??___fldiv+1,w,c
  2451  001ACC  1039               	iorwf	??___fldiv+2,w,c
  2452  001ACE  103A               	iorwf	??___fldiv+3,w,c
  2453  001AD0  A4D8               	btfss	status,2,c
  2454  001AD2  D002               	goto	u4430
  2455  001AD4  A02F               	btfss	___fldiv@b,0,c
  2456  001AD6  D002               	goto	l1002
  2457  001AD8                     u4430:
  2458  001AD8  0E01               	movlw	1
  2459  001ADA  6E47               	movwf	___fldiv@aexp,c
  2460  001ADC                     l1002:
  2461  001ADC  5047               	movf	___fldiv@aexp,w,c
  2462  001ADE  B4D8               	btfsc	status,2,c
  2463  001AE0  D01F               	goto	l1004
  2464  001AE2  0E01               	movlw	1
  2465  001AE4  262F               	addwf	___fldiv@b,f,c
  2466  001AE6  0E00               	movlw	0
  2467  001AE8  2230               	addwfc	___fldiv@b+1,f,c
  2468  001AEA  2231               	addwfc	___fldiv@b+2,f,c
  2469  001AEC  2232               	addwfc	___fldiv@b+3,f,c
  2470  001AEE  A032               	btfss	___fldiv@b+3,0,c
  2471  001AF0  D017               	goto	l1004
  2472  001AF2  C02F  F037         	movff	___fldiv@b,??___fldiv
  2473  001AF6  C030  F038         	movff	___fldiv@b+1,??___fldiv+1
  2474  001AFA  C031  F039         	movff	___fldiv@b+2,??___fldiv+2
  2475  001AFE  C032  F03A         	movff	___fldiv@b+3,??___fldiv+3
  2476  001B02  343A               	rlcf	??___fldiv+3,w,c
  2477  001B04  323A               	rrcf	??___fldiv+3,f,c
  2478  001B06  3239               	rrcf	??___fldiv+2,f,c
  2479  001B08  3238               	rrcf	??___fldiv+1,f,c
  2480  001B0A  3237               	rrcf	??___fldiv,f,c
  2481  001B0C  C037  F02F         	movff	??___fldiv,___fldiv@b
  2482  001B10  C038  F030         	movff	??___fldiv+1,___fldiv@b+1
  2483  001B14  C039  F031         	movff	??___fldiv+2,___fldiv@b+2
  2484  001B18  C03A  F032         	movff	??___fldiv+3,___fldiv@b+3
  2485  001B1C  4A40               	infsnz	___fldiv@new_exp,f,c
  2486  001B1E  2A41               	incf	___fldiv@new_exp+1,f,c
  2487  001B20                     l1004:
  2488  001B20  BE41               	btfsc	___fldiv@new_exp+1,7,c
  2489  001B22  D010               	goto	l1005
  2490  001B24  5041               	movf	___fldiv@new_exp+1,w,c
  2491  001B26  E103               	bnz	u4460
  2492  001B28  2840               	incf	___fldiv@new_exp,w,c
  2493  001B2A  A0D8               	btfss	status,0,c
  2494  001B2C  D00B               	goto	l1005
  2495  001B2E                     u4460:
  2496  001B2E  0E00               	movlw	0
  2497  001B30  6E41               	movwf	___fldiv@new_exp+1,c
  2498  001B32  6840               	setf	___fldiv@new_exp,c
  2499  001B34  0E00               	movlw	0
  2500  001B36  6E2F               	movwf	___fldiv@b,c
  2501  001B38  0E00               	movlw	0
  2502  001B3A  6E30               	movwf	___fldiv@b+1,c
  2503  001B3C  0E00               	movlw	0
  2504  001B3E  6E31               	movwf	___fldiv@b+2,c
  2505  001B40  0E00               	movlw	0
  2506  001B42  6E32               	movwf	___fldiv@b+3,c
  2507  001B44                     l1005:
  2508  001B44  BE41               	btfsc	___fldiv@new_exp+1,7,c
  2509  001B46  D005               	goto	u4470
  2510  001B48  5041               	movf	___fldiv@new_exp+1,w,c
  2511  001B4A  E111               	bnz	l4138
  2512  001B4C  0440               	decf	___fldiv@new_exp,w,c
  2513  001B4E  B0D8               	btfsc	status,0,c
  2514  001B50  D00E               	goto	l1006
  2515  001B52                     u4470:
  2516  001B52  0E00               	movlw	0
  2517  001B54  6E41               	movwf	___fldiv@new_exp+1,c
  2518  001B56  0E00               	movlw	0
  2519  001B58  6E40               	movwf	___fldiv@new_exp,c
  2520  001B5A  0E00               	movlw	0
  2521  001B5C  6E2F               	movwf	___fldiv@b,c
  2522  001B5E  0E00               	movlw	0
  2523  001B60  6E30               	movwf	___fldiv@b+1,c
  2524  001B62  0E00               	movlw	0
  2525  001B64  6E31               	movwf	___fldiv@b+2,c
  2526  001B66  0E00               	movlw	0
  2527  001B68  6E32               	movwf	___fldiv@b+3,c
  2528  001B6A  0E00               	movlw	0
  2529  001B6C  6E3B               	movwf	___fldiv@sign,c
  2530  001B6E                     l1006:
  2531  001B6E                     l4138:
  2532  001B6E  C040  F046         	movff	___fldiv@new_exp,___fldiv@bexp
  2533  001B72  A046               	btfss	___fldiv@bexp,0,c
  2534  001B74  D002               	goto	l1007
  2535  001B76  8E31               	bsf	___fldiv@b+2,7,c
  2536  001B78  D001               	goto	l1008
  2537  001B7A                     l1007:
  2538  001B7A  9E31               	bcf	___fldiv@b+2,7,c
  2539  001B7C                     l1008:
  2540  001B7C  90D8               	bcf	status,0,c
  2541  001B7E  3046               	rrcf	___fldiv@bexp,w,c
  2542  001B80  6E32               	movwf	___fldiv@b+3,c
  2543  001B82  503B               	movf	___fldiv@sign,w,c
  2544  001B84  1232               	iorwf	___fldiv@b+3,f,c
  2545  001B86  C02F  F02F         	movff	___fldiv@b,?___fldiv
  2546  001B8A  C030  F030         	movff	___fldiv@b+1,?___fldiv+1
  2547  001B8E  C031  F031         	movff	___fldiv@b+2,?___fldiv+2
  2548  001B92  C032  F032         	movff	___fldiv@b+3,?___fldiv+3
  2549  001B96  0012               	return	
  2550  001B98                     __end_of___fldiv:
  2551                           	opt stack 0
  2552                           tblptru	equ	0xFF8
  2553                           tblptrh	equ	0xFF7
  2554                           tblptrl	equ	0xFF6
  2555                           tablat	equ	0xFF5
  2556                           prodh	equ	0xFF4
  2557                           prodl	equ	0xFF3
  2558                           intcon2	equ	0xFF1
  2559                           postinc0	equ	0xFEE
  2560                           wreg	equ	0xFE8
  2561                           postdec1	equ	0xFE5
  2562                           fsr1l	equ	0xFE1
  2563                           postinc2	equ	0xFDE
  2564                           fsr2h	equ	0xFDA
  2565                           fsr2l	equ	0xFD9
  2566                           status	equ	0xFD8
  2567                           
  2568 ;; *************** function _lcd_init *****************
  2569 ;; Defined at:
  2570 ;;		line 56 in file "lcd_x8.c"
  2571 ;; Parameters:    Size  Location     Type
  2572 ;;		None
  2573 ;; Auto vars:     Size  Location     Type
  2574 ;;  i               1   36[COMRAM] unsigned char 
  2575 ;; Return value:  Size  Location     Type
  2576 ;;                  1    wreg      void 
  2577 ;; Registers used:
  2578 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2579 ;; Tracked objects:
  2580 ;;		On entry : 0/0
  2581 ;;		On exit  : 0/0
  2582 ;;		Unchanged: 0/0
  2583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2585 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2587 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2588 ;;Total ram usage:        1 bytes
  2589 ;; Hardware stack levels used:    1
  2590 ;; Hardware stack levels required when called:    5
  2591 ;; This function calls:
  2592 ;;		_delay_ms
  2593 ;;		_lcd_send_byte
  2594 ;;		_lcd_send_nibble
  2595 ;; This function is called by:
  2596 ;;		_main
  2597 ;; This function uses a non-reentrant model
  2598 ;;
  2599                           
  2600                           	psect	text7
  2601  002A82                     __ptext7:
  2602                           	opt stack 0
  2603  002A82                     _lcd_init:
  2604                           	opt stack 25
  2605                           
  2606                           ;lcd_x8.c: 58: unsigned char i;
  2607                           ;lcd_x8.c: 61: PORTEbits.RE2 = 0;
  2608                           
  2609                           ;incstack = 0
  2610  002A82  9484               	bcf	3972,2,c	;volatile
  2611                           
  2612                           ;lcd_x8.c: 63: PORTEbits.RE1 = 0;
  2613  002A84  9284               	bcf	3972,1,c	;volatile
  2614                           
  2615                           ;lcd_x8.c: 65: delay_ms(25);
  2616  002A86  0E00               	movlw	0
  2617  002A88  6E1C               	movwf	delay_ms@n+1,c
  2618  002A8A  0E19               	movlw	25
  2619  002A8C  6E1B               	movwf	delay_ms@n,c
  2620  002A8E  ECF1  F016         	call	_delay_ms	;wreg free
  2621                           
  2622                           ;lcd_x8.c: 66: for (i = 1; i <= 3; ++i) {
  2623  002A92  0E01               	movlw	1
  2624  002A94  6E25               	movwf	lcd_init@i,c
  2625  002A96                     l4330:
  2626  002A96  0E03               	movlw	3
  2627  002A98  6425               	cpfsgt	lcd_init@i,c
  2628  002A9A  D001               	goto	l186
  2629  002A9C  D00B               	goto	u4560
  2630  002A9E                     l186:
  2631                           
  2632                           ;lcd_x8.c: 67: lcd_send_nibble(3);
  2633  002A9E  0E03               	movlw	3
  2634  002AA0  EC04  F017         	call	_lcd_send_nibble
  2635                           
  2636                           ;lcd_x8.c: 69: delay_ms(6);
  2637  002AA4  0E00               	movlw	0
  2638  002AA6  6E1C               	movwf	delay_ms@n+1,c
  2639  002AA8  0E06               	movlw	6
  2640  002AAA  6E1B               	movwf	delay_ms@n,c
  2641  002AAC  ECF1  F016         	call	_delay_ms	;wreg free
  2642  002AB0  2A25               	incf	lcd_init@i,f,c
  2643  002AB2  D7F1               	goto	l4330
  2644  002AB4                     u4560:
  2645                           
  2646                           ;lcd_x8.c: 70: }
  2647                           ;lcd_x8.c: 72: lcd_send_nibble(2);
  2648  002AB4  0E02               	movlw	2
  2649  002AB6  EC04  F017         	call	_lcd_send_nibble
  2650                           
  2651                           ;lcd_x8.c: 74: for (i = 0; i <= 3; ++i)
  2652  002ABA  0E00               	movlw	0
  2653  002ABC  6E25               	movwf	lcd_init@i,c
  2654  002ABE                     l4344:
  2655  002ABE  0E03               	movlw	3
  2656  002AC0  6425               	cpfsgt	lcd_init@i,c
  2657  002AC2  D001               	goto	l188
  2658  002AC4  0012               	return	
  2659  002AC6                     l188:
  2660                           
  2661                           ;lcd_x8.c: 75: lcd_send_byte(0, LCD_INIT_STRING[i]);
  2662  002AC6  5025               	movf	lcd_init@i,w,c
  2663  002AC8  0D01               	mullw	1
  2664  002ACA  0E60               	movlw	low _LCD_INIT_STRING
  2665  002ACC  24F3               	addwf	prodl,w,c
  2666  002ACE  6ED9               	movwf	fsr2l,c
  2667  002AD0  0E00               	movlw	high _LCD_INIT_STRING
  2668  002AD2  20F4               	addwfc	prodh,w,c
  2669  002AD4  6EDA               	movwf	fsr2h,c
  2670  002AD6  50DF               	movf	indf2,w,c
  2671  002AD8  6E23               	movwf	lcd_send_byte@n,c
  2672  002ADA  0E00               	movlw	0
  2673  002ADC  EC15  F016         	call	_lcd_send_byte
  2674  002AE0  2A25               	incf	lcd_init@i,f,c
  2675  002AE2  D7ED               	goto	l4344
  2676  002AE4                     __end_of_lcd_init:
  2677                           	opt stack 0
  2678                           tblptru	equ	0xFF8
  2679                           tblptrh	equ	0xFF7
  2680                           tblptrl	equ	0xFF6
  2681                           tablat	equ	0xFF5
  2682                           prodh	equ	0xFF4
  2683                           prodl	equ	0xFF3
  2684                           intcon2	equ	0xFF1
  2685                           postinc0	equ	0xFEE
  2686                           wreg	equ	0xFE8
  2687                           postdec1	equ	0xFE5
  2688                           fsr1l	equ	0xFE1
  2689                           indf2	equ	0xFDF
  2690                           postinc2	equ	0xFDE
  2691                           fsr2h	equ	0xFDA
  2692                           fsr2l	equ	0xFD9
  2693                           status	equ	0xFD8
  2694                           
  2695 ;; *************** function _init_pwm1 *****************
  2696 ;; Defined at:
  2697 ;;		line 5 in file "my_pwm.c"
  2698 ;; Parameters:    Size  Location     Type
  2699 ;;		None
  2700 ;; Auto vars:     Size  Location     Type
  2701 ;;		None
  2702 ;; Return value:  Size  Location     Type
  2703 ;;                  1    wreg      void 
  2704 ;; Registers used:
  2705 ;;		wreg, status,2
  2706 ;; Tracked objects:
  2707 ;;		On entry : 0/0
  2708 ;;		On exit  : 0/0
  2709 ;;		Unchanged: 0/0
  2710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2715 ;;Total ram usage:        0 bytes
  2716 ;; Hardware stack levels used:    1
  2717 ;; Hardware stack levels required when called:    2
  2718 ;; This function calls:
  2719 ;;		Nothing
  2720 ;; This function is called by:
  2721 ;;		_main
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           	psect	text8
  2726  002E66                     __ptext8:
  2727                           	opt stack 0
  2728  002E66                     _init_pwm1:
  2729                           	opt stack 28
  2730                           
  2731                           ;my_pwm.c: 9: PR2 = 255;
  2732                           
  2733                           ;incstack = 0
  2734  002E66  68CB               	setf	4043,c	;volatile
  2735                           
  2736                           ;my_pwm.c: 10: T2CON = 0;
  2737  002E68  0E00               	movlw	0
  2738  002E6A  6ECA               	movwf	4042,c	;volatile
  2739                           
  2740                           ;my_pwm.c: 11: T2CONbits.T2CKPS = 0b10;
  2741  002E6C  50CA               	movf	4042,w,c	;volatile
  2742  002E6E  0BFC               	andlw	-4
  2743  002E70  0902               	iorlw	2
  2744  002E72  6ECA               	movwf	4042,c	;volatile
  2745                           
  2746                           ;my_pwm.c: 12: CCP1CON = 0x0C;
  2747  002E74  0E0C               	movlw	12
  2748  002E76  6EBD               	movwf	4029,c	;volatile
  2749                           
  2750                           ;my_pwm.c: 14: T2CONbits.TMR2ON = 1;
  2751  002E78  84CA               	bsf	4042,2,c	;volatile
  2752                           
  2753                           ;my_pwm.c: 15: TRISCbits.RC2 =0;
  2754  002E7A  9494               	bcf	3988,2,c	;volatile
  2755  002E7C  0012               	return		;funcret
  2756  002E7E                     __end_of_init_pwm1:
  2757                           	opt stack 0
  2758                           tblptru	equ	0xFF8
  2759                           tblptrh	equ	0xFF7
  2760                           tblptrl	equ	0xFF6
  2761                           tablat	equ	0xFF5
  2762                           prodh	equ	0xFF4
  2763                           prodl	equ	0xFF3
  2764                           intcon2	equ	0xFF1
  2765                           postinc0	equ	0xFEE
  2766                           wreg	equ	0xFE8
  2767                           postdec1	equ	0xFE5
  2768                           fsr1l	equ	0xFE1
  2769                           indf2	equ	0xFDF
  2770                           postinc2	equ	0xFDE
  2771                           fsr2h	equ	0xFDA
  2772                           fsr2l	equ	0xFD9
  2773                           status	equ	0xFD8
  2774                           
  2775 ;; *************** function _init_adc_no_lib *****************
  2776 ;; Defined at:
  2777 ;;		line 11 in file "my_adc.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;		None
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;		None
  2782 ;; Return value:  Size  Location     Type
  2783 ;;                  1    wreg      void 
  2784 ;; Registers used:
  2785 ;;		wreg, status,2
  2786 ;; Tracked objects:
  2787 ;;		On entry : 0/0
  2788 ;;		On exit  : 0/0
  2789 ;;		Unchanged: 0/0
  2790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2795 ;;Total ram usage:        0 bytes
  2796 ;; Hardware stack levels used:    1
  2797 ;; Hardware stack levels required when called:    2
  2798 ;; This function calls:
  2799 ;;		Nothing
  2800 ;; This function is called by:
  2801 ;;		_main
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text9
  2806  002E7E                     __ptext9:
  2807                           	opt stack 0
  2808  002E7E                     _init_adc_no_lib:
  2809                           	opt stack 28
  2810                           
  2811                           ;my_adc.c: 14: ADCON0 = 0;
  2812                           
  2813                           ;incstack = 0
  2814  002E7E  0E00               	movlw	0
  2815  002E80  6EC2               	movwf	4034,c	;volatile
  2816                           
  2817                           ;my_adc.c: 15: ADCON0bits.ADON = 1;
  2818  002E82  80C2               	bsf	4034,0,c	;volatile
  2819                           
  2820                           ;my_adc.c: 18: ADCON2 = 0b10001001;
  2821  002E84  0E89               	movlw	137
  2822  002E86  6EC0               	movwf	4032,c	;volatile
  2823  002E88  0012               	return		;funcret
  2824  002E8A                     __end_of_init_adc_no_lib:
  2825                           	opt stack 0
  2826                           tblptru	equ	0xFF8
  2827                           tblptrh	equ	0xFF7
  2828                           tblptrl	equ	0xFF6
  2829                           tablat	equ	0xFF5
  2830                           prodh	equ	0xFF4
  2831                           prodl	equ	0xFF3
  2832                           intcon2	equ	0xFF1
  2833                           postinc0	equ	0xFEE
  2834                           wreg	equ	0xFE8
  2835                           postdec1	equ	0xFE5
  2836                           fsr1l	equ	0xFE1
  2837                           indf2	equ	0xFDF
  2838                           postinc2	equ	0xFDE
  2839                           fsr2h	equ	0xFDA
  2840                           fsr2l	equ	0xFD9
  2841                           status	equ	0xFD8
  2842                           
  2843 ;; *************** function _initInterrupts *****************
  2844 ;; Defined at:
  2845 ;;		line 114 in file "pwm_asl.c"
  2846 ;; Parameters:    Size  Location     Type
  2847 ;;		None
  2848 ;; Auto vars:     Size  Location     Type
  2849 ;;		None
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  1    wreg      void 
  2852 ;; Registers used:
  2853 ;;		wreg, status,2
  2854 ;; Tracked objects:
  2855 ;;		On entry : 0/0
  2856 ;;		On exit  : 0/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2863 ;;Total ram usage:        0 bytes
  2864 ;; Hardware stack levels used:    1
  2865 ;; Hardware stack levels required when called:    2
  2866 ;; This function calls:
  2867 ;;		Nothing
  2868 ;; This function is called by:
  2869 ;;		_main
  2870 ;; This function uses a non-reentrant model
  2871 ;;
  2872                           
  2873                           	psect	text10
  2874  002C72                     __ptext10:
  2875                           	opt stack 0
  2876  002C72                     _initInterrupts:
  2877                           	opt stack 28
  2878                           
  2879                           ;pwm_asl.c: 115: INTCON = 0;
  2880                           
  2881                           ;incstack = 0
  2882  002C72  0E00               	movlw	0
  2883  002C74  6EF2               	movwf	intcon,c	;volatile
  2884                           
  2885                           ;pwm_asl.c: 116: RCONbits.IPEN = 0;
  2886  002C76  9ED0               	bcf	4048,7,c	;volatile
  2887                           
  2888                           ;pwm_asl.c: 117: CCP2CON = 0x09;
  2889  002C78  0E09               	movlw	9
  2890  002C7A  6EBA               	movwf	4026,c	;volatile
  2891                           
  2892                           ;pwm_asl.c: 120: INTCONbits.INT0IF = 0;
  2893  002C7C  92F2               	bcf	intcon,1,c	;volatile
  2894                           
  2895                           ;pwm_asl.c: 121: INTCON3bits.INT2IF = 0;
  2896  002C7E  92F0               	bcf	intcon3,1,c	;volatile
  2897                           
  2898                           ;pwm_asl.c: 122: PIR2bits.TMR3IF = 0;
  2899  002C80  92A1               	bcf	4001,1,c	;volatile
  2900                           
  2901                           ;pwm_asl.c: 125: INTCONbits.INT0IE = 1;
  2902  002C82  88F2               	bsf	intcon,4,c	;volatile
  2903                           
  2904                           ;pwm_asl.c: 126: INTCON3bits.INT2IE = 1;
  2905  002C84  88F0               	bsf	intcon3,4,c	;volatile
  2906                           
  2907                           ;pwm_asl.c: 127: T3CON = 0;
  2908  002C86  0E00               	movlw	0
  2909  002C88  6EB1               	movwf	4017,c	;volatile
  2910                           
  2911                           ;pwm_asl.c: 128: T3CONbits.TMR3ON = 1;
  2912  002C8A  80B1               	bsf	4017,0,c	;volatile
  2913                           
  2914                           ;pwm_asl.c: 129: INTCON2 = 0;
  2915  002C8C  0E00               	movlw	0
  2916  002C8E  6EF1               	movwf	intcon2,c	;volatile
  2917                           
  2918                           ;pwm_asl.c: 130: INTCON2bits.INTEDG2 = 1;
  2919  002C90  88F1               	bsf	intcon2,4,c	;volatile
  2920                           
  2921                           ;pwm_asl.c: 131: INTCON2bits.INTEDG0= 1;
  2922  002C92  8CF1               	bsf	intcon2,6,c	;volatile
  2923                           
  2924                           ;pwm_asl.c: 132: PIE1 = 0;
  2925  002C94  0E00               	movlw	0
  2926  002C96  6E9D               	movwf	3997,c	;volatile
  2927                           
  2928                           ;pwm_asl.c: 133: PIR1 = 0;
  2929  002C98  0E00               	movlw	0
  2930  002C9A  6E9E               	movwf	3998,c	;volatile
  2931                           
  2932                           ;pwm_asl.c: 134: IPR1 = 0;
  2933  002C9C  0E00               	movlw	0
  2934  002C9E  6E9F               	movwf	3999,c	;volatile
  2935                           
  2936                           ;pwm_asl.c: 135: PIE2 = 0;
  2937  002CA0  0E00               	movlw	0
  2938  002CA2  6EA0               	movwf	4000,c	;volatile
  2939                           
  2940                           ;pwm_asl.c: 136: PIE2 = 0;
  2941  002CA4  0E00               	movlw	0
  2942  002CA6  6EA0               	movwf	4000,c	;volatile
  2943                           
  2944                           ;pwm_asl.c: 137: PIR2 = 0;
  2945  002CA8  0E00               	movlw	0
  2946  002CAA  6EA1               	movwf	4001,c	;volatile
  2947                           
  2948                           ;pwm_asl.c: 138: IPR2 = 0;
  2949  002CAC  0E00               	movlw	0
  2950  002CAE  6EA2               	movwf	4002,c	;volatile
  2951                           
  2952                           ;pwm_asl.c: 139: PIE2bits.CCP2IE = 1;
  2953  002CB0  80A0               	bsf	4000,0,c	;volatile
  2954                           
  2955                           ;pwm_asl.c: 140: INTCONbits.GIE = 1;
  2956  002CB2  8EF2               	bsf	intcon,7,c	;volatile
  2957  002CB4  0012               	return		;funcret
  2958  002CB6                     __end_of_initInterrupts:
  2959                           	opt stack 0
  2960                           tblptru	equ	0xFF8
  2961                           tblptrh	equ	0xFF7
  2962                           tblptrl	equ	0xFF6
  2963                           tablat	equ	0xFF5
  2964                           prodh	equ	0xFF4
  2965                           prodl	equ	0xFF3
  2966                           intcon	equ	0xFF2
  2967                           intcon2	equ	0xFF1
  2968                           intcon3	equ	0xFF0
  2969                           postinc0	equ	0xFEE
  2970                           wreg	equ	0xFE8
  2971                           postdec1	equ	0xFE5
  2972                           fsr1l	equ	0xFE1
  2973                           indf2	equ	0xFDF
  2974                           postinc2	equ	0xFDE
  2975                           fsr2h	equ	0xFDA
  2976                           fsr2l	equ	0xFD9
  2977                           status	equ	0xFD8
  2978                           
  2979 ;; *************** function _display *****************
  2980 ;; Defined at:
  2981 ;;		line 236 in file "pwm_asl.c"
  2982 ;; Parameters:    Size  Location     Type
  2983 ;;		None
  2984 ;; Auto vars:     Size  Location     Type
  2985 ;;  LCD            64   64[BANK1 ] unsigned char [64]
  2986 ;;  LCDP           64    0[BANK1 ] unsigned char [64]
  2987 ;;  H               1  129[BANK1 ] unsigned char 
  2988 ;;  C               1  128[BANK1 ] unsigned char 
  2989 ;; Return value:  Size  Location     Type
  2990 ;;                  1    wreg      void 
  2991 ;; Registers used:
  2992 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2993 ;; Tracked objects:
  2994 ;;		On entry : 0/0
  2995 ;;		On exit  : 0/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;      Locals:         0       0     130       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;      Totals:         0       0     130       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3002 ;;Total ram usage:      130 bytes
  3003 ;; Hardware stack levels used:    1
  3004 ;; Hardware stack levels required when called:    8
  3005 ;; This function calls:
  3006 ;;		_lcd_gotoxy
  3007 ;;		_lcd_putc
  3008 ;;		_lcd_puts
  3009 ;;		_sprintf
  3010 ;; This function is called by:
  3011 ;;		_main
  3012 ;; This function uses a non-reentrant model
  3013 ;;
  3014                           
  3015                           	psect	text11
  3016  001E2A                     __ptext11:
  3017                           	opt stack 0
  3018  001E2A                     _display:
  3019                           	opt stack 22
  3020                           
  3021                           ;pwm_asl.c: 237: char LCD[64];
  3022                           ;pwm_asl.c: 238: char LCDP[64];
  3023                           ;pwm_asl.c: 239: unsigned char C, H;
  3024                           ;pwm_asl.c: 240: switch(mode) {
  3025                           
  3026                           ;incstack = 0
  3027  001E2A  D03C               	goto	l139
  3028  001E2C                     
  3029                           ;pwm_asl.c: 242: sprintf(LCDP, "OFF                 ");
  3030  001E2C  0E00               	movlw	low display@LCDP
  3031  001E2E  0100               	movlb	0	; () banked
  3032  001E30  6FB6               	movwf	sprintf@sp& (0+255),b
  3033  001E32  0E01               	movlw	high display@LCDP
  3034  001E34  6FB7               	movwf	(sprintf@sp+1)& (0+255),b
  3035  001E36  0E7B               	movlw	low STR_1
  3036  001E38  6FB8               	movwf	sprintf@f& (0+255),b
  3037  001E3A  0EFF               	movlw	high STR_1
  3038  001E3C  6FB9               	movwf	(sprintf@f+1)& (0+255),b
  3039  001E3E  EC09  F000         	call	_sprintf	;wreg free
  3040  001E42                     l5084:
  3041                           
  3042                           ;pwm_asl.c: 243: H = 'N';
  3043  001E42  0E4E               	movlw	78
  3044  001E44  D02C               	goto	L5
  3045  001E46                     
  3046                           ;pwm_asl.c: 248: sprintf(LCDP, "Cool                ");
  3047                           
  3048                           ; BSR set to: 1
  3049  001E46  0E00               	movlw	low display@LCDP
  3050  001E48  0100               	movlb	0	; () banked
  3051  001E4A  6FB6               	movwf	sprintf@sp& (0+255),b
  3052  001E4C  0E01               	movlw	high display@LCDP
  3053  001E4E  6FB7               	movwf	(sprintf@sp+1)& (0+255),b
  3054  001E50  0E90               	movlw	low STR_2
  3055  001E52  6FB8               	movwf	sprintf@f& (0+255),b
  3056  001E54  0EFF               	movlw	high STR_2
  3057  001E56  6FB9               	movwf	(sprintf@f+1)& (0+255),b
  3058  001E58  EC09  F000         	call	_sprintf	;wreg free
  3059                           
  3060                           ;pwm_asl.c: 249: H = 'N';
  3061  001E5C  0E4E               	movlw	78
  3062  001E5E  0101               	movlb	1	; () banked
  3063  001E60  6F81               	movwf	display@H& (0+255),b
  3064                           
  3065                           ; BSR set to: 1
  3066                           ;pwm_asl.c: 250: C = 'Y';
  3067  001E62  0E59               	movlw	89
  3068  001E64  D00E               	goto	L4
  3069  001E66                     
  3070                           ;pwm_asl.c: 254: sprintf(LCDP, "Heat                ");
  3071                           
  3072                           ; BSR set to: 1
  3073  001E66  0E00               	movlw	low display@LCDP
  3074  001E68  0100               	movlb	0	; () banked
  3075  001E6A  6FB6               	movwf	sprintf@sp& (0+255),b
  3076  001E6C  0E01               	movlw	high display@LCDP
  3077  001E6E  6FB7               	movwf	(sprintf@sp+1)& (0+255),b
  3078  001E70  0EA5               	movlw	low STR_3
  3079  001E72  6FB8               	movwf	sprintf@f& (0+255),b
  3080  001E74  0EFF               	movlw	high STR_3
  3081  001E76  6FB9               	movwf	(sprintf@f+1)& (0+255),b
  3082  001E78  EC09  F000         	call	_sprintf	;wreg free
  3083                           
  3084                           ;pwm_asl.c: 255: H = 'Y';
  3085  001E7C  0E59               	movlw	89
  3086  001E7E  D00F               	goto	L5
  3087  001E80                     l5098:
  3088                           
  3089                           ; BSR set to: 1
  3090                           ;pwm_asl.c: 256: C = 'N';
  3091  001E80  0E4E               	movlw	78
  3092  001E82                     L4:
  3093  001E82  6F80               	movwf	display@C& (0+255),b
  3094                           
  3095                           ;pwm_asl.c: 257: break;
  3096  001E84  D01C               	goto	l141
  3097  001E86                     
  3098                           ;pwm_asl.c: 260: sprintf(LCDP, "Auto Cool         ");
  3099                           
  3100                           ; BSR set to: 1
  3101  001E86  0E00               	movlw	low display@LCDP
  3102  001E88  0100               	movlb	0	; () banked
  3103  001E8A  6FB6               	movwf	sprintf@sp& (0+255),b
  3104  001E8C  0E01               	movlw	high display@LCDP
  3105  001E8E  6FB7               	movwf	(sprintf@sp+1)& (0+255),b
  3106  001E90  0EBA               	movlw	low STR_4
  3107  001E92  6FB8               	movwf	sprintf@f& (0+255),b
  3108  001E94  0EFF               	movlw	high STR_4
  3109  001E96  6FB9               	movwf	(sprintf@f+1)& (0+255),b
  3110  001E98  EC09  F000         	call	_sprintf	;wreg free
  3111  001E9C  D7D2               	goto	l5084
  3112  001E9E                     L5:
  3113  001E9E  0101               	movlb	1	; () banked
  3114  001EA0  6F81               	movwf	display@H& (0+255),b
  3115  001EA2  D7EE               	goto	l5098
  3116  001EA4                     l139:
  3117                           
  3118                           ; BSR set to: 1
  3119  001EA4  505E               	movf	_mode,w,c
  3120                           
  3121                           ; Switch size 1, requested type "space"
  3122                           ; Number of cases is 4, Range of values is 0 to 3
  3123                           ; switch strategies available:
  3124                           ; Name         Instructions Cycles
  3125                           ; simple_byte           13     7 (average)
  3126                           ;	Chosen strategy is simple_byte
  3127  001EA6  0A00               	xorlw	0	; case 0
  3128  001EA8  B4D8               	btfsc	status,2,c
  3129  001EAA  D7C0               	goto	l140
  3130  001EAC  0A01               	xorlw	1	; case 1
  3131  001EAE  B4D8               	btfsc	status,2,c
  3132  001EB0  D7CA               	goto	l142
  3133  001EB2  0A03               	xorlw	3	; case 2
  3134  001EB4  B4D8               	btfsc	status,2,c
  3135  001EB6  D7D7               	goto	l143
  3136  001EB8  0A01               	xorlw	1	; case 3
  3137  001EBA  B4D8               	btfsc	status,2,c
  3138  001EBC  D7E4               	goto	l144
  3139  001EBE                     l141:
  3140                           
  3141                           ;pwm_asl.c: 267: lcd_gotoxy(1, 1);
  3142  001EBE  0E01               	movlw	1
  3143  001EC0  6E25               	movwf	lcd_gotoxy@y,c
  3144  001EC2  0E01               	movlw	1
  3145  001EC4  EC5B  F016         	call	_lcd_gotoxy
  3146                           
  3147                           ;pwm_asl.c: 268: sprintf(LCD, "RT: %4.1fC", temp);
  3148  001EC8  0E40               	movlw	low display@LCD
  3149  001ECA  0100               	movlb	0	; () banked
  3150  001ECC  6FB6               	movwf	sprintf@sp& (0+255),b
  3151  001ECE  0E01               	movlw	high display@LCD
  3152  001ED0  6FB7               	movwf	(sprintf@sp+1)& (0+255),b
  3153  001ED2  0EE5               	movlw	low STR_5
  3154  001ED4  6FB8               	movwf	sprintf@f& (0+255),b
  3155  001ED6  0EFF               	movlw	high STR_5
  3156  001ED8  6FB9               	movwf	(sprintf@f+1)& (0+255),b
  3157  001EDA  C0F6  F0BA         	movff	_temp,?_sprintf+4
  3158  001EDE  C0F7  F0BB         	movff	_temp+1,?_sprintf+5
  3159  001EE2  C0F8  F0BC         	movff	_temp+2,?_sprintf+6
  3160  001EE6  C0F9  F0BD         	movff	_temp+3,?_sprintf+7
  3161  001EEA  EC09  F000         	call	_sprintf	;wreg free
  3162                           
  3163                           ;pwm_asl.c: 269: lcd_puts(LCD);
  3164  001EEE  0E40               	movlw	low display@LCD
  3165  001EF0  6E29               	movwf	lcd_puts@s,c
  3166  001EF2  0E01               	movlw	high display@LCD
  3167  001EF4  6E2A               	movwf	lcd_puts@s+1,c
  3168  001EF6  EC72  F015         	call	_lcd_puts	;wreg free
  3169                           
  3170                           ;pwm_asl.c: 271: lcd_gotoxy(14, 1);
  3171  001EFA  0E01               	movlw	1
  3172  001EFC  6E25               	movwf	lcd_gotoxy@y,c
  3173  001EFE  0E0E               	movlw	14
  3174  001F00  EC5B  F016         	call	_lcd_gotoxy
  3175                           
  3176                           ;pwm_asl.c: 272: lcd_puts("H C");
  3177  001F04  0EFB               	movlw	low STR_6
  3178  001F06  6E29               	movwf	lcd_puts@s,c
  3179  001F08  0EFF               	movlw	high STR_6
  3180  001F0A  6E2A               	movwf	lcd_puts@s+1,c
  3181  001F0C  EC72  F015         	call	_lcd_puts	;wreg free
  3182                           
  3183                           ;pwm_asl.c: 274: lcd_gotoxy(1, 2);
  3184  001F10  0E02               	movlw	2
  3185  001F12  6E25               	movwf	lcd_gotoxy@y,c
  3186  001F14  0E01               	movlw	1
  3187  001F16  EC5B  F016         	call	_lcd_gotoxy
  3188                           
  3189                           ;pwm_asl.c: 275: sprintf(LCD, "SP: %4.1fC ", sp);
  3190  001F1A  0E40               	movlw	low display@LCD
  3191  001F1C  0100               	movlb	0	; () banked
  3192  001F1E  6FB6               	movwf	sprintf@sp& (0+255),b
  3193  001F20  0E01               	movlw	high display@LCD
  3194  001F22  6FB7               	movwf	(sprintf@sp+1)& (0+255),b
  3195  001F24  0ECD               	movlw	low STR_7
  3196  001F26  6FB8               	movwf	sprintf@f& (0+255),b
  3197  001F28  0EFF               	movlw	high STR_7
  3198  001F2A  6FB9               	movwf	(sprintf@f+1)& (0+255),b
  3199  001F2C  C0F2  F0BA         	movff	_sp,?_sprintf+4
  3200  001F30  C0F3  F0BB         	movff	_sp+1,?_sprintf+5
  3201  001F34  C0F4  F0BC         	movff	_sp+2,?_sprintf+6
  3202  001F38  C0F5  F0BD         	movff	_sp+3,?_sprintf+7
  3203  001F3C  EC09  F000         	call	_sprintf	;wreg free
  3204                           
  3205                           ;pwm_asl.c: 276: lcd_puts(LCD);
  3206  001F40  0E40               	movlw	low display@LCD
  3207  001F42  6E29               	movwf	lcd_puts@s,c
  3208  001F44  0E01               	movlw	high display@LCD
  3209  001F46  6E2A               	movwf	lcd_puts@s+1,c
  3210  001F48  EC72  F015         	call	_lcd_puts	;wreg free
  3211                           
  3212                           ;pwm_asl.c: 278: lcd_gotoxy(14, 2);
  3213  001F4C  0E02               	movlw	2
  3214  001F4E  6E25               	movwf	lcd_gotoxy@y,c
  3215  001F50  0E0E               	movlw	14
  3216  001F52  EC5B  F016         	call	_lcd_gotoxy
  3217                           
  3218                           ;pwm_asl.c: 279: lcd_putc(H);
  3219  001F56  0101               	movlb	1	; () banked
  3220  001F58  5181               	movf	display@H& (0+255),w,b
  3221  001F5A  EC9D  F015         	call	_lcd_putc
  3222                           
  3223                           ;pwm_asl.c: 280: lcd_gotoxy(16, 2);
  3224  001F5E  0E02               	movlw	2
  3225  001F60  6E25               	movwf	lcd_gotoxy@y,c
  3226  001F62  0E10               	movlw	16
  3227  001F64  EC5B  F016         	call	_lcd_gotoxy
  3228                           
  3229                           ;pwm_asl.c: 281: lcd_putc(C);
  3230  001F68  0101               	movlb	1	; () banked
  3231  001F6A  5180               	movf	display@C& (0+255),w,b
  3232  001F6C  EC9D  F015         	call	_lcd_putc
  3233                           
  3234                           ;pwm_asl.c: 283: lcd_gotoxy(1, 3);
  3235  001F70  0E03               	movlw	3
  3236  001F72  6E25               	movwf	lcd_gotoxy@y,c
  3237  001F74  0E01               	movlw	1
  3238  001F76  EC5B  F016         	call	_lcd_gotoxy
  3239                           
  3240                           ;pwm_asl.c: 284: sprintf(LCD, "HS: %d", HS);
  3241  001F7A  0E40               	movlw	low display@LCD
  3242  001F7C  0100               	movlb	0	; () banked
  3243  001F7E  6FB6               	movwf	sprintf@sp& (0+255),b
  3244  001F80  0E01               	movlw	high display@LCD
  3245  001F82  6FB7               	movwf	(sprintf@sp+1)& (0+255),b
  3246  001F84  0EF0               	movlw	low STR_8
  3247  001F86  6FB8               	movwf	sprintf@f& (0+255),b
  3248  001F88  0EFF               	movlw	high STR_8
  3249  001F8A  6FB9               	movwf	(sprintf@f+1)& (0+255),b
  3250  001F8C  C05F  F0BA         	movff	_HS,?_sprintf+4
  3251  001F90  6BBB               	clrf	(?_sprintf+5)& (0+255),b
  3252  001F92  EC09  F000         	call	_sprintf	;wreg free
  3253                           
  3254                           ;pwm_asl.c: 285: lcd_puts(LCD);
  3255  001F96  0E40               	movlw	low display@LCD
  3256  001F98  6E29               	movwf	lcd_puts@s,c
  3257  001F9A  0E01               	movlw	high display@LCD
  3258  001F9C  6E2A               	movwf	lcd_puts@s+1,c
  3259  001F9E  EC72  F015         	call	_lcd_puts	;wreg free
  3260                           
  3261                           ;pwm_asl.c: 287: lcd_gotoxy(8, 3);
  3262  001FA2  0E03               	movlw	3
  3263  001FA4  6E25               	movwf	lcd_gotoxy@y,c
  3264  001FA6  0E08               	movlw	8
  3265  001FA8  EC5B  F016         	call	_lcd_gotoxy
  3266                           
  3267                           ;pwm_asl.c: 288: sprintf(LCD, "HC: %4.1f%%", HC);
  3268  001FAC  0E40               	movlw	low display@LCD
  3269  001FAE  0100               	movlb	0	; () banked
  3270  001FB0  6FB6               	movwf	sprintf@sp& (0+255),b
  3271  001FB2  0E01               	movlw	high display@LCD
  3272  001FB4  6FB7               	movwf	(sprintf@sp+1)& (0+255),b
  3273  001FB6  0ED9               	movlw	low STR_9
  3274  001FB8  6FB8               	movwf	sprintf@f& (0+255),b
  3275  001FBA  0EFF               	movlw	high STR_9
  3276  001FBC  6FB9               	movwf	(sprintf@f+1)& (0+255),b
  3277  001FBE  C1A2  F0BA         	movff	_HC,?_sprintf+4
  3278  001FC2  C1A3  F0BB         	movff	_HC+1,?_sprintf+5
  3279  001FC6  C1A4  F0BC         	movff	_HC+2,?_sprintf+6
  3280  001FCA  C1A5  F0BD         	movff	_HC+3,?_sprintf+7
  3281  001FCE  EC09  F000         	call	_sprintf	;wreg free
  3282                           
  3283                           ;pwm_asl.c: 289: lcd_puts(LCD);
  3284  001FD2  0E40               	movlw	low display@LCD
  3285  001FD4  6E29               	movwf	lcd_puts@s,c
  3286  001FD6  0E01               	movlw	high display@LCD
  3287  001FD8  6E2A               	movwf	lcd_puts@s+1,c
  3288  001FDA  EC72  F015         	call	_lcd_puts	;wreg free
  3289                           
  3290                           ;pwm_asl.c: 292: lcd_gotoxy(1, 4);
  3291  001FDE  0E04               	movlw	4
  3292  001FE0  6E25               	movwf	lcd_gotoxy@y,c
  3293  001FE2  0E01               	movlw	1
  3294  001FE4  EC5B  F016         	call	_lcd_gotoxy
  3295                           
  3296                           ;pwm_asl.c: 293: sprintf(LCD, "MD:");
  3297  001FE8  0E40               	movlw	low display@LCD
  3298  001FEA  0100               	movlb	0	; () banked
  3299  001FEC  6FB6               	movwf	sprintf@sp& (0+255),b
  3300  001FEE  0E01               	movlw	high display@LCD
  3301  001FF0  6FB7               	movwf	(sprintf@sp+1)& (0+255),b
  3302  001FF2  0EF7               	movlw	low STR_10
  3303  001FF4  6FB8               	movwf	sprintf@f& (0+255),b
  3304  001FF6  0EFF               	movlw	high STR_10
  3305  001FF8  6FB9               	movwf	(sprintf@f+1)& (0+255),b
  3306  001FFA  EC09  F000         	call	_sprintf	;wreg free
  3307                           
  3308                           ;pwm_asl.c: 294: lcd_puts(LCD);
  3309  001FFE  0E40               	movlw	low display@LCD
  3310  002000  6E29               	movwf	lcd_puts@s,c
  3311  002002  0E01               	movlw	high display@LCD
  3312  002004  6E2A               	movwf	lcd_puts@s+1,c
  3313  002006  EC72  F015         	call	_lcd_puts	;wreg free
  3314                           
  3315                           ;pwm_asl.c: 296: lcd_gotoxy(5, 4);
  3316  00200A  0E04               	movlw	4
  3317  00200C  6E25               	movwf	lcd_gotoxy@y,c
  3318  00200E  0E05               	movlw	5
  3319  002010  EC5B  F016         	call	_lcd_gotoxy
  3320                           
  3321                           ;pwm_asl.c: 297: lcd_puts(LCDP);
  3322  002014  0E00               	movlw	low display@LCDP
  3323  002016  6E29               	movwf	lcd_puts@s,c
  3324  002018  0E01               	movlw	high display@LCDP
  3325  00201A  6E2A               	movwf	lcd_puts@s+1,c
  3326  00201C  EC72  F015         	call	_lcd_puts	;wreg free
  3327  002020  0012               	return		;funcret
  3328  002022                     __end_of_display:
  3329                           	opt stack 0
  3330                           tblptru	equ	0xFF8
  3331                           tblptrh	equ	0xFF7
  3332                           tblptrl	equ	0xFF6
  3333                           tablat	equ	0xFF5
  3334                           prodh	equ	0xFF4
  3335                           prodl	equ	0xFF3
  3336                           intcon	equ	0xFF2
  3337                           intcon2	equ	0xFF1
  3338                           intcon3	equ	0xFF0
  3339                           postinc0	equ	0xFEE
  3340                           wreg	equ	0xFE8
  3341                           postdec1	equ	0xFE5
  3342                           fsr1l	equ	0xFE1
  3343                           indf2	equ	0xFDF
  3344                           postinc2	equ	0xFDE
  3345                           fsr2h	equ	0xFDA
  3346                           fsr2l	equ	0xFD9
  3347                           status	equ	0xFD8
  3348                           
  3349 ;; *************** function _sprintf *****************
  3350 ;; Defined at:
  3351 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3352 ;; Parameters:    Size  Location     Type
  3353 ;;  sp              2   54[BANK0 ] PTR unsigned char 
  3354 ;;		 -> display@LCD(64), display@LCDP(64), 
  3355 ;;  f               2   56[BANK0 ] PTR const unsigned char 
  3356 ;;		 -> STR_10(4), STR_9(12), STR_8(7), STR_7(12), 
  3357 ;;		 -> STR_5(11), STR_4(19), STR_3(21), STR_2(21), 
  3358 ;;		 -> STR_1(21), 
  3359 ;; Auto vars:     Size  Location     Type
  3360 ;;  fval            4   90[BANK0 ] PTR const unsigned char 
  3361 ;;  val             4   82[BANK0 ] unsigned long 
  3362 ;;  tmpval          4   78[BANK0 ] struct .
  3363 ;;  prec            2   94[BANK0 ] int 
  3364 ;;  width           2   88[BANK0 ] int 
  3365 ;;  exp             2   86[BANK0 ] int 
  3366 ;;  flag            2   76[BANK0 ] unsigned short 
  3367 ;;  len             2   74[BANK0 ] unsigned int 
  3368 ;;  ap              2   72[BANK0 ] PTR void [1]
  3369 ;;		 -> ?_sprintf(2), 
  3370 ;;  cp              2   70[BANK0 ] PTR const unsigned char 
  3371 ;;		 -> sprintf@c(1), 
  3372 ;;  c               1   96[BANK0 ] char 
  3373 ;;  d               1    0        unsigned char 
  3374 ;; Return value:  Size  Location     Type
  3375 ;;                  2   54[BANK0 ] int 
  3376 ;; Registers used:
  3377 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3378 ;; Tracked objects:
  3379 ;;		On entry : 0/0
  3380 ;;		On exit  : 0/0
  3381 ;;		Unchanged: 0/0
  3382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3383 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3384 ;;      Locals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3385 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3386 ;;      Totals:         0      43       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3387 ;;Total ram usage:       43 bytes
  3388 ;; Hardware stack levels used:    1
  3389 ;; Hardware stack levels required when called:    4
  3390 ;; This function calls:
  3391 ;;		___awdiv
  3392 ;;		___fladd
  3393 ;;		___flge
  3394 ;;		___flmul
  3395 ;;		___flneg
  3396 ;;		___flsub
  3397 ;;		___fltol
  3398 ;;		___lldiv
  3399 ;;		___llmod
  3400 ;;		___wmul
  3401 ;;		___xxtofl
  3402 ;;		__div_to_l_
  3403 ;;		__tdiv_to_l_
  3404 ;;		_fround
  3405 ;;		_isdigit
  3406 ;;		_scale
  3407 ;; This function is called by:
  3408 ;;		_display
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412                           	psect	text12
  3413  000012                     __ptext12:
  3414                           	opt stack 0
  3415  000012                     _sprintf:
  3416                           	opt stack 25
  3417                           
  3418                           ;doprnt.c: 494: va_list ap;
  3419                           ;doprnt.c: 499: signed char c;
  3420                           ;doprnt.c: 501: int width;
  3421                           ;doprnt.c: 504: int prec;
  3422                           ;doprnt.c: 508: unsigned short flag;
  3423                           ;doprnt.c: 515: char d;
  3424                           ;doprnt.c: 516: double fval;
  3425                           ;doprnt.c: 517: int exp;
  3426                           ;doprnt.c: 523: union {
  3427                           ;doprnt.c: 524: unsigned long vd;
  3428                           ;doprnt.c: 525: double integ;
  3429                           ;doprnt.c: 526: } tmpval;
  3430                           ;doprnt.c: 528: unsigned long val;
  3431                           ;doprnt.c: 529: unsigned len;
  3432                           ;doprnt.c: 530: const char * cp;
  3433                           ;doprnt.c: 533: *ap = __va_start();
  3434                           
  3435                           ;incstack = 0
  3436  000012  0EBA               	movlw	low (?_sprintf+4)
  3437  000014  0100               	movlb	0	; () banked
  3438  000016  6FC8               	movwf	sprintf@ap& (0+255),b
  3439  000018  0E00               	movlw	high (?_sprintf+4)
  3440  00001A  6FC9               	movwf	(sprintf@ap+1)& (0+255),b
  3441                           
  3442                           ;doprnt.c: 536: while(c = *f++) {
  3443  00001C  EF48  F005         	goto	u5530
  3444  000020                     
  3445                           ; BSR set to: 0
  3446                           ;doprnt.c: 538: if(c != '%')
  3447                           
  3448                           ; BSR set to: 0
  3449  000020  0E25               	movlw	37
  3450  000022  19E0               	xorwf	sprintf@c& (0+255),w,b
  3451  000024  B4D8               	btfsc	status,2,c
  3452  000026  D00A               	goto	l357
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;doprnt.c: 540: {
  3456                           ;doprnt.c: 541: ((*sp++ = (c)));
  3457  000028  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  3458  00002C  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  3459  000030  C0E0  FFDF         	movff	sprintf@c,indf2
  3460                           
  3461                           ; BSR set to: 0
  3462  000034  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  3463  000036  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  3464                           
  3465                           ;doprnt.c: 542: continue;
  3466  000038  EF48  F005         	goto	u5530
  3467  00003C                     l357:
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;doprnt.c: 543: }
  3471                           ;doprnt.c: 546: width = 0;
  3472                           
  3473                           ; BSR set to: 0
  3474  00003C  0E00               	movlw	0
  3475  00003E  6FD9               	movwf	(sprintf@width+1)& (0+255),b
  3476  000040  0E00               	movlw	0
  3477  000042  6FD8               	movwf	sprintf@width& (0+255),b
  3478                           
  3479                           ;doprnt.c: 548: flag = 0;
  3480  000044  0E00               	movlw	0
  3481  000046  6FCD               	movwf	(sprintf@flag+1)& (0+255),b
  3482  000048  0E00               	movlw	0
  3483  00004A  6FCC               	movwf	sprintf@flag& (0+255),b
  3484                           
  3485                           ; BSR set to: 0
  3486                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3487  00004C  C0B8  FFF6         	movff	sprintf@f,tblptrl
  3488  000050  C0B9  FFF7         	movff	sprintf@f+1,tblptrh
  3489  000054                     	if	0	;tblptru may be non-zero
  3490  000054                     	endif
  3491  000054                     	if	0	;tblptru may be non-zero
  3492  000054                     	endif
  3493  000054  0008               	tblrd		*
  3494  000056  50F5               	movf	tablat,w,c
  3495  000058  EC24  F017         	call	_isdigit
  3496  00005C  A0D8               	btfss	status,0,c
  3497  00005E  D034               	goto	u5030
  3498                           
  3499                           ;doprnt.c: 598: width = 0;
  3500  000060  0E00               	movlw	0
  3501  000062  0100               	movlb	0	; () banked
  3502  000064  6FD9               	movwf	(sprintf@width+1)& (0+255),b
  3503  000066  0E00               	movlw	0
  3504  000068  6FD8               	movwf	sprintf@width& (0+255),b
  3505  00006A                     
  3506                           ;doprnt.c: 600: width *= 10;
  3507                           
  3508                           ; BSR set to: 0
  3509  00006A  C0D8  F01B         	movff	sprintf@width,___wmul@multiplier
  3510  00006E  C0D9  F01C         	movff	sprintf@width+1,___wmul@multiplier+1
  3511  000072  0E00               	movlw	0
  3512  000074  6E1E               	movwf	___wmul@multiplicand+1,c
  3513  000076  0E0A               	movlw	10
  3514  000078  6E1D               	movwf	___wmul@multiplicand,c
  3515  00007A  ECDE  F016         	call	___wmul	;wreg free
  3516  00007E  C01B  F0D8         	movff	?___wmul,sprintf@width
  3517  000082  C01C  F0D9         	movff	?___wmul+1,sprintf@width+1
  3518                           
  3519                           ;doprnt.c: 601: width += *f++ - '0';
  3520  000086  0ED0               	movlw	208
  3521  000088  0100               	movlb	0	; () banked
  3522  00008A  6FBE               	movwf	??_sprintf& (0+255),b
  3523  00008C  0EFF               	movlw	255
  3524  00008E  6FBF               	movwf	(??_sprintf+1)& (0+255),b
  3525  000090  C0B8  FFF6         	movff	sprintf@f,tblptrl
  3526  000094  C0B9  FFF7         	movff	sprintf@f+1,tblptrh
  3527  000098                     	if	0	;tblptru may be non-zero
  3528  000098                     	endif
  3529  000098                     	if	0	;tblptru may be non-zero
  3530  000098                     	endif
  3531  000098  0008               	tblrd		*
  3532  00009A  50F5               	movf	tablat,w,c
  3533  00009C  6FC0               	movwf	(??_sprintf+2)& (0+255),b
  3534  00009E  6BC1               	clrf	(??_sprintf+3)& (0+255),b
  3535  0000A0  51BE               	movf	??_sprintf& (0+255),w,b
  3536  0000A2  27C0               	addwf	(??_sprintf+2)& (0+255),f,b
  3537  0000A4  51BF               	movf	(??_sprintf+1)& (0+255),w,b
  3538  0000A6  23C1               	addwfc	(??_sprintf+3)& (0+255),f,b
  3539  0000A8  51C0               	movf	(??_sprintf+2)& (0+255),w,b
  3540  0000AA  27D8               	addwf	sprintf@width& (0+255),f,b
  3541  0000AC  51C1               	movf	(??_sprintf+3)& (0+255),w,b
  3542  0000AE  23D9               	addwfc	(sprintf@width+1)& (0+255),f,b
  3543                           
  3544                           ; BSR set to: 0
  3545  0000B0  4BB8               	infsnz	sprintf@f& (0+255),f,b
  3546  0000B2  2BB9               	incf	(sprintf@f+1)& (0+255),f,b
  3547                           
  3548                           ; BSR set to: 0
  3549                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3550  0000B4  C0B8  FFF6         	movff	sprintf@f,tblptrl
  3551  0000B8  C0B9  FFF7         	movff	sprintf@f+1,tblptrh
  3552  0000BC                     	if	0	;tblptru may be non-zero
  3553  0000BC                     	endif
  3554  0000BC                     	if	0	;tblptru may be non-zero
  3555  0000BC                     	endif
  3556  0000BC  0008               	tblrd		*
  3557  0000BE  50F5               	movf	tablat,w,c
  3558  0000C0  EC24  F017         	call	_isdigit
  3559  0000C4  B0D8               	btfsc	status,0,c
  3560  0000C6  D7D1               	goto	l359
  3561  0000C8                     u5030:
  3562                           
  3563                           ;doprnt.c: 608: }
  3564                           ;doprnt.c: 611: if(*f == '.') {
  3565  0000C8  C0B8  FFF6         	movff	sprintf@f,tblptrl
  3566  0000CC  C0B9  FFF7         	movff	sprintf@f+1,tblptrh
  3567  0000D0                     	if	0	;tblptru may be non-zero
  3568  0000D0                     	endif
  3569  0000D0                     	if	0	;tblptru may be non-zero
  3570  0000D0                     	endif
  3571  0000D0  0008               	tblrd		*
  3572  0000D2  50F5               	movf	tablat,w,c
  3573  0000D4  0A2E               	xorlw	46
  3574  0000D6  A4D8               	btfss	status,2,c
  3575  0000D8  D030               	goto	l361
  3576                           
  3577                           ;doprnt.c: 612: flag |= 0x4000;
  3578  0000DA  0100               	movlb	0	; () banked
  3579  0000DC  8DCD               	bsf	(sprintf@flag+1)& (0+255),6,b
  3580                           
  3581                           ;doprnt.c: 613: f++;
  3582  0000DE  4BB8               	infsnz	sprintf@f& (0+255),f,b
  3583  0000E0  2BB9               	incf	(sprintf@f+1)& (0+255),f,b
  3584                           
  3585                           ; BSR set to: 0
  3586                           ;doprnt.c: 620: {
  3587                           ;doprnt.c: 621: prec = 0;
  3588  0000E2  0E00               	movlw	0
  3589  0000E4  6FDF               	movwf	(sprintf@prec+1)& (0+255),b
  3590  0000E6  0E00               	movlw	0
  3591  0000E8  6FDE               	movwf	sprintf@prec& (0+255),b
  3592                           
  3593                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3594  0000EA  D01C               	goto	l362
  3595  0000EC                     
  3596                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3597                           
  3598                           ; BSR set to: 0
  3599  0000EC  C0DE  F01B         	movff	sprintf@prec,___wmul@multiplier
  3600  0000F0  C0DF  F01C         	movff	sprintf@prec+1,___wmul@multiplier+1
  3601  0000F4  0E00               	movlw	0
  3602  0000F6  6E1E               	movwf	___wmul@multiplicand+1,c
  3603  0000F8  0E0A               	movlw	10
  3604  0000FA  6E1D               	movwf	___wmul@multiplicand,c
  3605  0000FC  ECDE  F016         	call	___wmul	;wreg free
  3606  000100  C0B8  FFF6         	movff	sprintf@f,tblptrl
  3607  000104  C0B9  FFF7         	movff	sprintf@f+1,tblptrh
  3608  000108                     	if	0	;tblptru may be non-zero
  3609  000108                     	endif
  3610  000108                     	if	0	;tblptru may be non-zero
  3611  000108                     	endif
  3612  000108  0008               	tblrd		*
  3613  00010A  50F5               	movf	tablat,w,c
  3614  00010C  261B               	addwf	?___wmul,f,c
  3615  00010E  0E00               	movlw	0
  3616  000110  221C               	addwfc	?___wmul+1,f,c
  3617  000112  0ED0               	movlw	208
  3618  000114  241B               	addwf	?___wmul,w,c
  3619  000116  0100               	movlb	0	; () banked
  3620  000118  6FDE               	movwf	sprintf@prec& (0+255),b
  3621  00011A  0EFF               	movlw	255
  3622  00011C  201C               	addwfc	?___wmul+1,w,c
  3623  00011E  6FDF               	movwf	(sprintf@prec+1)& (0+255),b
  3624                           
  3625                           ; BSR set to: 0
  3626  000120  4BB8               	infsnz	sprintf@f& (0+255),f,b
  3627  000122  2BB9               	incf	(sprintf@f+1)& (0+255),f,b
  3628  000124                     l362:
  3629                           
  3630                           ; BSR set to: 0
  3631                           
  3632                           ; BSR set to: 0
  3633  000124  C0B8  FFF6         	movff	sprintf@f,tblptrl
  3634  000128  C0B9  FFF7         	movff	sprintf@f+1,tblptrh
  3635  00012C                     	if	0	;tblptru may be non-zero
  3636  00012C                     	endif
  3637  00012C                     	if	0	;tblptru may be non-zero
  3638  00012C                     	endif
  3639  00012C  0008               	tblrd		*
  3640  00012E  50F5               	movf	tablat,w,c
  3641  000130  EC24  F017         	call	_isdigit
  3642  000134  A0D8               	btfss	status,0,c
  3643  000136  D05A               	goto	l366
  3644  000138  D7D9               	goto	l363
  3645  00013A                     l361:
  3646                           
  3647                           ;doprnt.c: 626: prec = 0;
  3648  00013A  0E00               	movlw	0
  3649  00013C  0100               	movlb	0	; () banked
  3650  00013E  6FDF               	movwf	(sprintf@prec+1)& (0+255),b
  3651  000140  0E00               	movlw	0
  3652  000142  6FDE               	movwf	sprintf@prec& (0+255),b
  3653                           
  3654                           ; BSR set to: 0
  3655                           ;doprnt.c: 628: flag |= 0x1000;
  3656  000144  89CD               	bsf	(sprintf@flag+1)& (0+255),4,b
  3657                           
  3658                           ; BSR set to: 0
  3659                           ;doprnt.c: 630: }
  3660                           ;doprnt.c: 635: switch(c = *f++) {
  3661  000146  D052               	goto	l366
  3662  000148                     
  3663                           ; BSR set to: 0
  3664                           ;doprnt.c: 663: flag |= 0x400;
  3665                           
  3666                           ; BSR set to: 0
  3667  000148  85CD               	bsf	(sprintf@flag+1)& (0+255),2,b
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;doprnt.c: 698: case 'i':
  3671                           ;doprnt.c: 699: break;
  3672                           
  3673                           ; BSR set to: 0
  3674                           
  3675                           ;doprnt.c: 697: case 'd':
  3676                           
  3677                           ;doprnt.c: 664: break;
  3678  00014A  D068               	goto	l370
  3679  00014C                     
  3680                           ; BSR set to: 0
  3681                           ;doprnt.c: 753: if(prec && prec < len)
  3682                           
  3683                           ; BSR set to: 0
  3684  00014C  51DE               	movf	sprintf@prec& (0+255),w,b
  3685  00014E  11DF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3686  000150  B4D8               	btfsc	status,2,c
  3687  000152  D00A               	goto	l374
  3688                           
  3689                           ; BSR set to: 0
  3690  000154  51CA               	movf	sprintf@len& (0+255),w,b
  3691  000156  5DDE               	subwf	sprintf@prec& (0+255),w,b
  3692  000158  51CB               	movf	(sprintf@len+1)& (0+255),w,b
  3693  00015A  59DF               	subwfb	(sprintf@prec+1)& (0+255),w,b
  3694  00015C  B0D8               	btfsc	status,0,c
  3695  00015E  D004               	goto	l374
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;doprnt.c: 754: len = prec;
  3699  000160  C0DE  F0CA         	movff	sprintf@prec,sprintf@len
  3700  000164  C0DF  F0CB         	movff	sprintf@prec+1,sprintf@len+1
  3701  000168                     l374:
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;doprnt.c: 757: if(width > len)
  3705                           
  3706                           ; BSR set to: 0
  3707  000168  51D8               	movf	sprintf@width& (0+255),w,b
  3708  00016A  5DCA               	subwf	sprintf@len& (0+255),w,b
  3709  00016C  51D9               	movf	(sprintf@width+1)& (0+255),w,b
  3710  00016E  59CB               	subwfb	(sprintf@len+1)& (0+255),w,b
  3711  000170  B0D8               	btfsc	status,0,c
  3712  000172  D005               	goto	l375
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;doprnt.c: 758: width -= len;
  3716  000174  51CA               	movf	sprintf@len& (0+255),w,b
  3717  000176  5FD8               	subwf	sprintf@width& (0+255),f,b
  3718  000178  51CB               	movf	(sprintf@len+1)& (0+255),w,b
  3719  00017A  5BD9               	subwfb	(sprintf@width+1)& (0+255),f,b
  3720  00017C  D00D               	goto	l377
  3721  00017E                     l375:
  3722                           
  3723                           ; BSR set to: 0
  3724                           ;doprnt.c: 759: else
  3725                           ;doprnt.c: 760: width = 0;
  3726                           
  3727                           ; BSR set to: 0
  3728  00017E  0E00               	movlw	0
  3729  000180  6FD9               	movwf	(sprintf@width+1)& (0+255),b
  3730  000182  0E00               	movlw	0
  3731  000184  6FD8               	movwf	sprintf@width& (0+255),b
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;doprnt.c: 764: while(width--)
  3735  000186  D008               	goto	l377
  3736  000188                     l4744:
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;doprnt.c: 765: ((*sp++ = (' ')));
  3740  000188  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  3741  00018C  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  3742  000190  0E20               	movlw	32
  3743  000192  6EDF               	movwf	indf2,c
  3744                           
  3745                           ; BSR set to: 0
  3746  000194  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  3747  000196  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  3748  000198                     l377:
  3749                           
  3750                           ; BSR set to: 0
  3751                           
  3752                           ; BSR set to: 0
  3753  000198  07D8               	decf	sprintf@width& (0+255),f,b
  3754  00019A  A0D8               	btfss	status,0,c
  3755  00019C  07D9               	decf	(sprintf@width+1)& (0+255),f,b
  3756  00019E  29D8               	incf	sprintf@width& (0+255),w,b
  3757  0001A0  E1F3               	bnz	l4744
  3758  0001A2  29D9               	incf	(sprintf@width+1)& (0+255),w,b
  3759  0001A4  B4D8               	btfsc	status,2,c
  3760  0001A6  D00F               	goto	l380
  3761  0001A8  D7EF               	goto	l378
  3762  0001AA                     l4750:
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  3766  0001AA  C0C6  FFD9         	movff	sprintf@cp,fsr2l
  3767  0001AE  C0C7  FFDA         	movff	sprintf@cp+1,fsr2h
  3768  0001B2  C0B6  FFE1         	movff	sprintf@sp,fsr1l
  3769  0001B6  C0B7  FFE2         	movff	sprintf@sp+1,fsr1h
  3770  0001BA  CFDF FFE7          	movff	indf2,indf1
  3771                           
  3772                           ; BSR set to: 0
  3773  0001BE  4BC6               	infsnz	sprintf@cp& (0+255),f,b
  3774  0001C0  2BC7               	incf	(sprintf@cp+1)& (0+255),f,b
  3775                           
  3776                           ; BSR set to: 0
  3777  0001C2  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  3778  0001C4  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  3779  0001C6                     l380:
  3780                           
  3781                           ; BSR set to: 0
  3782                           
  3783                           ; BSR set to: 0
  3784  0001C6  07CA               	decf	sprintf@len& (0+255),f,b
  3785  0001C8  A0D8               	btfss	status,0,c
  3786  0001CA  07CB               	decf	(sprintf@len+1)& (0+255),f,b
  3787  0001CC  29CA               	incf	sprintf@len& (0+255),w,b
  3788  0001CE  E1ED               	bnz	l4750
  3789  0001D0  29CB               	incf	(sprintf@len+1)& (0+255),w,b
  3790  0001D2  B4D8               	btfsc	status,2,c
  3791  0001D4  EF48  F005         	goto	u5530
  3792  0001D8  D7E8               	goto	l381
  3793  0001DA                     
  3794                           ; BSR set to: 0
  3795                           ;doprnt.c: 805: cp = (char *)&c;
  3796                           
  3797                           ; BSR set to: 0
  3798  0001DA  0EE0               	movlw	low sprintf@c
  3799  0001DC  6FC6               	movwf	sprintf@cp& (0+255),b
  3800  0001DE  0E00               	movlw	high sprintf@c
  3801  0001E0  6FC7               	movwf	(sprintf@cp+1)& (0+255),b
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;doprnt.c: 806: len = 1;
  3805  0001E2  0E00               	movlw	0
  3806  0001E4  6FCB               	movwf	(sprintf@len+1)& (0+255),b
  3807  0001E6  0E01               	movlw	1
  3808  0001E8  6FCA               	movwf	sprintf@len& (0+255),b
  3809                           
  3810                           ;doprnt.c: 807: goto dostring;
  3811  0001EA  D7B0               	goto	l373
  3812  0001EC                     l366:
  3813                           
  3814                           ; BSR set to: 0
  3815  0001EC  C0B8  FFF6         	movff	sprintf@f,tblptrl
  3816  0001F0  C0B9  FFF7         	movff	sprintf@f+1,tblptrh
  3817  0001F4  0100               	movlb	0	; () banked
  3818  0001F6  4BB8               	infsnz	sprintf@f& (0+255),f,b
  3819  0001F8  2BB9               	incf	(sprintf@f+1)& (0+255),f,b
  3820  0001FA                     	if	0	;tblptru may be non-zero
  3821  0001FA                     	endif
  3822  0001FA                     	if	0	;tblptru may be non-zero
  3823  0001FA                     	endif
  3824  0001FA  0008               	tblrd		*
  3825  0001FC  CFF5 F0E0          	movff	tablat,sprintf@c
  3826  000200  51E0               	movf	sprintf@c& (0+255),w,b
  3827                           
  3828                           ; Switch size 1, requested type "space"
  3829                           ; Number of cases is 4, Range of values is 0 to 105
  3830                           ; switch strategies available:
  3831                           ; Name         Instructions Cycles
  3832                           ; simple_byte           13     7 (average)
  3833                           ;	Chosen strategy is simple_byte
  3834  000202  0A00               	xorlw	0	; case 0
  3835  000204  B4D8               	btfsc	status,2,c
  3836  000206  EF55  F005         	goto	u5540
  3837  00020A  0A64               	xorlw	100	; case 100
  3838  00020C  B4D8               	btfsc	status,2,c
  3839  00020E  D006               	goto	l370
  3840  000210  0A02               	xorlw	2	; case 102
  3841  000212  B4D8               	btfsc	status,2,c
  3842  000214  D799               	goto	l369
  3843  000216  0A0F               	xorlw	15	; case 105
  3844  000218  A4D8               	btfss	status,2,c
  3845  00021A  D7DF               	goto	l383
  3846  00021C                     l370:
  3847                           
  3848                           ; BSR set to: 0
  3849                           ;doprnt.c: 825: if(flag & (0x700)) {
  3850                           
  3851                           ; BSR set to: 0
  3852  00021C  0E07               	movlw	7
  3853  00021E  15CD               	andwf	(sprintf@flag+1)& (0+255),w,b
  3854  000220  B4D8               	btfsc	status,2,c
  3855  000222  D325               	goto	l384
  3856                           
  3857                           ; BSR set to: 0
  3858                           ;doprnt.c: 827: if(flag & 0x1000)
  3859  000224  A9CD               	btfss	(sprintf@flag+1)& (0+255),4,b
  3860  000226  D004               	goto	l385
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;doprnt.c: 829: prec = 6;
  3864  000228  0E00               	movlw	0
  3865  00022A  6FDF               	movwf	(sprintf@prec+1)& (0+255),b
  3866  00022C  0E06               	movlw	6
  3867  00022E  6FDE               	movwf	sprintf@prec& (0+255),b
  3868  000230                     l385:
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3872                           
  3873                           ; BSR set to: 0
  3874  000230  C0C8  FFD9         	movff	sprintf@ap,fsr2l
  3875  000234  C0C9  FFDA         	movff	sprintf@ap+1,fsr2h
  3876  000238  CFDE F0DA          	movff	postinc2,sprintf@fval
  3877  00023C  CFDE F0DB          	movff	postinc2,sprintf@fval+1
  3878  000240  CFDE F0DC          	movff	postinc2,sprintf@fval+2
  3879  000244  CFDE F0DD          	movff	postinc2,sprintf@fval+3
  3880                           
  3881                           ; BSR set to: 0
  3882  000248  0E04               	movlw	4
  3883  00024A  27C8               	addwf	sprintf@ap& (0+255),f,b
  3884  00024C  0E00               	movlw	0
  3885  00024E  23C9               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;doprnt.c: 831: if(fval < 0.0) {
  3889  000250  AFDD               	btfss	(sprintf@fval+3)& (0+255),7,b
  3890  000252  D015               	goto	l386
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;doprnt.c: 832: fval = -fval;
  3894  000254  C0DA  F02F         	movff	sprintf@fval,___flneg@f1
  3895  000258  C0DB  F030         	movff	sprintf@fval+1,___flneg@f1+1
  3896  00025C  C0DC  F031         	movff	sprintf@fval+2,___flneg@f1+2
  3897  000260  C0DD  F032         	movff	sprintf@fval+3,___flneg@f1+3
  3898  000264  ECB0  F016         	call	___flneg	;wreg free
  3899  000268  C02F  F0DA         	movff	?___flneg,sprintf@fval
  3900  00026C  C030  F0DB         	movff	?___flneg+1,sprintf@fval+1
  3901  000270  C031  F0DC         	movff	?___flneg+2,sprintf@fval+2
  3902  000274  C032  F0DD         	movff	?___flneg+3,sprintf@fval+3
  3903                           
  3904                           ;doprnt.c: 833: flag |= 0x03;
  3905  000278  0E03               	movlw	3
  3906  00027A  0100               	movlb	0	; () banked
  3907  00027C  13CC               	iorwf	sprintf@flag& (0+255),f,b
  3908  00027E                     l386:
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;doprnt.c: 834: }
  3912                           ;doprnt.c: 835: exp = 0;
  3913                           
  3914                           ; BSR set to: 0
  3915  00027E  0E00               	movlw	0
  3916  000280  6FD7               	movwf	(sprintf@exp+1)& (0+255),b
  3917  000282  0E00               	movlw	0
  3918  000284  6FD6               	movwf	sprintf@exp& (0+255),b
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;doprnt.c: 836: if( fval!=0) {
  3922  000286  51DA               	movf	sprintf@fval& (0+255),w,b
  3923  000288  11DB               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3924  00028A  11DC               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3925  00028C  11DD               	iorwf	(sprintf@fval+3)& (0+255),w,b
  3926  00028E  B4D8               	btfsc	status,2,c
  3927  000290  D083               	goto	l391
  3928                           
  3929                           ; BSR set to: 0
  3930                           ;doprnt.c: 837: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
  3931  000292  35DC               	rlcf	(sprintf@fval+2)& (0+255),w,b
  3932  000294  35DD               	rlcf	(sprintf@fval+3)& (0+255),w,b
  3933  000296  0F82               	addlw	130
  3934  000298  6FD6               	movwf	sprintf@exp& (0+255),b
  3935  00029A  6BD7               	clrf	(sprintf@exp+1)& (0+255),b
  3936  00029C  0EFF               	movlw	255
  3937  00029E  23D7               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3938                           
  3939                           ; BSR set to: 0
  3940                           ;doprnt.c: 838: exp--;
  3941  0002A0  07D6               	decf	sprintf@exp& (0+255),f,b
  3942  0002A2  A0D8               	btfss	status,0,c
  3943  0002A4  07D7               	decf	(sprintf@exp+1)& (0+255),f,b
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;doprnt.c: 839: exp *= 3;
  3947  0002A6  C0D6  F01B         	movff	sprintf@exp,___wmul@multiplier
  3948  0002AA  C0D7  F01C         	movff	sprintf@exp+1,___wmul@multiplier+1
  3949  0002AE  0E00               	movlw	0
  3950  0002B0  6E1E               	movwf	___wmul@multiplicand+1,c
  3951  0002B2  0E03               	movlw	3
  3952  0002B4  6E1D               	movwf	___wmul@multiplicand,c
  3953  0002B6  ECDE  F016         	call	___wmul	;wreg free
  3954  0002BA  C01B  F0D6         	movff	?___wmul,sprintf@exp
  3955  0002BE  C01C  F0D7         	movff	?___wmul+1,sprintf@exp+1
  3956                           
  3957                           ;doprnt.c: 840: exp /= 10;
  3958  0002C2  C0D6  F021         	movff	sprintf@exp,___awdiv@dividend
  3959  0002C6  C0D7  F022         	movff	sprintf@exp+1,___awdiv@dividend+1
  3960  0002CA  0E00               	movlw	0
  3961  0002CC  6E24               	movwf	___awdiv@divisor+1,c
  3962  0002CE  0E0A               	movlw	10
  3963  0002D0  6E23               	movwf	___awdiv@divisor,c
  3964  0002D2  ECDA  F013         	call	___awdiv	;wreg free
  3965  0002D6  C021  F0D6         	movff	?___awdiv,sprintf@exp
  3966  0002DA  C022  F0D7         	movff	?___awdiv+1,sprintf@exp+1
  3967                           
  3968                           ;doprnt.c: 841: if(exp < 0)
  3969  0002DE  0100               	movlb	0	; () banked
  3970  0002E0  AFD7               	btfss	(sprintf@exp+1)& (0+255),7,b
  3971  0002E2  D003               	goto	l388
  3972                           
  3973                           ; BSR set to: 0
  3974                           ;doprnt.c: 842: exp--;
  3975  0002E4  07D6               	decf	sprintf@exp& (0+255),f,b
  3976  0002E6  A0D8               	btfss	status,0,c
  3977  0002E8  07D7               	decf	(sprintf@exp+1)& (0+255),f,b
  3978  0002EA                     l388:
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3982                           
  3983                           ; BSR set to: 0
  3984  0002EA  51D6               	movf	sprintf@exp& (0+255),w,b
  3985  0002EC  0800               	sublw	0
  3986  0002EE  EC5C  F005         	call	_scale
  3987  0002F2  C054  F0CE         	movff	?_scale,sprintf@tmpval
  3988  0002F6  C055  F0CF         	movff	?_scale+1,sprintf@tmpval+1
  3989  0002FA  C056  F0D0         	movff	?_scale+2,sprintf@tmpval+2
  3990  0002FE  C057  F0D1         	movff	?_scale+3,sprintf@tmpval+3
  3991                           
  3992                           ;doprnt.c: 847: tmpval.integ *= fval;
  3993  000302  C0CE  F048         	movff	sprintf@tmpval,___flmul@b
  3994  000306  C0CF  F049         	movff	sprintf@tmpval+1,___flmul@b+1
  3995  00030A  C0D0  F04A         	movff	sprintf@tmpval+2,___flmul@b+2
  3996  00030E  C0D1  F04B         	movff	sprintf@tmpval+3,___flmul@b+3
  3997  000312  C0DA  F04C         	movff	sprintf@fval,___flmul@a
  3998  000316  C0DB  F04D         	movff	sprintf@fval+1,___flmul@a+1
  3999  00031A  C0DC  F04E         	movff	sprintf@fval+2,___flmul@a+2
  4000  00031E  C0DD  F04F         	movff	sprintf@fval+3,___flmul@a+3
  4001  000322  EC84  F007         	call	___flmul	;wreg free
  4002  000326  C048  F0CE         	movff	?___flmul,sprintf@tmpval
  4003  00032A  C049  F0CF         	movff	?___flmul+1,sprintf@tmpval+1
  4004  00032E  C04A  F0D0         	movff	?___flmul+2,sprintf@tmpval+2
  4005  000332  C04B  F0D1         	movff	?___flmul+3,sprintf@tmpval+3
  4006                           
  4007                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  4008  000336  C0CE  F0AA         	movff	sprintf@tmpval,___flge@ff1
  4009  00033A  C0CF  F0AB         	movff	sprintf@tmpval+1,___flge@ff1+1
  4010  00033E  C0D0  F0AC         	movff	sprintf@tmpval+2,___flge@ff1+2
  4011  000342  C0D1  F0AD         	movff	sprintf@tmpval+3,___flge@ff1+3
  4012  000346  0E00               	movlw	0
  4013  000348  0100               	movlb	0	; () banked
  4014  00034A  6FAE               	movwf	___flge@ff2& (0+255),b
  4015  00034C  0E00               	movlw	0
  4016  00034E  6FAF               	movwf	(___flge@ff2+1)& (0+255),b
  4017  000350  0E80               	movlw	128
  4018  000352  6FB0               	movwf	(___flge@ff2+2)& (0+255),b
  4019  000354  0E3F               	movlw	63
  4020  000356  6FB1               	movwf	(___flge@ff2+3)& (0+255),b
  4021  000358  ECE6  F011         	call	___flge	;wreg free
  4022  00035C  0100               	movlb	0	; () banked
  4023  00035E  B0D8               	btfsc	status,0,c
  4024  000360  D004               	goto	l389
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;doprnt.c: 849: exp--;
  4028  000362  07D6               	decf	sprintf@exp& (0+255),f,b
  4029  000364  A0D8               	btfss	status,0,c
  4030  000366  07D7               	decf	(sprintf@exp+1)& (0+255),f,b
  4031  000368  D017               	goto	l391
  4032  00036A                     l389:
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  4036                           
  4037                           ; BSR set to: 0
  4038  00036A  C0CE  F0AA         	movff	sprintf@tmpval,___flge@ff1
  4039  00036E  C0CF  F0AB         	movff	sprintf@tmpval+1,___flge@ff1+1
  4040  000372  C0D0  F0AC         	movff	sprintf@tmpval+2,___flge@ff1+2
  4041  000376  C0D1  F0AD         	movff	sprintf@tmpval+3,___flge@ff1+3
  4042  00037A  0E00               	movlw	0
  4043  00037C  6FAE               	movwf	___flge@ff2& (0+255),b
  4044  00037E  0E00               	movlw	0
  4045  000380  6FAF               	movwf	(___flge@ff2+1)& (0+255),b
  4046  000382  0E20               	movlw	32
  4047  000384  6FB0               	movwf	(___flge@ff2+2)& (0+255),b
  4048  000386  0E41               	movlw	65
  4049  000388  6FB1               	movwf	(___flge@ff2+3)& (0+255),b
  4050  00038A  ECE6  F011         	call	___flge	;wreg free
  4051  00038E  0100               	movlb	0	; () banked
  4052  000390  A0D8               	btfss	status,0,c
  4053  000392  D002               	goto	l391
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;doprnt.c: 851: exp++;
  4057  000394  4BD6               	infsnz	sprintf@exp& (0+255),f,b
  4058  000396  2BD7               	incf	(sprintf@exp+1)& (0+255),f,b
  4059  000398                     l391:
  4060                           
  4061                           ; BSR set to: 0
  4062                           ;doprnt.c: 852: }
  4063                           ;doprnt.c: 1112: if(prec <= 12)
  4064                           
  4065                           ; BSR set to: 0
  4066                           
  4067                           ; BSR set to: 0
  4068                           
  4069                           ; BSR set to: 0
  4070  000398  BFDF               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4071  00039A  D006               	goto	u5180
  4072  00039C  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  4073  00039E  E121               	bnz	l4814
  4074  0003A0  0E0D               	movlw	13
  4075  0003A2  5DDE               	subwf	sprintf@prec& (0+255),w,b
  4076  0003A4  B0D8               	btfsc	status,0,c
  4077  0003A6  D01D               	goto	l392
  4078  0003A8                     u5180:
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;doprnt.c: 1113: fval += fround(prec);
  4082  0003A8  C0DA  F096         	movff	sprintf@fval,___fladd@b
  4083  0003AC  C0DB  F097         	movff	sprintf@fval+1,___fladd@b+1
  4084  0003B0  C0DC  F098         	movff	sprintf@fval+2,___fladd@b+2
  4085  0003B4  C0DD  F099         	movff	sprintf@fval+3,___fladd@b+3
  4086  0003B8  51DE               	movf	sprintf@prec& (0+255),w,b
  4087  0003BA  ECCC  F00D         	call	_fround
  4088  0003BE  C054  F09A         	movff	?_fround,___fladd@a
  4089  0003C2  C055  F09B         	movff	?_fround+1,___fladd@a+1
  4090  0003C6  C056  F09C         	movff	?_fround+2,___fladd@a+2
  4091  0003CA  C057  F09D         	movff	?_fround+3,___fladd@a+3
  4092  0003CE  ECD3  F00A         	call	___fladd	;wreg free
  4093  0003D2  C096  F0DA         	movff	?___fladd,sprintf@fval
  4094  0003D6  C097  F0DB         	movff	?___fladd+1,sprintf@fval+1
  4095  0003DA  C098  F0DC         	movff	?___fladd+2,sprintf@fval+2
  4096  0003DE  C099  F0DD         	movff	?___fladd+3,sprintf@fval+3
  4097  0003E2                     l392:
  4098  0003E2                     l4814:
  4099                           
  4100                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4101  0003E2  0100               	movlb	0	; () banked
  4102  0003E4  BFD7               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4103  0003E6  D006               	goto	u5190
  4104  0003E8  51D7               	movf	(sprintf@exp+1)& (0+255),w,b
  4105  0003EA  E122               	bnz	l4822
  4106  0003EC  0E0A               	movlw	10
  4107  0003EE  5DD6               	subwf	sprintf@exp& (0+255),w,b
  4108  0003F0  B0D8               	btfsc	status,0,c
  4109  0003F2  D01E               	goto	u5220
  4110  0003F4                     u5190:
  4111                           
  4112                           ; BSR set to: 0
  4113  0003F4  51DA               	movf	sprintf@fval& (0+255),w,b
  4114  0003F6  11DB               	iorwf	(sprintf@fval+1)& (0+255),w,b
  4115  0003F8  11DC               	iorwf	(sprintf@fval+2)& (0+255),w,b
  4116  0003FA  11DD               	iorwf	(sprintf@fval+3)& (0+255),w,b
  4117  0003FC  B4D8               	btfsc	status,2,c
  4118  0003FE  D062               	goto	l393
  4119                           
  4120                           ; BSR set to: 0
  4121  000400  C0DA  F092         	movff	sprintf@fval,___fltol@f1
  4122  000404  C0DB  F093         	movff	sprintf@fval+1,___fltol@f1+1
  4123  000408  C0DC  F094         	movff	sprintf@fval+2,___fltol@f1+2
  4124  00040C  C0DD  F095         	movff	sprintf@fval+3,___fltol@f1+3
  4125  000410  EC6B  F013         	call	___fltol	;wreg free
  4126  000414  0100               	movlb	0	; () banked
  4127  000416  5192               	movf	?___fltol& (0+255),w,b
  4128  000418  1193               	iorwf	(?___fltol+1)& (0+255),w,b
  4129  00041A  1194               	iorwf	(?___fltol+2)& (0+255),w,b
  4130  00041C  1195               	iorwf	(?___fltol+3)& (0+255),w,b
  4131  00041E  B4D8               	btfsc	status,2,c
  4132                           
  4133                           ; BSR set to: 0
  4134  000420  BFD7               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4135  000422  D050               	goto	l393
  4136  000424  51D7               	movf	(sprintf@exp+1)& (0+255),w,b
  4137  000426  E104               	bnz	l4822
  4138  000428  0E02               	movlw	2
  4139  00042A  5DD6               	subwf	sprintf@exp& (0+255),w,b
  4140  00042C  A0D8               	btfss	status,0,c
  4141  00042E  D04A               	goto	l393
  4142  000430                     u5220:
  4143  000430                     l4822:
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  4147  000430  C0CE  F0AA         	movff	sprintf@tmpval,___flge@ff1
  4148  000434  C0CF  F0AB         	movff	sprintf@tmpval+1,___flge@ff1+1
  4149  000438  C0D0  F0AC         	movff	sprintf@tmpval+2,___flge@ff1+2
  4150  00043C  C0D1  F0AD         	movff	sprintf@tmpval+3,___flge@ff1+3
  4151  000440  0E5F               	movlw	95
  4152  000442  6FAE               	movwf	___flge@ff2& (0+255),b
  4153  000444  0E70               	movlw	112
  4154  000446  6FAF               	movwf	(___flge@ff2+1)& (0+255),b
  4155  000448  0E89               	movlw	137
  4156  00044A  6FB0               	movwf	(___flge@ff2+2)& (0+255),b
  4157  00044C  0E40               	movlw	64
  4158  00044E  6FB1               	movwf	(___flge@ff2+3)& (0+255),b
  4159  000450  ECE6  F011         	call	___flge	;wreg free
  4160  000454  0100               	movlb	0	; () banked
  4161  000456  B0D8               	btfsc	status,0,c
  4162  000458  D002               	goto	l396
  4163                           
  4164                           ; BSR set to: 0
  4165                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4166  00045A  0EF7               	movlw	247
  4167  00045C  D001               	goto	L6
  4168  00045E                     l396:
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4172                           
  4173                           ; BSR set to: 0
  4174  00045E  0EF8               	movlw	248
  4175  000460                     L6:
  4176  000460  27D6               	addwf	sprintf@exp& (0+255),f,b
  4177  000462  0EFF               	movlw	255
  4178  000464  23D7               	addwfc	(sprintf@exp+1)& (0+255),f,b
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  4182                           
  4183                           ; BSR set to: 0
  4184  000466  51D6               	movf	sprintf@exp& (0+255),w,b
  4185  000468  EC5C  F005         	call	_scale
  4186  00046C  C054  F0CE         	movff	?_scale,sprintf@tmpval
  4187  000470  C055  F0CF         	movff	?_scale+1,sprintf@tmpval+1
  4188  000474  C056  F0D0         	movff	?_scale+2,sprintf@tmpval+2
  4189  000478  C057  F0D1         	movff	?_scale+3,sprintf@tmpval+3
  4190  00047C  C0DA  F01B         	movff	sprintf@fval,__div_to_l_@f1
  4191  000480  C0DB  F01C         	movff	sprintf@fval+1,__div_to_l_@f1+1
  4192  000484  C0DC  F01D         	movff	sprintf@fval+2,__div_to_l_@f1+2
  4193  000488  C0DD  F01E         	movff	sprintf@fval+3,__div_to_l_@f1+3
  4194  00048C  C0CE  F01F         	movff	sprintf@tmpval,__div_to_l_@f2
  4195  000490  C0CF  F020         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  4196  000494  C0D0  F021         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  4197  000498  C0D1  F022         	movff	sprintf@tmpval+3,__div_to_l_@f2+3
  4198  00049C  EC52  F011         	call	__div_to_l_	;wreg free
  4199  0004A0  C01B  F0D2         	movff	?__div_to_l_,sprintf@val
  4200  0004A4  C01C  F0D3         	movff	?__div_to_l_+1,sprintf@val+1
  4201  0004A8  C01D  F0D4         	movff	?__div_to_l_+2,sprintf@val+2
  4202  0004AC  C01E  F0D5         	movff	?__div_to_l_+3,sprintf@val+3
  4203                           
  4204                           ;doprnt.c: 1129: fval = 0.0;
  4205  0004B0  0E00               	movlw	0
  4206  0004B2  0100               	movlb	0	; () banked
  4207  0004B4  6FDA               	movwf	sprintf@fval& (0+255),b
  4208  0004B6  0E00               	movlw	0
  4209  0004B8  6FDB               	movwf	(sprintf@fval+1)& (0+255),b
  4210  0004BA  0E00               	movlw	0
  4211  0004BC  6FDC               	movwf	(sprintf@fval+2)& (0+255),b
  4212  0004BE  0E00               	movlw	0
  4213  0004C0  6FDD               	movwf	(sprintf@fval+3)& (0+255),b
  4214                           
  4215                           ;doprnt.c: 1130: } else {
  4216  0004C2  D03C               	goto	l402
  4217  0004C4                     l393:
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;doprnt.c: 1131: val = (unsigned long)fval;
  4221                           
  4222                           ; BSR set to: 0
  4223  0004C4  C0DA  F092         	movff	sprintf@fval,___fltol@f1
  4224  0004C8  C0DB  F093         	movff	sprintf@fval+1,___fltol@f1+1
  4225  0004CC  C0DC  F094         	movff	sprintf@fval+2,___fltol@f1+2
  4226  0004D0  C0DD  F095         	movff	sprintf@fval+3,___fltol@f1+3
  4227  0004D4  EC6B  F013         	call	___fltol	;wreg free
  4228  0004D8  C092  F0D2         	movff	?___fltol,sprintf@val
  4229  0004DC  C093  F0D3         	movff	?___fltol+1,sprintf@val+1
  4230  0004E0  C094  F0D4         	movff	?___fltol+2,sprintf@val+2
  4231  0004E4  C095  F0D5         	movff	?___fltol+3,sprintf@val+3
  4232                           
  4233                           ;doprnt.c: 1132: fval -= (double)val;
  4234  0004E8  C0DA  F0AA         	movff	sprintf@fval,___flsub@b
  4235  0004EC  C0DB  F0AB         	movff	sprintf@fval+1,___flsub@b+1
  4236  0004F0  C0DC  F0AC         	movff	sprintf@fval+2,___flsub@b+2
  4237  0004F4  C0DD  F0AD         	movff	sprintf@fval+3,___flsub@b+3
  4238  0004F8  C0D2  F021         	movff	sprintf@val,___xxtofl@val
  4239  0004FC  C0D3  F022         	movff	sprintf@val+1,___xxtofl@val+1
  4240  000500  C0D4  F023         	movff	sprintf@val+2,___xxtofl@val+2
  4241  000504  C0D5  F024         	movff	sprintf@val+3,___xxtofl@val+3
  4242  000508  0E00               	movlw	0
  4243  00050A  EC11  F010         	call	___xxtofl
  4244  00050E  C021  F0AE         	movff	?___xxtofl,___flsub@a
  4245  000512  C022  F0AF         	movff	?___xxtofl+1,___flsub@a+1
  4246  000516  C023  F0B0         	movff	?___xxtofl+2,___flsub@a+2
  4247  00051A  C024  F0B1         	movff	?___xxtofl+3,___flsub@a+3
  4248  00051E  ECF1  F015         	call	___flsub	;wreg free
  4249  000522  C0AA  F0DA         	movff	?___flsub,sprintf@fval
  4250  000526  C0AB  F0DB         	movff	?___flsub+1,sprintf@fval+1
  4251  00052A  C0AC  F0DC         	movff	?___flsub+2,sprintf@fval+2
  4252  00052E  C0AD  F0DD         	movff	?___flsub+3,sprintf@fval+3
  4253                           
  4254                           ;doprnt.c: 1133: exp = 0;
  4255  000532  0E00               	movlw	0
  4256  000534  0100               	movlb	0	; () banked
  4257  000536  6FD7               	movwf	(sprintf@exp+1)& (0+255),b
  4258  000538  0E00               	movlw	0
  4259  00053A  6FD6               	movwf	sprintf@exp& (0+255),b
  4260  00053C                     l402:
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;doprnt.c: 1134: }
  4264                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  4265                           
  4266                           ; BSR set to: 0
  4267  00053C  0E01               	movlw	1
  4268  00053E  6FE0               	movwf	sprintf@c& (0+255),b
  4269  000540                     l4842:
  4270                           
  4271                           ; BSR set to: 0
  4272  000540  0E0A               	movlw	10
  4273  000542  19E0               	xorwf	sprintf@c& (0+255),w,b
  4274  000544  B4D8               	btfsc	status,2,c
  4275  000546  D018               	goto	u5260
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;doprnt.c: 1137: if(val < dpowers[c])
  4279                           
  4280                           ; BSR set to: 0
  4281                           
  4282                           ; BSR set to: 0
  4283  000548  51E0               	movf	sprintf@c& (0+255),w,b
  4284  00054A  0D04               	mullw	4
  4285  00054C  0E53               	movlw	low _dpowers
  4286  00054E  24F3               	addwf	prodl,w,c
  4287  000550  6EF6               	movwf	tblptrl,c
  4288  000552  0EFF               	movlw	high _dpowers
  4289  000554  20F4               	addwfc	prodh,w,c
  4290  000556  6EF7               	movwf	tblptrh,c
  4291  000558                     	if	0	;There are less than 3 active tblptr bytes
  4292  000558                     	endif
  4293  000558  0009               	tblrd		*+
  4294  00055A  50F5               	movf	tablat,w,c
  4295  00055C  5DD2               	subwf	sprintf@val& (0+255),w,b
  4296  00055E  0009               	tblrd		*+
  4297  000560  50F5               	movf	tablat,w,c
  4298  000562  59D3               	subwfb	(sprintf@val+1)& (0+255),w,b
  4299  000564  0009               	tblrd		*+
  4300  000566  50F5               	movf	tablat,w,c
  4301  000568  59D4               	subwfb	(sprintf@val+2)& (0+255),w,b
  4302  00056A  0009               	tblrd		*+
  4303  00056C  50F5               	movf	tablat,w,c
  4304  00056E  59D5               	subwfb	(sprintf@val+3)& (0+255),w,b
  4305  000570  A0D8               	btfss	status,0,c
  4306  000572  D002               	goto	u5260
  4307                           
  4308                           ; BSR set to: 0
  4309                           
  4310                           ; BSR set to: 0
  4311                           
  4312                           ; BSR set to: 0
  4313                           ;doprnt.c: 1138: break;
  4314  000574  2BE0               	incf	sprintf@c& (0+255),f,b
  4315  000576  D7E4               	goto	l4842
  4316  000578                     u5260:
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;doprnt.c: 1142: width -= prec + c + exp;
  4320                           
  4321                           ; BSR set to: 0
  4322  000578  C0E0  F0BE         	movff	sprintf@c,??_sprintf
  4323  00057C  6BBF               	clrf	(??_sprintf+1)& (0+255),b
  4324  00057E  BFBE               	btfsc	??_sprintf& (0+255),7,b
  4325  000580  07BF               	decf	(??_sprintf+1)& (0+255),f,b
  4326  000582  51DE               	movf	sprintf@prec& (0+255),w,b
  4327  000584  27BE               	addwf	??_sprintf& (0+255),f,b
  4328  000586  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  4329  000588  23BF               	addwfc	(??_sprintf+1)& (0+255),f,b
  4330  00058A  51D6               	movf	sprintf@exp& (0+255),w,b
  4331  00058C  27BE               	addwf	??_sprintf& (0+255),f,b
  4332  00058E  51D7               	movf	(sprintf@exp+1)& (0+255),w,b
  4333  000590  23BF               	addwfc	(??_sprintf+1)& (0+255),f,b
  4334  000592  51BE               	movf	??_sprintf& (0+255),w,b
  4335  000594  5FD8               	subwf	sprintf@width& (0+255),f,b
  4336  000596  51BF               	movf	(??_sprintf+1)& (0+255),w,b
  4337  000598  5BD9               	subwfb	(sprintf@width+1)& (0+255),f,b
  4338                           
  4339                           ;doprnt.c: 1143: if(
  4340                           ;doprnt.c: 1147: prec)
  4341  00059A  51DE               	movf	sprintf@prec& (0+255),w,b
  4342  00059C  11DF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4343  00059E  B4D8               	btfsc	status,2,c
  4344  0005A0  D003               	goto	l406
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;doprnt.c: 1148: width--;
  4348  0005A2  07D8               	decf	sprintf@width& (0+255),f,b
  4349  0005A4  A0D8               	btfss	status,0,c
  4350  0005A6  07D9               	decf	(sprintf@width+1)& (0+255),f,b
  4351  0005A8                     l406:
  4352                           
  4353                           ; BSR set to: 0
  4354                           ;doprnt.c: 1149: if(flag & 0x03)
  4355                           
  4356                           ; BSR set to: 0
  4357  0005A8  0E03               	movlw	3
  4358  0005AA  15CC               	andwf	sprintf@flag& (0+255),w,b
  4359  0005AC  6FBE               	movwf	??_sprintf& (0+255),b
  4360  0005AE  0E00               	movlw	0
  4361  0005B0  15CD               	andwf	(sprintf@flag+1)& (0+255),w,b
  4362  0005B2  6FBF               	movwf	(??_sprintf+1)& (0+255),b
  4363  0005B4  51BE               	movf	??_sprintf& (0+255),w,b
  4364  0005B6  11BF               	iorwf	(??_sprintf+1)& (0+255),w,b
  4365  0005B8  B4D8               	btfsc	status,2,c
  4366  0005BA  D00C               	goto	l408
  4367  0005BC  D008               	goto	l4866
  4368  0005BE                     l4862:
  4369                           
  4370                           ; BSR set to: 0
  4371                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  4372  0005BE  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4373  0005C2  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4374  0005C6  0E20               	movlw	32
  4375  0005C8  6EDF               	movwf	indf2,c
  4376                           
  4377                           ; BSR set to: 0
  4378  0005CA  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  4379  0005CC  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  4380  0005CE                     l4866:
  4381                           
  4382                           ; BSR set to: 0
  4383                           ;doprnt.c: 1182: width--;
  4384  0005CE  07D8               	decf	sprintf@width& (0+255),f,b
  4385  0005D0  A0D8               	btfss	status,0,c
  4386  0005D2  07D9               	decf	(sprintf@width+1)& (0+255),f,b
  4387  0005D4                     l408:
  4388                           
  4389                           ; BSR set to: 0
  4390                           
  4391                           ; BSR set to: 0
  4392  0005D4  BFD9               	btfsc	(sprintf@width+1)& (0+255),7,b
  4393  0005D6  D005               	goto	u5290
  4394  0005D8  51D9               	movf	(sprintf@width+1)& (0+255),w,b
  4395  0005DA  E1F1               	bnz	l4862
  4396  0005DC  05D8               	decf	sprintf@width& (0+255),w,b
  4397  0005DE  B0D8               	btfsc	status,0,c
  4398  0005E0  D7EE               	goto	l409
  4399  0005E2                     u5290:
  4400                           
  4401                           ; BSR set to: 0
  4402                           ;doprnt.c: 1183: }
  4403                           ;doprnt.c: 1188: if(flag & 0x03)
  4404                           
  4405                           ; BSR set to: 0
  4406  0005E2  0E03               	movlw	3
  4407  0005E4  15CC               	andwf	sprintf@flag& (0+255),w,b
  4408  0005E6  6FBE               	movwf	??_sprintf& (0+255),b
  4409  0005E8  0E00               	movlw	0
  4410  0005EA  15CD               	andwf	(sprintf@flag+1)& (0+255),w,b
  4411  0005EC  6FBF               	movwf	(??_sprintf+1)& (0+255),b
  4412  0005EE  51BE               	movf	??_sprintf& (0+255),w,b
  4413  0005F0  11BF               	iorwf	(??_sprintf+1)& (0+255),w,b
  4414  0005F2  B4D8               	btfsc	status,2,c
  4415  0005F4  D050               	goto	l412
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  4419  0005F6  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4420  0005FA  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4421  0005FE  0E2D               	movlw	45
  4422  000600  D047               	goto	L7
  4423  000602                     
  4424                           ; BSR set to: 0
  4425                           ;doprnt.c: 1200: {
  4426                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  4427                           
  4428                           ; BSR set to: 0
  4429  000602  C0D2  F01B         	movff	sprintf@val,___lldiv@dividend
  4430  000606  C0D3  F01C         	movff	sprintf@val+1,___lldiv@dividend+1
  4431  00060A  C0D4  F01D         	movff	sprintf@val+2,___lldiv@dividend+2
  4432  00060E  C0D5  F01E         	movff	sprintf@val+3,___lldiv@dividend+3
  4433  000612  51E0               	movf	sprintf@c& (0+255),w,b
  4434  000614  0D04               	mullw	4
  4435  000616  0E53               	movlw	low _dpowers
  4436  000618  24F3               	addwf	prodl,w,c
  4437  00061A  6EF6               	movwf	tblptrl,c
  4438  00061C  0EFF               	movlw	high _dpowers
  4439  00061E  20F4               	addwfc	prodh,w,c
  4440  000620  6EF7               	movwf	tblptrh,c
  4441  000622                     	if	0	;There are less than 3 active tblptr bytes
  4442  000622                     	endif
  4443  000622  0009               	tblrd		*+
  4444  000624  CFF5 F01F          	movff	tablat,___lldiv@divisor
  4445  000628  0009               	tblrd		*+
  4446  00062A  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  4447  00062E  0009               	tblrd		*+
  4448  000630  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  4449  000634  000A               	tblrd		*-
  4450  000636  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  4451  00063A  EC5D  F014         	call	___lldiv	;wreg free
  4452  00063E  C01B  F0CE         	movff	?___lldiv,sprintf@tmpval
  4453  000642  C01C  F0CF         	movff	?___lldiv+1,sprintf@tmpval+1
  4454  000646  C01D  F0D0         	movff	?___lldiv+2,sprintf@tmpval+2
  4455  00064A  C01E  F0D1         	movff	?___lldiv+3,sprintf@tmpval+3
  4456                           
  4457                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4458  00064E  C0CE  F028         	movff	sprintf@tmpval,___llmod@dividend
  4459  000652  C0CF  F029         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4460  000656  C0D0  F02A         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4461  00065A  C0D1  F02B         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4462  00065E  0E0A               	movlw	10
  4463  000660  6E2C               	movwf	___llmod@divisor,c
  4464  000662  0E00               	movlw	0
  4465  000664  6E2D               	movwf	___llmod@divisor+1,c
  4466  000666  0E00               	movlw	0
  4467  000668  6E2E               	movwf	___llmod@divisor+2,c
  4468  00066A  0E00               	movlw	0
  4469  00066C  6E2F               	movwf	___llmod@divisor+3,c
  4470  00066E  EC0E  F015         	call	___llmod	;wreg free
  4471  000672  C028  F0CE         	movff	?___llmod,sprintf@tmpval
  4472  000676  C029  F0CF         	movff	?___llmod+1,sprintf@tmpval+1
  4473  00067A  C02A  F0D0         	movff	?___llmod+2,sprintf@tmpval+2
  4474  00067E  C02B  F0D1         	movff	?___llmod+3,sprintf@tmpval+3
  4475                           
  4476                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  4477  000682  0100               	movlb	0	; () banked
  4478  000684  51CE               	movf	sprintf@tmpval& (0+255),w,b
  4479  000686  0F30               	addlw	48
  4480  000688  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4481  00068C  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4482  000690                     L7:
  4483  000690  6EDF               	movwf	indf2,c
  4484                           
  4485                           ; BSR set to: 0
  4486  000692  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  4487  000694  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  4488  000696                     l412:
  4489                           
  4490                           ; BSR set to: 0
  4491                           
  4492                           ; BSR set to: 0
  4493  000696  07E0               	decf	sprintf@c& (0+255),f,b
  4494  000698  29E0               	incf	sprintf@c& (0+255),w,b
  4495  00069A  B4D8               	btfsc	status,2,c
  4496  00069C  D00C               	goto	l415
  4497  00069E  D7B1               	goto	l413
  4498  0006A0                     l4886:
  4499                           
  4500                           ; BSR set to: 0
  4501                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  4502  0006A0  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4503  0006A4  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4504  0006A8  0E30               	movlw	48
  4505  0006AA  6EDF               	movwf	indf2,c
  4506                           
  4507                           ; BSR set to: 0
  4508  0006AC  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  4509  0006AE  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  4510                           
  4511                           ; BSR set to: 0
  4512                           ;doprnt.c: 1209: exp--;
  4513  0006B0  07D6               	decf	sprintf@exp& (0+255),f,b
  4514  0006B2  A0D8               	btfss	status,0,c
  4515  0006B4  07D7               	decf	(sprintf@exp+1)& (0+255),f,b
  4516  0006B6                     l415:
  4517                           
  4518                           ; BSR set to: 0
  4519                           
  4520                           ; BSR set to: 0
  4521  0006B6  BFD7               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4522  0006B8  D005               	goto	u5320
  4523  0006BA  51D7               	movf	(sprintf@exp+1)& (0+255),w,b
  4524  0006BC  E1F1               	bnz	l4886
  4525  0006BE  05D6               	decf	sprintf@exp& (0+255),w,b
  4526  0006C0  B0D8               	btfsc	status,0,c
  4527  0006C2  D7EE               	goto	l416
  4528  0006C4                     u5320:
  4529                           
  4530                           ; BSR set to: 0
  4531                           ;doprnt.c: 1210: }
  4532                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4533                           
  4534                           ; BSR set to: 0
  4535  0006C4  BFDF               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4536  0006C6  D009               	goto	l418
  4537  0006C8  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  4538  0006CA  E104               	bnz	u5330
  4539  0006CC  0E09               	movlw	9
  4540  0006CE  5DDE               	subwf	sprintf@prec& (0+255),w,b
  4541  0006D0  A0D8               	btfss	status,0,c
  4542  0006D2  D003               	goto	l418
  4543  0006D4                     u5330:
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4547  0006D4  0E08               	movlw	8
  4548  0006D6  6FE0               	movwf	sprintf@c& (0+255),b
  4549  0006D8  D002               	goto	l419
  4550  0006DA                     l418:
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;doprnt.c: 1213: else
  4554                           ;doprnt.c: 1214: c = prec;
  4555  0006DA  C0DE  F0E0         	movff	sprintf@prec,sprintf@c
  4556  0006DE                     l419:
  4557                           
  4558                           ; BSR set to: 0
  4559                           ;doprnt.c: 1215: prec -= c;
  4560                           
  4561                           ; BSR set to: 0
  4562  0006DE  51E0               	movf	sprintf@c& (0+255),w,b
  4563  0006E0  5FDE               	subwf	sprintf@prec& (0+255),f,b
  4564  0006E2  0E00               	movlw	0
  4565  0006E4  BFE0               	btfsc	sprintf@c& (0+255),7,b
  4566  0006E6  0EFF               	movlw	255
  4567  0006E8  5BDF               	subwfb	(sprintf@prec+1)& (0+255),f,b
  4568                           
  4569                           ; BSR set to: 0
  4570                           ;doprnt.c: 1219: if(c)
  4571  0006EA  51E0               	movf	sprintf@c& (0+255),w,b
  4572  0006EC  B4D8               	btfsc	status,2,c
  4573  0006EE  D008               	goto	l420
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  4577  0006F0  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4578  0006F4  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4579  0006F8  0E2E               	movlw	46
  4580  0006FA  6EDF               	movwf	indf2,c
  4581                           
  4582                           ; BSR set to: 0
  4583  0006FC  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  4584  0006FE  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  4585  000700                     l420:
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4589                           
  4590                           ; BSR set to: 0
  4591  000700  51E0               	movf	sprintf@c& (0+255),w,b
  4592  000702  EC5C  F005         	call	_scale
  4593  000706  C054  F0C2         	movff	?_scale,_sprintf$1941
  4594  00070A  C055  F0C3         	movff	?_scale+1,_sprintf$1941+1
  4595  00070E  C056  F0C4         	movff	?_scale+2,_sprintf$1941+2
  4596  000712  C057  F0C5         	movff	?_scale+3,_sprintf$1941+3
  4597                           
  4598                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4599  000716  C0DA  F04C         	movff	sprintf@fval,___flmul@a
  4600  00071A  C0DB  F04D         	movff	sprintf@fval+1,___flmul@a+1
  4601  00071E  C0DC  F04E         	movff	sprintf@fval+2,___flmul@a+2
  4602  000722  C0DD  F04F         	movff	sprintf@fval+3,___flmul@a+3
  4603  000726  C0C2  F048         	movff	_sprintf$1941,___flmul@b
  4604  00072A  C0C3  F049         	movff	_sprintf$1941+1,___flmul@b+1
  4605  00072E  C0C4  F04A         	movff	_sprintf$1941+2,___flmul@b+2
  4606  000732  C0C5  F04B         	movff	_sprintf$1941+3,___flmul@b+3
  4607  000736  EC84  F007         	call	___flmul	;wreg free
  4608  00073A  C048  F092         	movff	?___flmul,___fltol@f1
  4609  00073E  C049  F093         	movff	?___flmul+1,___fltol@f1+1
  4610  000742  C04A  F094         	movff	?___flmul+2,___fltol@f1+2
  4611  000746  C04B  F095         	movff	?___flmul+3,___fltol@f1+3
  4612  00074A  EC6B  F013         	call	___fltol	;wreg free
  4613  00074E  C092  F0D2         	movff	?___fltol,sprintf@val
  4614  000752  C093  F0D3         	movff	?___fltol+1,sprintf@val+1
  4615  000756  C094  F0D4         	movff	?___fltol+2,sprintf@val+2
  4616  00075A  C095  F0D5         	movff	?___fltol+3,sprintf@val+3
  4617                           
  4618                           ;doprnt.c: 1228: while(c--) {
  4619  00075E  D071               	goto	l421
  4620  000760                     
  4621                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4622  000760  C0D2  F01B         	movff	sprintf@val,___lldiv@dividend
  4623  000764  C0D3  F01C         	movff	sprintf@val+1,___lldiv@dividend+1
  4624  000768  C0D4  F01D         	movff	sprintf@val+2,___lldiv@dividend+2
  4625  00076C  C0D5  F01E         	movff	sprintf@val+3,___lldiv@dividend+3
  4626  000770  0100               	movlb	0	; () banked
  4627  000772  51E0               	movf	sprintf@c& (0+255),w,b
  4628  000774  0D04               	mullw	4
  4629  000776  0E53               	movlw	low _dpowers
  4630  000778  24F3               	addwf	prodl,w,c
  4631  00077A  6EF6               	movwf	tblptrl,c
  4632  00077C  0EFF               	movlw	high _dpowers
  4633  00077E  20F4               	addwfc	prodh,w,c
  4634  000780  6EF7               	movwf	tblptrh,c
  4635  000782                     	if	0	;There are less than 3 active tblptr bytes
  4636  000782                     	endif
  4637  000782  0009               	tblrd		*+
  4638  000784  CFF5 F01F          	movff	tablat,___lldiv@divisor
  4639  000788  0009               	tblrd		*+
  4640  00078A  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  4641  00078E  0009               	tblrd		*+
  4642  000790  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  4643  000794  000A               	tblrd		*-
  4644  000796  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  4645  00079A  EC5D  F014         	call	___lldiv	;wreg free
  4646  00079E  C01B  F0CE         	movff	?___lldiv,sprintf@tmpval
  4647  0007A2  C01C  F0CF         	movff	?___lldiv+1,sprintf@tmpval+1
  4648  0007A6  C01D  F0D0         	movff	?___lldiv+2,sprintf@tmpval+2
  4649  0007AA  C01E  F0D1         	movff	?___lldiv+3,sprintf@tmpval+3
  4650                           
  4651                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4652  0007AE  C0CE  F028         	movff	sprintf@tmpval,___llmod@dividend
  4653  0007B2  C0CF  F029         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4654  0007B6  C0D0  F02A         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4655  0007BA  C0D1  F02B         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4656  0007BE  0E0A               	movlw	10
  4657  0007C0  6E2C               	movwf	___llmod@divisor,c
  4658  0007C2  0E00               	movlw	0
  4659  0007C4  6E2D               	movwf	___llmod@divisor+1,c
  4660  0007C6  0E00               	movlw	0
  4661  0007C8  6E2E               	movwf	___llmod@divisor+2,c
  4662  0007CA  0E00               	movlw	0
  4663  0007CC  6E2F               	movwf	___llmod@divisor+3,c
  4664  0007CE  EC0E  F015         	call	___llmod	;wreg free
  4665  0007D2  C028  F0CE         	movff	?___llmod,sprintf@tmpval
  4666  0007D6  C029  F0CF         	movff	?___llmod+1,sprintf@tmpval+1
  4667  0007DA  C02A  F0D0         	movff	?___llmod+2,sprintf@tmpval+2
  4668  0007DE  C02B  F0D1         	movff	?___llmod+3,sprintf@tmpval+3
  4669                           
  4670                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4671  0007E2  0100               	movlb	0	; () banked
  4672  0007E4  51CE               	movf	sprintf@tmpval& (0+255),w,b
  4673  0007E6  0F30               	addlw	48
  4674  0007E8  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4675  0007EC  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4676  0007F0  6EDF               	movwf	indf2,c
  4677                           
  4678                           ; BSR set to: 0
  4679  0007F2  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  4680  0007F4  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;doprnt.c: 1232: val %= dpowers[c];
  4684  0007F6  C0D2  F028         	movff	sprintf@val,___llmod@dividend
  4685  0007FA  C0D3  F029         	movff	sprintf@val+1,___llmod@dividend+1
  4686  0007FE  C0D4  F02A         	movff	sprintf@val+2,___llmod@dividend+2
  4687  000802  C0D5  F02B         	movff	sprintf@val+3,___llmod@dividend+3
  4688  000806  51E0               	movf	sprintf@c& (0+255),w,b
  4689  000808  0D04               	mullw	4
  4690  00080A  0E53               	movlw	low _dpowers
  4691  00080C  24F3               	addwf	prodl,w,c
  4692  00080E  6EF6               	movwf	tblptrl,c
  4693  000810  0EFF               	movlw	high _dpowers
  4694  000812  20F4               	addwfc	prodh,w,c
  4695  000814  6EF7               	movwf	tblptrh,c
  4696  000816                     	if	0	;There are less than 3 active tblptr bytes
  4697  000816                     	endif
  4698  000816  0009               	tblrd		*+
  4699  000818  CFF5 F02C          	movff	tablat,___llmod@divisor
  4700  00081C  0009               	tblrd		*+
  4701  00081E  CFF5 F02D          	movff	tablat,___llmod@divisor+1
  4702  000822  0009               	tblrd		*+
  4703  000824  CFF5 F02E          	movff	tablat,___llmod@divisor+2
  4704  000828  000A               	tblrd		*-
  4705  00082A  CFF5 F02F          	movff	tablat,___llmod@divisor+3
  4706  00082E  EC0E  F015         	call	___llmod	;wreg free
  4707  000832  C028  F0D2         	movff	?___llmod,sprintf@val
  4708  000836  C029  F0D3         	movff	?___llmod+1,sprintf@val+1
  4709  00083A  C02A  F0D4         	movff	?___llmod+2,sprintf@val+2
  4710  00083E  C02B  F0D5         	movff	?___llmod+3,sprintf@val+3
  4711  000842                     l421:
  4712  000842  0100               	movlb	0	; () banked
  4713  000844  07E0               	decf	sprintf@c& (0+255),f,b
  4714  000846  29E0               	incf	sprintf@c& (0+255),w,b
  4715  000848  B4D8               	btfsc	status,2,c
  4716  00084A  D00C               	goto	l424
  4717  00084C  D789               	goto	l422
  4718  00084E                     
  4719                           ; BSR set to: 0
  4720                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4721                           
  4722                           ; BSR set to: 0
  4723  00084E  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  4724  000852  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  4725  000856  0E30               	movlw	48
  4726  000858  6EDF               	movwf	indf2,c
  4727                           
  4728                           ; BSR set to: 0
  4729  00085A  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  4730  00085C  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;doprnt.c: 1237: prec--;
  4734  00085E  07DE               	decf	sprintf@prec& (0+255),f,b
  4735  000860  A0D8               	btfss	status,0,c
  4736  000862  07DF               	decf	(sprintf@prec+1)& (0+255),f,b
  4737  000864                     l424:
  4738                           
  4739                           ; BSR set to: 0
  4740                           
  4741                           ; BSR set to: 0
  4742  000864  51DE               	movf	sprintf@prec& (0+255),w,b
  4743  000866  11DF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4744  000868  B4D8               	btfsc	status,2,c
  4745  00086A  D112               	goto	u5530
  4746  00086C  D7F0               	goto	l425
  4747  00086E                     l384:
  4748                           
  4749                           ; BSR set to: 0
  4750                           ;doprnt.c: 1246: }
  4751                           ;doprnt.c: 1253: {
  4752                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4753                           
  4754                           ; BSR set to: 0
  4755  00086E  C0C8  FFD9         	movff	sprintf@ap,fsr2l
  4756  000872  C0C9  FFDA         	movff	sprintf@ap+1,fsr2h
  4757  000876  CFDE F0D2          	movff	postinc2,sprintf@val
  4758  00087A  CFDD F0D3          	movff	postdec2,sprintf@val+1
  4759  00087E  0E00               	movlw	0
  4760  000880  BFD3               	btfsc	(sprintf@val+1)& (0+255),7,b
  4761  000882  0EFF               	movlw	-1
  4762  000884  6FD4               	movwf	(sprintf@val+2)& (0+255),b
  4763  000886  6FD5               	movwf	(sprintf@val+3)& (0+255),b
  4764                           
  4765                           ; BSR set to: 0
  4766  000888  0E02               	movlw	2
  4767  00088A  27C8               	addwf	sprintf@ap& (0+255),f,b
  4768  00088C  0E00               	movlw	0
  4769  00088E  23C9               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;doprnt.c: 1261: if((long)val < 0) {
  4773  000890  AFD5               	btfss	(sprintf@val+3)& (0+255),7,b
  4774  000892  D00A               	goto	l427
  4775                           
  4776                           ; BSR set to: 0
  4777                           ;doprnt.c: 1262: flag |= 0x03;
  4778  000894  0E03               	movlw	3
  4779  000896  13CC               	iorwf	sprintf@flag& (0+255),f,b
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;doprnt.c: 1263: val = -val;
  4783  000898  1FD5               	comf	(sprintf@val+3)& (0+255),f,b
  4784  00089A  1FD4               	comf	(sprintf@val+2)& (0+255),f,b
  4785  00089C  1FD3               	comf	(sprintf@val+1)& (0+255),f,b
  4786  00089E  6DD2               	negf	sprintf@val& (0+255),b
  4787  0008A0  0E00               	movlw	0
  4788  0008A2  23D3               	addwfc	(sprintf@val+1)& (0+255),f,b
  4789  0008A4  23D4               	addwfc	(sprintf@val+2)& (0+255),f,b
  4790  0008A6  23D5               	addwfc	(sprintf@val+3)& (0+255),f,b
  4791  0008A8                     l427:
  4792                           
  4793                           ; BSR set to: 0
  4794                           ;doprnt.c: 1264: }
  4795                           ;doprnt.c: 1266: }
  4796                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4797                           
  4798                           ; BSR set to: 0
  4799  0008A8  51DE               	movf	sprintf@prec& (0+255),w,b
  4800  0008AA  11DF               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4801  0008AC  A4D8               	btfss	status,2,c
  4802  0008AE  D008               	goto	l428
  4803                           
  4804                           ; BSR set to: 0
  4805  0008B0  51D2               	movf	sprintf@val& (0+255),w,b
  4806  0008B2  11D3               	iorwf	(sprintf@val+1)& (0+255),w,b
  4807  0008B4  11D4               	iorwf	(sprintf@val+2)& (0+255),w,b
  4808  0008B6  11D5               	iorwf	(sprintf@val+3)& (0+255),w,b
  4809  0008B8  A4D8               	btfss	status,2,c
  4810  0008BA  D002               	goto	l428
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;doprnt.c: 1291: prec++;
  4814  0008BC  4BDE               	infsnz	sprintf@prec& (0+255),f,b
  4815  0008BE  2BDF               	incf	(sprintf@prec+1)& (0+255),f,b
  4816  0008C0                     l428:
  4817                           
  4818                           ; BSR set to: 0
  4819                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4820                           
  4821                           ; BSR set to: 0
  4822  0008C0  0E01               	movlw	1
  4823  0008C2  6FE0               	movwf	sprintf@c& (0+255),b
  4824  0008C4                     l4948:
  4825                           
  4826                           ; BSR set to: 0
  4827  0008C4  0E0A               	movlw	10
  4828  0008C6  19E0               	xorwf	sprintf@c& (0+255),w,b
  4829  0008C8  B4D8               	btfsc	status,2,c
  4830  0008CA  D018               	goto	u5420
  4831                           
  4832                           ; BSR set to: 0
  4833                           ;doprnt.c: 1306: if(val < dpowers[c])
  4834                           
  4835                           ; BSR set to: 0
  4836                           
  4837                           ; BSR set to: 0
  4838  0008CC  51E0               	movf	sprintf@c& (0+255),w,b
  4839  0008CE  0D04               	mullw	4
  4840  0008D0  0E53               	movlw	low _dpowers
  4841  0008D2  24F3               	addwf	prodl,w,c
  4842  0008D4  6EF6               	movwf	tblptrl,c
  4843  0008D6  0EFF               	movlw	high _dpowers
  4844  0008D8  20F4               	addwfc	prodh,w,c
  4845  0008DA  6EF7               	movwf	tblptrh,c
  4846  0008DC                     	if	0	;There are less than 3 active tblptr bytes
  4847  0008DC                     	endif
  4848  0008DC  0009               	tblrd		*+
  4849  0008DE  50F5               	movf	tablat,w,c
  4850  0008E0  5DD2               	subwf	sprintf@val& (0+255),w,b
  4851  0008E2  0009               	tblrd		*+
  4852  0008E4  50F5               	movf	tablat,w,c
  4853  0008E6  59D3               	subwfb	(sprintf@val+1)& (0+255),w,b
  4854  0008E8  0009               	tblrd		*+
  4855  0008EA  50F5               	movf	tablat,w,c
  4856  0008EC  59D4               	subwfb	(sprintf@val+2)& (0+255),w,b
  4857  0008EE  0009               	tblrd		*+
  4858  0008F0  50F5               	movf	tablat,w,c
  4859  0008F2  59D5               	subwfb	(sprintf@val+3)& (0+255),w,b
  4860  0008F4  A0D8               	btfss	status,0,c
  4861  0008F6  D002               	goto	u5420
  4862                           
  4863                           ; BSR set to: 0
  4864                           
  4865                           ; BSR set to: 0
  4866                           
  4867                           ; BSR set to: 0
  4868                           ;doprnt.c: 1307: break;
  4869  0008F8  2BE0               	incf	sprintf@c& (0+255),f,b
  4870  0008FA  D7E4               	goto	l4948
  4871  0008FC                     u5420:
  4872                           
  4873                           ; BSR set to: 0
  4874                           ;doprnt.c: 1339: if(c < prec)
  4875                           
  4876                           ; BSR set to: 0
  4877  0008FC  0E80               	movlw	128
  4878  0008FE  BFE0               	btfsc	sprintf@c& (0+255),7,b
  4879  000900  0E7F               	movlw	127
  4880  000902  6FBE               	movwf	??_sprintf& (0+255),b
  4881  000904  51DE               	movf	sprintf@prec& (0+255),w,b
  4882  000906  5DE0               	subwf	sprintf@c& (0+255),w,b
  4883  000908  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  4884  00090A  0A80               	xorlw	128
  4885  00090C  59BE               	subwfb	??_sprintf& (0+255),w,b
  4886  00090E  B0D8               	btfsc	status,0,c
  4887  000910  D003               	goto	l432
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;doprnt.c: 1340: c = prec;
  4891  000912  C0DE  F0E0         	movff	sprintf@prec,sprintf@c
  4892  000916  D010               	goto	l434
  4893  000918                     l432:
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;doprnt.c: 1341: else if(prec < c)
  4897                           
  4898                           ; BSR set to: 0
  4899  000918  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  4900  00091A  0A80               	xorlw	128
  4901  00091C  6FBE               	movwf	??_sprintf& (0+255),b
  4902  00091E  51E0               	movf	sprintf@c& (0+255),w,b
  4903  000920  5DDE               	subwf	sprintf@prec& (0+255),w,b
  4904  000922  0E80               	movlw	128
  4905  000924  BFE0               	btfsc	sprintf@c& (0+255),7,b
  4906  000926  0E7F               	movlw	127
  4907  000928  59BE               	subwfb	??_sprintf& (0+255),w,b
  4908  00092A  B0D8               	btfsc	status,0,c
  4909  00092C  D005               	goto	l434
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;doprnt.c: 1342: prec = c;
  4913  00092E  51E0               	movf	sprintf@c& (0+255),w,b
  4914  000930  6FDE               	movwf	sprintf@prec& (0+255),b
  4915  000932  6BDF               	clrf	(sprintf@prec+1)& (0+255),b
  4916  000934  BFDE               	btfsc	sprintf@prec& (0+255),7,b
  4917  000936  07DF               	decf	(sprintf@prec+1)& (0+255),f,b
  4918  000938                     l434:
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4922                           
  4923                           ; BSR set to: 0
  4924                           
  4925                           ; BSR set to: 0
  4926  000938  51D8               	movf	sprintf@width& (0+255),w,b
  4927  00093A  11D9               	iorwf	(sprintf@width+1)& (0+255),w,b
  4928  00093C  B4D8               	btfsc	status,2,c
  4929  00093E  D00D               	goto	l435
  4930                           
  4931                           ; BSR set to: 0
  4932  000940  0E03               	movlw	3
  4933  000942  15CC               	andwf	sprintf@flag& (0+255),w,b
  4934  000944  6FBE               	movwf	??_sprintf& (0+255),b
  4935  000946  0E00               	movlw	0
  4936  000948  15CD               	andwf	(sprintf@flag+1)& (0+255),w,b
  4937  00094A  6FBF               	movwf	(??_sprintf+1)& (0+255),b
  4938  00094C  51BE               	movf	??_sprintf& (0+255),w,b
  4939  00094E  11BF               	iorwf	(??_sprintf+1)& (0+255),w,b
  4940  000950  B4D8               	btfsc	status,2,c
  4941  000952  D003               	goto	l435
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;doprnt.c: 1346: width--;
  4945  000954  07D8               	decf	sprintf@width& (0+255),f,b
  4946  000956  A0D8               	btfss	status,0,c
  4947  000958  07D9               	decf	(sprintf@width+1)& (0+255),f,b
  4948  00095A                     l435:
  4949                           
  4950                           ; BSR set to: 0
  4951                           ;doprnt.c: 1348: if(flag & 0x4000) {
  4952                           
  4953                           ; BSR set to: 0
  4954  00095A  ADCD               	btfss	(sprintf@flag+1)& (0+255),6,b
  4955  00095C  D013               	goto	l438
  4956                           
  4957                           ; BSR set to: 0
  4958                           ;doprnt.c: 1349: if(width > prec)
  4959  00095E  51D8               	movf	sprintf@width& (0+255),w,b
  4960  000960  5DDE               	subwf	sprintf@prec& (0+255),w,b
  4961  000962  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  4962  000964  0A80               	xorlw	128
  4963  000966  6FBE               	movwf	??_sprintf& (0+255),b
  4964  000968  51D9               	movf	(sprintf@width+1)& (0+255),w,b
  4965  00096A  0A80               	xorlw	128
  4966  00096C  59BE               	subwfb	??_sprintf& (0+255),w,b
  4967  00096E  B0D8               	btfsc	status,0,c
  4968  000970  D005               	goto	l437
  4969                           
  4970                           ; BSR set to: 0
  4971                           ;doprnt.c: 1350: width -= prec;
  4972  000972  51DE               	movf	sprintf@prec& (0+255),w,b
  4973  000974  5FD8               	subwf	sprintf@width& (0+255),f,b
  4974  000976  51DF               	movf	(sprintf@prec+1)& (0+255),w,b
  4975  000978  5BD9               	subwfb	(sprintf@width+1)& (0+255),f,b
  4976  00097A  D004               	goto	l438
  4977  00097C                     l437:
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;doprnt.c: 1351: else
  4981                           ;doprnt.c: 1352: width = 0;
  4982                           
  4983                           ; BSR set to: 0
  4984  00097C  0E00               	movlw	0
  4985  00097E  6FD9               	movwf	(sprintf@width+1)& (0+255),b
  4986  000980  0E00               	movlw	0
  4987  000982  6FD8               	movwf	sprintf@width& (0+255),b
  4988  000984                     l438:
  4989                           
  4990                           ; BSR set to: 0
  4991                           ;doprnt.c: 1353: }
  4992                           ;doprnt.c: 1381: if(width > c)
  4993                           
  4994                           ; BSR set to: 0
  4995                           
  4996                           ; BSR set to: 0
  4997  000984  0E80               	movlw	128
  4998  000986  BFE0               	btfsc	sprintf@c& (0+255),7,b
  4999  000988  0E7F               	movlw	127
  5000  00098A  6FBE               	movwf	??_sprintf& (0+255),b
  5001  00098C  51D8               	movf	sprintf@width& (0+255),w,b
  5002  00098E  5DE0               	subwf	sprintf@c& (0+255),w,b
  5003  000990  51D9               	movf	(sprintf@width+1)& (0+255),w,b
  5004  000992  0A80               	xorlw	128
  5005  000994  59BE               	subwfb	??_sprintf& (0+255),w,b
  5006  000996  B0D8               	btfsc	status,0,c
  5007  000998  D007               	goto	l439
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;doprnt.c: 1382: width -= c;
  5011  00099A  51E0               	movf	sprintf@c& (0+255),w,b
  5012  00099C  5FD8               	subwf	sprintf@width& (0+255),f,b
  5013  00099E  0E00               	movlw	0
  5014  0009A0  BFE0               	btfsc	sprintf@c& (0+255),7,b
  5015  0009A2  0EFF               	movlw	255
  5016  0009A4  5BD9               	subwfb	(sprintf@width+1)& (0+255),f,b
  5017  0009A6  D004               	goto	l440
  5018  0009A8                     l439:
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;doprnt.c: 1383: else
  5022                           ;doprnt.c: 1384: width = 0;
  5023                           
  5024                           ; BSR set to: 0
  5025  0009A8  0E00               	movlw	0
  5026  0009AA  6FD9               	movwf	(sprintf@width+1)& (0+255),b
  5027  0009AC  0E00               	movlw	0
  5028  0009AE  6FD8               	movwf	sprintf@width& (0+255),b
  5029  0009B0                     l440:
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;doprnt.c: 1422: {
  5033                           ;doprnt.c: 1424: if(width
  5034                           ;doprnt.c: 1428: )
  5035                           
  5036                           ; BSR set to: 0
  5037  0009B0  51D8               	movf	sprintf@width& (0+255),w,b
  5038  0009B2  11D9               	iorwf	(sprintf@width+1)& (0+255),w,b
  5039  0009B4  B4D8               	btfsc	status,2,c
  5040  0009B6  D00F               	goto	u5510
  5041  0009B8                     u5500:
  5042                           
  5043                           ; BSR set to: 0
  5044                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5045                           
  5046                           ; BSR set to: 0
  5047                           
  5048                           ;doprnt.c: 1429: do
  5049  0009B8  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  5050  0009BC  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  5051  0009C0  0E20               	movlw	32
  5052  0009C2  6EDF               	movwf	indf2,c
  5053                           
  5054                           ; BSR set to: 0
  5055  0009C4  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  5056  0009C6  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;doprnt.c: 1431: while(--width);
  5060  0009C8  07D8               	decf	sprintf@width& (0+255),f,b
  5061  0009CA  A0D8               	btfss	status,0,c
  5062  0009CC  07D9               	decf	(sprintf@width+1)& (0+255),f,b
  5063  0009CE  51D8               	movf	sprintf@width& (0+255),w,b
  5064  0009D0  11D9               	iorwf	(sprintf@width+1)& (0+255),w,b
  5065  0009D2  A4D8               	btfss	status,2,c
  5066  0009D4  D7F1               	goto	u5500
  5067  0009D6                     u5510:
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;doprnt.c: 1438: if(flag & 0x03)
  5071                           
  5072                           ; BSR set to: 0
  5073                           
  5074                           ; BSR set to: 0
  5075  0009D6  0E03               	movlw	3
  5076  0009D8  15CC               	andwf	sprintf@flag& (0+255),w,b
  5077  0009DA  6FBE               	movwf	??_sprintf& (0+255),b
  5078  0009DC  0E00               	movlw	0
  5079  0009DE  15CD               	andwf	(sprintf@flag+1)& (0+255),w,b
  5080  0009E0  6FBF               	movwf	(??_sprintf+1)& (0+255),b
  5081  0009E2  51BE               	movf	??_sprintf& (0+255),w,b
  5082  0009E4  11BF               	iorwf	(??_sprintf+1)& (0+255),w,b
  5083  0009E6  B4D8               	btfsc	status,2,c
  5084  0009E8  D04B               	goto	l445
  5085                           
  5086                           ; BSR set to: 0
  5087                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5088  0009EA  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  5089  0009EE  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  5090  0009F2  0E2D               	movlw	45
  5091  0009F4  6EDF               	movwf	indf2,c
  5092  0009F6  D042               	goto	l5006
  5093  0009F8                     l5002:
  5094                           
  5095                           ; BSR set to: 0
  5096                           ;doprnt.c: 1478: {
  5097                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5098  0009F8  C0DE  F0BE         	movff	sprintf@prec,??_sprintf
  5099  0009FC  C0DF  F0BF         	movff	sprintf@prec+1,??_sprintf+1
  5100  000A00  90D8               	bcf	status,0,c
  5101  000A02  37BE               	rlcf	??_sprintf& (0+255),f,b
  5102  000A04  37BF               	rlcf	(??_sprintf+1)& (0+255),f,b
  5103  000A06  90D8               	bcf	status,0,c
  5104  000A08  37BE               	rlcf	??_sprintf& (0+255),f,b
  5105  000A0A  37BF               	rlcf	(??_sprintf+1)& (0+255),f,b
  5106  000A0C  0E53               	movlw	low _dpowers
  5107  000A0E  25BE               	addwf	??_sprintf& (0+255),w,b
  5108  000A10  6EF6               	movwf	tblptrl,c
  5109  000A12  0EFF               	movlw	high _dpowers
  5110  000A14  21BF               	addwfc	(??_sprintf+1)& (0+255),w,b
  5111  000A16  6EF7               	movwf	tblptrh,c
  5112  000A18                     	if	0	;There are less than 3 active tblptr bytes
  5113  000A18                     	endif
  5114  000A18  0009               	tblrd		*+
  5115  000A1A  CFF5 F01F          	movff	tablat,___lldiv@divisor
  5116  000A1E  0009               	tblrd		*+
  5117  000A20  CFF5 F020          	movff	tablat,___lldiv@divisor+1
  5118  000A24  0009               	tblrd		*+
  5119  000A26  CFF5 F021          	movff	tablat,___lldiv@divisor+2
  5120  000A2A  000A               	tblrd		*-
  5121  000A2C  CFF5 F022          	movff	tablat,___lldiv@divisor+3
  5122  000A30  C0D2  F01B         	movff	sprintf@val,___lldiv@dividend
  5123  000A34  C0D3  F01C         	movff	sprintf@val+1,___lldiv@dividend+1
  5124  000A38  C0D4  F01D         	movff	sprintf@val+2,___lldiv@dividend+2
  5125  000A3C  C0D5  F01E         	movff	sprintf@val+3,___lldiv@dividend+3
  5126  000A40  EC5D  F014         	call	___lldiv	;wreg free
  5127  000A44  C01B  F028         	movff	?___lldiv,___llmod@dividend
  5128  000A48  C01C  F029         	movff	?___lldiv+1,___llmod@dividend+1
  5129  000A4C  C01D  F02A         	movff	?___lldiv+2,___llmod@dividend+2
  5130  000A50  C01E  F02B         	movff	?___lldiv+3,___llmod@dividend+3
  5131  000A54  0E0A               	movlw	10
  5132  000A56  6E2C               	movwf	___llmod@divisor,c
  5133  000A58  0E00               	movlw	0
  5134  000A5A  6E2D               	movwf	___llmod@divisor+1,c
  5135  000A5C  0E00               	movlw	0
  5136  000A5E  6E2E               	movwf	___llmod@divisor+2,c
  5137  000A60  0E00               	movlw	0
  5138  000A62  6E2F               	movwf	___llmod@divisor+3,c
  5139  000A64  EC0E  F015         	call	___llmod	;wreg free
  5140  000A68  5028               	movf	?___llmod,w,c
  5141  000A6A  0F30               	addlw	48
  5142  000A6C  0100               	movlb	0	; () banked
  5143  000A6E  6FE0               	movwf	sprintf@c& (0+255),b
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;doprnt.c: 1523: }
  5147                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5148  000A70  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  5149  000A74  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  5150  000A78  C0E0  FFDF         	movff	sprintf@c,indf2
  5151  000A7C                     l5006:
  5152                           
  5153                           ; BSR set to: 0
  5154  000A7C  4BB6               	infsnz	sprintf@sp& (0+255),f,b
  5155  000A7E  2BB7               	incf	(sprintf@sp+1)& (0+255),f,b
  5156  000A80                     l445:
  5157                           
  5158                           ; BSR set to: 0
  5159                           
  5160                           ; BSR set to: 0
  5161  000A80  07DE               	decf	sprintf@prec& (0+255),f,b
  5162  000A82  A0D8               	btfss	status,0,c
  5163  000A84  07DF               	decf	(sprintf@prec+1)& (0+255),f,b
  5164  000A86  29DE               	incf	sprintf@prec& (0+255),w,b
  5165  000A88  E1B7               	bnz	l5002
  5166  000A8A  29DF               	incf	(sprintf@prec+1)& (0+255),w,b
  5167  000A8C  A4D8               	btfss	status,2,c
  5168  000A8E  D7B4               	goto	l446
  5169  000A90                     u5530:
  5170                           
  5171                           ; BSR set to: 0
  5172                           
  5173                           ; BSR set to: 0
  5174                           
  5175                           ; BSR set to: 0
  5176  000A90  C0B8  FFF6         	movff	sprintf@f,tblptrl
  5177  000A94  C0B9  FFF7         	movff	sprintf@f+1,tblptrh
  5178  000A98  4BB8               	infsnz	sprintf@f& (0+255),f,b
  5179  000A9A  2BB9               	incf	(sprintf@f+1)& (0+255),f,b
  5180  000A9C                     	if	0	;tblptru may be non-zero
  5181  000A9C                     	endif
  5182  000A9C                     	if	0	;tblptru may be non-zero
  5183  000A9C                     	endif
  5184  000A9C  0008               	tblrd		*
  5185  000A9E  CFF5 F0E0          	movff	tablat,sprintf@c
  5186  000AA2  51E0               	movf	sprintf@c& (0+255),w,b
  5187  000AA4  A4D8               	btfss	status,2,c
  5188  000AA6  EF10  F000         	goto	l356
  5189  000AAA                     u5540:
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;doprnt.c: 1538: *sp = 0;
  5193                           
  5194                           ; BSR set to: 0
  5195                           
  5196                           ;doprnt.c: 1525: }
  5197                           ;doprnt.c: 1533: }
  5198                           ;doprnt.c: 1535: alldone:
  5199                           
  5200                           ; BSR set to: 0
  5201  000AAA  C0B6  FFD9         	movff	sprintf@sp,fsr2l
  5202  000AAE  C0B7  FFDA         	movff	sprintf@sp+1,fsr2h
  5203  000AB2  0E00               	movlw	0
  5204  000AB4  6EDF               	movwf	indf2,c
  5205  000AB6  0012               	return	
  5206  000AB8                     __end_of_sprintf:
  5207                           	opt stack 0
  5208                           tblptru	equ	0xFF8
  5209                           tblptrh	equ	0xFF7
  5210                           tblptrl	equ	0xFF6
  5211                           tablat	equ	0xFF5
  5212                           prodh	equ	0xFF4
  5213                           prodl	equ	0xFF3
  5214                           intcon	equ	0xFF2
  5215                           intcon2	equ	0xFF1
  5216                           intcon3	equ	0xFF0
  5217                           postinc0	equ	0xFEE
  5218                           wreg	equ	0xFE8
  5219                           indf1	equ	0xFE7
  5220                           postdec1	equ	0xFE5
  5221                           fsr1h	equ	0xFE2
  5222                           fsr1l	equ	0xFE1
  5223                           indf2	equ	0xFDF
  5224                           postinc2	equ	0xFDE
  5225                           postdec2	equ	0xFDD
  5226                           fsr2h	equ	0xFDA
  5227                           fsr2l	equ	0xFD9
  5228                           status	equ	0xFD8
  5229                           
  5230 ;; *************** function _scale *****************
  5231 ;; Defined at:
  5232 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  5233 ;; Parameters:    Size  Location     Type
  5234 ;;  scl             1    wreg     char 
  5235 ;; Auto vars:     Size  Location     Type
  5236 ;;  scl             1   17[BANK0 ] char 
  5237 ;; Return value:  Size  Location     Type
  5238 ;;                  4   83[COMRAM] char 
  5239 ;; Registers used:
  5240 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5241 ;; Tracked objects:
  5242 ;;		On entry : 0/0
  5243 ;;		On exit  : 0/0
  5244 ;;		Unchanged: 0/0
  5245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5246 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5247 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5249 ;;      Totals:         4       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5250 ;;Total ram usage:        9 bytes
  5251 ;; Hardware stack levels used:    1
  5252 ;; Hardware stack levels required when called:    3
  5253 ;; This function calls:
  5254 ;;		___awdiv
  5255 ;;		___awmod
  5256 ;;		___flmul
  5257 ;; This function is called by:
  5258 ;;		_sprintf
  5259 ;; This function uses a non-reentrant model
  5260 ;;
  5261                           
  5262                           	psect	text13
  5263  000AB8                     __ptext13:
  5264                           	opt stack 0
  5265  000AB8                     _scale:
  5266                           	opt stack 25
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;incstack = 0
  5270                           ;scale@scl stored from wreg
  5271  000AB8  0100               	movlb	0	; () banked
  5272  000ABA  6F91               	movwf	scale@scl& (0+255),b
  5273                           
  5274                           ;doprnt.c: 428: if(scl < 0) {
  5275  000ABC  0100               	movlb	0	; () banked
  5276  000ABE  AF91               	btfss	scale@scl& (0+255),7,b
  5277  000AC0  D112               	goto	l345
  5278                           
  5279                           ; BSR set to: 0
  5280                           ;doprnt.c: 429: scl = -scl;
  5281  000AC2  6D91               	negf	scale@scl& (0+255),b
  5282                           
  5283                           ;doprnt.c: 430: if(scl>=110)
  5284  000AC4  5191               	movf	scale@scl& (0+255),w,b
  5285  000AC6  0A80               	xorlw	128
  5286  000AC8  0F12               	addlw	-238
  5287  000ACA  A0D8               	btfss	status,0,c
  5288  000ACC  D09A               	goto	l346
  5289                           
  5290                           ; BSR set to: 0
  5291                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5292  000ACE  0E00               	movlw	0
  5293  000AD0  6E24               	movwf	___awdiv@divisor+1,c
  5294  000AD2  0E0A               	movlw	10
  5295  000AD4  6E23               	movwf	___awdiv@divisor,c
  5296  000AD6  0E00               	movlw	0
  5297  000AD8  6E1E               	movwf	___awmod@divisor+1,c
  5298  000ADA  0E64               	movlw	100
  5299  000ADC  6E1D               	movwf	___awmod@divisor,c
  5300  000ADE  5191               	movf	scale@scl& (0+255),w,b
  5301  000AE0  6E1B               	movwf	___awmod@dividend,c
  5302  000AE2  6A1C               	clrf	___awmod@dividend+1,c
  5303  000AE4  BE1B               	btfsc	___awmod@dividend,7,c
  5304  000AE6  061C               	decf	___awmod@dividend+1,f,c
  5305  000AE8  EC9E  F014         	call	___awmod	;wreg free
  5306  000AEC  C01B  F021         	movff	?___awmod,___awdiv@dividend
  5307  000AF0  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  5308  000AF4  ECDA  F013         	call	___awdiv	;wreg free
  5309  000AF8  90D8               	bcf	status,0,c
  5310  000AFA  3621               	rlcf	?___awdiv,f,c
  5311  000AFC  3622               	rlcf	?___awdiv+1,f,c
  5312  000AFE  90D8               	bcf	status,0,c
  5313  000B00  3621               	rlcf	?___awdiv,f,c
  5314  000B02  3622               	rlcf	?___awdiv+1,f,c
  5315  000B04  0E24               	movlw	36
  5316  000B06  2621               	addwf	?___awdiv,f,c
  5317  000B08  0E00               	movlw	0
  5318  000B0A  2222               	addwfc	?___awdiv+1,f,c
  5319  000B0C  0E1F               	movlw	low __npowers_
  5320  000B0E  2421               	addwf	?___awdiv,w,c
  5321  000B10  6EF6               	movwf	tblptrl,c
  5322  000B12  0EFF               	movlw	high __npowers_
  5323  000B14  2022               	addwfc	?___awdiv+1,w,c
  5324  000B16  6EF7               	movwf	tblptrh,c
  5325  000B18                     	if	0	;There are less than 3 active tblptr bytes
  5326  000B18                     	endif
  5327  000B18  0009               	tblrd		*+
  5328  000B1A  CFF5 F04C          	movff	tablat,___flmul@a
  5329  000B1E  0009               	tblrd		*+
  5330  000B20  CFF5 F04D          	movff	tablat,___flmul@a+1
  5331  000B24  0009               	tblrd		*+
  5332  000B26  CFF5 F04E          	movff	tablat,___flmul@a+2
  5333  000B2A  000A               	tblrd		*-
  5334  000B2C  CFF5 F04F          	movff	tablat,___flmul@a+3
  5335  000B30  0E00               	movlw	0
  5336  000B32  6E24               	movwf	___awdiv@divisor+1,c
  5337  000B34  0E64               	movlw	100
  5338  000B36  6E23               	movwf	___awdiv@divisor,c
  5339  000B38  0100               	movlb	0	; () banked
  5340  000B3A  5191               	movf	scale@scl& (0+255),w,b
  5341  000B3C  6E21               	movwf	___awdiv@dividend,c
  5342  000B3E  6A22               	clrf	___awdiv@dividend+1,c
  5343  000B40  BE21               	btfsc	___awdiv@dividend,7,c
  5344  000B42  0622               	decf	___awdiv@dividend+1,f,c
  5345  000B44  ECDA  F013         	call	___awdiv	;wreg free
  5346  000B48  90D8               	bcf	status,0,c
  5347  000B4A  3621               	rlcf	?___awdiv,f,c
  5348  000B4C  3622               	rlcf	?___awdiv+1,f,c
  5349  000B4E  90D8               	bcf	status,0,c
  5350  000B50  3621               	rlcf	?___awdiv,f,c
  5351  000B52  3622               	rlcf	?___awdiv+1,f,c
  5352  000B54  0E48               	movlw	72
  5353  000B56  2621               	addwf	?___awdiv,f,c
  5354  000B58  0E00               	movlw	0
  5355  000B5A  2222               	addwfc	?___awdiv+1,f,c
  5356  000B5C  0E1F               	movlw	low __npowers_
  5357  000B5E  2421               	addwf	?___awdiv,w,c
  5358  000B60  6EF6               	movwf	tblptrl,c
  5359  000B62  0EFF               	movlw	high __npowers_
  5360  000B64  2022               	addwfc	?___awdiv+1,w,c
  5361  000B66  6EF7               	movwf	tblptrh,c
  5362  000B68                     	if	0	;There are less than 3 active tblptr bytes
  5363  000B68                     	endif
  5364  000B68  0009               	tblrd		*+
  5365  000B6A  CFF5 F048          	movff	tablat,___flmul@b
  5366  000B6E  0009               	tblrd		*+
  5367  000B70  CFF5 F049          	movff	tablat,___flmul@b+1
  5368  000B74  0009               	tblrd		*+
  5369  000B76  CFF5 F04A          	movff	tablat,___flmul@b+2
  5370  000B7A  000A               	tblrd		*-
  5371  000B7C  CFF5 F04B          	movff	tablat,___flmul@b+3
  5372  000B80  EC84  F007         	call	___flmul	;wreg free
  5373  000B84  C048  F08D         	movff	?___flmul,_scale$1940
  5374  000B88  C049  F08E         	movff	?___flmul+1,_scale$1940+1
  5375  000B8C  C04A  F08F         	movff	?___flmul+2,_scale$1940+2
  5376  000B90  C04B  F090         	movff	?___flmul+3,_scale$1940+3
  5377                           
  5378                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5379  000B94  C08D  F048         	movff	_scale$1940,___flmul@b
  5380  000B98  C08E  F049         	movff	_scale$1940+1,___flmul@b+1
  5381  000B9C  C08F  F04A         	movff	_scale$1940+2,___flmul@b+2
  5382  000BA0  C090  F04B         	movff	_scale$1940+3,___flmul@b+3
  5383  000BA4  0E00               	movlw	0
  5384  000BA6  6E1E               	movwf	___awmod@divisor+1,c
  5385  000BA8  0E0A               	movlw	10
  5386  000BAA  6E1D               	movwf	___awmod@divisor,c
  5387  000BAC  0100               	movlb	0	; () banked
  5388  000BAE  5191               	movf	scale@scl& (0+255),w,b
  5389  000BB0  6E1B               	movwf	___awmod@dividend,c
  5390  000BB2  6A1C               	clrf	___awmod@dividend+1,c
  5391  000BB4  BE1B               	btfsc	___awmod@dividend,7,c
  5392  000BB6  061C               	decf	___awmod@dividend+1,f,c
  5393  000BB8  EC9E  F014         	call	___awmod	;wreg free
  5394  000BBC  90D8               	bcf	status,0,c
  5395  000BBE  361B               	rlcf	?___awmod,f,c
  5396  000BC0  361C               	rlcf	?___awmod+1,f,c
  5397  000BC2  90D8               	bcf	status,0,c
  5398  000BC4  361B               	rlcf	?___awmod,f,c
  5399  000BC6  361C               	rlcf	?___awmod+1,f,c
  5400  000BC8  0E1F               	movlw	low __npowers_
  5401  000BCA  241B               	addwf	?___awmod,w,c
  5402  000BCC  6EF6               	movwf	tblptrl,c
  5403  000BCE  0EFF               	movlw	high __npowers_
  5404  000BD0  201C               	addwfc	?___awmod+1,w,c
  5405  000BD2  6EF7               	movwf	tblptrh,c
  5406  000BD4                     	if	0	;There are less than 3 active tblptr bytes
  5407  000BD4                     	endif
  5408  000BD4  0009               	tblrd		*+
  5409  000BD6  CFF5 F04C          	movff	tablat,___flmul@a
  5410  000BDA  0009               	tblrd		*+
  5411  000BDC  CFF5 F04D          	movff	tablat,___flmul@a+1
  5412  000BE0  0009               	tblrd		*+
  5413  000BE2  CFF5 F04E          	movff	tablat,___flmul@a+2
  5414  000BE6  000A               	tblrd		*-
  5415  000BE8  CFF5 F04F          	movff	tablat,___flmul@a+3
  5416  000BEC  EC84  F007         	call	___flmul	;wreg free
  5417  000BF0  C048  F054         	movff	?___flmul,?_scale
  5418  000BF4  C049  F055         	movff	?___flmul+1,?_scale+1
  5419  000BF8  C04A  F056         	movff	?___flmul+2,?_scale+2
  5420  000BFC  C04B  F057         	movff	?___flmul+3,?_scale+3
  5421  000C00  0012               	return	
  5422  000C02                     l346:
  5423                           
  5424                           ;doprnt.c: 432: else if(scl > 10)
  5425  000C02  0100               	movlb	0	; () banked
  5426  000C04  5191               	movf	scale@scl& (0+255),w,b
  5427  000C06  0A80               	xorlw	128
  5428  000C08  0F75               	addlw	-139
  5429  000C0A  A0D8               	btfss	status,0,c
  5430  000C0C  D056               	goto	l349
  5431                           
  5432                           ; BSR set to: 0
  5433                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5434  000C0E  0E00               	movlw	0
  5435  000C10  6E24               	movwf	___awdiv@divisor+1,c
  5436  000C12  0E0A               	movlw	10
  5437  000C14  6E23               	movwf	___awdiv@divisor,c
  5438  000C16  5191               	movf	scale@scl& (0+255),w,b
  5439  000C18  6E21               	movwf	___awdiv@dividend,c
  5440  000C1A  6A22               	clrf	___awdiv@dividend+1,c
  5441  000C1C  BE21               	btfsc	___awdiv@dividend,7,c
  5442  000C1E  0622               	decf	___awdiv@dividend+1,f,c
  5443  000C20  ECDA  F013         	call	___awdiv	;wreg free
  5444  000C24  90D8               	bcf	status,0,c
  5445  000C26  3621               	rlcf	?___awdiv,f,c
  5446  000C28  3622               	rlcf	?___awdiv+1,f,c
  5447  000C2A  90D8               	bcf	status,0,c
  5448  000C2C  3621               	rlcf	?___awdiv,f,c
  5449  000C2E  3622               	rlcf	?___awdiv+1,f,c
  5450  000C30  0E24               	movlw	36
  5451  000C32  2621               	addwf	?___awdiv,f,c
  5452  000C34  0E00               	movlw	0
  5453  000C36  2222               	addwfc	?___awdiv+1,f,c
  5454  000C38  0E1F               	movlw	low __npowers_
  5455  000C3A  2421               	addwf	?___awdiv,w,c
  5456  000C3C  6EF6               	movwf	tblptrl,c
  5457  000C3E  0EFF               	movlw	high __npowers_
  5458  000C40  2022               	addwfc	?___awdiv+1,w,c
  5459  000C42  6EF7               	movwf	tblptrh,c
  5460  000C44                     	if	0	;There are less than 3 active tblptr bytes
  5461  000C44                     	endif
  5462  000C44  0009               	tblrd		*+
  5463  000C46  CFF5 F048          	movff	tablat,___flmul@b
  5464  000C4A  0009               	tblrd		*+
  5465  000C4C  CFF5 F049          	movff	tablat,___flmul@b+1
  5466  000C50  0009               	tblrd		*+
  5467  000C52  CFF5 F04A          	movff	tablat,___flmul@b+2
  5468  000C56  000A               	tblrd		*-
  5469  000C58  CFF5 F04B          	movff	tablat,___flmul@b+3
  5470  000C5C  0E00               	movlw	0
  5471  000C5E  6E1E               	movwf	___awmod@divisor+1,c
  5472  000C60  0E0A               	movlw	10
  5473  000C62  6E1D               	movwf	___awmod@divisor,c
  5474  000C64  0100               	movlb	0	; () banked
  5475  000C66  5191               	movf	scale@scl& (0+255),w,b
  5476  000C68  6E1B               	movwf	___awmod@dividend,c
  5477  000C6A  6A1C               	clrf	___awmod@dividend+1,c
  5478  000C6C  BE1B               	btfsc	___awmod@dividend,7,c
  5479  000C6E  061C               	decf	___awmod@dividend+1,f,c
  5480  000C70  EC9E  F014         	call	___awmod	;wreg free
  5481  000C74  90D8               	bcf	status,0,c
  5482  000C76  361B               	rlcf	?___awmod,f,c
  5483  000C78  361C               	rlcf	?___awmod+1,f,c
  5484  000C7A  90D8               	bcf	status,0,c
  5485  000C7C  361B               	rlcf	?___awmod,f,c
  5486  000C7E  361C               	rlcf	?___awmod+1,f,c
  5487  000C80  0E1F               	movlw	low __npowers_
  5488  000C82  241B               	addwf	?___awmod,w,c
  5489  000C84  6EF6               	movwf	tblptrl,c
  5490  000C86  0EFF               	movlw	high __npowers_
  5491  000C88  201C               	addwfc	?___awmod+1,w,c
  5492  000C8A  6EF7               	movwf	tblptrh,c
  5493  000C8C                     	if	0	;There are less than 3 active tblptr bytes
  5494  000C8C                     	endif
  5495  000C8C  0009               	tblrd		*+
  5496  000C8E  CFF5 F04C          	movff	tablat,___flmul@a
  5497  000C92  0009               	tblrd		*+
  5498  000C94  CFF5 F04D          	movff	tablat,___flmul@a+1
  5499  000C98  0009               	tblrd		*+
  5500  000C9A  CFF5 F04E          	movff	tablat,___flmul@a+2
  5501  000C9E  000A               	tblrd		*-
  5502  000CA0  CFF5 F04F          	movff	tablat,___flmul@a+3
  5503  000CA4  EC84  F007         	call	___flmul	;wreg free
  5504  000CA8  C048  F054         	movff	?___flmul,?_scale
  5505  000CAC  C049  F055         	movff	?___flmul+1,?_scale+1
  5506  000CB0  C04A  F056         	movff	?___flmul+2,?_scale+2
  5507  000CB4  C04B  F057         	movff	?___flmul+3,?_scale+3
  5508  000CB8  0012               	return	
  5509  000CBA                     l349:
  5510                           
  5511                           ;doprnt.c: 434: return _npowers_[scl];
  5512  000CBA  0100               	movlb	0	; () banked
  5513  000CBC  5191               	movf	scale@scl& (0+255),w,b
  5514  000CBE  0D04               	mullw	4
  5515  000CC0  0E1F               	movlw	low __npowers_
  5516  000CC2  24F3               	addwf	prodl,w,c
  5517  000CC4  6EF6               	movwf	tblptrl,c
  5518  000CC6  0EFF               	movlw	high __npowers_
  5519  000CC8  20F4               	addwfc	prodh,w,c
  5520  000CCA  6EF7               	movwf	tblptrh,c
  5521  000CCC                     	if	0	;There are less than 3 active tblptr bytes
  5522  000CCC                     	endif
  5523  000CCC  0009               	tblrd		*+
  5524  000CCE  CFF5 F054          	movff	tablat,?_scale
  5525  000CD2  0009               	tblrd		*+
  5526  000CD4  CFF5 F055          	movff	tablat,?_scale+1
  5527  000CD8  0009               	tblrd		*+
  5528  000CDA  CFF5 F056          	movff	tablat,?_scale+2
  5529  000CDE  000A               	tblrd		*-
  5530  000CE0  CFF5 F057          	movff	tablat,?_scale+3
  5531                           
  5532                           ; BSR set to: 0
  5533  000CE4  0012               	return	
  5534  000CE6                     l345:
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;doprnt.c: 435: }
  5538                           ;doprnt.c: 436: if(scl>=110)
  5539                           
  5540                           ; BSR set to: 0
  5541  000CE6  5191               	movf	scale@scl& (0+255),w,b
  5542  000CE8  0A80               	xorlw	128
  5543  000CEA  0F12               	addlw	-238
  5544  000CEC  A0D8               	btfss	status,0,c
  5545  000CEE  D09A               	goto	l350
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5549  000CF0  0E00               	movlw	0
  5550  000CF2  6E24               	movwf	___awdiv@divisor+1,c
  5551  000CF4  0E0A               	movlw	10
  5552  000CF6  6E23               	movwf	___awdiv@divisor,c
  5553  000CF8  0E00               	movlw	0
  5554  000CFA  6E1E               	movwf	___awmod@divisor+1,c
  5555  000CFC  0E64               	movlw	100
  5556  000CFE  6E1D               	movwf	___awmod@divisor,c
  5557  000D00  5191               	movf	scale@scl& (0+255),w,b
  5558  000D02  6E1B               	movwf	___awmod@dividend,c
  5559  000D04  6A1C               	clrf	___awmod@dividend+1,c
  5560  000D06  BE1B               	btfsc	___awmod@dividend,7,c
  5561  000D08  061C               	decf	___awmod@dividend+1,f,c
  5562  000D0A  EC9E  F014         	call	___awmod	;wreg free
  5563  000D0E  C01B  F021         	movff	?___awmod,___awdiv@dividend
  5564  000D12  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  5565  000D16  ECDA  F013         	call	___awdiv	;wreg free
  5566  000D1A  90D8               	bcf	status,0,c
  5567  000D1C  3621               	rlcf	?___awdiv,f,c
  5568  000D1E  3622               	rlcf	?___awdiv+1,f,c
  5569  000D20  90D8               	bcf	status,0,c
  5570  000D22  3621               	rlcf	?___awdiv,f,c
  5571  000D24  3622               	rlcf	?___awdiv+1,f,c
  5572  000D26  0E24               	movlw	36
  5573  000D28  2621               	addwf	?___awdiv,f,c
  5574  000D2A  0E00               	movlw	0
  5575  000D2C  2222               	addwfc	?___awdiv+1,f,c
  5576  000D2E  0EEB               	movlw	low __powers_
  5577  000D30  2421               	addwf	?___awdiv,w,c
  5578  000D32  6EF6               	movwf	tblptrl,c
  5579  000D34  0EFE               	movlw	high __powers_
  5580  000D36  2022               	addwfc	?___awdiv+1,w,c
  5581  000D38  6EF7               	movwf	tblptrh,c
  5582  000D3A                     	if	0	;There are less than 3 active tblptr bytes
  5583  000D3A                     	endif
  5584  000D3A  0009               	tblrd		*+
  5585  000D3C  CFF5 F04C          	movff	tablat,___flmul@a
  5586  000D40  0009               	tblrd		*+
  5587  000D42  CFF5 F04D          	movff	tablat,___flmul@a+1
  5588  000D46  0009               	tblrd		*+
  5589  000D48  CFF5 F04E          	movff	tablat,___flmul@a+2
  5590  000D4C  000A               	tblrd		*-
  5591  000D4E  CFF5 F04F          	movff	tablat,___flmul@a+3
  5592  000D52  0E00               	movlw	0
  5593  000D54  6E24               	movwf	___awdiv@divisor+1,c
  5594  000D56  0E64               	movlw	100
  5595  000D58  6E23               	movwf	___awdiv@divisor,c
  5596  000D5A  0100               	movlb	0	; () banked
  5597  000D5C  5191               	movf	scale@scl& (0+255),w,b
  5598  000D5E  6E21               	movwf	___awdiv@dividend,c
  5599  000D60  6A22               	clrf	___awdiv@dividend+1,c
  5600  000D62  BE21               	btfsc	___awdiv@dividend,7,c
  5601  000D64  0622               	decf	___awdiv@dividend+1,f,c
  5602  000D66  ECDA  F013         	call	___awdiv	;wreg free
  5603  000D6A  90D8               	bcf	status,0,c
  5604  000D6C  3621               	rlcf	?___awdiv,f,c
  5605  000D6E  3622               	rlcf	?___awdiv+1,f,c
  5606  000D70  90D8               	bcf	status,0,c
  5607  000D72  3621               	rlcf	?___awdiv,f,c
  5608  000D74  3622               	rlcf	?___awdiv+1,f,c
  5609  000D76  0E48               	movlw	72
  5610  000D78  2621               	addwf	?___awdiv,f,c
  5611  000D7A  0E00               	movlw	0
  5612  000D7C  2222               	addwfc	?___awdiv+1,f,c
  5613  000D7E  0EEB               	movlw	low __powers_
  5614  000D80  2421               	addwf	?___awdiv,w,c
  5615  000D82  6EF6               	movwf	tblptrl,c
  5616  000D84  0EFE               	movlw	high __powers_
  5617  000D86  2022               	addwfc	?___awdiv+1,w,c
  5618  000D88  6EF7               	movwf	tblptrh,c
  5619  000D8A                     	if	0	;There are less than 3 active tblptr bytes
  5620  000D8A                     	endif
  5621  000D8A  0009               	tblrd		*+
  5622  000D8C  CFF5 F048          	movff	tablat,___flmul@b
  5623  000D90  0009               	tblrd		*+
  5624  000D92  CFF5 F049          	movff	tablat,___flmul@b+1
  5625  000D96  0009               	tblrd		*+
  5626  000D98  CFF5 F04A          	movff	tablat,___flmul@b+2
  5627  000D9C  000A               	tblrd		*-
  5628  000D9E  CFF5 F04B          	movff	tablat,___flmul@b+3
  5629  000DA2  EC84  F007         	call	___flmul	;wreg free
  5630  000DA6  C048  F08D         	movff	?___flmul,_scale$1940
  5631  000DAA  C049  F08E         	movff	?___flmul+1,_scale$1940+1
  5632  000DAE  C04A  F08F         	movff	?___flmul+2,_scale$1940+2
  5633  000DB2  C04B  F090         	movff	?___flmul+3,_scale$1940+3
  5634                           
  5635                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5636  000DB6  C08D  F048         	movff	_scale$1940,___flmul@b
  5637  000DBA  C08E  F049         	movff	_scale$1940+1,___flmul@b+1
  5638  000DBE  C08F  F04A         	movff	_scale$1940+2,___flmul@b+2
  5639  000DC2  C090  F04B         	movff	_scale$1940+3,___flmul@b+3
  5640  000DC6  0E00               	movlw	0
  5641  000DC8  6E1E               	movwf	___awmod@divisor+1,c
  5642  000DCA  0E0A               	movlw	10
  5643  000DCC  6E1D               	movwf	___awmod@divisor,c
  5644  000DCE  0100               	movlb	0	; () banked
  5645  000DD0  5191               	movf	scale@scl& (0+255),w,b
  5646  000DD2  6E1B               	movwf	___awmod@dividend,c
  5647  000DD4  6A1C               	clrf	___awmod@dividend+1,c
  5648  000DD6  BE1B               	btfsc	___awmod@dividend,7,c
  5649  000DD8  061C               	decf	___awmod@dividend+1,f,c
  5650  000DDA  EC9E  F014         	call	___awmod	;wreg free
  5651  000DDE  90D8               	bcf	status,0,c
  5652  000DE0  361B               	rlcf	?___awmod,f,c
  5653  000DE2  361C               	rlcf	?___awmod+1,f,c
  5654  000DE4  90D8               	bcf	status,0,c
  5655  000DE6  361B               	rlcf	?___awmod,f,c
  5656  000DE8  361C               	rlcf	?___awmod+1,f,c
  5657  000DEA  0EEB               	movlw	low __powers_
  5658  000DEC  241B               	addwf	?___awmod,w,c
  5659  000DEE  6EF6               	movwf	tblptrl,c
  5660  000DF0  0EFE               	movlw	high __powers_
  5661  000DF2  201C               	addwfc	?___awmod+1,w,c
  5662  000DF4  6EF7               	movwf	tblptrh,c
  5663  000DF6                     	if	0	;There are less than 3 active tblptr bytes
  5664  000DF6                     	endif
  5665  000DF6  0009               	tblrd		*+
  5666  000DF8  CFF5 F04C          	movff	tablat,___flmul@a
  5667  000DFC  0009               	tblrd		*+
  5668  000DFE  CFF5 F04D          	movff	tablat,___flmul@a+1
  5669  000E02  0009               	tblrd		*+
  5670  000E04  CFF5 F04E          	movff	tablat,___flmul@a+2
  5671  000E08  000A               	tblrd		*-
  5672  000E0A  CFF5 F04F          	movff	tablat,___flmul@a+3
  5673  000E0E  EC84  F007         	call	___flmul	;wreg free
  5674  000E12  C048  F054         	movff	?___flmul,?_scale
  5675  000E16  C049  F055         	movff	?___flmul+1,?_scale+1
  5676  000E1A  C04A  F056         	movff	?___flmul+2,?_scale+2
  5677  000E1E  C04B  F057         	movff	?___flmul+3,?_scale+3
  5678  000E22  0012               	return	
  5679  000E24                     l350:
  5680                           
  5681                           ;doprnt.c: 438: else if(scl > 10)
  5682  000E24  0100               	movlb	0	; () banked
  5683  000E26  5191               	movf	scale@scl& (0+255),w,b
  5684  000E28  0A80               	xorlw	128
  5685  000E2A  0F75               	addlw	-139
  5686  000E2C  A0D8               	btfss	status,0,c
  5687  000E2E  D056               	goto	l352
  5688                           
  5689                           ; BSR set to: 0
  5690                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5691  000E30  0E00               	movlw	0
  5692  000E32  6E24               	movwf	___awdiv@divisor+1,c
  5693  000E34  0E0A               	movlw	10
  5694  000E36  6E23               	movwf	___awdiv@divisor,c
  5695  000E38  5191               	movf	scale@scl& (0+255),w,b
  5696  000E3A  6E21               	movwf	___awdiv@dividend,c
  5697  000E3C  6A22               	clrf	___awdiv@dividend+1,c
  5698  000E3E  BE21               	btfsc	___awdiv@dividend,7,c
  5699  000E40  0622               	decf	___awdiv@dividend+1,f,c
  5700  000E42  ECDA  F013         	call	___awdiv	;wreg free
  5701  000E46  90D8               	bcf	status,0,c
  5702  000E48  3621               	rlcf	?___awdiv,f,c
  5703  000E4A  3622               	rlcf	?___awdiv+1,f,c
  5704  000E4C  90D8               	bcf	status,0,c
  5705  000E4E  3621               	rlcf	?___awdiv,f,c
  5706  000E50  3622               	rlcf	?___awdiv+1,f,c
  5707  000E52  0E24               	movlw	36
  5708  000E54  2621               	addwf	?___awdiv,f,c
  5709  000E56  0E00               	movlw	0
  5710  000E58  2222               	addwfc	?___awdiv+1,f,c
  5711  000E5A  0EEB               	movlw	low __powers_
  5712  000E5C  2421               	addwf	?___awdiv,w,c
  5713  000E5E  6EF6               	movwf	tblptrl,c
  5714  000E60  0EFE               	movlw	high __powers_
  5715  000E62  2022               	addwfc	?___awdiv+1,w,c
  5716  000E64  6EF7               	movwf	tblptrh,c
  5717  000E66                     	if	0	;There are less than 3 active tblptr bytes
  5718  000E66                     	endif
  5719  000E66  0009               	tblrd		*+
  5720  000E68  CFF5 F048          	movff	tablat,___flmul@b
  5721  000E6C  0009               	tblrd		*+
  5722  000E6E  CFF5 F049          	movff	tablat,___flmul@b+1
  5723  000E72  0009               	tblrd		*+
  5724  000E74  CFF5 F04A          	movff	tablat,___flmul@b+2
  5725  000E78  000A               	tblrd		*-
  5726  000E7A  CFF5 F04B          	movff	tablat,___flmul@b+3
  5727  000E7E  0E00               	movlw	0
  5728  000E80  6E1E               	movwf	___awmod@divisor+1,c
  5729  000E82  0E0A               	movlw	10
  5730  000E84  6E1D               	movwf	___awmod@divisor,c
  5731  000E86  0100               	movlb	0	; () banked
  5732  000E88  5191               	movf	scale@scl& (0+255),w,b
  5733  000E8A  6E1B               	movwf	___awmod@dividend,c
  5734  000E8C  6A1C               	clrf	___awmod@dividend+1,c
  5735  000E8E  BE1B               	btfsc	___awmod@dividend,7,c
  5736  000E90  061C               	decf	___awmod@dividend+1,f,c
  5737  000E92  EC9E  F014         	call	___awmod	;wreg free
  5738  000E96  90D8               	bcf	status,0,c
  5739  000E98  361B               	rlcf	?___awmod,f,c
  5740  000E9A  361C               	rlcf	?___awmod+1,f,c
  5741  000E9C  90D8               	bcf	status,0,c
  5742  000E9E  361B               	rlcf	?___awmod,f,c
  5743  000EA0  361C               	rlcf	?___awmod+1,f,c
  5744  000EA2  0EEB               	movlw	low __powers_
  5745  000EA4  241B               	addwf	?___awmod,w,c
  5746  000EA6  6EF6               	movwf	tblptrl,c
  5747  000EA8  0EFE               	movlw	high __powers_
  5748  000EAA  201C               	addwfc	?___awmod+1,w,c
  5749  000EAC  6EF7               	movwf	tblptrh,c
  5750  000EAE                     	if	0	;There are less than 3 active tblptr bytes
  5751  000EAE                     	endif
  5752  000EAE  0009               	tblrd		*+
  5753  000EB0  CFF5 F04C          	movff	tablat,___flmul@a
  5754  000EB4  0009               	tblrd		*+
  5755  000EB6  CFF5 F04D          	movff	tablat,___flmul@a+1
  5756  000EBA  0009               	tblrd		*+
  5757  000EBC  CFF5 F04E          	movff	tablat,___flmul@a+2
  5758  000EC0  000A               	tblrd		*-
  5759  000EC2  CFF5 F04F          	movff	tablat,___flmul@a+3
  5760  000EC6  EC84  F007         	call	___flmul	;wreg free
  5761  000ECA  C048  F054         	movff	?___flmul,?_scale
  5762  000ECE  C049  F055         	movff	?___flmul+1,?_scale+1
  5763  000ED2  C04A  F056         	movff	?___flmul+2,?_scale+2
  5764  000ED6  C04B  F057         	movff	?___flmul+3,?_scale+3
  5765  000EDA  0012               	return	
  5766  000EDC                     l352:
  5767                           
  5768                           ;doprnt.c: 440: return _powers_[scl];
  5769  000EDC  0100               	movlb	0	; () banked
  5770  000EDE  5191               	movf	scale@scl& (0+255),w,b
  5771  000EE0  0D04               	mullw	4
  5772  000EE2  0EEB               	movlw	low __powers_
  5773  000EE4  24F3               	addwf	prodl,w,c
  5774  000EE6  6EF6               	movwf	tblptrl,c
  5775  000EE8  0EFE               	movlw	high __powers_
  5776  000EEA  20F4               	addwfc	prodh,w,c
  5777  000EEC  6EF7               	movwf	tblptrh,c
  5778  000EEE                     	if	0	;There are less than 3 active tblptr bytes
  5779  000EEE                     	endif
  5780  000EEE  0009               	tblrd		*+
  5781  000EF0  CFF5 F054          	movff	tablat,?_scale
  5782  000EF4  0009               	tblrd		*+
  5783  000EF6  CFF5 F055          	movff	tablat,?_scale+1
  5784  000EFA  0009               	tblrd		*+
  5785  000EFC  CFF5 F056          	movff	tablat,?_scale+2
  5786  000F00  000A               	tblrd		*-
  5787  000F02  CFF5 F057          	movff	tablat,?_scale+3
  5788  000F06  0012               	return	
  5789  000F08                     __end_of_scale:
  5790                           	opt stack 0
  5791                           tblptru	equ	0xFF8
  5792                           tblptrh	equ	0xFF7
  5793                           tblptrl	equ	0xFF6
  5794                           tablat	equ	0xFF5
  5795                           prodh	equ	0xFF4
  5796                           prodl	equ	0xFF3
  5797                           intcon	equ	0xFF2
  5798                           intcon2	equ	0xFF1
  5799                           intcon3	equ	0xFF0
  5800                           postinc0	equ	0xFEE
  5801                           wreg	equ	0xFE8
  5802                           indf1	equ	0xFE7
  5803                           postdec1	equ	0xFE5
  5804                           fsr1h	equ	0xFE2
  5805                           fsr1l	equ	0xFE1
  5806                           indf2	equ	0xFDF
  5807                           postinc2	equ	0xFDE
  5808                           postdec2	equ	0xFDD
  5809                           fsr2h	equ	0xFDA
  5810                           fsr2l	equ	0xFD9
  5811                           status	equ	0xFD8
  5812                           
  5813 ;; *************** function _isdigit *****************
  5814 ;; Defined at:
  5815 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;  c               1    wreg     unsigned char 
  5818 ;; Auto vars:     Size  Location     Type
  5819 ;;  c               1   28[COMRAM] unsigned char 
  5820 ;; Return value:  Size  Location     Type
  5821 ;;		None               void
  5822 ;; Registers used:
  5823 ;;		wreg, status,2, status,0
  5824 ;; Tracked objects:
  5825 ;;		On entry : 0/0
  5826 ;;		On exit  : 0/0
  5827 ;;		Unchanged: 0/0
  5828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5830 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5831 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5832 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5833 ;;Total ram usage:        3 bytes
  5834 ;; Hardware stack levels used:    1
  5835 ;; Hardware stack levels required when called:    2
  5836 ;; This function calls:
  5837 ;;		Nothing
  5838 ;; This function is called by:
  5839 ;;		_sprintf
  5840 ;; This function uses a non-reentrant model
  5841 ;;
  5842                           
  5843                           	psect	text14
  5844  002E48                     __ptext14:
  5845                           	opt stack 0
  5846  002E48                     _isdigit:
  5847                           	opt stack 26
  5848                           
  5849                           ;incstack = 0
  5850                           ;isdigit@c stored from wreg
  5851  002E48  6E1D               	movwf	isdigit@c,c
  5852  002E4A  0E00               	movlw	0
  5853  002E4C  6E1C               	movwf	_isdigit$1565,c
  5854  002E4E  0E3A               	movlw	58
  5855  002E50  601D               	cpfslt	isdigit@c,c
  5856  002E52  D005               	goto	l813
  5857  002E54  0E2F               	movlw	47
  5858  002E56  641D               	cpfsgt	isdigit@c,c
  5859  002E58  D002               	goto	l813
  5860  002E5A  0E01               	movlw	1
  5861  002E5C  6E1C               	movwf	_isdigit$1565,c
  5862  002E5E                     l813:
  5863  002E5E  C01C  F01B         	movff	_isdigit$1565,??_isdigit
  5864  002E62  301B               	rrcf	??_isdigit,w,c
  5865  002E64  0012               	return	
  5866  002E66                     __end_of_isdigit:
  5867                           	opt stack 0
  5868                           tblptru	equ	0xFF8
  5869                           tblptrh	equ	0xFF7
  5870                           tblptrl	equ	0xFF6
  5871                           tablat	equ	0xFF5
  5872                           prodh	equ	0xFF4
  5873                           prodl	equ	0xFF3
  5874                           intcon	equ	0xFF2
  5875                           intcon2	equ	0xFF1
  5876                           intcon3	equ	0xFF0
  5877                           postinc0	equ	0xFEE
  5878                           wreg	equ	0xFE8
  5879                           indf1	equ	0xFE7
  5880                           postdec1	equ	0xFE5
  5881                           fsr1h	equ	0xFE2
  5882                           fsr1l	equ	0xFE1
  5883                           indf2	equ	0xFDF
  5884                           postinc2	equ	0xFDE
  5885                           postdec2	equ	0xFDD
  5886                           fsr2h	equ	0xFDA
  5887                           fsr2l	equ	0xFD9
  5888                           status	equ	0xFD8
  5889                           
  5890 ;; *************** function _fround *****************
  5891 ;; Defined at:
  5892 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  5893 ;; Parameters:    Size  Location     Type
  5894 ;;  prec            1    wreg     unsigned char 
  5895 ;; Auto vars:     Size  Location     Type
  5896 ;;  prec            1   21[BANK0 ] unsigned char 
  5897 ;; Return value:  Size  Location     Type
  5898 ;;                  4   83[COMRAM] unsigned char 
  5899 ;; Registers used:
  5900 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5901 ;; Tracked objects:
  5902 ;;		On entry : 0/0
  5903 ;;		On exit  : 0/0
  5904 ;;		Unchanged: 0/0
  5905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5906 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5907 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5909 ;;      Totals:         4       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5910 ;;Total ram usage:       13 bytes
  5911 ;; Hardware stack levels used:    1
  5912 ;; Hardware stack levels required when called:    3
  5913 ;; This function calls:
  5914 ;;		___awdiv
  5915 ;;		___awmod
  5916 ;;		___flmul
  5917 ;; This function is called by:
  5918 ;;		_sprintf
  5919 ;; This function uses a non-reentrant model
  5920 ;;
  5921                           
  5922                           	psect	text15
  5923  001B98                     __ptext15:
  5924                           	opt stack 0
  5925  001B98                     _fround:
  5926                           	opt stack 25
  5927                           
  5928                           ;incstack = 0
  5929                           ;fround@prec stored from wreg
  5930  001B98  0100               	movlb	0	; () banked
  5931  001B9A  6F95               	movwf	fround@prec& (0+255),b
  5932                           
  5933                           ;doprnt.c: 413: if(prec>=110)
  5934  001B9C  0E6D               	movlw	109
  5935  001B9E  0100               	movlb	0	; () banked
  5936  001BA0  6595               	cpfsgt	fround@prec& (0+255),b
  5937  001BA2  D0AC               	goto	l339
  5938                           
  5939                           ; BSR set to: 0
  5940                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5941  001BA4  0E00               	movlw	0
  5942  001BA6  6E24               	movwf	___awdiv@divisor+1,c
  5943  001BA8  0E0A               	movlw	10
  5944  001BAA  6E23               	movwf	___awdiv@divisor,c
  5945  001BAC  0E00               	movlw	0
  5946  001BAE  6E1E               	movwf	___awmod@divisor+1,c
  5947  001BB0  0E64               	movlw	100
  5948  001BB2  6E1D               	movwf	___awmod@divisor,c
  5949  001BB4  C095  F01B         	movff	fround@prec,___awmod@dividend
  5950  001BB8  6A1C               	clrf	___awmod@dividend+1,c
  5951  001BBA  EC9E  F014         	call	___awmod	;wreg free
  5952  001BBE  C01B  F021         	movff	?___awmod,___awdiv@dividend
  5953  001BC2  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
  5954  001BC6  ECDA  F013         	call	___awdiv	;wreg free
  5955  001BCA  90D8               	bcf	status,0,c
  5956  001BCC  3621               	rlcf	?___awdiv,f,c
  5957  001BCE  3622               	rlcf	?___awdiv+1,f,c
  5958  001BD0  90D8               	bcf	status,0,c
  5959  001BD2  3621               	rlcf	?___awdiv,f,c
  5960  001BD4  3622               	rlcf	?___awdiv+1,f,c
  5961  001BD6  0E24               	movlw	36
  5962  001BD8  2621               	addwf	?___awdiv,f,c
  5963  001BDA  0E00               	movlw	0
  5964  001BDC  2222               	addwfc	?___awdiv+1,f,c
  5965  001BDE  0E1F               	movlw	low __npowers_
  5966  001BE0  2421               	addwf	?___awdiv,w,c
  5967  001BE2  6EF6               	movwf	tblptrl,c
  5968  001BE4  0EFF               	movlw	high __npowers_
  5969  001BE6  2022               	addwfc	?___awdiv+1,w,c
  5970  001BE8  6EF7               	movwf	tblptrh,c
  5971  001BEA                     	if	0	;There are less than 3 active tblptr bytes
  5972  001BEA                     	endif
  5973  001BEA  0009               	tblrd		*+
  5974  001BEC  CFF5 F04C          	movff	tablat,___flmul@a
  5975  001BF0  0009               	tblrd		*+
  5976  001BF2  CFF5 F04D          	movff	tablat,___flmul@a+1
  5977  001BF6  0009               	tblrd		*+
  5978  001BF8  CFF5 F04E          	movff	tablat,___flmul@a+2
  5979  001BFC  000A               	tblrd		*-
  5980  001BFE  CFF5 F04F          	movff	tablat,___flmul@a+3
  5981  001C02  0E00               	movlw	0
  5982  001C04  6E24               	movwf	___awdiv@divisor+1,c
  5983  001C06  0E64               	movlw	100
  5984  001C08  6E23               	movwf	___awdiv@divisor,c
  5985  001C0A  C095  F021         	movff	fround@prec,___awdiv@dividend
  5986  001C0E  6A22               	clrf	___awdiv@dividend+1,c
  5987  001C10  ECDA  F013         	call	___awdiv	;wreg free
  5988  001C14  90D8               	bcf	status,0,c
  5989  001C16  3621               	rlcf	?___awdiv,f,c
  5990  001C18  3622               	rlcf	?___awdiv+1,f,c
  5991  001C1A  90D8               	bcf	status,0,c
  5992  001C1C  3621               	rlcf	?___awdiv,f,c
  5993  001C1E  3622               	rlcf	?___awdiv+1,f,c
  5994  001C20  0E48               	movlw	72
  5995  001C22  2621               	addwf	?___awdiv,f,c
  5996  001C24  0E00               	movlw	0
  5997  001C26  2222               	addwfc	?___awdiv+1,f,c
  5998  001C28  0E1F               	movlw	low __npowers_
  5999  001C2A  2421               	addwf	?___awdiv,w,c
  6000  001C2C  6EF6               	movwf	tblptrl,c
  6001  001C2E  0EFF               	movlw	high __npowers_
  6002  001C30  2022               	addwfc	?___awdiv+1,w,c
  6003  001C32  6EF7               	movwf	tblptrh,c
  6004  001C34                     	if	0	;There are less than 3 active tblptr bytes
  6005  001C34                     	endif
  6006  001C34  0009               	tblrd		*+
  6007  001C36  CFF5 F048          	movff	tablat,___flmul@b
  6008  001C3A  0009               	tblrd		*+
  6009  001C3C  CFF5 F049          	movff	tablat,___flmul@b+1
  6010  001C40  0009               	tblrd		*+
  6011  001C42  CFF5 F04A          	movff	tablat,___flmul@b+2
  6012  001C46  000A               	tblrd		*-
  6013  001C48  CFF5 F04B          	movff	tablat,___flmul@b+3
  6014  001C4C  EC84  F007         	call	___flmul	;wreg free
  6015  001C50  C048  F091         	movff	?___flmul,_fround$1938
  6016  001C54  C049  F092         	movff	?___flmul+1,_fround$1938+1
  6017  001C58  C04A  F093         	movff	?___flmul+2,_fround$1938+2
  6018  001C5C  C04B  F094         	movff	?___flmul+3,_fround$1938+3
  6019                           
  6020                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6021  001C60  0E00               	movlw	0
  6022  001C62  6E1E               	movwf	___awmod@divisor+1,c
  6023  001C64  0E0A               	movlw	10
  6024  001C66  6E1D               	movwf	___awmod@divisor,c
  6025  001C68  C095  F01B         	movff	fround@prec,___awmod@dividend
  6026  001C6C  6A1C               	clrf	___awmod@dividend+1,c
  6027  001C6E  EC9E  F014         	call	___awmod	;wreg free
  6028  001C72  90D8               	bcf	status,0,c
  6029  001C74  361B               	rlcf	?___awmod,f,c
  6030  001C76  361C               	rlcf	?___awmod+1,f,c
  6031  001C78  90D8               	bcf	status,0,c
  6032  001C7A  361B               	rlcf	?___awmod,f,c
  6033  001C7C  361C               	rlcf	?___awmod+1,f,c
  6034  001C7E  0E1F               	movlw	low __npowers_
  6035  001C80  241B               	addwf	?___awmod,w,c
  6036  001C82  6EF6               	movwf	tblptrl,c
  6037  001C84  0EFF               	movlw	high __npowers_
  6038  001C86  201C               	addwfc	?___awmod+1,w,c
  6039  001C88  6EF7               	movwf	tblptrh,c
  6040  001C8A                     	if	0	;There are less than 3 active tblptr bytes
  6041  001C8A                     	endif
  6042  001C8A  0009               	tblrd		*+
  6043  001C8C  CFF5 F04C          	movff	tablat,___flmul@a
  6044  001C90  0009               	tblrd		*+
  6045  001C92  CFF5 F04D          	movff	tablat,___flmul@a+1
  6046  001C96  0009               	tblrd		*+
  6047  001C98  CFF5 F04E          	movff	tablat,___flmul@a+2
  6048  001C9C  000A               	tblrd		*-
  6049  001C9E  CFF5 F04F          	movff	tablat,___flmul@a+3
  6050  001CA2  C091  F048         	movff	_fround$1938,___flmul@b
  6051  001CA6  C092  F049         	movff	_fround$1938+1,___flmul@b+1
  6052  001CAA  C093  F04A         	movff	_fround$1938+2,___flmul@b+2
  6053  001CAE  C094  F04B         	movff	_fround$1938+3,___flmul@b+3
  6054  001CB2  EC84  F007         	call	___flmul	;wreg free
  6055  001CB6  C048  F08D         	movff	?___flmul,_fround$1939
  6056  001CBA  C049  F08E         	movff	?___flmul+1,_fround$1939+1
  6057  001CBE  C04A  F08F         	movff	?___flmul+2,_fround$1939+2
  6058  001CC2  C04B  F090         	movff	?___flmul+3,_fround$1939+3
  6059                           
  6060                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6061  001CC6  C08D  F048         	movff	_fround$1939,___flmul@b
  6062  001CCA  C08E  F049         	movff	_fround$1939+1,___flmul@b+1
  6063  001CCE  C08F  F04A         	movff	_fround$1939+2,___flmul@b+2
  6064  001CD2  C090  F04B         	movff	_fround$1939+3,___flmul@b+3
  6065  001CD6  0E00               	movlw	0
  6066  001CD8  6E4C               	movwf	___flmul@a,c
  6067  001CDA  0E00               	movlw	0
  6068  001CDC  6E4D               	movwf	___flmul@a+1,c
  6069  001CDE  0E00               	movlw	0
  6070  001CE0  6E4E               	movwf	___flmul@a+2,c
  6071  001CE2  0E3F               	movlw	63
  6072  001CE4  6E4F               	movwf	___flmul@a+3,c
  6073  001CE6  EC84  F007         	call	___flmul	;wreg free
  6074  001CEA  C048  F054         	movff	?___flmul,?_fround
  6075  001CEE  C049  F055         	movff	?___flmul+1,?_fround+1
  6076  001CF2  C04A  F056         	movff	?___flmul+2,?_fround+2
  6077  001CF6  C04B  F057         	movff	?___flmul+3,?_fround+3
  6078  001CFA  0012               	return	
  6079  001CFC                     l339:
  6080                           
  6081                           ;doprnt.c: 415: else if(prec > 10)
  6082  001CFC  0E0A               	movlw	10
  6083  001CFE  0100               	movlb	0	; () banked
  6084  001D00  6595               	cpfsgt	fround@prec& (0+255),b
  6085  001D02  D06B               	goto	l342
  6086                           
  6087                           ; BSR set to: 0
  6088                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6089  001D04  0E00               	movlw	0
  6090  001D06  6E1E               	movwf	___awmod@divisor+1,c
  6091  001D08  0E0A               	movlw	10
  6092  001D0A  6E1D               	movwf	___awmod@divisor,c
  6093  001D0C  C095  F01B         	movff	fround@prec,___awmod@dividend
  6094  001D10  6A1C               	clrf	___awmod@dividend+1,c
  6095  001D12  EC9E  F014         	call	___awmod	;wreg free
  6096  001D16  90D8               	bcf	status,0,c
  6097  001D18  361B               	rlcf	?___awmod,f,c
  6098  001D1A  361C               	rlcf	?___awmod+1,f,c
  6099  001D1C  90D8               	bcf	status,0,c
  6100  001D1E  361B               	rlcf	?___awmod,f,c
  6101  001D20  361C               	rlcf	?___awmod+1,f,c
  6102  001D22  0E1F               	movlw	low __npowers_
  6103  001D24  241B               	addwf	?___awmod,w,c
  6104  001D26  6EF6               	movwf	tblptrl,c
  6105  001D28  0EFF               	movlw	high __npowers_
  6106  001D2A  201C               	addwfc	?___awmod+1,w,c
  6107  001D2C  6EF7               	movwf	tblptrh,c
  6108  001D2E                     	if	0	;There are less than 3 active tblptr bytes
  6109  001D2E                     	endif
  6110  001D2E  0009               	tblrd		*+
  6111  001D30  CFF5 F04C          	movff	tablat,___flmul@a
  6112  001D34  0009               	tblrd		*+
  6113  001D36  CFF5 F04D          	movff	tablat,___flmul@a+1
  6114  001D3A  0009               	tblrd		*+
  6115  001D3C  CFF5 F04E          	movff	tablat,___flmul@a+2
  6116  001D40  000A               	tblrd		*-
  6117  001D42  CFF5 F04F          	movff	tablat,___flmul@a+3
  6118  001D46  0E00               	movlw	0
  6119  001D48  6E24               	movwf	___awdiv@divisor+1,c
  6120  001D4A  0E0A               	movlw	10
  6121  001D4C  6E23               	movwf	___awdiv@divisor,c
  6122  001D4E  C095  F021         	movff	fround@prec,___awdiv@dividend
  6123  001D52  6A22               	clrf	___awdiv@dividend+1,c
  6124  001D54  ECDA  F013         	call	___awdiv	;wreg free
  6125  001D58  90D8               	bcf	status,0,c
  6126  001D5A  3621               	rlcf	?___awdiv,f,c
  6127  001D5C  3622               	rlcf	?___awdiv+1,f,c
  6128  001D5E  90D8               	bcf	status,0,c
  6129  001D60  3621               	rlcf	?___awdiv,f,c
  6130  001D62  3622               	rlcf	?___awdiv+1,f,c
  6131  001D64  0E24               	movlw	36
  6132  001D66  2621               	addwf	?___awdiv,f,c
  6133  001D68  0E00               	movlw	0
  6134  001D6A  2222               	addwfc	?___awdiv+1,f,c
  6135  001D6C  0E1F               	movlw	low __npowers_
  6136  001D6E  2421               	addwf	?___awdiv,w,c
  6137  001D70  6EF6               	movwf	tblptrl,c
  6138  001D72  0EFF               	movlw	high __npowers_
  6139  001D74  2022               	addwfc	?___awdiv+1,w,c
  6140  001D76  6EF7               	movwf	tblptrh,c
  6141  001D78                     	if	0	;There are less than 3 active tblptr bytes
  6142  001D78                     	endif
  6143  001D78  0009               	tblrd		*+
  6144  001D7A  CFF5 F048          	movff	tablat,___flmul@b
  6145  001D7E  0009               	tblrd		*+
  6146  001D80  CFF5 F049          	movff	tablat,___flmul@b+1
  6147  001D84  0009               	tblrd		*+
  6148  001D86  CFF5 F04A          	movff	tablat,___flmul@b+2
  6149  001D8A  000A               	tblrd		*-
  6150  001D8C  CFF5 F04B          	movff	tablat,___flmul@b+3
  6151  001D90  EC84  F007         	call	___flmul	;wreg free
  6152  001D94  C048  F091         	movff	?___flmul,_fround$1938
  6153  001D98  C049  F092         	movff	?___flmul+1,_fround$1938+1
  6154  001D9C  C04A  F093         	movff	?___flmul+2,_fround$1938+2
  6155  001DA0  C04B  F094         	movff	?___flmul+3,_fround$1938+3
  6156                           
  6157                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6158  001DA4  C091  F048         	movff	_fround$1938,___flmul@b
  6159  001DA8  C092  F049         	movff	_fround$1938+1,___flmul@b+1
  6160  001DAC  C093  F04A         	movff	_fround$1938+2,___flmul@b+2
  6161  001DB0  C094  F04B         	movff	_fround$1938+3,___flmul@b+3
  6162  001DB4  0E00               	movlw	0
  6163  001DB6  6E4C               	movwf	___flmul@a,c
  6164  001DB8  0E00               	movlw	0
  6165  001DBA  6E4D               	movwf	___flmul@a+1,c
  6166  001DBC  0E00               	movlw	0
  6167  001DBE  6E4E               	movwf	___flmul@a+2,c
  6168  001DC0  0E3F               	movlw	63
  6169  001DC2  6E4F               	movwf	___flmul@a+3,c
  6170  001DC4  EC84  F007         	call	___flmul	;wreg free
  6171  001DC8  C048  F054         	movff	?___flmul,?_fround
  6172  001DCC  C049  F055         	movff	?___flmul+1,?_fround+1
  6173  001DD0  C04A  F056         	movff	?___flmul+2,?_fround+2
  6174  001DD4  C04B  F057         	movff	?___flmul+3,?_fround+3
  6175  001DD8  0012               	return	
  6176  001DDA                     l342:
  6177                           
  6178                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6179  001DDA  0100               	movlb	0	; () banked
  6180  001DDC  5195               	movf	fround@prec& (0+255),w,b
  6181  001DDE  0D04               	mullw	4
  6182  001DE0  0E1F               	movlw	low __npowers_
  6183  001DE2  24F3               	addwf	prodl,w,c
  6184  001DE4  6EF6               	movwf	tblptrl,c
  6185  001DE6  0EFF               	movlw	high __npowers_
  6186  001DE8  20F4               	addwfc	prodh,w,c
  6187  001DEA  6EF7               	movwf	tblptrh,c
  6188  001DEC                     	if	0	;There are less than 3 active tblptr bytes
  6189  001DEC                     	endif
  6190  001DEC  0009               	tblrd		*+
  6191  001DEE  CFF5 F048          	movff	tablat,___flmul@b
  6192  001DF2  0009               	tblrd		*+
  6193  001DF4  CFF5 F049          	movff	tablat,___flmul@b+1
  6194  001DF8  0009               	tblrd		*+
  6195  001DFA  CFF5 F04A          	movff	tablat,___flmul@b+2
  6196  001DFE  000A               	tblrd		*-
  6197  001E00  CFF5 F04B          	movff	tablat,___flmul@b+3
  6198  001E04  0E00               	movlw	0
  6199  001E06  6E4C               	movwf	___flmul@a,c
  6200  001E08  0E00               	movlw	0
  6201  001E0A  6E4D               	movwf	___flmul@a+1,c
  6202  001E0C  0E00               	movlw	0
  6203  001E0E  6E4E               	movwf	___flmul@a+2,c
  6204  001E10  0E3F               	movlw	63
  6205  001E12  6E4F               	movwf	___flmul@a+3,c
  6206  001E14  EC84  F007         	call	___flmul	;wreg free
  6207  001E18  C048  F054         	movff	?___flmul,?_fround
  6208  001E1C  C049  F055         	movff	?___flmul+1,?_fround+1
  6209  001E20  C04A  F056         	movff	?___flmul+2,?_fround+2
  6210  001E24  C04B  F057         	movff	?___flmul+3,?_fround+3
  6211  001E28  0012               	return	
  6212  001E2A                     __end_of_fround:
  6213                           	opt stack 0
  6214                           tblptru	equ	0xFF8
  6215                           tblptrh	equ	0xFF7
  6216                           tblptrl	equ	0xFF6
  6217                           tablat	equ	0xFF5
  6218                           prodh	equ	0xFF4
  6219                           prodl	equ	0xFF3
  6220                           intcon	equ	0xFF2
  6221                           intcon2	equ	0xFF1
  6222                           intcon3	equ	0xFF0
  6223                           postinc0	equ	0xFEE
  6224                           wreg	equ	0xFE8
  6225                           indf1	equ	0xFE7
  6226                           postdec1	equ	0xFE5
  6227                           fsr1h	equ	0xFE2
  6228                           fsr1l	equ	0xFE1
  6229                           indf2	equ	0xFDF
  6230                           postinc2	equ	0xFDE
  6231                           postdec2	equ	0xFDD
  6232                           fsr2h	equ	0xFDA
  6233                           fsr2l	equ	0xFD9
  6234                           status	equ	0xFD8
  6235                           
  6236 ;; *************** function ___flmul *****************
  6237 ;; Defined at:
  6238 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcmul.c"
  6239 ;; Parameters:    Size  Location     Type
  6240 ;;  b               4   71[COMRAM] unsigned char 
  6241 ;;  a               4   75[COMRAM] unsigned char 
  6242 ;; Auto vars:     Size  Location     Type
  6243 ;;  prod            4    7[BANK0 ] struct .
  6244 ;;  grs             4    2[BANK0 ] unsigned long 
  6245 ;;  temp            2   11[BANK0 ] struct .
  6246 ;;  bexp            1    6[BANK0 ] unsigned char 
  6247 ;;  aexp            1    1[BANK0 ] unsigned char 
  6248 ;;  sign            1    0[BANK0 ] unsigned char 
  6249 ;; Return value:  Size  Location     Type
  6250 ;;                  4   71[COMRAM] unsigned char 
  6251 ;; Registers used:
  6252 ;;		wreg, status,2, status,0, prodl, prodh
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6258 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6259 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6260 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6261 ;;      Totals:        12      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6262 ;;Total ram usage:       25 bytes
  6263 ;; Hardware stack levels used:    1
  6264 ;; Hardware stack levels required when called:    2
  6265 ;; This function calls:
  6266 ;;		Nothing
  6267 ;; This function is called by:
  6268 ;;		_operation
  6269 ;;		_main
  6270 ;;		_fround
  6271 ;;		_scale
  6272 ;;		_sprintf
  6273 ;;		_set_pwm1_percent
  6274 ;;		_set_pwm1_voltage
  6275 ;;		_set_pwm1_general
  6276 ;; This function uses a non-reentrant model
  6277 ;;
  6278                           
  6279                           	psect	text16
  6280  000F08                     __ptext16:
  6281                           	opt stack 0
  6282  000F08                     ___flmul:
  6283                           	opt stack 27
  6284                           
  6285                           ;incstack = 0
  6286  000F08  504B               	movf	___flmul@b+3,w,c
  6287  000F0A  0B80               	andlw	128
  6288  000F0C  0100               	movlb	0	; () banked
  6289  000F0E  6F80               	movwf	___flmul@sign& (0+255),b
  6290  000F10  504B               	movf	___flmul@b+3,w,c
  6291  000F12  244B               	addwf	___flmul@b+3,w,c
  6292  000F14  6F86               	movwf	___flmul@bexp& (0+255),b
  6293                           
  6294                           ; BSR set to: 0
  6295  000F16  BE4A               	btfsc	___flmul@b+2,7,c
  6296                           
  6297                           ; BSR set to: 0
  6298  000F18  8186               	bsf	___flmul@bexp& (0+255),0,b
  6299                           
  6300                           ; BSR set to: 0
  6301                           
  6302                           ; BSR set to: 0
  6303  000F1A  5186               	movf	___flmul@bexp& (0+255),w,b
  6304  000F1C  B4D8               	btfsc	status,2,c
  6305  000F1E  D00D               	goto	l1012
  6306                           
  6307                           ; BSR set to: 0
  6308  000F20  2986               	incf	___flmul@bexp& (0+255),w,b
  6309  000F22  A4D8               	btfss	status,2,c
  6310  000F24  D008               	goto	l1013
  6311                           
  6312                           ; BSR set to: 0
  6313  000F26  0E00               	movlw	0
  6314  000F28  6E48               	movwf	___flmul@b,c
  6315  000F2A  0E00               	movlw	0
  6316  000F2C  6E49               	movwf	___flmul@b+1,c
  6317  000F2E  0E00               	movlw	0
  6318  000F30  6E4A               	movwf	___flmul@b+2,c
  6319  000F32  0E00               	movlw	0
  6320  000F34  6E4B               	movwf	___flmul@b+3,c
  6321  000F36                     l1013:
  6322                           
  6323                           ; BSR set to: 0
  6324                           
  6325                           ; BSR set to: 0
  6326  000F36  8E4A               	bsf	___flmul@b+2,7,c
  6327  000F38  D008               	goto	l1014
  6328  000F3A                     l1012:
  6329                           
  6330                           ; BSR set to: 0
  6331                           
  6332                           ; BSR set to: 0
  6333  000F3A  0E00               	movlw	0
  6334  000F3C  6E48               	movwf	___flmul@b,c
  6335  000F3E  0E00               	movlw	0
  6336  000F40  6E49               	movwf	___flmul@b+1,c
  6337  000F42  0E00               	movlw	0
  6338  000F44  6E4A               	movwf	___flmul@b+2,c
  6339  000F46  0E00               	movlw	0
  6340  000F48  6E4B               	movwf	___flmul@b+3,c
  6341  000F4A                     l1014:
  6342                           
  6343                           ; BSR set to: 0
  6344                           
  6345                           ; BSR set to: 0
  6346  000F4A  504F               	movf	___flmul@a+3,w,c
  6347  000F4C  0B80               	andlw	128
  6348  000F4E  1B80               	xorwf	___flmul@sign& (0+255),f,b
  6349                           
  6350                           ; BSR set to: 0
  6351  000F50  504F               	movf	___flmul@a+3,w,c
  6352  000F52  244F               	addwf	___flmul@a+3,w,c
  6353  000F54  6F81               	movwf	___flmul@aexp& (0+255),b
  6354                           
  6355                           ; BSR set to: 0
  6356  000F56  BE4E               	btfsc	___flmul@a+2,7,c
  6357                           
  6358                           ; BSR set to: 0
  6359  000F58  8181               	bsf	___flmul@aexp& (0+255),0,b
  6360                           
  6361                           ; BSR set to: 0
  6362                           
  6363                           ; BSR set to: 0
  6364  000F5A  5181               	movf	___flmul@aexp& (0+255),w,b
  6365  000F5C  B4D8               	btfsc	status,2,c
  6366  000F5E  D00D               	goto	l1016
  6367                           
  6368                           ; BSR set to: 0
  6369  000F60  2981               	incf	___flmul@aexp& (0+255),w,b
  6370  000F62  A4D8               	btfss	status,2,c
  6371  000F64  D008               	goto	l1017
  6372                           
  6373                           ; BSR set to: 0
  6374  000F66  0E00               	movlw	0
  6375  000F68  6E4C               	movwf	___flmul@a,c
  6376  000F6A  0E00               	movlw	0
  6377  000F6C  6E4D               	movwf	___flmul@a+1,c
  6378  000F6E  0E00               	movlw	0
  6379  000F70  6E4E               	movwf	___flmul@a+2,c
  6380  000F72  0E00               	movlw	0
  6381  000F74  6E4F               	movwf	___flmul@a+3,c
  6382  000F76                     l1017:
  6383                           
  6384                           ; BSR set to: 0
  6385                           
  6386                           ; BSR set to: 0
  6387  000F76  8E4E               	bsf	___flmul@a+2,7,c
  6388  000F78  D008               	goto	l1018
  6389  000F7A                     l1016:
  6390                           
  6391                           ; BSR set to: 0
  6392                           
  6393                           ; BSR set to: 0
  6394  000F7A  0E00               	movlw	0
  6395  000F7C  6E4C               	movwf	___flmul@a,c
  6396  000F7E  0E00               	movlw	0
  6397  000F80  6E4D               	movwf	___flmul@a+1,c
  6398  000F82  0E00               	movlw	0
  6399  000F84  6E4E               	movwf	___flmul@a+2,c
  6400  000F86  0E00               	movlw	0
  6401  000F88  6E4F               	movwf	___flmul@a+3,c
  6402  000F8A                     l1018:
  6403                           
  6404                           ; BSR set to: 0
  6405  000F8A  5181               	movf	___flmul@aexp& (0+255),w,b
  6406  000F8C  B4D8               	btfsc	status,2,c
  6407  000F8E  D003               	goto	u4820
  6408                           
  6409                           ; BSR set to: 0
  6410  000F90  5186               	movf	___flmul@bexp& (0+255),w,b
  6411  000F92  A4D8               	btfss	status,2,c
  6412  000F94  D009               	goto	l1019
  6413  000F96                     u4820:
  6414                           
  6415                           ; BSR set to: 0
  6416                           
  6417                           ; BSR set to: 0
  6418  000F96  0E00               	movlw	0
  6419  000F98  6E48               	movwf	?___flmul,c
  6420  000F9A  0E00               	movlw	0
  6421  000F9C  6E49               	movwf	?___flmul+1,c
  6422  000F9E  0E00               	movlw	0
  6423  000FA0  6E4A               	movwf	?___flmul+2,c
  6424  000FA2  0E00               	movlw	0
  6425  000FA4  6E4B               	movwf	?___flmul+3,c
  6426                           
  6427                           ; BSR set to: 0
  6428  000FA6  0012               	return	
  6429  000FA8                     l1019:
  6430                           
  6431                           ; BSR set to: 0
  6432                           
  6433                           ; BSR set to: 0
  6434  000FA8  504E               	movf	___flmul@a+2,w,c
  6435  000FAA  0248               	mulwf	___flmul@b,c
  6436  000FAC  CFF3 F08B          	movff	prodl,___flmul@temp
  6437  000FB0  CFF4 F08C          	movff	prodh,___flmul@temp+1
  6438                           
  6439                           ; BSR set to: 0
  6440  000FB4  518B               	movf	___flmul@temp& (0+255),w,b
  6441  000FB6  6F82               	movwf	___flmul@grs& (0+255),b
  6442  000FB8  6B83               	clrf	(___flmul@grs+1)& (0+255),b
  6443  000FBA  6B84               	clrf	(___flmul@grs+2)& (0+255),b
  6444  000FBC  6B85               	clrf	(___flmul@grs+3)& (0+255),b
  6445                           
  6446                           ; BSR set to: 0
  6447  000FBE  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6448  000FC0  6F87               	movwf	___flmul@prod& (0+255),b
  6449  000FC2  6B88               	clrf	(___flmul@prod+1)& (0+255),b
  6450  000FC4  6B89               	clrf	(___flmul@prod+2)& (0+255),b
  6451  000FC6  6B8A               	clrf	(___flmul@prod+3)& (0+255),b
  6452  000FC8  504D               	movf	___flmul@a+1,w,c
  6453  000FCA  0249               	mulwf	___flmul@b+1,c
  6454  000FCC  CFF3 F08B          	movff	prodl,___flmul@temp
  6455  000FD0  CFF4 F08C          	movff	prodh,___flmul@temp+1
  6456                           
  6457                           ; BSR set to: 0
  6458  000FD4  518B               	movf	___flmul@temp& (0+255),w,b
  6459  000FD6  2782               	addwf	___flmul@grs& (0+255),f,b
  6460  000FD8  0E00               	movlw	0
  6461  000FDA  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  6462  000FDC  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  6463  000FDE  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  6464                           
  6465                           ; BSR set to: 0
  6466  000FE0  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6467  000FE2  2787               	addwf	___flmul@prod& (0+255),f,b
  6468  000FE4  0E00               	movlw	0
  6469  000FE6  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6470  000FE8  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6471  000FEA  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6472  000FEC  504C               	movf	___flmul@a,w,c
  6473  000FEE  024A               	mulwf	___flmul@b+2,c
  6474  000FF0  CFF3 F08B          	movff	prodl,___flmul@temp
  6475  000FF4  CFF4 F08C          	movff	prodh,___flmul@temp+1
  6476                           
  6477                           ; BSR set to: 0
  6478  000FF8  518B               	movf	___flmul@temp& (0+255),w,b
  6479  000FFA  2782               	addwf	___flmul@grs& (0+255),f,b
  6480  000FFC  0E00               	movlw	0
  6481  000FFE  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  6482  001000  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  6483  001002  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  6484                           
  6485                           ; BSR set to: 0
  6486  001004  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6487  001006  2787               	addwf	___flmul@prod& (0+255),f,b
  6488  001008  0E00               	movlw	0
  6489  00100A  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6490  00100C  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6491  00100E  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6492                           
  6493                           ; BSR set to: 0
  6494  001010  C084  F085         	movff	___flmul@grs+2,___flmul@grs+3
  6495  001014  C083  F084         	movff	___flmul@grs+1,___flmul@grs+2
  6496  001018  C082  F083         	movff	___flmul@grs,___flmul@grs+1
  6497  00101C  6B82               	clrf	___flmul@grs& (0+255),b
  6498                           
  6499                           ; BSR set to: 0
  6500  00101E  504C               	movf	___flmul@a,w,c
  6501  001020  0249               	mulwf	___flmul@b+1,c
  6502  001022  CFF3 F08B          	movff	prodl,___flmul@temp
  6503  001026  CFF4 F08C          	movff	prodh,___flmul@temp+1
  6504                           
  6505                           ; BSR set to: 0
  6506  00102A  518B               	movf	___flmul@temp& (0+255),w,b
  6507  00102C  2782               	addwf	___flmul@grs& (0+255),f,b
  6508  00102E  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6509  001030  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  6510  001032  0E00               	movlw	0
  6511  001034  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  6512  001036  0E00               	movlw	0
  6513  001038  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  6514                           
  6515                           ; BSR set to: 0
  6516  00103A  504D               	movf	___flmul@a+1,w,c
  6517  00103C  0248               	mulwf	___flmul@b,c
  6518  00103E  CFF3 F08B          	movff	prodl,___flmul@temp
  6519  001042  CFF4 F08C          	movff	prodh,___flmul@temp+1
  6520                           
  6521                           ; BSR set to: 0
  6522  001046  518B               	movf	___flmul@temp& (0+255),w,b
  6523  001048  2782               	addwf	___flmul@grs& (0+255),f,b
  6524  00104A  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6525  00104C  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  6526  00104E  0E00               	movlw	0
  6527  001050  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  6528  001052  0E00               	movlw	0
  6529  001054  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  6530                           
  6531                           ; BSR set to: 0
  6532  001056  C084  F085         	movff	___flmul@grs+2,___flmul@grs+3
  6533  00105A  C083  F084         	movff	___flmul@grs+1,___flmul@grs+2
  6534  00105E  C082  F083         	movff	___flmul@grs,___flmul@grs+1
  6535  001062  6B82               	clrf	___flmul@grs& (0+255),b
  6536  001064  504C               	movf	___flmul@a,w,c
  6537  001066  0248               	mulwf	___flmul@b,c
  6538  001068  CFF3 F08B          	movff	prodl,___flmul@temp
  6539  00106C  CFF4 F08C          	movff	prodh,___flmul@temp+1
  6540                           
  6541                           ; BSR set to: 0
  6542  001070  518B               	movf	___flmul@temp& (0+255),w,b
  6543  001072  2782               	addwf	___flmul@grs& (0+255),f,b
  6544  001074  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6545  001076  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  6546  001078  0E00               	movlw	0
  6547  00107A  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  6548  00107C  0E00               	movlw	0
  6549  00107E  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  6550                           
  6551                           ; BSR set to: 0
  6552  001080  504E               	movf	___flmul@a+2,w,c
  6553  001082  0249               	mulwf	___flmul@b+1,c
  6554  001084  CFF3 F08B          	movff	prodl,___flmul@temp
  6555  001088  CFF4 F08C          	movff	prodh,___flmul@temp+1
  6556  00108C  518B               	movf	___flmul@temp& (0+255),w,b
  6557  00108E  2787               	addwf	___flmul@prod& (0+255),f,b
  6558  001090  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6559  001092  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6560  001094  0E00               	movlw	0
  6561  001096  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6562  001098  0E00               	movlw	0
  6563  00109A  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6564                           
  6565                           ; BSR set to: 0
  6566  00109C  504D               	movf	___flmul@a+1,w,c
  6567  00109E  024A               	mulwf	___flmul@b+2,c
  6568  0010A0  CFF3 F08B          	movff	prodl,___flmul@temp
  6569  0010A4  CFF4 F08C          	movff	prodh,___flmul@temp+1
  6570                           
  6571                           ; BSR set to: 0
  6572  0010A8  518B               	movf	___flmul@temp& (0+255),w,b
  6573  0010AA  2787               	addwf	___flmul@prod& (0+255),f,b
  6574  0010AC  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6575  0010AE  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6576  0010B0  0E00               	movlw	0
  6577  0010B2  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6578  0010B4  0E00               	movlw	0
  6579  0010B6  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6580  0010B8  504E               	movf	___flmul@a+2,w,c
  6581  0010BA  024A               	mulwf	___flmul@b+2,c
  6582  0010BC  CFF3 F08B          	movff	prodl,___flmul@temp
  6583  0010C0  CFF4 F08C          	movff	prodh,___flmul@temp+1
  6584                           
  6585                           ; BSR set to: 0
  6586  0010C4  518B               	movf	___flmul@temp& (0+255),w,b
  6587  0010C6  6E50               	movwf	??___flmul& (0+255),c
  6588  0010C8  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6589  0010CA  6E51               	movwf	(??___flmul+1)& (0+255),c
  6590  0010CC  6A52               	clrf	(??___flmul+2)& (0+255),c
  6591  0010CE  6A53               	clrf	(??___flmul+3)& (0+255),c
  6592  0010D0  C052  F053         	movff	??___flmul+2,??___flmul+3
  6593  0010D4  C051  F052         	movff	??___flmul+1,??___flmul+2
  6594  0010D8  C050  F051         	movff	??___flmul,??___flmul+1
  6595  0010DC  6A50               	clrf	??___flmul,c
  6596  0010DE  5050               	movf	??___flmul,w,c
  6597  0010E0  2787               	addwf	___flmul@prod& (0+255),f,b
  6598  0010E2  5051               	movf	??___flmul+1,w,c
  6599  0010E4  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6600  0010E6  5052               	movf	??___flmul+2,w,c
  6601  0010E8  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6602  0010EA  5053               	movf	??___flmul+3,w,c
  6603  0010EC  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6604                           
  6605                           ; BSR set to: 0
  6606  0010EE  C082  F050         	movff	___flmul@grs,??___flmul
  6607  0010F2  C083  F051         	movff	___flmul@grs+1,??___flmul+1
  6608  0010F6  C084  F052         	movff	___flmul@grs+2,??___flmul+2
  6609  0010FA  C085  F053         	movff	___flmul@grs+3,??___flmul+3
  6610  0010FE  0E19               	movlw	25
  6611  001100  D005               	goto	u4830
  6612  001102                     u4835:
  6613  001102  90D8               	bcf	status,0,c
  6614  001104  3253               	rrcf	??___flmul+3,f,c
  6615  001106  3252               	rrcf	??___flmul+2,f,c
  6616  001108  3251               	rrcf	??___flmul+1,f,c
  6617  00110A  3250               	rrcf	??___flmul,f,c
  6618  00110C                     u4830:
  6619  00110C  2EE8               	decfsz	wreg,f,c
  6620  00110E  D7F9               	goto	u4835
  6621  001110  5050               	movf	??___flmul,w,c
  6622  001112  2787               	addwf	___flmul@prod& (0+255),f,b
  6623  001114  5051               	movf	??___flmul+1,w,c
  6624  001116  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6625  001118  5052               	movf	??___flmul+2,w,c
  6626  00111A  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6627  00111C  5053               	movf	??___flmul+3,w,c
  6628  00111E  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6629                           
  6630                           ; BSR set to: 0
  6631  001120  C084  F085         	movff	___flmul@grs+2,___flmul@grs+3
  6632  001124  C083  F084         	movff	___flmul@grs+1,___flmul@grs+2
  6633  001128  C082  F083         	movff	___flmul@grs,___flmul@grs+1
  6634  00112C  6B82               	clrf	___flmul@grs& (0+255),b
  6635                           
  6636                           ; BSR set to: 0
  6637  00112E  5181               	movf	___flmul@aexp& (0+255),w,b
  6638  001130  C086  F050         	movff	___flmul@bexp,??___flmul
  6639  001134  6A51               	clrf	(??___flmul+1)& (0+255),c
  6640  001136  2650               	addwf	??___flmul,f,c
  6641  001138  0E00               	movlw	0
  6642  00113A  2251               	addwfc	??___flmul+1,f,c
  6643  00113C  0E82               	movlw	130
  6644  00113E  2450               	addwf	??___flmul,w,c
  6645  001140  6F8B               	movwf	___flmul@temp& (0+255),b
  6646  001142  0EFF               	movlw	255
  6647  001144  2051               	addwfc	??___flmul+1,w,c
  6648  001146  6F8C               	movwf	(___flmul@temp+1)& (0+255),b
  6649  001148  D00F               	goto	l1023
  6650  00114A                     
  6651                           ; BSR set to: 0
  6652                           
  6653                           ; BSR set to: 0
  6654  00114A  90D8               	bcf	status,0,c
  6655  00114C  3787               	rlcf	___flmul@prod& (0+255),f,b
  6656  00114E  3788               	rlcf	(___flmul@prod+1)& (0+255),f,b
  6657  001150  3789               	rlcf	(___flmul@prod+2)& (0+255),f,b
  6658  001152  378A               	rlcf	(___flmul@prod+3)& (0+255),f,b
  6659                           
  6660                           ; BSR set to: 0
  6661  001154  BF85               	btfsc	(___flmul@grs+3)& (0+255),7,b
  6662                           
  6663                           ; BSR set to: 0
  6664  001156  8187               	bsf	___flmul@prod& (0+255),0,b
  6665                           
  6666                           ; BSR set to: 0
  6667  001158  90D8               	bcf	status,0,c
  6668  00115A  3782               	rlcf	___flmul@grs& (0+255),f,b
  6669  00115C  3783               	rlcf	(___flmul@grs+1)& (0+255),f,b
  6670  00115E  3784               	rlcf	(___flmul@grs+2)& (0+255),f,b
  6671  001160  3785               	rlcf	(___flmul@grs+3)& (0+255),f,b
  6672  001162  078B               	decf	___flmul@temp& (0+255),f,b
  6673  001164  A0D8               	btfss	status,0,c
  6674  001166  078C               	decf	(___flmul@temp+1)& (0+255),f,b
  6675  001168                     l1023:
  6676                           
  6677                           ; BSR set to: 0
  6678                           
  6679                           ; BSR set to: 0
  6680  001168  AF89               	btfss	(___flmul@prod+2)& (0+255),7,b
  6681  00116A  D7EF               	goto	l1024
  6682                           
  6683                           ; BSR set to: 0
  6684                           
  6685                           ; BSR set to: 0
  6686  00116C  0E00               	movlw	0
  6687  00116E  6F81               	movwf	___flmul@aexp& (0+255),b
  6688                           
  6689                           ; BSR set to: 0
  6690  001170  AF85               	btfss	(___flmul@grs+3)& (0+255),7,b
  6691  001172  D016               	goto	l1030
  6692                           
  6693                           ; BSR set to: 0
  6694  001174  0EFF               	movlw	255
  6695  001176  1582               	andwf	___flmul@grs& (0+255),w,b
  6696  001178  6E50               	movwf	??___flmul& (0+255),c
  6697  00117A  0EFF               	movlw	255
  6698  00117C  1583               	andwf	(___flmul@grs+1)& (0+255),w,b
  6699  00117E  6E51               	movwf	(??___flmul+1)& (0+255),c
  6700  001180  0EFF               	movlw	255
  6701  001182  1584               	andwf	(___flmul@grs+2)& (0+255),w,b
  6702  001184  6E52               	movwf	(??___flmul+2)& (0+255),c
  6703  001186  0E7F               	movlw	127
  6704  001188  1585               	andwf	(___flmul@grs+3)& (0+255),w,b
  6705  00118A  6E53               	movwf	(??___flmul+3)& (0+255),c
  6706  00118C  5050               	movf	??___flmul,w,c
  6707  00118E  1051               	iorwf	??___flmul+1,w,c
  6708  001190  1052               	iorwf	??___flmul+2,w,c
  6709  001192  1053               	iorwf	??___flmul+3,w,c
  6710  001194  A4D8               	btfss	status,2,c
  6711  001196  D002               	goto	u4880
  6712                           
  6713                           ; BSR set to: 0
  6714                           
  6715                           ; BSR set to: 0
  6716  001198  A187               	btfss	___flmul@prod& (0+255),0,b
  6717  00119A  D002               	goto	l1030
  6718  00119C                     u4880:
  6719                           
  6720                           ; BSR set to: 0
  6721  00119C  0E01               	movlw	1
  6722  00119E  6F81               	movwf	___flmul@aexp& (0+255),b
  6723  0011A0                     l1030:
  6724                           
  6725                           ; BSR set to: 0
  6726                           
  6727                           ; BSR set to: 0
  6728                           
  6729                           ; BSR set to: 0
  6730  0011A0  5181               	movf	___flmul@aexp& (0+255),w,b
  6731  0011A2  B4D8               	btfsc	status,2,c
  6732  0011A4  D01F               	goto	l1032
  6733                           
  6734                           ; BSR set to: 0
  6735  0011A6  0E01               	movlw	1
  6736  0011A8  2787               	addwf	___flmul@prod& (0+255),f,b
  6737  0011AA  0E00               	movlw	0
  6738  0011AC  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  6739  0011AE  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  6740  0011B0  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  6741                           
  6742                           ; BSR set to: 0
  6743  0011B2  A18A               	btfss	(___flmul@prod+3)& (0+255),0,b
  6744  0011B4  D017               	goto	l1032
  6745                           
  6746                           ; BSR set to: 0
  6747  0011B6  C087  F050         	movff	___flmul@prod,??___flmul
  6748  0011BA  C088  F051         	movff	___flmul@prod+1,??___flmul+1
  6749  0011BE  C089  F052         	movff	___flmul@prod+2,??___flmul+2
  6750  0011C2  C08A  F053         	movff	___flmul@prod+3,??___flmul+3
  6751  0011C6  3453               	rlcf	??___flmul+3,w,c
  6752  0011C8  3253               	rrcf	??___flmul+3,f,c
  6753  0011CA  3252               	rrcf	??___flmul+2,f,c
  6754  0011CC  3251               	rrcf	??___flmul+1,f,c
  6755  0011CE  3250               	rrcf	??___flmul,f,c
  6756  0011D0  C050  F087         	movff	??___flmul,___flmul@prod
  6757  0011D4  C051  F088         	movff	??___flmul+1,___flmul@prod+1
  6758  0011D8  C052  F089         	movff	??___flmul+2,___flmul@prod+2
  6759  0011DC  C053  F08A         	movff	??___flmul+3,___flmul@prod+3
  6760                           
  6761                           ; BSR set to: 0
  6762  0011E0  4B8B               	infsnz	___flmul@temp& (0+255),f,b
  6763  0011E2  2B8C               	incf	(___flmul@temp+1)& (0+255),f,b
  6764  0011E4                     l1032:
  6765                           
  6766                           ; BSR set to: 0
  6767                           
  6768                           ; BSR set to: 0
  6769                           
  6770                           ; BSR set to: 0
  6771  0011E4  BF8C               	btfsc	(___flmul@temp+1)& (0+255),7,b
  6772  0011E6  D00D               	goto	l1033
  6773  0011E8  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6774  0011EA  E103               	bnz	u4910
  6775  0011EC  298B               	incf	___flmul@temp& (0+255),w,b
  6776  0011EE  A0D8               	btfss	status,0,c
  6777  0011F0  D008               	goto	l1033
  6778  0011F2                     u4910:
  6779                           
  6780                           ; BSR set to: 0
  6781  0011F2  0E00               	movlw	0
  6782  0011F4  6F87               	movwf	___flmul@prod& (0+255),b
  6783  0011F6  0E00               	movlw	0
  6784  0011F8  6F88               	movwf	(___flmul@prod+1)& (0+255),b
  6785  0011FA  0E80               	movlw	128
  6786  0011FC  6F89               	movwf	(___flmul@prod+2)& (0+255),b
  6787  0011FE  0E7F               	movlw	127
  6788  001200  D020               	goto	L8
  6789  001202                     l1033:
  6790                           
  6791                           ; BSR set to: 0
  6792                           
  6793                           ; BSR set to: 0
  6794  001202  BF8C               	btfsc	(___flmul@temp+1)& (0+255),7,b
  6795  001204  D005               	goto	u4920
  6796  001206  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  6797  001208  E10E               	bnz	l1035
  6798  00120A  058B               	decf	___flmul@temp& (0+255),w,b
  6799  00120C  B0D8               	btfsc	status,0,c
  6800  00120E  D00B               	goto	l1035
  6801  001210                     u4920:
  6802                           
  6803                           ; BSR set to: 0
  6804  001210  0E00               	movlw	0
  6805  001212  6F87               	movwf	___flmul@prod& (0+255),b
  6806  001214  0E00               	movlw	0
  6807  001216  6F88               	movwf	(___flmul@prod+1)& (0+255),b
  6808  001218  0E00               	movlw	0
  6809  00121A  6F89               	movwf	(___flmul@prod+2)& (0+255),b
  6810  00121C  0E00               	movlw	0
  6811  00121E  6F8A               	movwf	(___flmul@prod+3)& (0+255),b
  6812  001220  0E00               	movlw	0
  6813  001222  6F80               	movwf	___flmul@sign& (0+255),b
  6814  001224  D00F               	goto	l1036
  6815  001226                     l1035:
  6816                           
  6817                           ; BSR set to: 0
  6818  001226  C08B  F086         	movff	___flmul@temp,___flmul@bexp
  6819                           
  6820                           ; BSR set to: 0
  6821  00122A  0EFF               	movlw	255
  6822  00122C  1787               	andwf	___flmul@prod& (0+255),f,b
  6823  00122E  0EFF               	movlw	255
  6824  001230  1788               	andwf	(___flmul@prod+1)& (0+255),f,b
  6825  001232  0E7F               	movlw	127
  6826  001234  1789               	andwf	(___flmul@prod+2)& (0+255),f,b
  6827  001236  0E00               	movlw	0
  6828  001238  178A               	andwf	(___flmul@prod+3)& (0+255),f,b
  6829                           
  6830                           ; BSR set to: 0
  6831  00123A  B186               	btfsc	___flmul@bexp& (0+255),0,b
  6832                           
  6833                           ; BSR set to: 0
  6834  00123C  8F89               	bsf	(___flmul@prod+2)& (0+255),7,b
  6835                           
  6836                           ; BSR set to: 0
  6837                           
  6838                           ; BSR set to: 0
  6839  00123E  90D8               	bcf	status,0,c
  6840  001240  3186               	rrcf	___flmul@bexp& (0+255),w,b
  6841  001242                     L8:
  6842  001242  6F8A               	movwf	(___flmul@prod+3)& (0+255),b
  6843  001244                     l1036:
  6844                           
  6845                           ; BSR set to: 0
  6846                           
  6847                           ; BSR set to: 0
  6848                           
  6849                           ; BSR set to: 0
  6850  001244  5180               	movf	___flmul@sign& (0+255),w,b
  6851  001246  138A               	iorwf	(___flmul@prod+3)& (0+255),f,b
  6852                           
  6853                           ; BSR set to: 0
  6854  001248  C087  F048         	movff	___flmul@prod,?___flmul
  6855  00124C  C088  F049         	movff	___flmul@prod+1,?___flmul+1
  6856  001250  C089  F04A         	movff	___flmul@prod+2,?___flmul+2
  6857  001254  C08A  F04B         	movff	___flmul@prod+3,?___flmul+3
  6858  001258  0012               	return	
  6859  00125A                     __end_of___flmul:
  6860                           	opt stack 0
  6861                           tblptru	equ	0xFF8
  6862                           tblptrh	equ	0xFF7
  6863                           tblptrl	equ	0xFF6
  6864                           tablat	equ	0xFF5
  6865                           prodh	equ	0xFF4
  6866                           prodl	equ	0xFF3
  6867                           intcon	equ	0xFF2
  6868                           intcon2	equ	0xFF1
  6869                           intcon3	equ	0xFF0
  6870                           postinc0	equ	0xFEE
  6871                           wreg	equ	0xFE8
  6872                           indf1	equ	0xFE7
  6873                           postdec1	equ	0xFE5
  6874                           fsr1h	equ	0xFE2
  6875                           fsr1l	equ	0xFE1
  6876                           indf2	equ	0xFDF
  6877                           postinc2	equ	0xFDE
  6878                           postdec2	equ	0xFDD
  6879                           fsr2h	equ	0xFDA
  6880                           fsr2l	equ	0xFD9
  6881                           status	equ	0xFD8
  6882                           
  6883 ;; *************** function ___awmod *****************
  6884 ;; Defined at:
  6885 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  6886 ;; Parameters:    Size  Location     Type
  6887 ;;  dividend        2   26[COMRAM] int 
  6888 ;;  divisor         2   28[COMRAM] int 
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;  sign            1   31[COMRAM] unsigned char 
  6891 ;;  counter         1   30[COMRAM] unsigned char 
  6892 ;; Return value:  Size  Location     Type
  6893 ;;                  2   26[COMRAM] int 
  6894 ;; Registers used:
  6895 ;;		wreg, status,2, status,0
  6896 ;; Tracked objects:
  6897 ;;		On entry : 0/0
  6898 ;;		On exit  : 0/0
  6899 ;;		Unchanged: 0/0
  6900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6901 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6902 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6904 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6905 ;;Total ram usage:        6 bytes
  6906 ;; Hardware stack levels used:    1
  6907 ;; Hardware stack levels required when called:    2
  6908 ;; This function calls:
  6909 ;;		Nothing
  6910 ;; This function is called by:
  6911 ;;		_fround
  6912 ;;		_scale
  6913 ;; This function uses a non-reentrant model
  6914 ;;
  6915                           
  6916                           	psect	text17
  6917  00293C                     __ptext17:
  6918                           	opt stack 0
  6919  00293C                     ___awmod:
  6920                           	opt stack 25
  6921                           
  6922                           ; BSR set to: 0
  6923                           ;incstack = 0
  6924  00293C  0E00               	movlw	0
  6925  00293E  6E20               	movwf	___awmod@sign,c
  6926  002940  AE1C               	btfss	___awmod@dividend+1,7,c
  6927  002942  D006               	goto	l630
  6928  002944  6C1B               	negf	___awmod@dividend,c
  6929  002946  1E1C               	comf	___awmod@dividend+1,f,c
  6930  002948  B0D8               	btfsc	status,0,c
  6931  00294A  2A1C               	incf	___awmod@dividend+1,f,c
  6932  00294C  0E01               	movlw	1
  6933  00294E  6E20               	movwf	___awmod@sign,c
  6934  002950                     l630:
  6935  002950  AE1E               	btfss	___awmod@divisor+1,7,c
  6936  002952  D004               	goto	l631
  6937  002954  6C1D               	negf	___awmod@divisor,c
  6938  002956  1E1E               	comf	___awmod@divisor+1,f,c
  6939  002958  B0D8               	btfsc	status,0,c
  6940  00295A  2A1E               	incf	___awmod@divisor+1,f,c
  6941  00295C                     l631:
  6942  00295C  501D               	movf	___awmod@divisor,w,c
  6943  00295E  101E               	iorwf	___awmod@divisor+1,w,c
  6944  002960  B4D8               	btfsc	status,2,c
  6945  002962  D018               	goto	l638
  6946  002964  0E01               	movlw	1
  6947  002966  6E1F               	movwf	___awmod@counter,c
  6948  002968  D004               	goto	l633
  6949  00296A  90D8               	bcf	status,0,c
  6950  00296C  361D               	rlcf	___awmod@divisor,f,c
  6951  00296E  361E               	rlcf	___awmod@divisor+1,f,c
  6952  002970  2A1F               	incf	___awmod@counter,f,c
  6953  002972                     l633:
  6954  002972  AE1E               	btfss	___awmod@divisor+1,7,c
  6955  002974  D7FA               	goto	l634
  6956  002976                     u3110:
  6957  002976  501D               	movf	___awmod@divisor,w,c
  6958  002978  5C1B               	subwf	___awmod@dividend,w,c
  6959  00297A  501E               	movf	___awmod@divisor+1,w,c
  6960  00297C  581C               	subwfb	___awmod@dividend+1,w,c
  6961  00297E  A0D8               	btfss	status,0,c
  6962  002980  D004               	goto	l637
  6963  002982  501D               	movf	___awmod@divisor,w,c
  6964  002984  5E1B               	subwf	___awmod@dividend,f,c
  6965  002986  501E               	movf	___awmod@divisor+1,w,c
  6966  002988  5A1C               	subwfb	___awmod@dividend+1,f,c
  6967  00298A                     l637:
  6968  00298A  90D8               	bcf	status,0,c
  6969  00298C  321E               	rrcf	___awmod@divisor+1,f,c
  6970  00298E  321D               	rrcf	___awmod@divisor,f,c
  6971  002990  2E1F               	decfsz	___awmod@counter,f,c
  6972  002992  D7F1               	goto	u3110
  6973  002994                     l638:
  6974  002994  5020               	movf	___awmod@sign,w,c
  6975  002996  B4D8               	btfsc	status,2,c
  6976  002998  D004               	goto	l639
  6977  00299A  6C1B               	negf	___awmod@dividend,c
  6978  00299C  1E1C               	comf	___awmod@dividend+1,f,c
  6979  00299E  B0D8               	btfsc	status,0,c
  6980  0029A0  2A1C               	incf	___awmod@dividend+1,f,c
  6981  0029A2                     l639:
  6982  0029A2  C01B  F01B         	movff	___awmod@dividend,?___awmod
  6983  0029A6  C01C  F01C         	movff	___awmod@dividend+1,?___awmod+1
  6984  0029AA  0012               	return	
  6985  0029AC                     __end_of___awmod:
  6986                           	opt stack 0
  6987                           tblptru	equ	0xFF8
  6988                           tblptrh	equ	0xFF7
  6989                           tblptrl	equ	0xFF6
  6990                           tablat	equ	0xFF5
  6991                           prodh	equ	0xFF4
  6992                           prodl	equ	0xFF3
  6993                           intcon	equ	0xFF2
  6994                           intcon2	equ	0xFF1
  6995                           intcon3	equ	0xFF0
  6996                           postinc0	equ	0xFEE
  6997                           wreg	equ	0xFE8
  6998                           indf1	equ	0xFE7
  6999                           postdec1	equ	0xFE5
  7000                           fsr1h	equ	0xFE2
  7001                           fsr1l	equ	0xFE1
  7002                           indf2	equ	0xFDF
  7003                           postinc2	equ	0xFDE
  7004                           postdec2	equ	0xFDD
  7005                           fsr2h	equ	0xFDA
  7006                           fsr2l	equ	0xFD9
  7007                           status	equ	0xFD8
  7008                           
  7009 ;; *************** function ___awdiv *****************
  7010 ;; Defined at:
  7011 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  7012 ;; Parameters:    Size  Location     Type
  7013 ;;  dividend        2   32[COMRAM] int 
  7014 ;;  divisor         2   34[COMRAM] int 
  7015 ;; Auto vars:     Size  Location     Type
  7016 ;;  quotient        2   38[COMRAM] int 
  7017 ;;  sign            1   37[COMRAM] unsigned char 
  7018 ;;  counter         1   36[COMRAM] unsigned char 
  7019 ;; Return value:  Size  Location     Type
  7020 ;;                  2   32[COMRAM] int 
  7021 ;; Registers used:
  7022 ;;		wreg, status,2, status,0
  7023 ;; Tracked objects:
  7024 ;;		On entry : 0/0
  7025 ;;		On exit  : 0/0
  7026 ;;		Unchanged: 0/0
  7027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7028 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7029 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7031 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7032 ;;Total ram usage:        8 bytes
  7033 ;; Hardware stack levels used:    1
  7034 ;; Hardware stack levels required when called:    2
  7035 ;; This function calls:
  7036 ;;		Nothing
  7037 ;; This function is called by:
  7038 ;;		_fround
  7039 ;;		_scale
  7040 ;;		_sprintf
  7041 ;; This function uses a non-reentrant model
  7042 ;;
  7043                           
  7044                           	psect	text18
  7045  0027B4                     __ptext18:
  7046                           	opt stack 0
  7047  0027B4                     ___awdiv:
  7048                           	opt stack 25
  7049                           
  7050                           ;incstack = 0
  7051  0027B4  0E00               	movlw	0
  7052  0027B6  6E26               	movwf	___awdiv@sign,c
  7053  0027B8  AE24               	btfss	___awdiv@divisor+1,7,c
  7054  0027BA  D006               	goto	l617
  7055  0027BC  6C23               	negf	___awdiv@divisor,c
  7056  0027BE  1E24               	comf	___awdiv@divisor+1,f,c
  7057  0027C0  B0D8               	btfsc	status,0,c
  7058  0027C2  2A24               	incf	___awdiv@divisor+1,f,c
  7059  0027C4  0E01               	movlw	1
  7060  0027C6  6E26               	movwf	___awdiv@sign,c
  7061  0027C8                     l617:
  7062  0027C8  AE22               	btfss	___awdiv@dividend+1,7,c
  7063  0027CA  D006               	goto	l618
  7064  0027CC  6C21               	negf	___awdiv@dividend,c
  7065  0027CE  1E22               	comf	___awdiv@dividend+1,f,c
  7066  0027D0  B0D8               	btfsc	status,0,c
  7067  0027D2  2A22               	incf	___awdiv@dividend+1,f,c
  7068  0027D4  0E01               	movlw	1
  7069  0027D6  1A26               	xorwf	___awdiv@sign,f,c
  7070  0027D8                     l618:
  7071  0027D8  0E00               	movlw	0
  7072  0027DA  6E28               	movwf	___awdiv@quotient+1,c
  7073  0027DC  0E00               	movlw	0
  7074  0027DE  6E27               	movwf	___awdiv@quotient,c
  7075  0027E0  5023               	movf	___awdiv@divisor,w,c
  7076  0027E2  1024               	iorwf	___awdiv@divisor+1,w,c
  7077  0027E4  B4D8               	btfsc	status,2,c
  7078  0027E6  D01C               	goto	l625
  7079  0027E8  0E01               	movlw	1
  7080  0027EA  6E25               	movwf	___awdiv@counter,c
  7081  0027EC  D004               	goto	l620
  7082  0027EE  90D8               	bcf	status,0,c
  7083  0027F0  3623               	rlcf	___awdiv@divisor,f,c
  7084  0027F2  3624               	rlcf	___awdiv@divisor+1,f,c
  7085  0027F4  2A25               	incf	___awdiv@counter,f,c
  7086  0027F6                     l620:
  7087  0027F6  AE24               	btfss	___awdiv@divisor+1,7,c
  7088  0027F8  D7FA               	goto	l621
  7089  0027FA                     u3050:
  7090  0027FA  90D8               	bcf	status,0,c
  7091  0027FC  3627               	rlcf	___awdiv@quotient,f,c
  7092  0027FE  3628               	rlcf	___awdiv@quotient+1,f,c
  7093  002800  5023               	movf	___awdiv@divisor,w,c
  7094  002802  5C21               	subwf	___awdiv@dividend,w,c
  7095  002804  5024               	movf	___awdiv@divisor+1,w,c
  7096  002806  5822               	subwfb	___awdiv@dividend+1,w,c
  7097  002808  A0D8               	btfss	status,0,c
  7098  00280A  D005               	goto	l624
  7099  00280C  5023               	movf	___awdiv@divisor,w,c
  7100  00280E  5E21               	subwf	___awdiv@dividend,f,c
  7101  002810  5024               	movf	___awdiv@divisor+1,w,c
  7102  002812  5A22               	subwfb	___awdiv@dividend+1,f,c
  7103  002814  8027               	bsf	___awdiv@quotient,0,c
  7104  002816                     l624:
  7105  002816  90D8               	bcf	status,0,c
  7106  002818  3224               	rrcf	___awdiv@divisor+1,f,c
  7107  00281A  3223               	rrcf	___awdiv@divisor,f,c
  7108  00281C  2E25               	decfsz	___awdiv@counter,f,c
  7109  00281E  D7ED               	goto	u3050
  7110  002820                     l625:
  7111  002820  5026               	movf	___awdiv@sign,w,c
  7112  002822  B4D8               	btfsc	status,2,c
  7113  002824  D004               	goto	l626
  7114  002826  6C27               	negf	___awdiv@quotient,c
  7115  002828  1E28               	comf	___awdiv@quotient+1,f,c
  7116  00282A  B0D8               	btfsc	status,0,c
  7117  00282C  2A28               	incf	___awdiv@quotient+1,f,c
  7118  00282E                     l626:
  7119  00282E  C027  F021         	movff	___awdiv@quotient,?___awdiv
  7120  002832  C028  F022         	movff	___awdiv@quotient+1,?___awdiv+1
  7121  002836  0012               	return	
  7122  002838                     __end_of___awdiv:
  7123                           	opt stack 0
  7124                           tblptru	equ	0xFF8
  7125                           tblptrh	equ	0xFF7
  7126                           tblptrl	equ	0xFF6
  7127                           tablat	equ	0xFF5
  7128                           prodh	equ	0xFF4
  7129                           prodl	equ	0xFF3
  7130                           intcon	equ	0xFF2
  7131                           intcon2	equ	0xFF1
  7132                           intcon3	equ	0xFF0
  7133                           postinc0	equ	0xFEE
  7134                           wreg	equ	0xFE8
  7135                           indf1	equ	0xFE7
  7136                           postdec1	equ	0xFE5
  7137                           fsr1h	equ	0xFE2
  7138                           fsr1l	equ	0xFE1
  7139                           indf2	equ	0xFDF
  7140                           postinc2	equ	0xFDE
  7141                           postdec2	equ	0xFDD
  7142                           fsr2h	equ	0xFDA
  7143                           fsr2l	equ	0xFD9
  7144                           status	equ	0xFD8
  7145                           
  7146 ;; *************** function __tdiv_to_l_ *****************
  7147 ;; Defined at:
  7148 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  7149 ;; Parameters:    Size  Location     Type
  7150 ;;  f1              4   26[COMRAM] float 
  7151 ;;  f2              4   30[COMRAM] float 
  7152 ;; Auto vars:     Size  Location     Type
  7153 ;;  quot            4   37[COMRAM] unsigned long 
  7154 ;;  exp1            1   42[COMRAM] unsigned char 
  7155 ;;  cntr            1   41[COMRAM] unsigned char 
  7156 ;; Return value:  Size  Location     Type
  7157 ;;                  4   26[COMRAM] unsigned long 
  7158 ;; Registers used:
  7159 ;;		wreg, status,2, status,0
  7160 ;; Tracked objects:
  7161 ;;		On entry : 0/0
  7162 ;;		On exit  : 0/0
  7163 ;;		Unchanged: 0/0
  7164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7165 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7166 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7167 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7168 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7169 ;;Total ram usage:       17 bytes
  7170 ;; Hardware stack levels used:    1
  7171 ;; Hardware stack levels required when called:    2
  7172 ;; This function calls:
  7173 ;;		Nothing
  7174 ;; This function is called by:
  7175 ;;		_sprintf
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           	psect	text19
  7180  002172                     __ptext19:
  7181                           	opt stack 0
  7182  002172                     __tdiv_to_l_:
  7183                           	opt stack 26
  7184                           
  7185                           ;incstack = 0
  7186  002172  C01D  F023         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7187  002176  6A24               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7188  002178  6A25               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7189  00217A  341C               	rlcf	__tdiv_to_l_@f1+1,w,c
  7190  00217C  3623               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7191  00217E  E301               	bnc	u3231
  7192  002180  8024               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7193  002182                     u3231:
  7194  002182  5023               	movf	??__tdiv_to_l_,w,c
  7195  002184  6E2B               	movwf	__tdiv_to_l_@exp1,c
  7196  002186  502B               	movf	__tdiv_to_l_@exp1,w,c
  7197  002188  A4D8               	btfss	status,2,c
  7198  00218A  D009               	goto	l753
  7199  00218C  0E00               	movlw	0
  7200  00218E  6E1B               	movwf	?__tdiv_to_l_,c
  7201  002190  0E00               	movlw	0
  7202  002192  6E1C               	movwf	?__tdiv_to_l_+1,c
  7203  002194  0E00               	movlw	0
  7204  002196  6E1D               	movwf	?__tdiv_to_l_+2,c
  7205  002198  0E00               	movlw	0
  7206  00219A  6E1E               	movwf	?__tdiv_to_l_+3,c
  7207  00219C  0012               	return	
  7208  00219E                     l753:
  7209  00219E  C021  F023         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7210  0021A2  6A24               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7211  0021A4  6A25               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7212  0021A6  3420               	rlcf	__tdiv_to_l_@f2+1,w,c
  7213  0021A8  3623               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7214  0021AA  E301               	bnc	u3251
  7215  0021AC  8024               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7216  0021AE                     u3251:
  7217  0021AE  5023               	movf	??__tdiv_to_l_,w,c
  7218  0021B0  6E2A               	movwf	__tdiv_to_l_@cntr,c
  7219  0021B2  502A               	movf	__tdiv_to_l_@cntr,w,c
  7220  0021B4  A4D8               	btfss	status,2,c
  7221  0021B6  D009               	goto	l755
  7222  0021B8  0E00               	movlw	0
  7223  0021BA  6E1B               	movwf	?__tdiv_to_l_,c
  7224  0021BC  0E00               	movlw	0
  7225  0021BE  6E1C               	movwf	?__tdiv_to_l_+1,c
  7226  0021C0  0E00               	movlw	0
  7227  0021C2  6E1D               	movwf	?__tdiv_to_l_+2,c
  7228  0021C4  0E00               	movlw	0
  7229  0021C6  6E1E               	movwf	?__tdiv_to_l_+3,c
  7230  0021C8  0012               	return	
  7231  0021CA                     l755:
  7232  0021CA  8E1C               	bsf	__tdiv_to_l_@f1+1,7,c
  7233  0021CC  0EFF               	movlw	255
  7234  0021CE  161B               	andwf	__tdiv_to_l_@f1,f,c
  7235  0021D0  0EFF               	movlw	255
  7236  0021D2  161C               	andwf	__tdiv_to_l_@f1+1,f,c
  7237  0021D4  0E00               	movlw	0
  7238  0021D6  161D               	andwf	__tdiv_to_l_@f1+2,f,c
  7239  0021D8  8E20               	bsf	__tdiv_to_l_@f2+1,7,c
  7240  0021DA  0EFF               	movlw	255
  7241  0021DC  161F               	andwf	__tdiv_to_l_@f2,f,c
  7242  0021DE  0EFF               	movlw	255
  7243  0021E0  1620               	andwf	__tdiv_to_l_@f2+1,f,c
  7244  0021E2  0E00               	movlw	0
  7245  0021E4  1621               	andwf	__tdiv_to_l_@f2+2,f,c
  7246  0021E6  0E00               	movlw	0
  7247  0021E8  6E26               	movwf	__tdiv_to_l_@quot,c
  7248  0021EA  0E00               	movlw	0
  7249  0021EC  6E27               	movwf	__tdiv_to_l_@quot+1,c
  7250  0021EE  0E00               	movlw	0
  7251  0021F0  6E28               	movwf	__tdiv_to_l_@quot+2,c
  7252  0021F2  0E00               	movlw	0
  7253  0021F4  6E29               	movwf	__tdiv_to_l_@quot+3,c
  7254  0021F6  0E7F               	movlw	127
  7255  0021F8  5E2B               	subwf	__tdiv_to_l_@exp1,f,c
  7256  0021FA  502A               	movf	__tdiv_to_l_@cntr,w,c
  7257  0021FC  0F98               	addlw	152
  7258  0021FE  5E2B               	subwf	__tdiv_to_l_@exp1,f,c
  7259  002200  0E18               	movlw	24
  7260  002202  6E2A               	movwf	__tdiv_to_l_@cntr,c
  7261  002204                     l756:
  7262  002204  90D8               	bcf	status,0,c
  7263  002206  3626               	rlcf	__tdiv_to_l_@quot,f,c
  7264  002208  3627               	rlcf	__tdiv_to_l_@quot+1,f,c
  7265  00220A  3628               	rlcf	__tdiv_to_l_@quot+2,f,c
  7266  00220C  3629               	rlcf	__tdiv_to_l_@quot+3,f,c
  7267  00220E  501F               	movf	__tdiv_to_l_@f2,w,c
  7268  002210  5C1B               	subwf	__tdiv_to_l_@f1,w,c
  7269  002212  5020               	movf	__tdiv_to_l_@f2+1,w,c
  7270  002214  581C               	subwfb	__tdiv_to_l_@f1+1,w,c
  7271  002216  5021               	movf	__tdiv_to_l_@f2+2,w,c
  7272  002218  581D               	subwfb	__tdiv_to_l_@f1+2,w,c
  7273  00221A  A0D8               	btfss	status,0,c
  7274  00221C  D007               	goto	l757
  7275  00221E  501F               	movf	__tdiv_to_l_@f2,w,c
  7276  002220  5E1B               	subwf	__tdiv_to_l_@f1,f,c
  7277  002222  5020               	movf	__tdiv_to_l_@f2+1,w,c
  7278  002224  5A1C               	subwfb	__tdiv_to_l_@f1+1,f,c
  7279  002226  5021               	movf	__tdiv_to_l_@f2+2,w,c
  7280  002228  5A1D               	subwfb	__tdiv_to_l_@f1+2,f,c
  7281  00222A  8026               	bsf	__tdiv_to_l_@quot,0,c
  7282  00222C                     l757:
  7283  00222C  90D8               	bcf	status,0,c
  7284  00222E  361B               	rlcf	__tdiv_to_l_@f1,f,c
  7285  002230  361C               	rlcf	__tdiv_to_l_@f1+1,f,c
  7286  002232  361D               	rlcf	__tdiv_to_l_@f1+2,f,c
  7287  002234  2E2A               	decfsz	__tdiv_to_l_@cntr,f,c
  7288  002236  D7E6               	goto	l756
  7289  002238  AE2B               	btfss	__tdiv_to_l_@exp1,7,c
  7290  00223A  D016               	goto	l759
  7291  00223C  502B               	movf	__tdiv_to_l_@exp1,w,c
  7292  00223E  0A80               	xorlw	128
  7293  002240  0F97               	addlw	151
  7294  002242  B0D8               	btfsc	status,0,c
  7295  002244  D009               	goto	l760
  7296  002246  0E00               	movlw	0
  7297  002248  6E1B               	movwf	?__tdiv_to_l_,c
  7298  00224A  0E00               	movlw	0
  7299  00224C  6E1C               	movwf	?__tdiv_to_l_+1,c
  7300  00224E  0E00               	movlw	0
  7301  002250  6E1D               	movwf	?__tdiv_to_l_+2,c
  7302  002252  0E00               	movlw	0
  7303  002254  6E1E               	movwf	?__tdiv_to_l_+3,c
  7304  002256  0012               	return	
  7305  002258                     l760:
  7306  002258  90D8               	bcf	status,0,c
  7307  00225A  3229               	rrcf	__tdiv_to_l_@quot+3,f,c
  7308  00225C  3228               	rrcf	__tdiv_to_l_@quot+2,f,c
  7309  00225E  3227               	rrcf	__tdiv_to_l_@quot+1,f,c
  7310  002260  3226               	rrcf	__tdiv_to_l_@quot,f,c
  7311  002262  3E2B               	incfsz	__tdiv_to_l_@exp1,f,c
  7312  002264  D7F9               	goto	l760
  7313  002266  D015               	goto	u3310
  7314  002268                     l759:
  7315  002268  0E17               	movlw	23
  7316  00226A  642B               	cpfsgt	__tdiv_to_l_@exp1,c
  7317  00226C  D00F               	goto	l765
  7318  00226E  0E00               	movlw	0
  7319  002270  6E1B               	movwf	?__tdiv_to_l_,c
  7320  002272  0E00               	movlw	0
  7321  002274  6E1C               	movwf	?__tdiv_to_l_+1,c
  7322  002276  0E00               	movlw	0
  7323  002278  6E1D               	movwf	?__tdiv_to_l_+2,c
  7324  00227A  0E00               	movlw	0
  7325  00227C  6E1E               	movwf	?__tdiv_to_l_+3,c
  7326  00227E  0012               	return	
  7327  002280  90D8               	bcf	status,0,c
  7328  002282  3626               	rlcf	__tdiv_to_l_@quot,f,c
  7329  002284  3627               	rlcf	__tdiv_to_l_@quot+1,f,c
  7330  002286  3628               	rlcf	__tdiv_to_l_@quot+2,f,c
  7331  002288  3629               	rlcf	__tdiv_to_l_@quot+3,f,c
  7332  00228A  062B               	decf	__tdiv_to_l_@exp1,f,c
  7333  00228C                     l765:
  7334  00228C  502B               	movf	__tdiv_to_l_@exp1,w,c
  7335  00228E  A4D8               	btfss	status,2,c
  7336  002290  D7F7               	goto	l766
  7337  002292                     u3310:
  7338  002292  C026  F01B         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7339  002296  C027  F01C         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7340  00229A  C028  F01D         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7341  00229E  C029  F01E         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7342  0022A2  0012               	return		;funcret
  7343  0022A4                     __end_of__tdiv_to_l_:
  7344                           	opt stack 0
  7345                           tblptru	equ	0xFF8
  7346                           tblptrh	equ	0xFF7
  7347                           tblptrl	equ	0xFF6
  7348                           tablat	equ	0xFF5
  7349                           prodh	equ	0xFF4
  7350                           prodl	equ	0xFF3
  7351                           intcon	equ	0xFF2
  7352                           intcon2	equ	0xFF1
  7353                           intcon3	equ	0xFF0
  7354                           postinc0	equ	0xFEE
  7355                           wreg	equ	0xFE8
  7356                           indf1	equ	0xFE7
  7357                           postdec1	equ	0xFE5
  7358                           fsr1h	equ	0xFE2
  7359                           fsr1l	equ	0xFE1
  7360                           indf2	equ	0xFDF
  7361                           postinc2	equ	0xFDE
  7362                           postdec2	equ	0xFDD
  7363                           fsr2h	equ	0xFDA
  7364                           fsr2l	equ	0xFD9
  7365                           status	equ	0xFD8
  7366                           
  7367 ;; *************** function __div_to_l_ *****************
  7368 ;; Defined at:
  7369 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  7370 ;; Parameters:    Size  Location     Type
  7371 ;;  f1              4   26[COMRAM] unsigned long 
  7372 ;;  f2              4   30[COMRAM] unsigned long 
  7373 ;; Auto vars:     Size  Location     Type
  7374 ;;  quot            4   34[COMRAM] unsigned long 
  7375 ;;  exp1            1   39[COMRAM] unsigned char 
  7376 ;;  cntr            1   38[COMRAM] unsigned char 
  7377 ;; Return value:  Size  Location     Type
  7378 ;;                  4   26[COMRAM] unsigned long 
  7379 ;; Registers used:
  7380 ;;		wreg, status,2, status,0
  7381 ;; Tracked objects:
  7382 ;;		On entry : 0/0
  7383 ;;		On exit  : 0/0
  7384 ;;		Unchanged: 0/0
  7385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7386 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7387 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7389 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7390 ;;Total ram usage:       14 bytes
  7391 ;; Hardware stack levels used:    1
  7392 ;; Hardware stack levels required when called:    2
  7393 ;; This function calls:
  7394 ;;		Nothing
  7395 ;; This function is called by:
  7396 ;;		_sprintf
  7397 ;; This function uses a non-reentrant model
  7398 ;;
  7399                           
  7400                           	psect	text20
  7401  0022A4                     __ptext20:
  7402                           	opt stack 0
  7403  0022A4                     __div_to_l_:
  7404                           	opt stack 26
  7405                           
  7406                           ;incstack = 0
  7407  0022A4  341D               	rlcf	__div_to_l_@f1+2,w,c
  7408  0022A6  341E               	rlcf	__div_to_l_@f1+3,w,c
  7409  0022A8  6E28               	movwf	__div_to_l_@exp1,c
  7410  0022AA  5028               	movf	__div_to_l_@exp1,w,c
  7411  0022AC  A4D8               	btfss	status,2,c
  7412  0022AE  D009               	goto	l649
  7413  0022B0  0E00               	movlw	0
  7414  0022B2  6E1B               	movwf	?__div_to_l_,c
  7415  0022B4  0E00               	movlw	0
  7416  0022B6  6E1C               	movwf	?__div_to_l_+1,c
  7417  0022B8  0E00               	movlw	0
  7418  0022BA  6E1D               	movwf	?__div_to_l_+2,c
  7419  0022BC  0E00               	movlw	0
  7420  0022BE  6E1E               	movwf	?__div_to_l_+3,c
  7421  0022C0  0012               	return	
  7422  0022C2                     l649:
  7423  0022C2  3421               	rlcf	__div_to_l_@f2+2,w,c
  7424  0022C4  3422               	rlcf	__div_to_l_@f2+3,w,c
  7425  0022C6  6E27               	movwf	__div_to_l_@cntr,c
  7426  0022C8  5027               	movf	__div_to_l_@cntr,w,c
  7427  0022CA  A4D8               	btfss	status,2,c
  7428  0022CC  D009               	goto	l651
  7429  0022CE  0E00               	movlw	0
  7430  0022D0  6E1B               	movwf	?__div_to_l_,c
  7431  0022D2  0E00               	movlw	0
  7432  0022D4  6E1C               	movwf	?__div_to_l_+1,c
  7433  0022D6  0E00               	movlw	0
  7434  0022D8  6E1D               	movwf	?__div_to_l_+2,c
  7435  0022DA  0E00               	movlw	0
  7436  0022DC  6E1E               	movwf	?__div_to_l_+3,c
  7437  0022DE  0012               	return	
  7438  0022E0                     l651:
  7439  0022E0  8E1D               	bsf	__div_to_l_@f1+2,7,c
  7440  0022E2  0EFF               	movlw	255
  7441  0022E4  161B               	andwf	__div_to_l_@f1,f,c
  7442  0022E6  0EFF               	movlw	255
  7443  0022E8  161C               	andwf	__div_to_l_@f1+1,f,c
  7444  0022EA  0EFF               	movlw	255
  7445  0022EC  161D               	andwf	__div_to_l_@f1+2,f,c
  7446  0022EE  0E00               	movlw	0
  7447  0022F0  161E               	andwf	__div_to_l_@f1+3,f,c
  7448  0022F2  8E21               	bsf	__div_to_l_@f2+2,7,c
  7449  0022F4  0EFF               	movlw	255
  7450  0022F6  161F               	andwf	__div_to_l_@f2,f,c
  7451  0022F8  0EFF               	movlw	255
  7452  0022FA  1620               	andwf	__div_to_l_@f2+1,f,c
  7453  0022FC  0EFF               	movlw	255
  7454  0022FE  1621               	andwf	__div_to_l_@f2+2,f,c
  7455  002300  0E00               	movlw	0
  7456  002302  1622               	andwf	__div_to_l_@f2+3,f,c
  7457  002304  0E00               	movlw	0
  7458  002306  6E23               	movwf	__div_to_l_@quot,c
  7459  002308  0E00               	movlw	0
  7460  00230A  6E24               	movwf	__div_to_l_@quot+1,c
  7461  00230C  0E00               	movlw	0
  7462  00230E  6E25               	movwf	__div_to_l_@quot+2,c
  7463  002310  0E00               	movlw	0
  7464  002312  6E26               	movwf	__div_to_l_@quot+3,c
  7465  002314  0E7F               	movlw	127
  7466  002316  5E28               	subwf	__div_to_l_@exp1,f,c
  7467  002318  5027               	movf	__div_to_l_@cntr,w,c
  7468  00231A  0FA0               	addlw	160
  7469  00231C  5E28               	subwf	__div_to_l_@exp1,f,c
  7470  00231E  0E20               	movlw	32
  7471  002320  6E27               	movwf	__div_to_l_@cntr,c
  7472  002322  90D8               	bcf	status,0,c
  7473  002324  3623               	rlcf	__div_to_l_@quot,f,c
  7474  002326  3624               	rlcf	__div_to_l_@quot+1,f,c
  7475  002328  3625               	rlcf	__div_to_l_@quot+2,f,c
  7476  00232A  3626               	rlcf	__div_to_l_@quot+3,f,c
  7477  00232C  501F               	movf	__div_to_l_@f2,w,c
  7478  00232E  5C1B               	subwf	__div_to_l_@f1,w,c
  7479  002330  5020               	movf	__div_to_l_@f2+1,w,c
  7480  002332  581C               	subwfb	__div_to_l_@f1+1,w,c
  7481  002334  5021               	movf	__div_to_l_@f2+2,w,c
  7482  002336  581D               	subwfb	__div_to_l_@f1+2,w,c
  7483  002338  5022               	movf	__div_to_l_@f2+3,w,c
  7484  00233A  581E               	subwfb	__div_to_l_@f1+3,w,c
  7485  00233C  A0D8               	btfss	status,0,c
  7486  00233E  D009               	goto	l653
  7487  002340  501F               	movf	__div_to_l_@f2,w,c
  7488  002342  5E1B               	subwf	__div_to_l_@f1,f,c
  7489  002344  5020               	movf	__div_to_l_@f2+1,w,c
  7490  002346  5A1C               	subwfb	__div_to_l_@f1+1,f,c
  7491  002348  5021               	movf	__div_to_l_@f2+2,w,c
  7492  00234A  5A1D               	subwfb	__div_to_l_@f1+2,f,c
  7493  00234C  5022               	movf	__div_to_l_@f2+3,w,c
  7494  00234E  5A1E               	subwfb	__div_to_l_@f1+3,f,c
  7495  002350  8023               	bsf	__div_to_l_@quot,0,c
  7496  002352                     l653:
  7497  002352  90D8               	bcf	status,0,c
  7498  002354  361B               	rlcf	__div_to_l_@f1,f,c
  7499  002356  361C               	rlcf	__div_to_l_@f1+1,f,c
  7500  002358  361D               	rlcf	__div_to_l_@f1+2,f,c
  7501  00235A  361E               	rlcf	__div_to_l_@f1+3,f,c
  7502  00235C  2E27               	decfsz	__div_to_l_@cntr,f,c
  7503  00235E  D7E1               	goto	l652
  7504  002360  AE28               	btfss	__div_to_l_@exp1,7,c
  7505  002362  D016               	goto	l655
  7506  002364  5028               	movf	__div_to_l_@exp1,w,c
  7507  002366  0A80               	xorlw	128
  7508  002368  0F9F               	addlw	159
  7509  00236A  B0D8               	btfsc	status,0,c
  7510  00236C  D009               	goto	l656
  7511  00236E  0E00               	movlw	0
  7512  002370  6E1B               	movwf	?__div_to_l_,c
  7513  002372  0E00               	movlw	0
  7514  002374  6E1C               	movwf	?__div_to_l_+1,c
  7515  002376  0E00               	movlw	0
  7516  002378  6E1D               	movwf	?__div_to_l_+2,c
  7517  00237A  0E00               	movlw	0
  7518  00237C  6E1E               	movwf	?__div_to_l_+3,c
  7519  00237E  0012               	return	
  7520  002380                     l656:
  7521  002380  90D8               	bcf	status,0,c
  7522  002382  3226               	rrcf	__div_to_l_@quot+3,f,c
  7523  002384  3225               	rrcf	__div_to_l_@quot+2,f,c
  7524  002386  3224               	rrcf	__div_to_l_@quot+1,f,c
  7525  002388  3223               	rrcf	__div_to_l_@quot,f,c
  7526  00238A  3E28               	incfsz	__div_to_l_@exp1,f,c
  7527  00238C  D7F9               	goto	l656
  7528  00238E  D015               	goto	u3380
  7529  002390                     l655:
  7530  002390  0E1F               	movlw	31
  7531  002392  6428               	cpfsgt	__div_to_l_@exp1,c
  7532  002394  D00F               	goto	l661
  7533  002396  0E00               	movlw	0
  7534  002398  6E1B               	movwf	?__div_to_l_,c
  7535  00239A  0E00               	movlw	0
  7536  00239C  6E1C               	movwf	?__div_to_l_+1,c
  7537  00239E  0E00               	movlw	0
  7538  0023A0  6E1D               	movwf	?__div_to_l_+2,c
  7539  0023A2  0E00               	movlw	0
  7540  0023A4  6E1E               	movwf	?__div_to_l_+3,c
  7541  0023A6  0012               	return	
  7542  0023A8  90D8               	bcf	status,0,c
  7543  0023AA  3623               	rlcf	__div_to_l_@quot,f,c
  7544  0023AC  3624               	rlcf	__div_to_l_@quot+1,f,c
  7545  0023AE  3625               	rlcf	__div_to_l_@quot+2,f,c
  7546  0023B0  3626               	rlcf	__div_to_l_@quot+3,f,c
  7547  0023B2  0628               	decf	__div_to_l_@exp1,f,c
  7548  0023B4                     l661:
  7549  0023B4  5028               	movf	__div_to_l_@exp1,w,c
  7550  0023B6  A4D8               	btfss	status,2,c
  7551  0023B8  D7F7               	goto	l662
  7552  0023BA                     u3380:
  7553  0023BA  C023  F01B         	movff	__div_to_l_@quot,?__div_to_l_
  7554  0023BE  C024  F01C         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7555  0023C2  C025  F01D         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7556  0023C6  C026  F01E         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7557  0023CA  0012               	return		;funcret
  7558  0023CC                     __end_of__div_to_l_:
  7559                           	opt stack 0
  7560                           tblptru	equ	0xFF8
  7561                           tblptrh	equ	0xFF7
  7562                           tblptrl	equ	0xFF6
  7563                           tablat	equ	0xFF5
  7564                           prodh	equ	0xFF4
  7565                           prodl	equ	0xFF3
  7566                           intcon	equ	0xFF2
  7567                           intcon2	equ	0xFF1
  7568                           intcon3	equ	0xFF0
  7569                           postinc0	equ	0xFEE
  7570                           wreg	equ	0xFE8
  7571                           indf1	equ	0xFE7
  7572                           postdec1	equ	0xFE5
  7573                           fsr1h	equ	0xFE2
  7574                           fsr1l	equ	0xFE1
  7575                           indf2	equ	0xFDF
  7576                           postinc2	equ	0xFDE
  7577                           postdec2	equ	0xFDD
  7578                           fsr2h	equ	0xFDA
  7579                           fsr2l	equ	0xFD9
  7580                           status	equ	0xFD8
  7581                           
  7582 ;; *************** function ___xxtofl *****************
  7583 ;; Defined at:
  7584 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\xxtofl.c"
  7585 ;; Parameters:    Size  Location     Type
  7586 ;;  sign            1    wreg     unsigned char 
  7587 ;;  val             4   32[COMRAM] long 
  7588 ;; Auto vars:     Size  Location     Type
  7589 ;;  sign            1   40[COMRAM] unsigned char 
  7590 ;;  arg             4   42[COMRAM] unsigned long 
  7591 ;;  exp             1   41[COMRAM] unsigned char 
  7592 ;; Return value:  Size  Location     Type
  7593 ;;                  4   32[COMRAM] unsigned char 
  7594 ;; Registers used:
  7595 ;;		wreg, status,2, status,0
  7596 ;; Tracked objects:
  7597 ;;		On entry : 0/0
  7598 ;;		On exit  : 0/0
  7599 ;;		Unchanged: 0/0
  7600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7601 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7602 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7603 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7604 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7605 ;;Total ram usage:       14 bytes
  7606 ;; Hardware stack levels used:    1
  7607 ;; Hardware stack levels required when called:    2
  7608 ;; This function calls:
  7609 ;;		Nothing
  7610 ;; This function is called by:
  7611 ;;		_operation
  7612 ;;		_read_adc_voltage
  7613 ;;		_sprintf
  7614 ;; This function uses a non-reentrant model
  7615 ;;
  7616                           
  7617                           	psect	text21
  7618  002022                     __ptext21:
  7619                           	opt stack 0
  7620  002022                     ___xxtofl:
  7621                           	opt stack 27
  7622                           
  7623                           ;incstack = 0
  7624                           ;___xxtofl@sign stored from wreg
  7625  002022  6E29               	movwf	___xxtofl@sign,c
  7626  002024  5029               	movf	___xxtofl@sign,w,c
  7627  002026  A4D8               	btfss	status,2,c
  7628  002028  AE24               	btfss	___xxtofl@val+3,7,c
  7629  00202A  D01A               	goto	l1040
  7630  00202C  C021  F025         	movff	___xxtofl@val,??___xxtofl
  7631  002030  C022  F026         	movff	___xxtofl@val+1,??___xxtofl+1
  7632  002034  C023  F027         	movff	___xxtofl@val+2,??___xxtofl+2
  7633  002038  C024  F028         	movff	___xxtofl@val+3,??___xxtofl+3
  7634  00203C  1E25               	comf	??___xxtofl,f,c
  7635  00203E  1E26               	comf	??___xxtofl+1,f,c
  7636  002040  1E27               	comf	??___xxtofl+2,f,c
  7637  002042  1E28               	comf	??___xxtofl+3,f,c
  7638  002044  2A25               	incf	??___xxtofl,f,c
  7639  002046  0E00               	movlw	0
  7640  002048  2226               	addwfc	??___xxtofl+1,f,c
  7641  00204A  2227               	addwfc	??___xxtofl+2,f,c
  7642  00204C  2228               	addwfc	??___xxtofl+3,f,c
  7643  00204E  C025  F02B         	movff	??___xxtofl,___xxtofl@arg
  7644  002052  C026  F02C         	movff	??___xxtofl+1,___xxtofl@arg+1
  7645  002056  C027  F02D         	movff	??___xxtofl+2,___xxtofl@arg+2
  7646  00205A  C028  F02E         	movff	??___xxtofl+3,___xxtofl@arg+3
  7647  00205E  D008               	goto	l1041
  7648  002060                     l1040:
  7649  002060  C021  F02B         	movff	___xxtofl@val,___xxtofl@arg
  7650  002064  C022  F02C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  7651  002068  C023  F02D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  7652  00206C  C024  F02E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  7653  002070                     l1041:
  7654  002070  5021               	movf	___xxtofl@val,w,c
  7655  002072  1022               	iorwf	___xxtofl@val+1,w,c
  7656  002074  1023               	iorwf	___xxtofl@val+2,w,c
  7657  002076  1024               	iorwf	___xxtofl@val+3,w,c
  7658  002078  A4D8               	btfss	status,2,c
  7659  00207A  D009               	goto	l1042
  7660  00207C  0E00               	movlw	0
  7661  00207E  6E21               	movwf	?___xxtofl,c
  7662  002080  0E00               	movlw	0
  7663  002082  6E22               	movwf	?___xxtofl+1,c
  7664  002084  0E00               	movlw	0
  7665  002086  6E23               	movwf	?___xxtofl+2,c
  7666  002088  0E00               	movlw	0
  7667  00208A  6E24               	movwf	?___xxtofl+3,c
  7668  00208C  0012               	return	
  7669  00208E                     l1042:
  7670  00208E  0E96               	movlw	150
  7671  002090  6E2A               	movwf	___xxtofl@exp,c
  7672  002092  D006               	goto	l1044
  7673  002094  2A2A               	incf	___xxtofl@exp,f,c
  7674  002096  90D8               	bcf	status,0,c
  7675  002098  322E               	rrcf	___xxtofl@arg+3,f,c
  7676  00209A  322D               	rrcf	___xxtofl@arg+2,f,c
  7677  00209C  322C               	rrcf	___xxtofl@arg+1,f,c
  7678  00209E  322B               	rrcf	___xxtofl@arg,f,c
  7679  0020A0                     l1044:
  7680  0020A0  0E00               	movlw	0
  7681  0020A2  142B               	andwf	___xxtofl@arg,w,c
  7682  0020A4  6E25               	movwf	??___xxtofl& (0+255),c
  7683  0020A6  0E00               	movlw	0
  7684  0020A8  142C               	andwf	___xxtofl@arg+1,w,c
  7685  0020AA  6E26               	movwf	(??___xxtofl+1)& (0+255),c
  7686  0020AC  0E00               	movlw	0
  7687  0020AE  142D               	andwf	___xxtofl@arg+2,w,c
  7688  0020B0  6E27               	movwf	(??___xxtofl+2)& (0+255),c
  7689  0020B2  0EFE               	movlw	254
  7690  0020B4  142E               	andwf	___xxtofl@arg+3,w,c
  7691  0020B6  6E28               	movwf	(??___xxtofl+3)& (0+255),c
  7692  0020B8  5025               	movf	??___xxtofl,w,c
  7693  0020BA  1026               	iorwf	??___xxtofl+1,w,c
  7694  0020BC  1027               	iorwf	??___xxtofl+2,w,c
  7695  0020BE  1028               	iorwf	??___xxtofl+3,w,c
  7696  0020C0  B4D8               	btfsc	status,2,c
  7697  0020C2  D00D               	goto	l1047
  7698  0020C4  D7E7               	goto	l1045
  7699  0020C6  2A2A               	incf	___xxtofl@exp,f,c
  7700  0020C8  0E01               	movlw	1
  7701  0020CA  262B               	addwf	___xxtofl@arg,f,c
  7702  0020CC  0E00               	movlw	0
  7703  0020CE  222C               	addwfc	___xxtofl@arg+1,f,c
  7704  0020D0  222D               	addwfc	___xxtofl@arg+2,f,c
  7705  0020D2  222E               	addwfc	___xxtofl@arg+3,f,c
  7706  0020D4  90D8               	bcf	status,0,c
  7707  0020D6  322E               	rrcf	___xxtofl@arg+3,f,c
  7708  0020D8  322D               	rrcf	___xxtofl@arg+2,f,c
  7709  0020DA  322C               	rrcf	___xxtofl@arg+1,f,c
  7710  0020DC  322B               	rrcf	___xxtofl@arg,f,c
  7711  0020DE                     l1047:
  7712  0020DE  0E00               	movlw	0
  7713  0020E0  142B               	andwf	___xxtofl@arg,w,c
  7714  0020E2  6E25               	movwf	??___xxtofl& (0+255),c
  7715  0020E4  0E00               	movlw	0
  7716  0020E6  142C               	andwf	___xxtofl@arg+1,w,c
  7717  0020E8  6E26               	movwf	(??___xxtofl+1)& (0+255),c
  7718  0020EA  0E00               	movlw	0
  7719  0020EC  142D               	andwf	___xxtofl@arg+2,w,c
  7720  0020EE  6E27               	movwf	(??___xxtofl+2)& (0+255),c
  7721  0020F0  0EFF               	movlw	255
  7722  0020F2  142E               	andwf	___xxtofl@arg+3,w,c
  7723  0020F4  6E28               	movwf	(??___xxtofl+3)& (0+255),c
  7724  0020F6  5025               	movf	??___xxtofl,w,c
  7725  0020F8  1026               	iorwf	??___xxtofl+1,w,c
  7726  0020FA  1027               	iorwf	??___xxtofl+2,w,c
  7727  0020FC  1028               	iorwf	??___xxtofl+3,w,c
  7728  0020FE  B4D8               	btfsc	status,2,c
  7729  002100  D007               	goto	l1050
  7730  002102  D7E1               	goto	l1048
  7731  002104  062A               	decf	___xxtofl@exp,f,c
  7732  002106  90D8               	bcf	status,0,c
  7733  002108  362B               	rlcf	___xxtofl@arg,f,c
  7734  00210A  362C               	rlcf	___xxtofl@arg+1,f,c
  7735  00210C  362D               	rlcf	___xxtofl@arg+2,f,c
  7736  00210E  362E               	rlcf	___xxtofl@arg+3,f,c
  7737  002110                     l1050:
  7738  002110  BE2D               	btfsc	___xxtofl@arg+2,7,c
  7739  002112  D003               	goto	u3640
  7740  002114  0E02               	movlw	2
  7741  002116  602A               	cpfslt	___xxtofl@exp,c
  7742  002118  D7F5               	goto	l1051
  7743  00211A                     u3640:
  7744  00211A  B02A               	btfsc	___xxtofl@exp,0,c
  7745  00211C  D008               	goto	l1055
  7746  00211E  0EFF               	movlw	255
  7747  002120  162B               	andwf	___xxtofl@arg,f,c
  7748  002122  0EFF               	movlw	255
  7749  002124  162C               	andwf	___xxtofl@arg+1,f,c
  7750  002126  0E7F               	movlw	127
  7751  002128  162D               	andwf	___xxtofl@arg+2,f,c
  7752  00212A  0EFF               	movlw	255
  7753  00212C  162E               	andwf	___xxtofl@arg+3,f,c
  7754  00212E                     l1055:
  7755  00212E  90D8               	bcf	status,0,c
  7756  002130  322A               	rrcf	___xxtofl@exp,f,c
  7757  002132  C02A  F025         	movff	___xxtofl@exp,??___xxtofl
  7758  002136  6A26               	clrf	(??___xxtofl+1)& (0+255),c
  7759  002138  6A27               	clrf	(??___xxtofl+2)& (0+255),c
  7760  00213A  6A28               	clrf	(??___xxtofl+3)& (0+255),c
  7761  00213C  C025  F028         	movff	??___xxtofl,??___xxtofl+3
  7762  002140  6A27               	clrf	??___xxtofl+2,c
  7763  002142  6A26               	clrf	??___xxtofl+1,c
  7764  002144  6A25               	clrf	??___xxtofl,c
  7765  002146  5025               	movf	??___xxtofl,w,c
  7766  002148  122B               	iorwf	___xxtofl@arg,f,c
  7767  00214A  5026               	movf	??___xxtofl+1,w,c
  7768  00214C  122C               	iorwf	___xxtofl@arg+1,f,c
  7769  00214E  5027               	movf	??___xxtofl+2,w,c
  7770  002150  122D               	iorwf	___xxtofl@arg+2,f,c
  7771  002152  5028               	movf	??___xxtofl+3,w,c
  7772  002154  122E               	iorwf	___xxtofl@arg+3,f,c
  7773  002156  5029               	movf	___xxtofl@sign,w,c
  7774  002158  A4D8               	btfss	status,2,c
  7775  00215A  AE24               	btfss	___xxtofl@val+3,7,c
  7776  00215C  D001               	goto	l1056
  7777  00215E  8E2E               	bsf	___xxtofl@arg+3,7,c
  7778  002160                     l1056:
  7779  002160  C02B  F021         	movff	___xxtofl@arg,?___xxtofl
  7780  002164  C02C  F022         	movff	___xxtofl@arg+1,?___xxtofl+1
  7781  002168  C02D  F023         	movff	___xxtofl@arg+2,?___xxtofl+2
  7782  00216C  C02E  F024         	movff	___xxtofl@arg+3,?___xxtofl+3
  7783  002170  0012               	return	
  7784  002172                     __end_of___xxtofl:
  7785                           	opt stack 0
  7786                           tblptru	equ	0xFF8
  7787                           tblptrh	equ	0xFF7
  7788                           tblptrl	equ	0xFF6
  7789                           tablat	equ	0xFF5
  7790                           prodh	equ	0xFF4
  7791                           prodl	equ	0xFF3
  7792                           intcon	equ	0xFF2
  7793                           intcon2	equ	0xFF1
  7794                           intcon3	equ	0xFF0
  7795                           postinc0	equ	0xFEE
  7796                           wreg	equ	0xFE8
  7797                           indf1	equ	0xFE7
  7798                           postdec1	equ	0xFE5
  7799                           fsr1h	equ	0xFE2
  7800                           fsr1l	equ	0xFE1
  7801                           indf2	equ	0xFDF
  7802                           postinc2	equ	0xFDE
  7803                           postdec2	equ	0xFDD
  7804                           fsr2h	equ	0xFDA
  7805                           fsr2l	equ	0xFD9
  7806                           status	equ	0xFD8
  7807                           
  7808 ;; *************** function ___wmul *****************
  7809 ;; Defined at:
  7810 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  7811 ;; Parameters:    Size  Location     Type
  7812 ;;  multiplier      2   26[COMRAM] unsigned int 
  7813 ;;  multiplicand    2   28[COMRAM] unsigned int 
  7814 ;; Auto vars:     Size  Location     Type
  7815 ;;  product         2   30[COMRAM] unsigned int 
  7816 ;; Return value:  Size  Location     Type
  7817 ;;                  2   26[COMRAM] unsigned int 
  7818 ;; Registers used:
  7819 ;;		wreg, status,2, status,0, prodl, prodh
  7820 ;; Tracked objects:
  7821 ;;		On entry : 0/0
  7822 ;;		On exit  : 0/0
  7823 ;;		Unchanged: 0/0
  7824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7825 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7826 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7828 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7829 ;;Total ram usage:        6 bytes
  7830 ;; Hardware stack levels used:    1
  7831 ;; Hardware stack levels required when called:    2
  7832 ;; This function calls:
  7833 ;;		Nothing
  7834 ;; This function is called by:
  7835 ;;		_read_adc_voltage
  7836 ;;		_sprintf
  7837 ;; This function uses a non-reentrant model
  7838 ;;
  7839                           
  7840                           	psect	text22
  7841  002DBC                     __ptext22:
  7842                           	opt stack 0
  7843  002DBC                     ___wmul:
  7844                           	opt stack 27
  7845                           
  7846                           ;incstack = 0
  7847  002DBC  501B               	movf	___wmul@multiplier,w,c
  7848  002DBE  021D               	mulwf	___wmul@multiplicand,c
  7849  002DC0  CFF3 F01F          	movff	prodl,___wmul@product
  7850  002DC4  CFF4 F020          	movff	prodh,___wmul@product+1
  7851  002DC8  501B               	movf	___wmul@multiplier,w,c
  7852  002DCA  021E               	mulwf	___wmul@multiplicand+1,c
  7853  002DCC  50F3               	movf	prodl,w,c
  7854  002DCE  2620               	addwf	___wmul@product+1,f,c
  7855  002DD0  501C               	movf	___wmul@multiplier+1,w,c
  7856  002DD2  021D               	mulwf	___wmul@multiplicand,c
  7857  002DD4  50F3               	movf	prodl,w,c
  7858  002DD6  2620               	addwf	___wmul@product+1,f,c
  7859  002DD8  C01F  F01B         	movff	___wmul@product,?___wmul
  7860  002DDC  C020  F01C         	movff	___wmul@product+1,?___wmul+1
  7861  002DE0  0012               	return	
  7862  002DE2                     __end_of___wmul:
  7863                           	opt stack 0
  7864                           tblptru	equ	0xFF8
  7865                           tblptrh	equ	0xFF7
  7866                           tblptrl	equ	0xFF6
  7867                           tablat	equ	0xFF5
  7868                           prodh	equ	0xFF4
  7869                           prodl	equ	0xFF3
  7870                           intcon	equ	0xFF2
  7871                           intcon2	equ	0xFF1
  7872                           intcon3	equ	0xFF0
  7873                           postinc0	equ	0xFEE
  7874                           wreg	equ	0xFE8
  7875                           indf1	equ	0xFE7
  7876                           postdec1	equ	0xFE5
  7877                           fsr1h	equ	0xFE2
  7878                           fsr1l	equ	0xFE1
  7879                           indf2	equ	0xFDF
  7880                           postinc2	equ	0xFDE
  7881                           postdec2	equ	0xFDD
  7882                           fsr2h	equ	0xFDA
  7883                           fsr2l	equ	0xFD9
  7884                           status	equ	0xFD8
  7885                           
  7886 ;; *************** function ___llmod *****************
  7887 ;; Defined at:
  7888 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  7889 ;; Parameters:    Size  Location     Type
  7890 ;;  dividend        4   39[COMRAM] unsigned long 
  7891 ;;  divisor         4   43[COMRAM] unsigned long 
  7892 ;; Auto vars:     Size  Location     Type
  7893 ;;  counter         1   47[COMRAM] unsigned char 
  7894 ;; Return value:  Size  Location     Type
  7895 ;;                  4   39[COMRAM] unsigned long 
  7896 ;; Registers used:
  7897 ;;		wreg, status,2, status,0
  7898 ;; Tracked objects:
  7899 ;;		On entry : 0/0
  7900 ;;		On exit  : 0/0
  7901 ;;		Unchanged: 0/0
  7902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7903 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7904 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7906 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7907 ;;Total ram usage:        9 bytes
  7908 ;; Hardware stack levels used:    1
  7909 ;; Hardware stack levels required when called:    2
  7910 ;; This function calls:
  7911 ;;		Nothing
  7912 ;; This function is called by:
  7913 ;;		_sprintf
  7914 ;; This function uses a non-reentrant model
  7915 ;;
  7916                           
  7917                           	psect	text23
  7918  002A1C                     __ptext23:
  7919                           	opt stack 0
  7920  002A1C                     ___llmod:
  7921                           	opt stack 26
  7922                           
  7923                           ;incstack = 0
  7924  002A1C  502C               	movf	___llmod@divisor,w,c
  7925  002A1E  102D               	iorwf	___llmod@divisor+1,w,c
  7926  002A20  102E               	iorwf	___llmod@divisor+2,w,c
  7927  002A22  102F               	iorwf	___llmod@divisor+3,w,c
  7928  002A24  B4D8               	btfsc	status,2,c
  7929  002A26  D024               	goto	l854
  7930  002A28  0E01               	movlw	1
  7931  002A2A  6E30               	movwf	___llmod@counter,c
  7932  002A2C  D006               	goto	l849
  7933  002A2E  90D8               	bcf	status,0,c
  7934  002A30  362C               	rlcf	___llmod@divisor,f,c
  7935  002A32  362D               	rlcf	___llmod@divisor+1,f,c
  7936  002A34  362E               	rlcf	___llmod@divisor+2,f,c
  7937  002A36  362F               	rlcf	___llmod@divisor+3,f,c
  7938  002A38  2A30               	incf	___llmod@counter,f,c
  7939  002A3A                     l849:
  7940  002A3A  AE2F               	btfss	___llmod@divisor+3,7,c
  7941  002A3C  D7F8               	goto	l850
  7942  002A3E                     u3560:
  7943  002A3E  502C               	movf	___llmod@divisor,w,c
  7944  002A40  5C28               	subwf	___llmod@dividend,w,c
  7945  002A42  502D               	movf	___llmod@divisor+1,w,c
  7946  002A44  5829               	subwfb	___llmod@dividend+1,w,c
  7947  002A46  502E               	movf	___llmod@divisor+2,w,c
  7948  002A48  582A               	subwfb	___llmod@dividend+2,w,c
  7949  002A4A  502F               	movf	___llmod@divisor+3,w,c
  7950  002A4C  582B               	subwfb	___llmod@dividend+3,w,c
  7951  002A4E  A0D8               	btfss	status,0,c
  7952  002A50  D008               	goto	l853
  7953  002A52  502C               	movf	___llmod@divisor,w,c
  7954  002A54  5E28               	subwf	___llmod@dividend,f,c
  7955  002A56  502D               	movf	___llmod@divisor+1,w,c
  7956  002A58  5A29               	subwfb	___llmod@dividend+1,f,c
  7957  002A5A  502E               	movf	___llmod@divisor+2,w,c
  7958  002A5C  5A2A               	subwfb	___llmod@dividend+2,f,c
  7959  002A5E  502F               	movf	___llmod@divisor+3,w,c
  7960  002A60  5A2B               	subwfb	___llmod@dividend+3,f,c
  7961  002A62                     l853:
  7962  002A62  90D8               	bcf	status,0,c
  7963  002A64  322F               	rrcf	___llmod@divisor+3,f,c
  7964  002A66  322E               	rrcf	___llmod@divisor+2,f,c
  7965  002A68  322D               	rrcf	___llmod@divisor+1,f,c
  7966  002A6A  322C               	rrcf	___llmod@divisor,f,c
  7967  002A6C  2E30               	decfsz	___llmod@counter,f,c
  7968  002A6E  D7E7               	goto	u3560
  7969  002A70                     l854:
  7970  002A70  C028  F028         	movff	___llmod@dividend,?___llmod
  7971  002A74  C029  F029         	movff	___llmod@dividend+1,?___llmod+1
  7972  002A78  C02A  F02A         	movff	___llmod@dividend+2,?___llmod+2
  7973  002A7C  C02B  F02B         	movff	___llmod@dividend+3,?___llmod+3
  7974  002A80  0012               	return		;funcret
  7975  002A82                     __end_of___llmod:
  7976                           	opt stack 0
  7977                           tblptru	equ	0xFF8
  7978                           tblptrh	equ	0xFF7
  7979                           tblptrl	equ	0xFF6
  7980                           tablat	equ	0xFF5
  7981                           prodh	equ	0xFF4
  7982                           prodl	equ	0xFF3
  7983                           intcon	equ	0xFF2
  7984                           intcon2	equ	0xFF1
  7985                           intcon3	equ	0xFF0
  7986                           postinc0	equ	0xFEE
  7987                           wreg	equ	0xFE8
  7988                           indf1	equ	0xFE7
  7989                           postdec1	equ	0xFE5
  7990                           fsr1h	equ	0xFE2
  7991                           fsr1l	equ	0xFE1
  7992                           indf2	equ	0xFDF
  7993                           postinc2	equ	0xFDE
  7994                           postdec2	equ	0xFDD
  7995                           fsr2h	equ	0xFDA
  7996                           fsr2l	equ	0xFD9
  7997                           status	equ	0xFD8
  7998                           
  7999 ;; *************** function ___lldiv *****************
  8000 ;; Defined at:
  8001 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  8002 ;; Parameters:    Size  Location     Type
  8003 ;;  dividend        4   26[COMRAM] unsigned long 
  8004 ;;  divisor         4   30[COMRAM] unsigned long 
  8005 ;; Auto vars:     Size  Location     Type
  8006 ;;  quotient        4   34[COMRAM] unsigned long 
  8007 ;;  counter         1   38[COMRAM] unsigned char 
  8008 ;; Return value:  Size  Location     Type
  8009 ;;                  4   26[COMRAM] unsigned long 
  8010 ;; Registers used:
  8011 ;;		wreg, status,2, status,0
  8012 ;; Tracked objects:
  8013 ;;		On entry : 0/0
  8014 ;;		On exit  : 0/0
  8015 ;;		Unchanged: 0/0
  8016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8017 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8018 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8020 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8021 ;;Total ram usage:       13 bytes
  8022 ;; Hardware stack levels used:    1
  8023 ;; Hardware stack levels required when called:    2
  8024 ;; This function calls:
  8025 ;;		Nothing
  8026 ;; This function is called by:
  8027 ;;		_sprintf
  8028 ;; This function uses a non-reentrant model
  8029 ;;
  8030                           
  8031                           	psect	text24
  8032  0028BA                     __ptext24:
  8033                           	opt stack 0
  8034  0028BA                     ___lldiv:
  8035                           	opt stack 26
  8036                           
  8037                           ;incstack = 0
  8038  0028BA  0E00               	movlw	0
  8039  0028BC  6E23               	movwf	___lldiv@quotient,c
  8040  0028BE  0E00               	movlw	0
  8041  0028C0  6E24               	movwf	___lldiv@quotient+1,c
  8042  0028C2  0E00               	movlw	0
  8043  0028C4  6E25               	movwf	___lldiv@quotient+2,c
  8044  0028C6  0E00               	movlw	0
  8045  0028C8  6E26               	movwf	___lldiv@quotient+3,c
  8046  0028CA  501F               	movf	___lldiv@divisor,w,c
  8047  0028CC  1020               	iorwf	___lldiv@divisor+1,w,c
  8048  0028CE  1021               	iorwf	___lldiv@divisor+2,w,c
  8049  0028D0  1022               	iorwf	___lldiv@divisor+3,w,c
  8050  0028D2  B4D8               	btfsc	status,2,c
  8051  0028D4  D02A               	goto	l844
  8052  0028D6  0E01               	movlw	1
  8053  0028D8  6E27               	movwf	___lldiv@counter,c
  8054  0028DA  D006               	goto	l839
  8055  0028DC  90D8               	bcf	status,0,c
  8056  0028DE  361F               	rlcf	___lldiv@divisor,f,c
  8057  0028E0  3620               	rlcf	___lldiv@divisor+1,f,c
  8058  0028E2  3621               	rlcf	___lldiv@divisor+2,f,c
  8059  0028E4  3622               	rlcf	___lldiv@divisor+3,f,c
  8060  0028E6  2A27               	incf	___lldiv@counter,f,c
  8061  0028E8                     l839:
  8062  0028E8  AE22               	btfss	___lldiv@divisor+3,7,c
  8063  0028EA  D7F8               	goto	l840
  8064  0028EC                     u3530:
  8065  0028EC  90D8               	bcf	status,0,c
  8066  0028EE  3623               	rlcf	___lldiv@quotient,f,c
  8067  0028F0  3624               	rlcf	___lldiv@quotient+1,f,c
  8068  0028F2  3625               	rlcf	___lldiv@quotient+2,f,c
  8069  0028F4  3626               	rlcf	___lldiv@quotient+3,f,c
  8070  0028F6  501F               	movf	___lldiv@divisor,w,c
  8071  0028F8  5C1B               	subwf	___lldiv@dividend,w,c
  8072  0028FA  5020               	movf	___lldiv@divisor+1,w,c
  8073  0028FC  581C               	subwfb	___lldiv@dividend+1,w,c
  8074  0028FE  5021               	movf	___lldiv@divisor+2,w,c
  8075  002900  581D               	subwfb	___lldiv@dividend+2,w,c
  8076  002902  5022               	movf	___lldiv@divisor+3,w,c
  8077  002904  581E               	subwfb	___lldiv@dividend+3,w,c
  8078  002906  A0D8               	btfss	status,0,c
  8079  002908  D009               	goto	l843
  8080  00290A  501F               	movf	___lldiv@divisor,w,c
  8081  00290C  5E1B               	subwf	___lldiv@dividend,f,c
  8082  00290E  5020               	movf	___lldiv@divisor+1,w,c
  8083  002910  5A1C               	subwfb	___lldiv@dividend+1,f,c
  8084  002912  5021               	movf	___lldiv@divisor+2,w,c
  8085  002914  5A1D               	subwfb	___lldiv@dividend+2,f,c
  8086  002916  5022               	movf	___lldiv@divisor+3,w,c
  8087  002918  5A1E               	subwfb	___lldiv@dividend+3,f,c
  8088  00291A  8023               	bsf	___lldiv@quotient,0,c
  8089  00291C                     l843:
  8090  00291C  90D8               	bcf	status,0,c
  8091  00291E  3222               	rrcf	___lldiv@divisor+3,f,c
  8092  002920  3221               	rrcf	___lldiv@divisor+2,f,c
  8093  002922  3220               	rrcf	___lldiv@divisor+1,f,c
  8094  002924  321F               	rrcf	___lldiv@divisor,f,c
  8095  002926  2E27               	decfsz	___lldiv@counter,f,c
  8096  002928  D7E1               	goto	u3530
  8097  00292A                     l844:
  8098  00292A  C023  F01B         	movff	___lldiv@quotient,?___lldiv
  8099  00292E  C024  F01C         	movff	___lldiv@quotient+1,?___lldiv+1
  8100  002932  C025  F01D         	movff	___lldiv@quotient+2,?___lldiv+2
  8101  002936  C026  F01E         	movff	___lldiv@quotient+3,?___lldiv+3
  8102  00293A  0012               	return		;funcret
  8103  00293C                     __end_of___lldiv:
  8104                           	opt stack 0
  8105                           tblptru	equ	0xFF8
  8106                           tblptrh	equ	0xFF7
  8107                           tblptrl	equ	0xFF6
  8108                           tablat	equ	0xFF5
  8109                           prodh	equ	0xFF4
  8110                           prodl	equ	0xFF3
  8111                           intcon	equ	0xFF2
  8112                           intcon2	equ	0xFF1
  8113                           intcon3	equ	0xFF0
  8114                           postinc0	equ	0xFEE
  8115                           wreg	equ	0xFE8
  8116                           indf1	equ	0xFE7
  8117                           postdec1	equ	0xFE5
  8118                           fsr1h	equ	0xFE2
  8119                           fsr1l	equ	0xFE1
  8120                           indf2	equ	0xFDF
  8121                           postinc2	equ	0xFDE
  8122                           postdec2	equ	0xFDD
  8123                           fsr2h	equ	0xFDA
  8124                           fsr2l	equ	0xFD9
  8125                           status	equ	0xFD8
  8126                           
  8127 ;; *************** function ___fltol *****************
  8128 ;; Defined at:
  8129 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fltol.c"
  8130 ;; Parameters:    Size  Location     Type
  8131 ;;  f1              4   18[BANK0 ] unsigned long 
  8132 ;; Auto vars:     Size  Location     Type
  8133 ;;  exp1            1   27[BANK0 ] unsigned char 
  8134 ;;  sign1           1   26[BANK0 ] unsigned char 
  8135 ;; Return value:  Size  Location     Type
  8136 ;;                  4   18[BANK0 ] long 
  8137 ;; Registers used:
  8138 ;;		wreg, status,2, status,0
  8139 ;; Tracked objects:
  8140 ;;		On entry : 0/0
  8141 ;;		On exit  : 0/0
  8142 ;;		Unchanged: 0/0
  8143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8144 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8145 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8146 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8147 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8148 ;;Total ram usage:       10 bytes
  8149 ;; Hardware stack levels used:    1
  8150 ;; Hardware stack levels required when called:    2
  8151 ;; This function calls:
  8152 ;;		Nothing
  8153 ;; This function is called by:
  8154 ;;		_operation
  8155 ;;		_sprintf
  8156 ;;		_set_pwm1_percent
  8157 ;;		_set_pwm1_voltage
  8158 ;;		_set_pwm1_general
  8159 ;; This function uses a non-reentrant model
  8160 ;;
  8161                           
  8162                           	psect	text25
  8163  0026D6                     __ptext25:
  8164                           	opt stack 0
  8165  0026D6                     ___fltol:
  8166                           	opt stack 27
  8167                           
  8168                           ;incstack = 0
  8169  0026D6  0100               	movlb	0	; () banked
  8170  0026D8  3594               	rlcf	(___fltol@f1+2)& (0+255),w,b
  8171  0026DA  3595               	rlcf	(___fltol@f1+3)& (0+255),w,b
  8172  0026DC  6F9B               	movwf	___fltol@exp1& (0+255),b
  8173  0026DE  519B               	movf	___fltol@exp1& (0+255),w,b
  8174  0026E0  A4D8               	btfss	status,2,c
  8175  0026E2  D009               	goto	l696
  8176                           
  8177                           ; BSR set to: 0
  8178  0026E4  0E00               	movlw	0
  8179  0026E6  6F92               	movwf	?___fltol& (0+255),b
  8180  0026E8  0E00               	movlw	0
  8181  0026EA  6F93               	movwf	(?___fltol+1)& (0+255),b
  8182  0026EC  0E00               	movlw	0
  8183  0026EE  6F94               	movwf	(?___fltol+2)& (0+255),b
  8184  0026F0  0E00               	movlw	0
  8185  0026F2  6F95               	movwf	(?___fltol+3)& (0+255),b
  8186                           
  8187                           ; BSR set to: 0
  8188  0026F4  0012               	return	
  8189  0026F6                     l696:
  8190                           
  8191                           ; BSR set to: 0
  8192                           
  8193                           ; BSR set to: 0
  8194  0026F6  C092  F096         	movff	___fltol@f1,??___fltol
  8195  0026FA  C093  F097         	movff	___fltol@f1+1,??___fltol+1
  8196  0026FE  C094  F098         	movff	___fltol@f1+2,??___fltol+2
  8197  002702  C095  F099         	movff	___fltol@f1+3,??___fltol+3
  8198  002706  0E20               	movlw	32
  8199  002708  D005               	goto	u3460
  8200  00270A                     u3465:
  8201  00270A  90D8               	bcf	status,0,c
  8202  00270C  3399               	rrcf	(??___fltol+3)& (0+255),f,b
  8203  00270E  3398               	rrcf	(??___fltol+2)& (0+255),f,b
  8204  002710  3397               	rrcf	(??___fltol+1)& (0+255),f,b
  8205  002712  3396               	rrcf	??___fltol& (0+255),f,b
  8206  002714                     u3460:
  8207  002714  2EE8               	decfsz	wreg,f,c
  8208  002716  D7F9               	goto	u3465
  8209  002718  5196               	movf	??___fltol& (0+255),w,b
  8210  00271A  6F9A               	movwf	___fltol@sign1& (0+255),b
  8211                           
  8212                           ; BSR set to: 0
  8213  00271C  8F94               	bsf	(___fltol@f1+2)& (0+255),7,b
  8214                           
  8215                           ; BSR set to: 0
  8216  00271E  0EFF               	movlw	255
  8217  002720  1792               	andwf	___fltol@f1& (0+255),f,b
  8218  002722  0EFF               	movlw	255
  8219  002724  1793               	andwf	(___fltol@f1+1)& (0+255),f,b
  8220  002726  0EFF               	movlw	255
  8221  002728  1794               	andwf	(___fltol@f1+2)& (0+255),f,b
  8222  00272A  0E00               	movlw	0
  8223  00272C  1795               	andwf	(___fltol@f1+3)& (0+255),f,b
  8224                           
  8225                           ; BSR set to: 0
  8226  00272E  0E96               	movlw	150
  8227  002730  5F9B               	subwf	___fltol@exp1& (0+255),f,b
  8228                           
  8229                           ; BSR set to: 0
  8230  002732  AF9B               	btfss	___fltol@exp1& (0+255),7,b
  8231  002734  D016               	goto	l698
  8232                           
  8233                           ; BSR set to: 0
  8234  002736  519B               	movf	___fltol@exp1& (0+255),w,b
  8235  002738  0A80               	xorlw	128
  8236  00273A  0F97               	addlw	151
  8237  00273C  B0D8               	btfsc	status,0,c
  8238  00273E  D009               	goto	l699
  8239                           
  8240                           ; BSR set to: 0
  8241  002740  0E00               	movlw	0
  8242  002742  6F92               	movwf	?___fltol& (0+255),b
  8243  002744  0E00               	movlw	0
  8244  002746  6F93               	movwf	(?___fltol+1)& (0+255),b
  8245  002748  0E00               	movlw	0
  8246  00274A  6F94               	movwf	(?___fltol+2)& (0+255),b
  8247  00274C  0E00               	movlw	0
  8248  00274E  6F95               	movwf	(?___fltol+3)& (0+255),b
  8249                           
  8250                           ; BSR set to: 0
  8251  002750  0012               	return	
  8252  002752                     l699:
  8253                           
  8254                           ; BSR set to: 0
  8255                           
  8256                           ; BSR set to: 0
  8257                           
  8258                           ; BSR set to: 0
  8259  002752  90D8               	bcf	status,0,c
  8260  002754  3395               	rrcf	(___fltol@f1+3)& (0+255),f,b
  8261  002756  3394               	rrcf	(___fltol@f1+2)& (0+255),f,b
  8262  002758  3393               	rrcf	(___fltol@f1+1)& (0+255),f,b
  8263  00275A  3392               	rrcf	___fltol@f1& (0+255),f,b
  8264                           
  8265                           ; BSR set to: 0
  8266  00275C  3F9B               	incfsz	___fltol@exp1& (0+255),f,b
  8267  00275E  D7F9               	goto	l699
  8268                           
  8269                           ; BSR set to: 0
  8270  002760  D015               	goto	u3500
  8271  002762                     l698:
  8272                           
  8273                           ; BSR set to: 0
  8274                           
  8275                           ; BSR set to: 0
  8276  002762  0E1F               	movlw	31
  8277  002764  659B               	cpfsgt	___fltol@exp1& (0+255),b
  8278  002766  D00F               	goto	l704
  8279                           
  8280                           ; BSR set to: 0
  8281  002768  0E00               	movlw	0
  8282  00276A  6F92               	movwf	?___fltol& (0+255),b
  8283  00276C  0E00               	movlw	0
  8284  00276E  6F93               	movwf	(?___fltol+1)& (0+255),b
  8285  002770  0E00               	movlw	0
  8286  002772  6F94               	movwf	(?___fltol+2)& (0+255),b
  8287  002774  0E00               	movlw	0
  8288  002776  6F95               	movwf	(?___fltol+3)& (0+255),b
  8289                           
  8290                           ; BSR set to: 0
  8291  002778  0012               	return	
  8292  00277A                     
  8293                           ; BSR set to: 0
  8294                           
  8295                           ; BSR set to: 0
  8296  00277A  90D8               	bcf	status,0,c
  8297  00277C  3792               	rlcf	___fltol@f1& (0+255),f,b
  8298  00277E  3793               	rlcf	(___fltol@f1+1)& (0+255),f,b
  8299  002780  3794               	rlcf	(___fltol@f1+2)& (0+255),f,b
  8300  002782  3795               	rlcf	(___fltol@f1+3)& (0+255),f,b
  8301  002784  079B               	decf	___fltol@exp1& (0+255),f,b
  8302  002786                     l704:
  8303                           
  8304                           ; BSR set to: 0
  8305                           
  8306                           ; BSR set to: 0
  8307  002786  519B               	movf	___fltol@exp1& (0+255),w,b
  8308  002788  A4D8               	btfss	status,2,c
  8309  00278A  D7F7               	goto	l705
  8310  00278C                     u3500:
  8311                           
  8312                           ; BSR set to: 0
  8313                           
  8314                           ; BSR set to: 0
  8315                           
  8316                           ; BSR set to: 0
  8317  00278C  519A               	movf	___fltol@sign1& (0+255),w,b
  8318  00278E  B4D8               	btfsc	status,2,c
  8319  002790  D008               	goto	l707
  8320                           
  8321                           ; BSR set to: 0
  8322  002792  1F95               	comf	(___fltol@f1+3)& (0+255),f,b
  8323  002794  1F94               	comf	(___fltol@f1+2)& (0+255),f,b
  8324  002796  1F93               	comf	(___fltol@f1+1)& (0+255),f,b
  8325  002798  6D92               	negf	___fltol@f1& (0+255),b
  8326  00279A  0E00               	movlw	0
  8327  00279C  2393               	addwfc	(___fltol@f1+1)& (0+255),f,b
  8328  00279E  2394               	addwfc	(___fltol@f1+2)& (0+255),f,b
  8329  0027A0  2395               	addwfc	(___fltol@f1+3)& (0+255),f,b
  8330  0027A2                     l707:
  8331                           
  8332                           ; BSR set to: 0
  8333                           
  8334                           ; BSR set to: 0
  8335  0027A2  C092  F092         	movff	___fltol@f1,?___fltol
  8336  0027A6  C093  F093         	movff	___fltol@f1+1,?___fltol+1
  8337  0027AA  C094  F094         	movff	___fltol@f1+2,?___fltol+2
  8338  0027AE  C095  F095         	movff	___fltol@f1+3,?___fltol+3
  8339  0027B2  0012               	return	
  8340  0027B4                     __end_of___fltol:
  8341                           	opt stack 0
  8342                           tblptru	equ	0xFF8
  8343                           tblptrh	equ	0xFF7
  8344                           tblptrl	equ	0xFF6
  8345                           tablat	equ	0xFF5
  8346                           prodh	equ	0xFF4
  8347                           prodl	equ	0xFF3
  8348                           intcon	equ	0xFF2
  8349                           intcon2	equ	0xFF1
  8350                           intcon3	equ	0xFF0
  8351                           postinc0	equ	0xFEE
  8352                           wreg	equ	0xFE8
  8353                           indf1	equ	0xFE7
  8354                           postdec1	equ	0xFE5
  8355                           fsr1h	equ	0xFE2
  8356                           fsr1l	equ	0xFE1
  8357                           indf2	equ	0xFDF
  8358                           postinc2	equ	0xFDE
  8359                           postdec2	equ	0xFDD
  8360                           fsr2h	equ	0xFDA
  8361                           fsr2l	equ	0xFD9
  8362                           status	equ	0xFD8
  8363                           
  8364 ;; *************** function ___flsub *****************
  8365 ;; Defined at:
  8366 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
  8367 ;; Parameters:    Size  Location     Type
  8368 ;;  b               4   42[BANK0 ] long 
  8369 ;;  a               4   46[BANK0 ] long 
  8370 ;; Auto vars:     Size  Location     Type
  8371 ;;		None
  8372 ;; Return value:  Size  Location     Type
  8373 ;;                  4   42[BANK0 ] long 
  8374 ;; Registers used:
  8375 ;;		wreg, status,2, status,0, cstack
  8376 ;; Tracked objects:
  8377 ;;		On entry : 0/0
  8378 ;;		On exit  : 0/0
  8379 ;;		Unchanged: 0/0
  8380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8381 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8384 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8385 ;;Total ram usage:        8 bytes
  8386 ;; Hardware stack levels used:    1
  8387 ;; Hardware stack levels required when called:    3
  8388 ;; This function calls:
  8389 ;;		___fladd
  8390 ;; This function is called by:
  8391 ;;		_sprintf
  8392 ;; This function uses a non-reentrant model
  8393 ;;
  8394                           
  8395                           	psect	text26
  8396  002BE2                     __ptext26:
  8397                           	opt stack 0
  8398  002BE2                     ___flsub:
  8399                           	opt stack 25
  8400                           
  8401                           ; BSR set to: 0
  8402                           ;incstack = 0
  8403  002BE2  0E00               	movlw	0
  8404  002BE4  0100               	movlb	0	; () banked
  8405  002BE6  1BAE               	xorwf	___flsub@a& (0+255),f,b
  8406  002BE8  0E00               	movlw	0
  8407  002BEA  1BAF               	xorwf	(___flsub@a+1)& (0+255),f,b
  8408  002BEC  0E00               	movlw	0
  8409  002BEE  1BB0               	xorwf	(___flsub@a+2)& (0+255),f,b
  8410  002BF0  0E80               	movlw	128
  8411  002BF2  1BB1               	xorwf	(___flsub@a+3)& (0+255),f,b
  8412                           
  8413                           ; BSR set to: 0
  8414  002BF4  C0AA  F096         	movff	___flsub@b,___fladd@b
  8415  002BF8  C0AB  F097         	movff	___flsub@b+1,___fladd@b+1
  8416  002BFC  C0AC  F098         	movff	___flsub@b+2,___fladd@b+2
  8417  002C00  C0AD  F099         	movff	___flsub@b+3,___fladd@b+3
  8418  002C04  C0AE  F09A         	movff	___flsub@a,___fladd@a
  8419  002C08  C0AF  F09B         	movff	___flsub@a+1,___fladd@a+1
  8420  002C0C  C0B0  F09C         	movff	___flsub@a+2,___fladd@a+2
  8421  002C10  C0B1  F09D         	movff	___flsub@a+3,___fladd@a+3
  8422  002C14  ECD3  F00A         	call	___fladd	;wreg free
  8423  002C18  C096  F0AA         	movff	?___fladd,?___flsub
  8424  002C1C  C097  F0AB         	movff	?___fladd+1,?___flsub+1
  8425  002C20  C098  F0AC         	movff	?___fladd+2,?___flsub+2
  8426  002C24  C099  F0AD         	movff	?___fladd+3,?___flsub+3
  8427  002C28  0012               	return	
  8428  002C2A                     __end_of___flsub:
  8429                           	opt stack 0
  8430                           tblptru	equ	0xFF8
  8431                           tblptrh	equ	0xFF7
  8432                           tblptrl	equ	0xFF6
  8433                           tablat	equ	0xFF5
  8434                           prodh	equ	0xFF4
  8435                           prodl	equ	0xFF3
  8436                           intcon	equ	0xFF2
  8437                           intcon2	equ	0xFF1
  8438                           intcon3	equ	0xFF0
  8439                           postinc0	equ	0xFEE
  8440                           wreg	equ	0xFE8
  8441                           indf1	equ	0xFE7
  8442                           postdec1	equ	0xFE5
  8443                           fsr1h	equ	0xFE2
  8444                           fsr1l	equ	0xFE1
  8445                           indf2	equ	0xFDF
  8446                           postinc2	equ	0xFDE
  8447                           postdec2	equ	0xFDD
  8448                           fsr2h	equ	0xFDA
  8449                           fsr2l	equ	0xFD9
  8450                           status	equ	0xFD8
  8451                           
  8452 ;; *************** function ___fladd *****************
  8453 ;; Defined at:
  8454 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
  8455 ;; Parameters:    Size  Location     Type
  8456 ;;  b               4   22[BANK0 ] long 
  8457 ;;  a               4   26[BANK0 ] long 
  8458 ;; Auto vars:     Size  Location     Type
  8459 ;;  grs             1   41[BANK0 ] unsigned char 
  8460 ;;  bexp            1   40[BANK0 ] unsigned char 
  8461 ;;  aexp            1   39[BANK0 ] unsigned char 
  8462 ;;  signs           1   38[BANK0 ] unsigned char 
  8463 ;; Return value:  Size  Location     Type
  8464 ;;                  4   22[BANK0 ] unsigned char 
  8465 ;; Registers used:
  8466 ;;		wreg, status,2, status,0
  8467 ;; Tracked objects:
  8468 ;;		On entry : 0/0
  8469 ;;		On exit  : 0/0
  8470 ;;		Unchanged: 0/0
  8471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8472 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8473 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8474 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8475 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8476 ;;Total ram usage:       20 bytes
  8477 ;; Hardware stack levels used:    1
  8478 ;; Hardware stack levels required when called:    2
  8479 ;; This function calls:
  8480 ;;		Nothing
  8481 ;; This function is called by:
  8482 ;;		_operation
  8483 ;;		_sprintf
  8484 ;;		___flsub
  8485 ;;		_set_pwm1_percent
  8486 ;;		_set_pwm1_voltage
  8487 ;;		_set_pwm1_general
  8488 ;; This function uses a non-reentrant model
  8489 ;;
  8490                           
  8491                           	psect	text27
  8492  0015A6                     __ptext27:
  8493                           	opt stack 0
  8494  0015A6                     ___fladd:
  8495                           	opt stack 27
  8496                           
  8497                           ;incstack = 0
  8498  0015A6  0100               	movlb	0	; () banked
  8499  0015A8  5199               	movf	(___fladd@b+3)& (0+255),w,b
  8500  0015AA  0B80               	andlw	128
  8501  0015AC  6FA6               	movwf	___fladd@signs& (0+255),b
  8502  0015AE  5199               	movf	(___fladd@b+3)& (0+255),w,b
  8503  0015B0  2599               	addwf	(___fladd@b+3)& (0+255),w,b
  8504  0015B2  6FA8               	movwf	___fladd@bexp& (0+255),b
  8505                           
  8506                           ; BSR set to: 0
  8507  0015B4  BF98               	btfsc	(___fladd@b+2)& (0+255),7,b
  8508                           
  8509                           ; BSR set to: 0
  8510  0015B6  81A8               	bsf	___fladd@bexp& (0+255),0,b
  8511                           
  8512                           ; BSR set to: 0
  8513                           
  8514                           ; BSR set to: 0
  8515  0015B8  51A8               	movf	___fladd@bexp& (0+255),w,b
  8516  0015BA  B4D8               	btfsc	status,2,c
  8517  0015BC  D00D               	goto	l921
  8518                           
  8519                           ; BSR set to: 0
  8520  0015BE  29A8               	incf	___fladd@bexp& (0+255),w,b
  8521  0015C0  A4D8               	btfss	status,2,c
  8522  0015C2  D008               	goto	l922
  8523                           
  8524                           ; BSR set to: 0
  8525  0015C4  0E00               	movlw	0
  8526  0015C6  6F96               	movwf	___fladd@b& (0+255),b
  8527  0015C8  0E00               	movlw	0
  8528  0015CA  6F97               	movwf	(___fladd@b+1)& (0+255),b
  8529  0015CC  0E00               	movlw	0
  8530  0015CE  6F98               	movwf	(___fladd@b+2)& (0+255),b
  8531  0015D0  0E00               	movlw	0
  8532  0015D2  6F99               	movwf	(___fladd@b+3)& (0+255),b
  8533  0015D4                     l922:
  8534                           
  8535                           ; BSR set to: 0
  8536                           
  8537                           ; BSR set to: 0
  8538  0015D4  8F98               	bsf	(___fladd@b+2)& (0+255),7,b
  8539  0015D6  D006               	goto	L9
  8540  0015D8                     l921:
  8541                           
  8542                           ; BSR set to: 0
  8543                           
  8544                           ; BSR set to: 0
  8545  0015D8  0E00               	movlw	0
  8546  0015DA  6F96               	movwf	___fladd@b& (0+255),b
  8547  0015DC  0E00               	movlw	0
  8548  0015DE  6F97               	movwf	(___fladd@b+1)& (0+255),b
  8549  0015E0  0E00               	movlw	0
  8550  0015E2  6F98               	movwf	(___fladd@b+2)& (0+255),b
  8551  0015E4                     L9:
  8552  0015E4  0E00               	movlw	0
  8553  0015E6  6F99               	movwf	(___fladd@b+3)& (0+255),b
  8554                           
  8555                           ; BSR set to: 0
  8556                           
  8557                           ; BSR set to: 0
  8558  0015E8  519D               	movf	(___fladd@a+3)& (0+255),w,b
  8559  0015EA  0B80               	andlw	128
  8560  0015EC  6FA7               	movwf	___fladd@aexp& (0+255),b
  8561                           
  8562                           ; BSR set to: 0
  8563  0015EE  51A6               	movf	___fladd@signs& (0+255),w,b
  8564  0015F0  19A7               	xorwf	___fladd@aexp& (0+255),w,b
  8565  0015F2  A4D8               	btfss	status,2,c
  8566                           
  8567                           ; BSR set to: 0
  8568  0015F4  8DA6               	bsf	___fladd@signs& (0+255),6,b
  8569                           
  8570                           ; BSR set to: 0
  8571                           
  8572                           ; BSR set to: 0
  8573  0015F6  519D               	movf	(___fladd@a+3)& (0+255),w,b
  8574  0015F8  259D               	addwf	(___fladd@a+3)& (0+255),w,b
  8575  0015FA  6FA7               	movwf	___fladd@aexp& (0+255),b
  8576                           
  8577                           ; BSR set to: 0
  8578  0015FC  BF9C               	btfsc	(___fladd@a+2)& (0+255),7,b
  8579                           
  8580                           ; BSR set to: 0
  8581  0015FE  81A7               	bsf	___fladd@aexp& (0+255),0,b
  8582                           
  8583                           ; BSR set to: 0
  8584                           
  8585                           ; BSR set to: 0
  8586  001600  51A7               	movf	___fladd@aexp& (0+255),w,b
  8587  001602  B4D8               	btfsc	status,2,c
  8588  001604  D00D               	goto	l926
  8589                           
  8590                           ; BSR set to: 0
  8591  001606  29A7               	incf	___fladd@aexp& (0+255),w,b
  8592  001608  A4D8               	btfss	status,2,c
  8593  00160A  D008               	goto	l927
  8594                           
  8595                           ; BSR set to: 0
  8596  00160C  0E00               	movlw	0
  8597  00160E  6F9A               	movwf	___fladd@a& (0+255),b
  8598  001610  0E00               	movlw	0
  8599  001612  6F9B               	movwf	(___fladd@a+1)& (0+255),b
  8600  001614  0E00               	movlw	0
  8601  001616  6F9C               	movwf	(___fladd@a+2)& (0+255),b
  8602  001618  0E00               	movlw	0
  8603  00161A  6F9D               	movwf	(___fladd@a+3)& (0+255),b
  8604  00161C                     l927:
  8605                           
  8606                           ; BSR set to: 0
  8607                           
  8608                           ; BSR set to: 0
  8609  00161C  8F9C               	bsf	(___fladd@a+2)& (0+255),7,b
  8610  00161E  D006               	goto	L10
  8611  001620                     l926:
  8612                           
  8613                           ; BSR set to: 0
  8614                           
  8615                           ; BSR set to: 0
  8616  001620  0E00               	movlw	0
  8617  001622  6F9A               	movwf	___fladd@a& (0+255),b
  8618  001624  0E00               	movlw	0
  8619  001626  6F9B               	movwf	(___fladd@a+1)& (0+255),b
  8620  001628  0E00               	movlw	0
  8621  00162A  6F9C               	movwf	(___fladd@a+2)& (0+255),b
  8622  00162C                     L10:
  8623  00162C  0E00               	movlw	0
  8624  00162E  6F9D               	movwf	(___fladd@a+3)& (0+255),b
  8625                           
  8626                           ; BSR set to: 0
  8627                           
  8628                           ; BSR set to: 0
  8629  001630  51A8               	movf	___fladd@bexp& (0+255),w,b
  8630  001632  5DA7               	subwf	___fladd@aexp& (0+255),w,b
  8631  001634  B0D8               	btfsc	status,0,c
  8632  001636  D022               	goto	l929
  8633                           
  8634                           ; BSR set to: 0
  8635  001638  ADA6               	btfss	___fladd@signs& (0+255),6,b
  8636  00163A  D002               	goto	l930
  8637                           
  8638                           ; BSR set to: 0
  8639  00163C  0E80               	movlw	128
  8640  00163E  1BA6               	xorwf	___fladd@signs& (0+255),f,b
  8641  001640                     l930:
  8642                           
  8643                           ; BSR set to: 0
  8644                           
  8645                           ; BSR set to: 0
  8646  001640  C0A8  F0A9         	movff	___fladd@bexp,___fladd@grs
  8647                           
  8648                           ; BSR set to: 0
  8649  001644  C0A7  F0A8         	movff	___fladd@aexp,___fladd@bexp
  8650                           
  8651                           ; BSR set to: 0
  8652  001648  C0A9  F0A7         	movff	___fladd@grs,___fladd@aexp
  8653                           
  8654                           ; BSR set to: 0
  8655  00164C  C096  F0A9         	movff	___fladd@b,___fladd@grs
  8656                           
  8657                           ; BSR set to: 0
  8658  001650  C09A  F096         	movff	___fladd@a,___fladd@b
  8659                           
  8660                           ; BSR set to: 0
  8661  001654  C0A9  F09A         	movff	___fladd@grs,___fladd@a
  8662                           
  8663                           ; BSR set to: 0
  8664  001658  C097  F0A9         	movff	___fladd@b+1,___fladd@grs
  8665                           
  8666                           ; BSR set to: 0
  8667  00165C  C09B  F097         	movff	___fladd@a+1,___fladd@b+1
  8668                           
  8669                           ; BSR set to: 0
  8670  001660  C0A9  F09B         	movff	___fladd@grs,___fladd@a+1
  8671                           
  8672                           ; BSR set to: 0
  8673  001664  C098  F0A9         	movff	___fladd@b+2,___fladd@grs
  8674                           
  8675                           ; BSR set to: 0
  8676  001668  C09C  F098         	movff	___fladd@a+2,___fladd@b+2
  8677                           
  8678                           ; BSR set to: 0
  8679  00166C  C0A9  F09C         	movff	___fladd@grs,___fladd@a+2
  8680                           
  8681                           ; BSR set to: 0
  8682  001670  C099  F0A9         	movff	___fladd@b+3,___fladd@grs
  8683                           
  8684                           ; BSR set to: 0
  8685  001674  C09D  F099         	movff	___fladd@a+3,___fladd@b+3
  8686                           
  8687                           ; BSR set to: 0
  8688  001678  C0A9  F09D         	movff	___fladd@grs,___fladd@a+3
  8689  00167C                     l929:
  8690                           
  8691                           ; BSR set to: 0
  8692                           
  8693                           ; BSR set to: 0
  8694  00167C  0E00               	movlw	0
  8695  00167E  6FA9               	movwf	___fladd@grs& (0+255),b
  8696                           
  8697                           ; BSR set to: 0
  8698  001680  51A8               	movf	___fladd@bexp& (0+255),w,b
  8699  001682  6F9E               	movwf	??___fladd& (0+255),b
  8700  001684  6B9F               	clrf	(??___fladd+1)& (0+255),b
  8701  001686  1F9E               	comf	??___fladd& (0+255),f,b
  8702  001688  1F9F               	comf	(??___fladd+1)& (0+255),f,b
  8703  00168A  4B9E               	infsnz	??___fladd& (0+255),f,b
  8704  00168C  2B9F               	incf	(??___fladd+1)& (0+255),f,b
  8705  00168E  51A7               	movf	___fladd@aexp& (0+255),w,b
  8706  001690  6FA0               	movwf	(??___fladd+2)& (0+255),b
  8707  001692  6BA1               	clrf	(??___fladd+3)& (0+255),b
  8708  001694  519E               	movf	??___fladd& (0+255),w,b
  8709  001696  27A0               	addwf	(??___fladd+2)& (0+255),f,b
  8710  001698  519F               	movf	(??___fladd+1)& (0+255),w,b
  8711  00169A  23A1               	addwfc	(??___fladd+3)& (0+255),f,b
  8712  00169C  BFA1               	btfsc	(??___fladd+3)& (0+255),7,b
  8713  00169E  D02C               	goto	l933
  8714  0016A0  51A1               	movf	(??___fladd+3)& (0+255),w,b
  8715  0016A2  E104               	bnz	u2530
  8716  0016A4  0E1A               	movlw	26
  8717  0016A6  5DA0               	subwf	(??___fladd+2)& (0+255),w,b
  8718  0016A8  A0D8               	btfss	status,0,c
  8719  0016AA  D026               	goto	l933
  8720  0016AC                     u2530:
  8721                           
  8722                           ; BSR set to: 0
  8723  0016AC  5196               	movf	___fladd@b& (0+255),w,b
  8724  0016AE  1197               	iorwf	(___fladd@b+1)& (0+255),w,b
  8725  0016B0  1198               	iorwf	(___fladd@b+2)& (0+255),w,b
  8726  0016B2  1199               	iorwf	(___fladd@b+3)& (0+255),w,b
  8727  0016B4  B4D8               	btfsc	status,2,c
  8728  0016B6  D002               	goto	u2540
  8729  0016B8  0E01               	movlw	1
  8730  0016BA  D001               	goto	u2550
  8731  0016BC                     u2540:
  8732  0016BC  0E00               	movlw	0
  8733  0016BE                     u2550:
  8734  0016BE  6FA9               	movwf	___fladd@grs& (0+255),b
  8735                           
  8736                           ; BSR set to: 0
  8737  0016C0  0E00               	movlw	0
  8738  0016C2  6F96               	movwf	___fladd@b& (0+255),b
  8739  0016C4  0E00               	movlw	0
  8740  0016C6  6F97               	movwf	(___fladd@b+1)& (0+255),b
  8741  0016C8  0E00               	movlw	0
  8742  0016CA  6F98               	movwf	(___fladd@b+2)& (0+255),b
  8743  0016CC  0E00               	movlw	0
  8744  0016CE  6F99               	movwf	(___fladd@b+3)& (0+255),b
  8745                           
  8746                           ; BSR set to: 0
  8747  0016D0  C0A7  F0A8         	movff	___fladd@aexp,___fladd@bexp
  8748  0016D4  D015               	goto	u2580
  8749  0016D6                     l934:
  8750                           
  8751                           ; BSR set to: 0
  8752  0016D6  A1A9               	btfss	___fladd@grs& (0+255),0,b
  8753  0016D8  D005               	goto	l935
  8754                           
  8755                           ; BSR set to: 0
  8756  0016DA  90D8               	bcf	status,0,c
  8757  0016DC  31A9               	rrcf	___fladd@grs& (0+255),w,b
  8758  0016DE  0901               	iorlw	1
  8759  0016E0  6FA9               	movwf	___fladd@grs& (0+255),b
  8760  0016E2  D002               	goto	l936
  8761  0016E4                     l935:
  8762                           
  8763                           ; BSR set to: 0
  8764                           
  8765                           ; BSR set to: 0
  8766  0016E4  90D8               	bcf	status,0,c
  8767  0016E6  33A9               	rrcf	___fladd@grs& (0+255),f,b
  8768  0016E8                     l936:
  8769                           
  8770                           ; BSR set to: 0
  8771                           
  8772                           ; BSR set to: 0
  8773  0016E8  B196               	btfsc	___fladd@b& (0+255),0,b
  8774                           
  8775                           ; BSR set to: 0
  8776  0016EA  8FA9               	bsf	___fladd@grs& (0+255),7,b
  8777                           
  8778                           ; BSR set to: 0
  8779                           
  8780                           ; BSR set to: 0
  8781  0016EC  3599               	rlcf	(___fladd@b+3)& (0+255),w,b
  8782  0016EE  3399               	rrcf	(___fladd@b+3)& (0+255),f,b
  8783  0016F0  3398               	rrcf	(___fladd@b+2)& (0+255),f,b
  8784  0016F2  3397               	rrcf	(___fladd@b+1)& (0+255),f,b
  8785  0016F4  3396               	rrcf	___fladd@b& (0+255),f,b
  8786                           
  8787                           ; BSR set to: 0
  8788  0016F6  2BA8               	incf	___fladd@bexp& (0+255),f,b
  8789  0016F8                     l933:
  8790                           
  8791                           ; BSR set to: 0
  8792  0016F8  51A7               	movf	___fladd@aexp& (0+255),w,b
  8793  0016FA  5DA8               	subwf	___fladd@bexp& (0+255),w,b
  8794  0016FC  A0D8               	btfss	status,0,c
  8795  0016FE  D7EB               	goto	l934
  8796  001700                     u2580:
  8797                           
  8798                           ; BSR set to: 0
  8799                           
  8800                           ; BSR set to: 0
  8801  001700  BDA6               	btfsc	___fladd@signs& (0+255),6,b
  8802  001702  D029               	goto	l939
  8803                           
  8804                           ; BSR set to: 0
  8805  001704  51A8               	movf	___fladd@bexp& (0+255),w,b
  8806  001706  A4D8               	btfss	status,2,c
  8807  001708  D009               	goto	l940
  8808                           
  8809                           ; BSR set to: 0
  8810  00170A  0E00               	movlw	0
  8811  00170C  6F96               	movwf	?___fladd& (0+255),b
  8812  00170E  0E00               	movlw	0
  8813  001710  6F97               	movwf	(?___fladd+1)& (0+255),b
  8814  001712  0E00               	movlw	0
  8815  001714  6F98               	movwf	(?___fladd+2)& (0+255),b
  8816  001716  0E00               	movlw	0
  8817  001718  6F99               	movwf	(?___fladd+3)& (0+255),b
  8818                           
  8819                           ; BSR set to: 0
  8820  00171A  0012               	return	
  8821  00171C                     l940:
  8822                           
  8823                           ; BSR set to: 0
  8824                           
  8825                           ; BSR set to: 0
  8826  00171C  519A               	movf	___fladd@a& (0+255),w,b
  8827  00171E  2796               	addwf	___fladd@b& (0+255),f,b
  8828  001720  519B               	movf	(___fladd@a+1)& (0+255),w,b
  8829  001722  2397               	addwfc	(___fladd@b+1)& (0+255),f,b
  8830  001724  519C               	movf	(___fladd@a+2)& (0+255),w,b
  8831  001726  2398               	addwfc	(___fladd@b+2)& (0+255),f,b
  8832  001728  519D               	movf	(___fladd@a+3)& (0+255),w,b
  8833  00172A  2399               	addwfc	(___fladd@b+3)& (0+255),f,b
  8834                           
  8835                           ; BSR set to: 0
  8836  00172C  A199               	btfss	(___fladd@b+3)& (0+255),0,b
  8837  00172E  D083               	goto	u2710
  8838                           
  8839                           ; BSR set to: 0
  8840  001730  A1A9               	btfss	___fladd@grs& (0+255),0,b
  8841  001732  D006               	goto	l943
  8842                           
  8843                           ; BSR set to: 0
  8844  001734  90D8               	bcf	status,0,c
  8845  001736  33A9               	rrcf	___fladd@grs& (0+255),f,b
  8846  001738  51A9               	movf	___fladd@grs& (0+255),w,b
  8847  00173A  0901               	iorlw	1
  8848  00173C  6FA9               	movwf	___fladd@grs& (0+255),b
  8849  00173E  D002               	goto	l944
  8850  001740                     l943:
  8851                           
  8852                           ; BSR set to: 0
  8853                           
  8854                           ; BSR set to: 0
  8855  001740  90D8               	bcf	status,0,c
  8856  001742  33A9               	rrcf	___fladd@grs& (0+255),f,b
  8857  001744                     l944:
  8858                           
  8859                           ; BSR set to: 0
  8860                           
  8861                           ; BSR set to: 0
  8862  001744  B196               	btfsc	___fladd@b& (0+255),0,b
  8863                           
  8864                           ; BSR set to: 0
  8865  001746  8FA9               	bsf	___fladd@grs& (0+255),7,b
  8866                           
  8867                           ; BSR set to: 0
  8868                           
  8869                           ; BSR set to: 0
  8870  001748  3599               	rlcf	(___fladd@b+3)& (0+255),w,b
  8871  00174A  3399               	rrcf	(___fladd@b+3)& (0+255),f,b
  8872  00174C  3398               	rrcf	(___fladd@b+2)& (0+255),f,b
  8873  00174E  3397               	rrcf	(___fladd@b+1)& (0+255),f,b
  8874  001750  3396               	rrcf	___fladd@b& (0+255),f,b
  8875                           
  8876                           ; BSR set to: 0
  8877  001752  2BA8               	incf	___fladd@bexp& (0+255),f,b
  8878                           
  8879                           ; BSR set to: 0
  8880  001754  D070               	goto	u2710
  8881  001756                     l939:
  8882                           
  8883                           ; BSR set to: 0
  8884                           
  8885                           ; BSR set to: 0
  8886  001756  519A               	movf	___fladd@a& (0+255),w,b
  8887  001758  5D96               	subwf	___fladd@b& (0+255),w,b
  8888  00175A  519B               	movf	(___fladd@a+1)& (0+255),w,b
  8889  00175C  5997               	subwfb	(___fladd@b+1)& (0+255),w,b
  8890  00175E  519C               	movf	(___fladd@a+2)& (0+255),w,b
  8891  001760  5998               	subwfb	(___fladd@b+2)& (0+255),w,b
  8892  001762  5199               	movf	(___fladd@b+3)& (0+255),w,b
  8893  001764  0A80               	xorlw	128
  8894  001766  6F9E               	movwf	??___fladd& (0+255),b
  8895  001768  519D               	movf	(___fladd@a+3)& (0+255),w,b
  8896  00176A  0A80               	xorlw	128
  8897  00176C  599E               	subwfb	??___fladd& (0+255),w,b
  8898  00176E  B0D8               	btfsc	status,0,c
  8899  001770  D036               	goto	l947
  8900                           
  8901                           ; BSR set to: 0
  8902  001772  C096  F09E         	movff	___fladd@b,??___fladd
  8903  001776  C097  F09F         	movff	___fladd@b+1,??___fladd+1
  8904  00177A  C098  F0A0         	movff	___fladd@b+2,??___fladd+2
  8905  00177E  C099  F0A1         	movff	___fladd@b+3,??___fladd+3
  8906  001782  1F9E               	comf	??___fladd& (0+255),f,b
  8907  001784  1F9F               	comf	(??___fladd+1)& (0+255),f,b
  8908  001786  1FA0               	comf	(??___fladd+2)& (0+255),f,b
  8909  001788  1FA1               	comf	(??___fladd+3)& (0+255),f,b
  8910  00178A  2B9E               	incf	??___fladd& (0+255),f,b
  8911  00178C  0E00               	movlw	0
  8912  00178E  239F               	addwfc	(??___fladd+1)& (0+255),f,b
  8913  001790  23A0               	addwfc	(??___fladd+2)& (0+255),f,b
  8914  001792  23A1               	addwfc	(??___fladd+3)& (0+255),f,b
  8915  001794  519A               	movf	___fladd@a& (0+255),w,b
  8916  001796  259E               	addwf	??___fladd& (0+255),w,b
  8917  001798  6FA2               	movwf	(??___fladd+4)& (0+255),b
  8918  00179A  519B               	movf	(___fladd@a+1)& (0+255),w,b
  8919  00179C  219F               	addwfc	(??___fladd+1)& (0+255),w,b
  8920  00179E  6FA3               	movwf	(??___fladd+5)& (0+255),b
  8921  0017A0  519C               	movf	(___fladd@a+2)& (0+255),w,b
  8922  0017A2  21A0               	addwfc	(??___fladd+2)& (0+255),w,b
  8923  0017A4  6FA4               	movwf	(??___fladd+6)& (0+255),b
  8924  0017A6  519D               	movf	(___fladd@a+3)& (0+255),w,b
  8925  0017A8  21A1               	addwfc	(??___fladd+3)& (0+255),w,b
  8926  0017AA  6FA5               	movwf	(??___fladd+7)& (0+255),b
  8927  0017AC  0EFF               	movlw	255
  8928  0017AE  25A2               	addwf	(??___fladd+4)& (0+255),w,b
  8929  0017B0  6F96               	movwf	___fladd@b& (0+255),b
  8930  0017B2  0EFF               	movlw	255
  8931  0017B4  21A3               	addwfc	(??___fladd+5)& (0+255),w,b
  8932  0017B6  6F97               	movwf	(___fladd@b+1)& (0+255),b
  8933  0017B8  0EFF               	movlw	255
  8934  0017BA  21A4               	addwfc	(??___fladd+6)& (0+255),w,b
  8935  0017BC  6F98               	movwf	(___fladd@b+2)& (0+255),b
  8936  0017BE  0EFF               	movlw	255
  8937  0017C0  21A5               	addwfc	(??___fladd+7)& (0+255),w,b
  8938  0017C2  6F99               	movwf	(___fladd@b+3)& (0+255),b
  8939  0017C4  0E80               	movlw	128
  8940  0017C6  1BA6               	xorwf	___fladd@signs& (0+255),f,b
  8941                           
  8942                           ; BSR set to: 0
  8943  0017C8  6DA9               	negf	___fladd@grs& (0+255),b
  8944                           
  8945                           ; BSR set to: 0
  8946  0017CA  51A9               	movf	___fladd@grs& (0+255),w,b
  8947  0017CC  A4D8               	btfss	status,2,c
  8948  0017CE  D00F               	goto	l949
  8949                           
  8950                           ; BSR set to: 0
  8951  0017D0  0E01               	movlw	1
  8952  0017D2  2796               	addwf	___fladd@b& (0+255),f,b
  8953  0017D4  0E00               	movlw	0
  8954  0017D6  2397               	addwfc	(___fladd@b+1)& (0+255),f,b
  8955  0017D8  2398               	addwfc	(___fladd@b+2)& (0+255),f,b
  8956  0017DA  2399               	addwfc	(___fladd@b+3)& (0+255),f,b
  8957                           
  8958                           ; BSR set to: 0
  8959  0017DC  D008               	goto	l949
  8960  0017DE                     l947:
  8961                           
  8962                           ; BSR set to: 0
  8963                           
  8964                           ; BSR set to: 0
  8965  0017DE  519A               	movf	___fladd@a& (0+255),w,b
  8966  0017E0  5F96               	subwf	___fladd@b& (0+255),f,b
  8967  0017E2  519B               	movf	(___fladd@a+1)& (0+255),w,b
  8968  0017E4  5B97               	subwfb	(___fladd@b+1)& (0+255),f,b
  8969  0017E6  519C               	movf	(___fladd@a+2)& (0+255),w,b
  8970  0017E8  5B98               	subwfb	(___fladd@b+2)& (0+255),f,b
  8971  0017EA  519D               	movf	(___fladd@a+3)& (0+255),w,b
  8972  0017EC  5B99               	subwfb	(___fladd@b+3)& (0+255),f,b
  8973  0017EE                     l949:
  8974                           
  8975                           ; BSR set to: 0
  8976  0017EE  5196               	movf	___fladd@b& (0+255),w,b
  8977  0017F0  1197               	iorwf	(___fladd@b+1)& (0+255),w,b
  8978  0017F2  1198               	iorwf	(___fladd@b+2)& (0+255),w,b
  8979  0017F4  1199               	iorwf	(___fladd@b+3)& (0+255),w,b
  8980  0017F6  A4D8               	btfss	status,2,c
  8981  0017F8  D01C               	goto	l956
  8982                           
  8983                           ; BSR set to: 0
  8984  0017FA  51A9               	movf	___fladd@grs& (0+255),w,b
  8985  0017FC  A4D8               	btfss	status,2,c
  8986  0017FE  D019               	goto	l956
  8987                           
  8988                           ; BSR set to: 0
  8989  001800  0E00               	movlw	0
  8990  001802  6F96               	movwf	?___fladd& (0+255),b
  8991  001804  0E00               	movlw	0
  8992  001806  6F97               	movwf	(?___fladd+1)& (0+255),b
  8993  001808  0E00               	movlw	0
  8994  00180A  6F98               	movwf	(?___fladd+2)& (0+255),b
  8995  00180C  0E00               	movlw	0
  8996  00180E  6F99               	movwf	(?___fladd+3)& (0+255),b
  8997                           
  8998                           ; BSR set to: 0
  8999  001810  0012               	return	
  9000  001812                     
  9001                           ; BSR set to: 0
  9002                           
  9003                           ; BSR set to: 0
  9004  001812  90D8               	bcf	status,0,c
  9005  001814  3796               	rlcf	___fladd@b& (0+255),f,b
  9006  001816  3797               	rlcf	(___fladd@b+1)& (0+255),f,b
  9007  001818  3798               	rlcf	(___fladd@b+2)& (0+255),f,b
  9008  00181A  3799               	rlcf	(___fladd@b+3)& (0+255),f,b
  9009                           
  9010                           ; BSR set to: 0
  9011  00181C  BFA9               	btfsc	___fladd@grs& (0+255),7,b
  9012                           
  9013                           ; BSR set to: 0
  9014  00181E  8196               	bsf	___fladd@b& (0+255),0,b
  9015                           
  9016                           ; BSR set to: 0
  9017                           
  9018                           ; BSR set to: 0
  9019  001820  A1A9               	btfss	___fladd@grs& (0+255),0,b
  9020  001822  D002               	goto	l954
  9021                           
  9022                           ; BSR set to: 0
  9023  001824  80D8               	bsf	status,0,c
  9024  001826  D001               	goto	L11
  9025  001828                     l954:
  9026                           
  9027                           ; BSR set to: 0
  9028                           
  9029                           ; BSR set to: 0
  9030  001828  90D8               	bcf	status,0,c
  9031  00182A                     L11:
  9032  00182A  37A9               	rlcf	___fladd@grs& (0+255),f,b
  9033                           
  9034                           ; BSR set to: 0
  9035                           
  9036                           ; BSR set to: 0
  9037  00182C  51A8               	movf	___fladd@bexp& (0+255),w,b
  9038  00182E  A4D8               	btfss	status,2,c
  9039                           
  9040                           ; BSR set to: 0
  9041  001830  07A8               	decf	___fladd@bexp& (0+255),f,b
  9042  001832                     l956:
  9043                           
  9044                           ; BSR set to: 0
  9045                           
  9046                           ; BSR set to: 0
  9047                           
  9048                           ; BSR set to: 0
  9049  001832  AF98               	btfss	(___fladd@b+2)& (0+255),7,b
  9050  001834  D7EE               	goto	l952
  9051  001836                     u2710:
  9052                           
  9053                           ; BSR set to: 0
  9054                           
  9055                           ; BSR set to: 0
  9056                           
  9057                           ; BSR set to: 0
  9058  001836  0E00               	movlw	0
  9059  001838  6FA7               	movwf	___fladd@aexp& (0+255),b
  9060                           
  9061                           ; BSR set to: 0
  9062  00183A  AFA9               	btfss	___fladd@grs& (0+255),7,b
  9063  00183C  D00A               	goto	l961
  9064                           
  9065                           ; BSR set to: 0
  9066  00183E  C0A9  F09E         	movff	___fladd@grs,??___fladd
  9067  001842  0E7F               	movlw	127
  9068  001844  179E               	andwf	??___fladd& (0+255),f,b
  9069  001846  A4D8               	btfss	status,2,c
  9070  001848  D002               	goto	u2740
  9071                           
  9072                           ; BSR set to: 0
  9073                           
  9074                           ; BSR set to: 0
  9075  00184A  A196               	btfss	___fladd@b& (0+255),0,b
  9076  00184C  D002               	goto	l961
  9077  00184E                     u2740:
  9078                           
  9079                           ; BSR set to: 0
  9080  00184E  0E01               	movlw	1
  9081  001850  6FA7               	movwf	___fladd@aexp& (0+255),b
  9082  001852                     l961:
  9083                           
  9084                           ; BSR set to: 0
  9085                           
  9086                           ; BSR set to: 0
  9087                           
  9088                           ; BSR set to: 0
  9089  001852  51A7               	movf	___fladd@aexp& (0+255),w,b
  9090  001854  B4D8               	btfsc	status,2,c
  9091  001856  D020               	goto	l964
  9092                           
  9093                           ; BSR set to: 0
  9094  001858  0E01               	movlw	1
  9095  00185A  2796               	addwf	___fladd@b& (0+255),f,b
  9096  00185C  0E00               	movlw	0
  9097  00185E  2397               	addwfc	(___fladd@b+1)& (0+255),f,b
  9098  001860  2398               	addwfc	(___fladd@b+2)& (0+255),f,b
  9099  001862  2399               	addwfc	(___fladd@b+3)& (0+255),f,b
  9100                           
  9101                           ; BSR set to: 0
  9102  001864  A199               	btfss	(___fladd@b+3)& (0+255),0,b
  9103  001866  D018               	goto	l964
  9104                           
  9105                           ; BSR set to: 0
  9106  001868  C096  F09E         	movff	___fladd@b,??___fladd
  9107  00186C  C097  F09F         	movff	___fladd@b+1,??___fladd+1
  9108  001870  C098  F0A0         	movff	___fladd@b+2,??___fladd+2
  9109  001874  C099  F0A1         	movff	___fladd@b+3,??___fladd+3
  9110  001878  35A1               	rlcf	(??___fladd+3)& (0+255),w,b
  9111  00187A  33A1               	rrcf	(??___fladd+3)& (0+255),f,b
  9112  00187C  33A0               	rrcf	(??___fladd+2)& (0+255),f,b
  9113  00187E  339F               	rrcf	(??___fladd+1)& (0+255),f,b
  9114  001880  339E               	rrcf	??___fladd& (0+255),f,b
  9115  001882  C09E  F096         	movff	??___fladd,___fladd@b
  9116  001886  C09F  F097         	movff	??___fladd+1,___fladd@b+1
  9117  00188A  C0A0  F098         	movff	??___fladd+2,___fladd@b+2
  9118  00188E  C0A1  F099         	movff	??___fladd+3,___fladd@b+3
  9119  001892  29A8               	incf	___fladd@bexp& (0+255),w,b
  9120  001894  A4D8               	btfss	status,2,c
  9121                           
  9122                           ; BSR set to: 0
  9123  001896  2BA8               	incf	___fladd@bexp& (0+255),f,b
  9124  001898                     l964:
  9125                           
  9126                           ; BSR set to: 0
  9127                           
  9128                           ; BSR set to: 0
  9129                           
  9130                           ; BSR set to: 0
  9131                           
  9132                           ; BSR set to: 0
  9133  001898  29A8               	incf	___fladd@bexp& (0+255),w,b
  9134  00189A  B4D8               	btfsc	status,2,c
  9135  00189C  D003               	goto	u2790
  9136                           
  9137                           ; BSR set to: 0
  9138  00189E  51A8               	movf	___fladd@bexp& (0+255),w,b
  9139  0018A0  A4D8               	btfss	status,2,c
  9140  0018A2  D00D               	goto	l968
  9141  0018A4                     u2790:
  9142                           
  9143                           ; BSR set to: 0
  9144                           
  9145                           ; BSR set to: 0
  9146  0018A4  0E00               	movlw	0
  9147  0018A6  6F96               	movwf	___fladd@b& (0+255),b
  9148  0018A8  0E00               	movlw	0
  9149  0018AA  6F97               	movwf	(___fladd@b+1)& (0+255),b
  9150  0018AC  0E00               	movlw	0
  9151  0018AE  6F98               	movwf	(___fladd@b+2)& (0+255),b
  9152  0018B0  0E00               	movlw	0
  9153  0018B2  6F99               	movwf	(___fladd@b+3)& (0+255),b
  9154  0018B4  51A8               	movf	___fladd@bexp& (0+255),w,b
  9155  0018B6  A4D8               	btfss	status,2,c
  9156  0018B8  D002               	goto	l968
  9157                           
  9158                           ; BSR set to: 0
  9159  0018BA  0E00               	movlw	0
  9160  0018BC  6FA6               	movwf	___fladd@signs& (0+255),b
  9161  0018BE                     l968:
  9162                           
  9163                           ; BSR set to: 0
  9164                           
  9165                           ; BSR set to: 0
  9166                           
  9167                           ; BSR set to: 0
  9168  0018BE  A1A8               	btfss	___fladd@bexp& (0+255),0,b
  9169  0018C0  D002               	goto	l969
  9170                           
  9171                           ; BSR set to: 0
  9172  0018C2  8F98               	bsf	(___fladd@b+2)& (0+255),7,b
  9173  0018C4  D001               	goto	l970
  9174  0018C6                     l969:
  9175                           
  9176                           ; BSR set to: 0
  9177                           
  9178                           ; BSR set to: 0
  9179  0018C6  9F98               	bcf	(___fladd@b+2)& (0+255),7,b
  9180  0018C8                     l970:
  9181                           
  9182                           ; BSR set to: 0
  9183                           
  9184                           ; BSR set to: 0
  9185  0018C8  90D8               	bcf	status,0,c
  9186  0018CA  31A8               	rrcf	___fladd@bexp& (0+255),w,b
  9187  0018CC  6F99               	movwf	(___fladd@b+3)& (0+255),b
  9188                           
  9189                           ; BSR set to: 0
  9190  0018CE  BFA6               	btfsc	___fladd@signs& (0+255),7,b
  9191                           
  9192                           ; BSR set to: 0
  9193  0018D0  8F99               	bsf	(___fladd@b+3)& (0+255),7,b
  9194                           
  9195                           ; BSR set to: 0
  9196                           
  9197                           ; BSR set to: 0
  9198  0018D2  C096  F096         	movff	___fladd@b,?___fladd
  9199  0018D6  C097  F097         	movff	___fladd@b+1,?___fladd+1
  9200  0018DA  C098  F098         	movff	___fladd@b+2,?___fladd+2
  9201  0018DE  C099  F099         	movff	___fladd@b+3,?___fladd+3
  9202  0018E2  0012               	return	
  9203  0018E4                     __end_of___fladd:
  9204                           	opt stack 0
  9205                           tblptru	equ	0xFF8
  9206                           tblptrh	equ	0xFF7
  9207                           tblptrl	equ	0xFF6
  9208                           tablat	equ	0xFF5
  9209                           prodh	equ	0xFF4
  9210                           prodl	equ	0xFF3
  9211                           intcon	equ	0xFF2
  9212                           intcon2	equ	0xFF1
  9213                           intcon3	equ	0xFF0
  9214                           postinc0	equ	0xFEE
  9215                           wreg	equ	0xFE8
  9216                           indf1	equ	0xFE7
  9217                           postdec1	equ	0xFE5
  9218                           fsr1h	equ	0xFE2
  9219                           fsr1l	equ	0xFE1
  9220                           indf2	equ	0xFDF
  9221                           postinc2	equ	0xFDE
  9222                           postdec2	equ	0xFDD
  9223                           fsr2h	equ	0xFDA
  9224                           fsr2l	equ	0xFD9
  9225                           status	equ	0xFD8
  9226                           
  9227 ;; *************** function ___flneg *****************
  9228 ;; Defined at:
  9229 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flneg.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;  f1              4   46[COMRAM] unsigned char 
  9232 ;; Auto vars:     Size  Location     Type
  9233 ;;		None
  9234 ;; Return value:  Size  Location     Type
  9235 ;;                  4   46[COMRAM] unsigned char 
  9236 ;; Registers used:
  9237 ;;		wreg, status,2, status,0
  9238 ;; Tracked objects:
  9239 ;;		On entry : 0/0
  9240 ;;		On exit  : 0/0
  9241 ;;		Unchanged: 0/0
  9242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9243 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9246 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9247 ;;Total ram usage:        4 bytes
  9248 ;; Hardware stack levels used:    1
  9249 ;; Hardware stack levels required when called:    2
  9250 ;; This function calls:
  9251 ;;		Nothing
  9252 ;; This function is called by:
  9253 ;;		_operation
  9254 ;;		_sprintf
  9255 ;;		_set_pwm1_general
  9256 ;; This function uses a non-reentrant model
  9257 ;;
  9258                           
  9259                           	psect	text28
  9260  002D60                     __ptext28:
  9261                           	opt stack 0
  9262  002D60                     ___flneg:
  9263                           	opt stack 27
  9264                           
  9265                           ; BSR set to: 0
  9266                           ;incstack = 0
  9267  002D60  502F               	movf	___flneg@f1,w,c
  9268  002D62  1030               	iorwf	___flneg@f1+1,w,c
  9269  002D64  1031               	iorwf	___flneg@f1+2,w,c
  9270  002D66  1032               	iorwf	___flneg@f1+3,w,c
  9271  002D68  B4D8               	btfsc	status,2,c
  9272  002D6A  D008               	goto	l673
  9273  002D6C  0E00               	movlw	0
  9274  002D6E  1A2F               	xorwf	___flneg@f1,f,c
  9275  002D70  0E00               	movlw	0
  9276  002D72  1A30               	xorwf	___flneg@f1+1,f,c
  9277  002D74  0E00               	movlw	0
  9278  002D76  1A31               	xorwf	___flneg@f1+2,f,c
  9279  002D78  0E80               	movlw	128
  9280  002D7A  1A32               	xorwf	___flneg@f1+3,f,c
  9281  002D7C                     l673:
  9282  002D7C  C02F  F02F         	movff	___flneg@f1,?___flneg
  9283  002D80  C030  F030         	movff	___flneg@f1+1,?___flneg+1
  9284  002D84  C031  F031         	movff	___flneg@f1+2,?___flneg+2
  9285  002D88  C032  F032         	movff	___flneg@f1+3,?___flneg+3
  9286  002D8C  0012               	return	
  9287  002D8E                     __end_of___flneg:
  9288                           	opt stack 0
  9289                           tblptru	equ	0xFF8
  9290                           tblptrh	equ	0xFF7
  9291                           tblptrl	equ	0xFF6
  9292                           tablat	equ	0xFF5
  9293                           prodh	equ	0xFF4
  9294                           prodl	equ	0xFF3
  9295                           intcon	equ	0xFF2
  9296                           intcon2	equ	0xFF1
  9297                           intcon3	equ	0xFF0
  9298                           postinc0	equ	0xFEE
  9299                           wreg	equ	0xFE8
  9300                           indf1	equ	0xFE7
  9301                           postdec1	equ	0xFE5
  9302                           fsr1h	equ	0xFE2
  9303                           fsr1l	equ	0xFE1
  9304                           indf2	equ	0xFDF
  9305                           postinc2	equ	0xFDE
  9306                           postdec2	equ	0xFDD
  9307                           fsr2h	equ	0xFDA
  9308                           fsr2l	equ	0xFD9
  9309                           status	equ	0xFD8
  9310                           
  9311 ;; *************** function ___flge *****************
  9312 ;; Defined at:
  9313 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flge.c"
  9314 ;; Parameters:    Size  Location     Type
  9315 ;;  ff1             4   42[BANK0 ] unsigned char 
  9316 ;;  ff2             4   46[BANK0 ] unsigned char 
  9317 ;; Auto vars:     Size  Location     Type
  9318 ;;		None
  9319 ;; Return value:  Size  Location     Type
  9320 ;;		None               void
  9321 ;; Registers used:
  9322 ;;		wreg, status,2, status,0
  9323 ;; Tracked objects:
  9324 ;;		On entry : 0/0
  9325 ;;		On exit  : 0/0
  9326 ;;		Unchanged: 0/0
  9327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9328 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9330 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9331 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9332 ;;Total ram usage:       12 bytes
  9333 ;; Hardware stack levels used:    1
  9334 ;; Hardware stack levels required when called:    2
  9335 ;; This function calls:
  9336 ;;		Nothing
  9337 ;; This function is called by:
  9338 ;;		_operation
  9339 ;;		_sprintf
  9340 ;; This function uses a non-reentrant model
  9341 ;;
  9342                           
  9343                           	psect	text29
  9344  0023CC                     __ptext29:
  9345                           	opt stack 0
  9346  0023CC                     ___flge:
  9347                           	opt stack 27
  9348                           
  9349                           ;incstack = 0
  9350  0023CC  0E00               	movlw	0
  9351  0023CE  0100               	movlb	0	; () banked
  9352  0023D0  15AA               	andwf	___flge@ff1& (0+255),w,b
  9353  0023D2  6FB2               	movwf	??___flge& (0+255),b
  9354  0023D4  0E00               	movlw	0
  9355  0023D6  15AB               	andwf	(___flge@ff1+1)& (0+255),w,b
  9356  0023D8  6FB3               	movwf	(??___flge+1)& (0+255),b
  9357  0023DA  0E80               	movlw	128
  9358  0023DC  15AC               	andwf	(___flge@ff1+2)& (0+255),w,b
  9359  0023DE  6FB4               	movwf	(??___flge+2)& (0+255),b
  9360  0023E0  0E7F               	movlw	127
  9361  0023E2  15AD               	andwf	(___flge@ff1+3)& (0+255),w,b
  9362  0023E4  6FB5               	movwf	(??___flge+3)& (0+255),b
  9363  0023E6  51B2               	movf	??___flge& (0+255),w,b
  9364  0023E8  11B3               	iorwf	(??___flge+1)& (0+255),w,b
  9365  0023EA  11B4               	iorwf	(??___flge+2)& (0+255),w,b
  9366  0023EC  11B5               	iorwf	(??___flge+3)& (0+255),w,b
  9367  0023EE  A4D8               	btfss	status,2,c
  9368  0023F0  D008               	goto	l666
  9369                           
  9370                           ; BSR set to: 0
  9371  0023F2  0E00               	movlw	0
  9372  0023F4  6FAA               	movwf	___flge@ff1& (0+255),b
  9373  0023F6  0E00               	movlw	0
  9374  0023F8  6FAB               	movwf	(___flge@ff1+1)& (0+255),b
  9375  0023FA  0E00               	movlw	0
  9376  0023FC  6FAC               	movwf	(___flge@ff1+2)& (0+255),b
  9377  0023FE  0E00               	movlw	0
  9378  002400  6FAD               	movwf	(___flge@ff1+3)& (0+255),b
  9379  002402                     l666:
  9380                           
  9381                           ; BSR set to: 0
  9382                           
  9383                           ; BSR set to: 0
  9384  002402  0E00               	movlw	0
  9385  002404  15AE               	andwf	___flge@ff2& (0+255),w,b
  9386  002406  6FB2               	movwf	??___flge& (0+255),b
  9387  002408  0E00               	movlw	0
  9388  00240A  15AF               	andwf	(___flge@ff2+1)& (0+255),w,b
  9389  00240C  6FB3               	movwf	(??___flge+1)& (0+255),b
  9390  00240E  0E80               	movlw	128
  9391  002410  15B0               	andwf	(___flge@ff2+2)& (0+255),w,b
  9392  002412  6FB4               	movwf	(??___flge+2)& (0+255),b
  9393  002414  0E7F               	movlw	127
  9394  002416  15B1               	andwf	(___flge@ff2+3)& (0+255),w,b
  9395  002418  6FB5               	movwf	(??___flge+3)& (0+255),b
  9396  00241A  51B2               	movf	??___flge& (0+255),w,b
  9397  00241C  11B3               	iorwf	(??___flge+1)& (0+255),w,b
  9398  00241E  11B4               	iorwf	(??___flge+2)& (0+255),w,b
  9399  002420  11B5               	iorwf	(??___flge+3)& (0+255),w,b
  9400  002422  A4D8               	btfss	status,2,c
  9401  002424  D008               	goto	l667
  9402                           
  9403                           ; BSR set to: 0
  9404  002426  0E00               	movlw	0
  9405  002428  6FAE               	movwf	___flge@ff2& (0+255),b
  9406  00242A  0E00               	movlw	0
  9407  00242C  6FAF               	movwf	(___flge@ff2+1)& (0+255),b
  9408  00242E  0E00               	movlw	0
  9409  002430  6FB0               	movwf	(___flge@ff2+2)& (0+255),b
  9410  002432  0E00               	movlw	0
  9411  002434  6FB1               	movwf	(___flge@ff2+3)& (0+255),b
  9412  002436                     l667:
  9413                           
  9414                           ; BSR set to: 0
  9415                           
  9416                           ; BSR set to: 0
  9417  002436  AFAD               	btfss	(___flge@ff1+3)& (0+255),7,b
  9418  002438  D01D               	goto	l668
  9419                           
  9420                           ; BSR set to: 0
  9421  00243A  C0AA  F0B2         	movff	___flge@ff1,??___flge
  9422  00243E  C0AB  F0B3         	movff	___flge@ff1+1,??___flge+1
  9423  002442  C0AC  F0B4         	movff	___flge@ff1+2,??___flge+2
  9424  002446  C0AD  F0B5         	movff	___flge@ff1+3,??___flge+3
  9425  00244A  1FB2               	comf	??___flge& (0+255),f,b
  9426  00244C  1FB3               	comf	(??___flge+1)& (0+255),f,b
  9427  00244E  1FB4               	comf	(??___flge+2)& (0+255),f,b
  9428  002450  1FB5               	comf	(??___flge+3)& (0+255),f,b
  9429  002452  2BB2               	incf	??___flge& (0+255),f,b
  9430  002454  0E00               	movlw	0
  9431  002456  23B3               	addwfc	(??___flge+1)& (0+255),f,b
  9432  002458  23B4               	addwfc	(??___flge+2)& (0+255),f,b
  9433  00245A  23B5               	addwfc	(??___flge+3)& (0+255),f,b
  9434  00245C  0E00               	movlw	0
  9435  00245E  25B2               	addwf	??___flge& (0+255),w,b
  9436  002460  6FAA               	movwf	___flge@ff1& (0+255),b
  9437  002462  0E00               	movlw	0
  9438  002464  21B3               	addwfc	(??___flge+1)& (0+255),w,b
  9439  002466  6FAB               	movwf	(___flge@ff1+1)& (0+255),b
  9440  002468  0E00               	movlw	0
  9441  00246A  21B4               	addwfc	(??___flge+2)& (0+255),w,b
  9442  00246C  6FAC               	movwf	(___flge@ff1+2)& (0+255),b
  9443  00246E  0E80               	movlw	128
  9444  002470  21B5               	addwfc	(??___flge+3)& (0+255),w,b
  9445  002472  6FAD               	movwf	(___flge@ff1+3)& (0+255),b
  9446  002474                     l668:
  9447                           
  9448                           ; BSR set to: 0
  9449                           
  9450                           ; BSR set to: 0
  9451  002474  AFB1               	btfss	(___flge@ff2+3)& (0+255),7,b
  9452  002476  D01D               	goto	l669
  9453                           
  9454                           ; BSR set to: 0
  9455  002478  C0AE  F0B2         	movff	___flge@ff2,??___flge
  9456  00247C  C0AF  F0B3         	movff	___flge@ff2+1,??___flge+1
  9457  002480  C0B0  F0B4         	movff	___flge@ff2+2,??___flge+2
  9458  002484  C0B1  F0B5         	movff	___flge@ff2+3,??___flge+3
  9459  002488  1FB2               	comf	??___flge& (0+255),f,b
  9460  00248A  1FB3               	comf	(??___flge+1)& (0+255),f,b
  9461  00248C  1FB4               	comf	(??___flge+2)& (0+255),f,b
  9462  00248E  1FB5               	comf	(??___flge+3)& (0+255),f,b
  9463  002490  2BB2               	incf	??___flge& (0+255),f,b
  9464  002492  0E00               	movlw	0
  9465  002494  23B3               	addwfc	(??___flge+1)& (0+255),f,b
  9466  002496  23B4               	addwfc	(??___flge+2)& (0+255),f,b
  9467  002498  23B5               	addwfc	(??___flge+3)& (0+255),f,b
  9468  00249A  0E00               	movlw	0
  9469  00249C  25B2               	addwf	??___flge& (0+255),w,b
  9470  00249E  6FAE               	movwf	___flge@ff2& (0+255),b
  9471  0024A0  0E00               	movlw	0
  9472  0024A2  21B3               	addwfc	(??___flge+1)& (0+255),w,b
  9473  0024A4  6FAF               	movwf	(___flge@ff2+1)& (0+255),b
  9474  0024A6  0E00               	movlw	0
  9475  0024A8  21B4               	addwfc	(??___flge+2)& (0+255),w,b
  9476  0024AA  6FB0               	movwf	(___flge@ff2+2)& (0+255),b
  9477  0024AC  0E80               	movlw	128
  9478  0024AE  21B5               	addwfc	(??___flge+3)& (0+255),w,b
  9479  0024B0  6FB1               	movwf	(___flge@ff2+3)& (0+255),b
  9480  0024B2                     l669:
  9481                           
  9482                           ; BSR set to: 0
  9483  0024B2  0E00               	movlw	0
  9484  0024B4  1BAA               	xorwf	___flge@ff1& (0+255),f,b
  9485  0024B6  0E00               	movlw	0
  9486  0024B8  1BAB               	xorwf	(___flge@ff1+1)& (0+255),f,b
  9487  0024BA  0E00               	movlw	0
  9488  0024BC  1BAC               	xorwf	(___flge@ff1+2)& (0+255),f,b
  9489  0024BE  0E80               	movlw	128
  9490  0024C0  1BAD               	xorwf	(___flge@ff1+3)& (0+255),f,b
  9491  0024C2  0E00               	movlw	0
  9492  0024C4  1BAE               	xorwf	___flge@ff2& (0+255),f,b
  9493  0024C6  0E00               	movlw	0
  9494  0024C8  1BAF               	xorwf	(___flge@ff2+1)& (0+255),f,b
  9495  0024CA  0E00               	movlw	0
  9496  0024CC  1BB0               	xorwf	(___flge@ff2+2)& (0+255),f,b
  9497  0024CE  0E80               	movlw	128
  9498  0024D0  1BB1               	xorwf	(___flge@ff2+3)& (0+255),f,b
  9499  0024D2  51AE               	movf	___flge@ff2& (0+255),w,b
  9500  0024D4  5DAA               	subwf	___flge@ff1& (0+255),w,b
  9501  0024D6  51AF               	movf	(___flge@ff2+1)& (0+255),w,b
  9502  0024D8  59AB               	subwfb	(___flge@ff1+1)& (0+255),w,b
  9503  0024DA  51B0               	movf	(___flge@ff2+2)& (0+255),w,b
  9504  0024DC  59AC               	subwfb	(___flge@ff1+2)& (0+255),w,b
  9505  0024DE  51B1               	movf	(___flge@ff2+3)& (0+255),w,b
  9506  0024E0  59AD               	subwfb	(___flge@ff1+3)& (0+255),w,b
  9507  0024E2  B0D8               	btfsc	status,0,c
  9508  0024E4  D002               	goto	l2832
  9509                           
  9510                           ; BSR set to: 0
  9511  0024E6  90D8               	bcf	status,0,c
  9512  0024E8  0012               	return	
  9513  0024EA                     l2832:
  9514                           
  9515                           ; BSR set to: 0
  9516                           
  9517                           ; BSR set to: 0
  9518  0024EA  80D8               	bsf	status,0,c
  9519                           
  9520                           ; BSR set to: 0
  9521  0024EC  0012               	return	
  9522  0024EE                     __end_of___flge:
  9523                           	opt stack 0
  9524                           tblptru	equ	0xFF8
  9525                           tblptrh	equ	0xFF7
  9526                           tblptrl	equ	0xFF6
  9527                           tablat	equ	0xFF5
  9528                           prodh	equ	0xFF4
  9529                           prodl	equ	0xFF3
  9530                           intcon	equ	0xFF2
  9531                           intcon2	equ	0xFF1
  9532                           intcon3	equ	0xFF0
  9533                           postinc0	equ	0xFEE
  9534                           wreg	equ	0xFE8
  9535                           indf1	equ	0xFE7
  9536                           postdec1	equ	0xFE5
  9537                           fsr1h	equ	0xFE2
  9538                           fsr1l	equ	0xFE1
  9539                           indf2	equ	0xFDF
  9540                           postinc2	equ	0xFDE
  9541                           postdec2	equ	0xFDD
  9542                           fsr2h	equ	0xFDA
  9543                           fsr2l	equ	0xFD9
  9544                           status	equ	0xFD8
  9545                           
  9546 ;; *************** function _lcd_puts *****************
  9547 ;; Defined at:
  9548 ;;		line 120 in file "lcd_x8.c"
  9549 ;; Parameters:    Size  Location     Type
  9550 ;;  s               2   40[COMRAM] PTR unsigned char 
  9551 ;;		 -> STR_6(4), display@LCD(64), display@LCDP(64), 
  9552 ;; Auto vars:     Size  Location     Type
  9553 ;;		None
  9554 ;; Return value:  Size  Location     Type
  9555 ;;                  1    wreg      void 
  9556 ;; Registers used:
  9557 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9558 ;; Tracked objects:
  9559 ;;		On entry : 0/0
  9560 ;;		On exit  : 0/0
  9561 ;;		Unchanged: 0/0
  9562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9563 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9566 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9567 ;;Total ram usage:        2 bytes
  9568 ;; Hardware stack levels used:    1
  9569 ;; Hardware stack levels required when called:    7
  9570 ;; This function calls:
  9571 ;;		_lcd_putc
  9572 ;; This function is called by:
  9573 ;;		_display
  9574 ;; This function uses a non-reentrant model
  9575 ;;
  9576                           
  9577                           	psect	text30
  9578  002AE4                     __ptext30:
  9579                           	opt stack 0
  9580  002AE4                     _lcd_puts:
  9581                           	opt stack 22
  9582                           
  9583                           ;lcd_x8.c: 121: while (*s) {
  9584                           
  9585                           ; BSR set to: 0
  9586                           ;incstack = 0
  9587  002AE4  D015               	goto	l211
  9588  002AE6                     
  9589                           ;lcd_x8.c: 122: lcd_putc(*s);
  9590  002AE6  C029  FFF6         	movff	lcd_puts@s,tblptrl
  9591  002AEA  C02A  FFF7         	movff	lcd_puts@s+1,tblptrh
  9592  002AEE  0E00               	movlw	low (__mediumconst shr (0+16))
  9593  002AF0  6EF8               	movwf	tblptru,c
  9594  002AF2  0E0F               	movlw	(high __ramtop+-1)
  9595  002AF4  64F7               	cpfsgt	tblptrh,c
  9596  002AF6  D003               	bra	u4237
  9597  002AF8  0008               	tblrd		*
  9598  002AFA  50F5               	movf	tablat,w,c
  9599  002AFC  D005               	bra	u4230
  9600  002AFE                     u4237:
  9601  002AFE  CFF6 FFE1          	movff	tblptrl,fsr1l
  9602  002B02  CFF7 FFE2          	movff	tblptrh,fsr1h
  9603  002B06  50E7               	movf	indf1,w,c
  9604  002B08                     u4230:
  9605  002B08  EC9D  F015         	call	_lcd_putc
  9606                           
  9607                           ;lcd_x8.c: 123: s++;
  9608  002B0C  4A29               	infsnz	lcd_puts@s,f,c
  9609  002B0E  2A2A               	incf	lcd_puts@s+1,f,c
  9610  002B10                     l211:
  9611  002B10  C029  FFF6         	movff	lcd_puts@s,tblptrl
  9612  002B14  C02A  FFF7         	movff	lcd_puts@s+1,tblptrh
  9613  002B18  0E00               	movlw	low (__mediumconst shr (0+16))
  9614  002B1A  6EF8               	movwf	tblptru,c
  9615  002B1C  0E0F               	movlw	(high __ramtop+-1)
  9616  002B1E  64F7               	cpfsgt	tblptrh,c
  9617  002B20  D003               	bra	u4247
  9618  002B22  0008               	tblrd		*
  9619  002B24  50F5               	movf	tablat,w,c
  9620  002B26  D005               	bra	u4240
  9621  002B28                     u4247:
  9622  002B28  CFF6 FFE1          	movff	tblptrl,fsr1l
  9623  002B2C  CFF7 FFE2          	movff	tblptrh,fsr1h
  9624  002B30  50E7               	movf	indf1,w,c
  9625  002B32                     u4240:
  9626  002B32  0900               	iorlw	0
  9627  002B34  B4D8               	btfsc	status,2,c
  9628  002B36  0012               	return	
  9629  002B38  D7D6               	goto	l212
  9630  002B3A                     __end_of_lcd_puts:
  9631                           	opt stack 0
  9632                           tblptru	equ	0xFF8
  9633                           tblptrh	equ	0xFF7
  9634                           tblptrl	equ	0xFF6
  9635                           tablat	equ	0xFF5
  9636                           prodh	equ	0xFF4
  9637                           prodl	equ	0xFF3
  9638                           intcon	equ	0xFF2
  9639                           intcon2	equ	0xFF1
  9640                           intcon3	equ	0xFF0
  9641                           postinc0	equ	0xFEE
  9642                           wreg	equ	0xFE8
  9643                           indf1	equ	0xFE7
  9644                           postdec1	equ	0xFE5
  9645                           fsr1h	equ	0xFE2
  9646                           fsr1l	equ	0xFE1
  9647                           indf2	equ	0xFDF
  9648                           postinc2	equ	0xFDE
  9649                           postdec2	equ	0xFDD
  9650                           fsr2h	equ	0xFDA
  9651                           fsr2l	equ	0xFD9
  9652                           status	equ	0xFD8
  9653                           
  9654 ;; *************** function _lcd_putc *****************
  9655 ;; Defined at:
  9656 ;;		line 106 in file "lcd_x8.c"
  9657 ;; Parameters:    Size  Location     Type
  9658 ;;  c               1    wreg     unsigned char 
  9659 ;; Auto vars:     Size  Location     Type
  9660 ;;  c               1   39[COMRAM] unsigned char 
  9661 ;; Return value:  Size  Location     Type
  9662 ;;                  1    wreg      void 
  9663 ;; Registers used:
  9664 ;;		wreg, status,2, status,0, cstack
  9665 ;; Tracked objects:
  9666 ;;		On entry : 0/0
  9667 ;;		On exit  : 0/0
  9668 ;;		Unchanged: 0/0
  9669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9671 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9673 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9674 ;;Total ram usage:        1 bytes
  9675 ;; Hardware stack levels used:    1
  9676 ;; Hardware stack levels required when called:    6
  9677 ;; This function calls:
  9678 ;;		_delay_ms
  9679 ;;		_lcd_gotoxy
  9680 ;;		_lcd_send_byte
  9681 ;; This function is called by:
  9682 ;;		_display
  9683 ;;		_main
  9684 ;;		_lcd_puts
  9685 ;; This function uses a non-reentrant model
  9686 ;;
  9687                           
  9688                           	psect	text31
  9689  002B3A                     __ptext31:
  9690                           	opt stack 0
  9691  002B3A                     _lcd_putc:
  9692                           	opt stack 24
  9693                           
  9694                           ;incstack = 0
  9695                           ;lcd_putc@c stored from wreg
  9696  002B3A  6E28               	movwf	lcd_putc@c,c
  9697                           
  9698                           ;lcd_x8.c: 107: switch (c) {
  9699  002B3C  D01E               	goto	l202
  9700  002B3E  0E01               	movlw	1
  9701  002B40  6E23               	movwf	lcd_send_byte@n,c
  9702  002B42  0E00               	movlw	0
  9703  002B44  EC15  F016         	call	_lcd_send_byte
  9704                           
  9705                           ;lcd_x8.c: 109: delay_ms(2);
  9706  002B48  0E00               	movlw	0
  9707  002B4A  6E1C               	movwf	delay_ms@n+1,c
  9708  002B4C  0E02               	movlw	2
  9709  002B4E  6E1B               	movwf	delay_ms@n,c
  9710  002B50  ECF1  F016         	call	_delay_ms	;wreg free
  9711                           
  9712                           ;lcd_x8.c: 110: break;
  9713  002B54  0012               	return	
  9714  002B56  0E02               	movlw	2
  9715  002B58  6E25               	movwf	lcd_gotoxy@y,c
  9716  002B5A  0E01               	movlw	1
  9717  002B5C  EC5B  F016         	call	_lcd_gotoxy
  9718                           
  9719                           ;lcd_x8.c: 112: break;
  9720  002B60  0012               	return	
  9721  002B62  0E10               	movlw	16
  9722  002B64  6E23               	movwf	lcd_send_byte@n,c
  9723  002B66  0E00               	movlw	0
  9724  002B68  EC15  F016         	call	_lcd_send_byte
  9725                           
  9726                           ;lcd_x8.c: 114: break;
  9727  002B6C  0012               	return	
  9728  002B6E  C028  F023         	movff	lcd_putc@c,lcd_send_byte@n
  9729  002B72  0E01               	movlw	1
  9730  002B74  EC15  F016         	call	_lcd_send_byte
  9731                           
  9732                           ;lcd_x8.c: 117: }
  9733                           
  9734                           ;lcd_x8.c: 116: break;
  9735  002B78  0012               	return	
  9736  002B7A                     l202:
  9737  002B7A  5028               	movf	lcd_putc@c,w,c
  9738                           
  9739                           ; Switch size 1, requested type "space"
  9740                           ; Number of cases is 3, Range of values is 8 to 12
  9741                           ; switch strategies available:
  9742                           ; Name         Instructions Cycles
  9743                           ; simple_byte           10     6 (average)
  9744                           ;	Chosen strategy is simple_byte
  9745  002B7C  0A08               	xorlw	8	; case 8
  9746  002B7E  B4D8               	btfsc	status,2,c
  9747  002B80  D7F0               	goto	l206
  9748  002B82  0A02               	xorlw	2	; case 10
  9749  002B84  B4D8               	btfsc	status,2,c
  9750  002B86  D7E7               	goto	l205
  9751  002B88  0A06               	xorlw	6	; case 12
  9752  002B8A  B4D8               	btfsc	status,2,c
  9753  002B8C  D7D8               	goto	l203
  9754  002B8E  D7EF               	goto	l207
  9755  002B90                     __end_of_lcd_putc:
  9756                           	opt stack 0
  9757                           tblptru	equ	0xFF8
  9758                           tblptrh	equ	0xFF7
  9759                           tblptrl	equ	0xFF6
  9760                           tablat	equ	0xFF5
  9761                           prodh	equ	0xFF4
  9762                           prodl	equ	0xFF3
  9763                           intcon	equ	0xFF2
  9764                           intcon2	equ	0xFF1
  9765                           intcon3	equ	0xFF0
  9766                           postinc0	equ	0xFEE
  9767                           wreg	equ	0xFE8
  9768                           indf1	equ	0xFE7
  9769                           postdec1	equ	0xFE5
  9770                           fsr1h	equ	0xFE2
  9771                           fsr1l	equ	0xFE1
  9772                           indf2	equ	0xFDF
  9773                           postinc2	equ	0xFDE
  9774                           postdec2	equ	0xFDD
  9775                           fsr2h	equ	0xFDA
  9776                           fsr2l	equ	0xFD9
  9777                           status	equ	0xFD8
  9778                           
  9779 ;; *************** function _lcd_gotoxy *****************
  9780 ;; Defined at:
  9781 ;;		line 89 in file "lcd_x8.c"
  9782 ;; Parameters:    Size  Location     Type
  9783 ;;  x               1    wreg     unsigned char 
  9784 ;;  y               1   36[COMRAM] unsigned char 
  9785 ;; Auto vars:     Size  Location     Type
  9786 ;;  x               1   37[COMRAM] unsigned char 
  9787 ;;  address         1   38[COMRAM] unsigned char 
  9788 ;; Return value:  Size  Location     Type
  9789 ;;                  1    wreg      void 
  9790 ;; Registers used:
  9791 ;;		wreg, status,2, status,0, cstack
  9792 ;; Tracked objects:
  9793 ;;		On entry : 0/0
  9794 ;;		On exit  : 0/0
  9795 ;;		Unchanged: 0/0
  9796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9797 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9798 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9800 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9801 ;;Total ram usage:        3 bytes
  9802 ;; Hardware stack levels used:    1
  9803 ;; Hardware stack levels required when called:    5
  9804 ;; This function calls:
  9805 ;;		_lcd_send_byte
  9806 ;; This function is called by:
  9807 ;;		_display
  9808 ;;		_lcd_putc
  9809 ;; This function uses a non-reentrant model
  9810 ;;
  9811                           
  9812                           	psect	text32
  9813  002CB6                     __ptext32:
  9814                           	opt stack 0
  9815  002CB6                     _lcd_gotoxy:
  9816                           	opt stack 24
  9817                           
  9818                           ;incstack = 0
  9819                           ;lcd_gotoxy@x stored from wreg
  9820  002CB6  6E26               	movwf	lcd_gotoxy@x,c
  9821                           
  9822                           ;lcd_x8.c: 90: unsigned char address;
  9823                           ;lcd_x8.c: 92: switch (y) {
  9824  002CB8  D009               	goto	l193
  9825  002CBA  0E80               	movlw	128
  9826  002CBC  D005               	goto	L14
  9827  002CBE  0EC0               	movlw	192
  9828  002CC0  D003               	goto	L14
  9829  002CC2  0E90               	movlw	144
  9830  002CC4  D001               	goto	L14
  9831  002CC6  0ED0               	movlw	208
  9832  002CC8                     L14:
  9833  002CC8  6E27               	movwf	lcd_gotoxy@address,c
  9834                           
  9835                           ;lcd_x8.c: 101: }
  9836                           
  9837                           ;lcd_x8.c: 100: break;
  9838  002CCA  D00D               	goto	l195
  9839  002CCC                     l193:
  9840  002CCC  5025               	movf	lcd_gotoxy@y,w,c
  9841                           
  9842                           ; Switch size 1, requested type "space"
  9843                           ; Number of cases is 4, Range of values is 1 to 4
  9844                           ; switch strategies available:
  9845                           ; Name         Instructions Cycles
  9846                           ; simple_byte           13     7 (average)
  9847                           ;	Chosen strategy is simple_byte
  9848  002CCE  0A01               	xorlw	1	; case 1
  9849  002CD0  B4D8               	btfsc	status,2,c
  9850  002CD2  D7F3               	goto	l194
  9851  002CD4  0A03               	xorlw	3	; case 2
  9852  002CD6  B4D8               	btfsc	status,2,c
  9853  002CD8  D7F2               	goto	l196
  9854  002CDA  0A01               	xorlw	1	; case 3
  9855  002CDC  B4D8               	btfsc	status,2,c
  9856  002CDE  D7F1               	goto	l197
  9857  002CE0  0A07               	xorlw	7	; case 4
  9858  002CE2  B4D8               	btfsc	status,2,c
  9859  002CE4  D7F0               	goto	l198
  9860  002CE6                     l195:
  9861                           
  9862                           ;lcd_x8.c: 102: address += x - 1;
  9863  002CE6  0426               	decf	lcd_gotoxy@x,w,c
  9864  002CE8  2627               	addwf	lcd_gotoxy@address,f,c
  9865                           
  9866                           ;lcd_x8.c: 103: lcd_send_byte(0, (unsigned char) (0x80 | address));
  9867  002CEA  5027               	movf	lcd_gotoxy@address,w,c
  9868  002CEC  0980               	iorlw	128
  9869  002CEE  6E23               	movwf	lcd_send_byte@n,c
  9870  002CF0  0E00               	movlw	0
  9871  002CF2  EC15  F016         	call	_lcd_send_byte
  9872  002CF6  0012               	return		;funcret
  9873  002CF8                     __end_of_lcd_gotoxy:
  9874                           	opt stack 0
  9875                           tblptru	equ	0xFF8
  9876                           tblptrh	equ	0xFF7
  9877                           tblptrl	equ	0xFF6
  9878                           tablat	equ	0xFF5
  9879                           prodh	equ	0xFF4
  9880                           prodl	equ	0xFF3
  9881                           intcon	equ	0xFF2
  9882                           intcon2	equ	0xFF1
  9883                           intcon3	equ	0xFF0
  9884                           postinc0	equ	0xFEE
  9885                           wreg	equ	0xFE8
  9886                           indf1	equ	0xFE7
  9887                           postdec1	equ	0xFE5
  9888                           fsr1h	equ	0xFE2
  9889                           fsr1l	equ	0xFE1
  9890                           indf2	equ	0xFDF
  9891                           postinc2	equ	0xFDE
  9892                           postdec2	equ	0xFDD
  9893                           fsr2h	equ	0xFDA
  9894                           fsr2l	equ	0xFD9
  9895                           status	equ	0xFD8
  9896                           
  9897 ;; *************** function _lcd_send_byte *****************
  9898 ;; Defined at:
  9899 ;;		line 39 in file "lcd_x8.c"
  9900 ;; Parameters:    Size  Location     Type
  9901 ;;  cm_data         1    wreg     unsigned char 
  9902 ;;  n               1   34[COMRAM] unsigned char 
  9903 ;; Auto vars:     Size  Location     Type
  9904 ;;  cm_data         1   35[COMRAM] unsigned char 
  9905 ;; Return value:  Size  Location     Type
  9906 ;;                  1    wreg      void 
  9907 ;; Registers used:
  9908 ;;		wreg, status,2, status,0, cstack
  9909 ;; Tracked objects:
  9910 ;;		On entry : 0/0
  9911 ;;		On exit  : 0/0
  9912 ;;		Unchanged: 0/0
  9913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9914 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9915 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9917 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9918 ;;Total ram usage:        2 bytes
  9919 ;; Hardware stack levels used:    1
  9920 ;; Hardware stack levels required when called:    4
  9921 ;; This function calls:
  9922 ;;		_delay_cycles
  9923 ;;		_delay_ms
  9924 ;;		_lcd_send_nibble
  9925 ;; This function is called by:
  9926 ;;		_lcd_init
  9927 ;;		_lcd_gotoxy
  9928 ;;		_lcd_putc
  9929 ;;		_Lcd_Shift_Right
  9930 ;;		_Lcd_Shift_Left
  9931 ;; This function uses a non-reentrant model
  9932 ;;
  9933                           
  9934                           	psect	text33
  9935  002C2A                     __ptext33:
  9936                           	opt stack 0
  9937  002C2A                     _lcd_send_byte:
  9938                           	opt stack 25
  9939                           
  9940                           ;incstack = 0
  9941                           ;lcd_send_byte@cm_data stored from wreg
  9942  002C2A  6E24               	movwf	lcd_send_byte@cm_data,c
  9943                           
  9944                           ;lcd_x8.c: 43: PORTEbits.RE2 = cm_data;
  9945  002C2C  B024               	btfsc	lcd_send_byte@cm_data,0,c
  9946  002C2E  D002               	bra	u2425
  9947  002C30  9484               	bcf	3972,2,c	;volatile
  9948  002C32  D001               	bra	u2426
  9949  002C34                     u2425:
  9950  002C34  8484               	bsf	3972,2,c	;volatile
  9951  002C36                     u2426:
  9952                           
  9953                           ;lcd_x8.c: 44: delay_cycles(1);
  9954  002C36  0E01               	movlw	1
  9955  002C38  ECC7  F016         	call	_delay_cycles
  9956                           
  9957                           ;lcd_x8.c: 46: delay_cycles(1);
  9958  002C3C  0E01               	movlw	1
  9959  002C3E  ECC7  F016         	call	_delay_cycles
  9960                           
  9961                           ;lcd_x8.c: 47: PORTEbits.RE1 = 0;
  9962  002C42  9284               	bcf	3972,1,c	;volatile
  9963                           
  9964                           ;lcd_x8.c: 48: lcd_send_nibble(n >> 4);
  9965  002C44  3823               	swapf	lcd_send_byte@n,w,c
  9966  002C46  0B0F               	andlw	15
  9967  002C48  EC04  F017         	call	_lcd_send_nibble
  9968                           
  9969                           ;lcd_x8.c: 49: lcd_send_nibble(n & 0x0f);
  9970  002C4C  5023               	movf	lcd_send_byte@n,w,c
  9971  002C4E  0B0F               	andlw	15
  9972  002C50  EC04  F017         	call	_lcd_send_nibble
  9973                           
  9974                           ;lcd_x8.c: 50: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
  9975  002C54  5024               	movf	lcd_send_byte@cm_data,w,c
  9976  002C56  B4D8               	btfsc	status,2,c
  9977  002C58  D005               	goto	l181
  9978  002C5A  0E32               	movlw	50
  9979  002C5C                     u5667:
  9980  002C5C  0004               	clrwdt	
  9981  002C5E  2EE8               	decfsz	wreg,f,c
  9982  002C60  D7FD               	bra	u5667
  9983  002C62  0012               	return	
  9984  002C64                     l181:
  9985                           
  9986                           ;lcd_x8.c: 51: else
  9987                           ;lcd_x8.c: 52: delay_ms(2);
  9988  002C64  0E00               	movlw	0
  9989  002C66  6E1C               	movwf	delay_ms@n+1,c
  9990  002C68  0E02               	movlw	2
  9991  002C6A  6E1B               	movwf	delay_ms@n,c
  9992  002C6C  ECF1  F016         	call	_delay_ms	;wreg free
  9993  002C70  0012               	return	
  9994  002C72                     __end_of_lcd_send_byte:
  9995                           	opt stack 0
  9996                           tblptru	equ	0xFF8
  9997                           tblptrh	equ	0xFF7
  9998                           tblptrl	equ	0xFF6
  9999                           tablat	equ	0xFF5
 10000                           prodh	equ	0xFF4
 10001                           prodl	equ	0xFF3
 10002                           intcon	equ	0xFF2
 10003                           intcon2	equ	0xFF1
 10004                           intcon3	equ	0xFF0
 10005                           postinc0	equ	0xFEE
 10006                           wreg	equ	0xFE8
 10007                           indf1	equ	0xFE7
 10008                           postdec1	equ	0xFE5
 10009                           fsr1h	equ	0xFE2
 10010                           fsr1l	equ	0xFE1
 10011                           indf2	equ	0xFDF
 10012                           postinc2	equ	0xFDE
 10013                           postdec2	equ	0xFDD
 10014                           fsr2h	equ	0xFDA
 10015                           fsr2l	equ	0xFD9
 10016                           status	equ	0xFD8
 10017                           
 10018 ;; *************** function _lcd_send_nibble *****************
 10019 ;; Defined at:
 10020 ;;		line 29 in file "lcd_x8.c"
 10021 ;; Parameters:    Size  Location     Type
 10022 ;;  n               1    wreg     unsigned char 
 10023 ;; Auto vars:     Size  Location     Type
 10024 ;;  n               1   33[COMRAM] unsigned char 
 10025 ;; Return value:  Size  Location     Type
 10026 ;;                  1    wreg      void 
 10027 ;; Registers used:
 10028 ;;		wreg, status,2, status,0, cstack
 10029 ;; Tracked objects:
 10030 ;;		On entry : 0/0
 10031 ;;		On exit  : 0/0
 10032 ;;		Unchanged: 0/0
 10033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10035 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10036 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10037 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10038 ;;Total ram usage:        2 bytes
 10039 ;; Hardware stack levels used:    1
 10040 ;; Hardware stack levels required when called:    3
 10041 ;; This function calls:
 10042 ;;		_delay_cycles
 10043 ;; This function is called by:
 10044 ;;		_lcd_send_byte
 10045 ;;		_lcd_init
 10046 ;; This function uses a non-reentrant model
 10047 ;;
 10048                           
 10049                           	psect	text34
 10050  002E08                     __ptext34:
 10051                           	opt stack 0
 10052  002E08                     _lcd_send_nibble:
 10053                           	opt stack 25
 10054                           
 10055                           ;incstack = 0
 10056                           ;lcd_send_nibble@n stored from wreg
 10057  002E08  6E22               	movwf	lcd_send_nibble@n,c
 10058                           
 10059                           ;lcd_x8.c: 31: lcd.data = n;
 10060  002E0A  C022  F021         	movff	lcd_send_nibble@n,??_lcd_send_nibble
 10061  002E0E  3A21               	swapf	??_lcd_send_nibble,f,c
 10062  002E10  5083               	movf	3971,w,c
 10063  002E12  1821               	xorwf	??_lcd_send_nibble,w,c
 10064  002E14  0B0F               	andlw	-241
 10065  002E16  1821               	xorwf	??_lcd_send_nibble,w,c
 10066  002E18  6E83               	movwf	3971,c
 10067                           
 10068                           ;lcd_x8.c: 33: delay_cycles(1);
 10069  002E1A  0E01               	movlw	1
 10070  002E1C  ECC7  F016         	call	_delay_cycles
 10071                           
 10072                           ;lcd_x8.c: 34: PORTEbits.RE1 = 1;
 10073  002E20  8284               	bsf	3972,1,c	;volatile
 10074                           
 10075                           ;lcd_x8.c: 35: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
 10076  002E22  0004               	clrwdt	
 10077  002E24  F000               	nop		;2 cycle nop
 10078                           
 10079                           ;lcd_x8.c: 36: PORTEbits.RE1 = 0;
 10080  002E26  9284               	bcf	3972,1,c	;volatile
 10081  002E28  0012               	return		;funcret
 10082  002E2A                     __end_of_lcd_send_nibble:
 10083                           	opt stack 0
 10084                           tblptru	equ	0xFF8
 10085                           tblptrh	equ	0xFF7
 10086                           tblptrl	equ	0xFF6
 10087                           tablat	equ	0xFF5
 10088                           prodh	equ	0xFF4
 10089                           prodl	equ	0xFF3
 10090                           intcon	equ	0xFF2
 10091                           intcon2	equ	0xFF1
 10092                           intcon3	equ	0xFF0
 10093                           postinc0	equ	0xFEE
 10094                           wreg	equ	0xFE8
 10095                           indf1	equ	0xFE7
 10096                           postdec1	equ	0xFE5
 10097                           fsr1h	equ	0xFE2
 10098                           fsr1l	equ	0xFE1
 10099                           indf2	equ	0xFDF
 10100                           postinc2	equ	0xFDE
 10101                           postdec2	equ	0xFDD
 10102                           fsr2h	equ	0xFDA
 10103                           fsr2l	equ	0xFD9
 10104                           status	equ	0xFD8
 10105                           
 10106 ;; *************** function _delay_cycles *****************
 10107 ;; Defined at:
 10108 ;;		line 20 in file "lcd_x8.c"
 10109 ;; Parameters:    Size  Location     Type
 10110 ;;  n               1    wreg     unsigned char 
 10111 ;; Auto vars:     Size  Location     Type
 10112 ;;  n               1   29[COMRAM] unsigned char 
 10113 ;;  x               2   30[COMRAM] int 
 10114 ;; Return value:  Size  Location     Type
 10115 ;;                  1    wreg      void 
 10116 ;; Registers used:
 10117 ;;		wreg, status,2, status,0
 10118 ;; Tracked objects:
 10119 ;;		On entry : 0/0
 10120 ;;		On exit  : 0/0
 10121 ;;		Unchanged: 0/0
 10122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10124 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10125 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10126 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10127 ;;Total ram usage:        6 bytes
 10128 ;; Hardware stack levels used:    1
 10129 ;; Hardware stack levels required when called:    2
 10130 ;; This function calls:
 10131 ;;		Nothing
 10132 ;; This function is called by:
 10133 ;;		_lcd_send_nibble
 10134 ;;		_lcd_send_byte
 10135 ;; This function uses a non-reentrant model
 10136 ;;
 10137                           
 10138                           	psect	text35
 10139  002D8E                     __ptext35:
 10140                           	opt stack 0
 10141  002D8E                     _delay_cycles:
 10142                           	opt stack 25
 10143                           
 10144                           ;incstack = 0
 10145                           ;delay_cycles@n stored from wreg
 10146  002D8E  6E1E               	movwf	delay_cycles@n,c
 10147                           
 10148                           ;lcd_x8.c: 21: int x;
 10149                           ;lcd_x8.c: 22: for (x = 0; x <= n; x++) {
 10150  002D90  0E00               	movlw	0
 10151  002D92  6E20               	movwf	delay_cycles@x+1,c
 10152  002D94  0E00               	movlw	0
 10153  002D96  6E1F               	movwf	delay_cycles@x,c
 10154  002D98  D003               	goto	l172
 10155  002D9A                     l173:
 10156  002D9A  0004               	clrwdt		;# 
 10157  002D9C  4A1F               	infsnz	delay_cycles@x,f,c
 10158  002D9E  2A20               	incf	delay_cycles@x+1,f,c
 10159  002DA0                     l172:
 10160  002DA0  501E               	movf	delay_cycles@n,w,c
 10161  002DA2  6E1B               	movwf	??_delay_cycles& (0+255),c
 10162  002DA4  6A1C               	clrf	(??_delay_cycles+1)& (0+255),c
 10163  002DA6  501F               	movf	delay_cycles@x,w,c
 10164  002DA8  5C1B               	subwf	??_delay_cycles,w,c
 10165  002DAA  501C               	movf	??_delay_cycles+1,w,c
 10166  002DAC  0A80               	xorlw	128
 10167  002DAE  6E1D               	movwf	(??_delay_cycles+2)& (0+255),c
 10168  002DB0  5020               	movf	delay_cycles@x+1,w,c
 10169  002DB2  0A80               	xorlw	128
 10170  002DB4  581D               	subwfb	(??_delay_cycles+2)& (0+255),w,c
 10171  002DB6  A0D8               	btfss	status,0,c
 10172  002DB8  0012               	return	
 10173  002DBA  D7EF               	goto	l173
 10174  002DBC                     __end_of_delay_cycles:
 10175                           	opt stack 0
 10176                           tblptru	equ	0xFF8
 10177                           tblptrh	equ	0xFF7
 10178                           tblptrl	equ	0xFF6
 10179                           tablat	equ	0xFF5
 10180                           prodh	equ	0xFF4
 10181                           prodl	equ	0xFF3
 10182                           intcon	equ	0xFF2
 10183                           intcon2	equ	0xFF1
 10184                           intcon3	equ	0xFF0
 10185                           postinc0	equ	0xFEE
 10186                           wreg	equ	0xFE8
 10187                           indf1	equ	0xFE7
 10188                           postdec1	equ	0xFE5
 10189                           fsr1h	equ	0xFE2
 10190                           fsr1l	equ	0xFE1
 10191                           indf2	equ	0xFDF
 10192                           postinc2	equ	0xFDE
 10193                           postdec2	equ	0xFDD
 10194                           fsr2h	equ	0xFDA
 10195                           fsr2l	equ	0xFD9
 10196                           status	equ	0xFD8
 10197                           
 10198 ;; *************** function _delay_ms *****************
 10199 ;; Defined at:
 10200 ;;		line 12 in file "lcd_x8.c"
 10201 ;; Parameters:    Size  Location     Type
 10202 ;;  n               2   26[COMRAM] unsigned int 
 10203 ;; Auto vars:     Size  Location     Type
 10204 ;;  x               2   28[COMRAM] int 
 10205 ;; Return value:  Size  Location     Type
 10206 ;;                  1    wreg      void 
 10207 ;; Registers used:
 10208 ;;		wreg, status,2, status,0
 10209 ;; Tracked objects:
 10210 ;;		On entry : 0/0
 10211 ;;		On exit  : 0/0
 10212 ;;		Unchanged: 0/0
 10213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10214 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10215 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10217 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10218 ;;Total ram usage:        4 bytes
 10219 ;; Hardware stack levels used:    1
 10220 ;; Hardware stack levels required when called:    2
 10221 ;; This function calls:
 10222 ;;		Nothing
 10223 ;; This function is called by:
 10224 ;;		_operation
 10225 ;;		_main
 10226 ;;		_lcd_send_byte
 10227 ;;		_lcd_init
 10228 ;;		_lcd_putc
 10229 ;; This function uses a non-reentrant model
 10230 ;;
 10231                           
 10232                           	psect	text36
 10233  002DE2                     __ptext36:
 10234                           	opt stack 0
 10235  002DE2                     _delay_ms:
 10236                           	opt stack 27
 10237                           
 10238                           ;lcd_x8.c: 13: int x;
 10239                           ;lcd_x8.c: 14: for (x = 0; x <= n; x++) {
 10240                           
 10241                           ;incstack = 0
 10242  002DE2  0E00               	movlw	0
 10243  002DE4  6E1E               	movwf	delay_ms@x+1,c
 10244  002DE6  0E00               	movlw	0
 10245  002DE8  6E1D               	movwf	delay_ms@x,c
 10246  002DEA  D007               	goto	l166
 10247  002DEC                     
 10248                           ;lcd_x8.c: 15: _delaywdt((unsigned long)((1)*(4000000UL/4000.0)));
 10249  002DEC  0EC8               	movlw	200
 10250  002DEE                     u5677:
 10251  002DEE  0004               	clrwdt	
 10252  002DF0  0004               	clrwdt	
 10253  002DF2  2EE8               	decfsz	wreg,f,c
 10254  002DF4  D7FC               	bra	u5677
 10255  002DF6  4A1D               	infsnz	delay_ms@x,f,c
 10256  002DF8  2A1E               	incf	delay_ms@x+1,f,c
 10257  002DFA                     l166:
 10258  002DFA  501D               	movf	delay_ms@x,w,c
 10259  002DFC  5C1B               	subwf	delay_ms@n,w,c
 10260  002DFE  501E               	movf	delay_ms@x+1,w,c
 10261  002E00  581C               	subwfb	delay_ms@n+1,w,c
 10262  002E02  A0D8               	btfss	status,0,c
 10263  002E04  0012               	return	
 10264  002E06  D7F2               	goto	l167
 10265  002E08                     __end_of_delay_ms:
 10266                           	opt stack 0
 10267                           tblptru	equ	0xFF8
 10268                           tblptrh	equ	0xFF7
 10269                           tblptrl	equ	0xFF6
 10270                           tablat	equ	0xFF5
 10271                           prodh	equ	0xFF4
 10272                           prodl	equ	0xFF3
 10273                           intcon	equ	0xFF2
 10274                           intcon2	equ	0xFF1
 10275                           intcon3	equ	0xFF0
 10276                           postinc0	equ	0xFEE
 10277                           wreg	equ	0xFE8
 10278                           indf1	equ	0xFE7
 10279                           postdec1	equ	0xFE5
 10280                           fsr1h	equ	0xFE2
 10281                           fsr1l	equ	0xFE1
 10282                           indf2	equ	0xFDF
 10283                           postinc2	equ	0xFDE
 10284                           postdec2	equ	0xFDD
 10285                           fsr2h	equ	0xFDA
 10286                           fsr2l	equ	0xFD9
 10287                           status	equ	0xFD8
 10288                           
 10289 ;; *************** function _highIsr *****************
 10290 ;; Defined at:
 10291 ;;		line 143 in file "pwm_asl.c"
 10292 ;; Parameters:    Size  Location     Type
 10293 ;;		None
 10294 ;; Auto vars:     Size  Location     Type
 10295 ;;		None
 10296 ;; Return value:  Size  Location     Type
 10297 ;;                  1    wreg      void 
 10298 ;; Registers used:
 10299 ;;		wreg, status,2, status,0, cstack
 10300 ;; Tracked objects:
 10301 ;;		On entry : 0/0
 10302 ;;		On exit  : 0/0
 10303 ;;		Unchanged: 0/0
 10304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10307 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10308 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10309 ;;Total ram usage:       20 bytes
 10310 ;; Hardware stack levels used:    1
 10311 ;; Hardware stack levels required when called:    1
 10312 ;; This function calls:
 10313 ;;		i2___awmod
 10314 ;; This function is called by:
 10315 ;;		Interrupt level 2
 10316 ;; This function uses a non-reentrant model
 10317 ;;
 10318                           
 10319                           	psect	intcode
 10320  000008                     __pintcode:
 10321                           	opt stack 0
 10322  000008                     _highIsr:
 10323                           	opt stack 22
 10324                           
 10325                           ;incstack = 0
 10326  000008  8264               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10327  00000A  ED77  F012         	call	int_func,f	;refresh shadow registers
 10328                           tblptru	equ	0xFF8
 10329                           tblptrh	equ	0xFF7
 10330                           tblptrl	equ	0xFF6
 10331                           tablat	equ	0xFF5
 10332                           prodh	equ	0xFF4
 10333                           prodl	equ	0xFF3
 10334                           intcon	equ	0xFF2
 10335                           intcon2	equ	0xFF1
 10336                           intcon3	equ	0xFF0
 10337                           postinc0	equ	0xFEE
 10338                           wreg	equ	0xFE8
 10339                           indf1	equ	0xFE7
 10340                           postdec1	equ	0xFE5
 10341                           fsr1h	equ	0xFE2
 10342                           fsr1l	equ	0xFE1
 10343                           indf2	equ	0xFDF
 10344                           postinc2	equ	0xFDE
 10345                           postdec2	equ	0xFDD
 10346                           fsr2h	equ	0xFDA
 10347                           fsr2l	equ	0xFD9
 10348                           status	equ	0xFD8
 10349                           
 10350                           	psect	intcode_body
 10351  0024EE                     __pintcode_body:
 10352                           	opt stack 22
 10353  0024EE                     int_func:
 10354                           	opt stack 22
 10355  0024EE  0006               	pop		; remove dummy address from shadow register refresh
 10356  0024F0  CFFA F009          	movff	pclath,??_highIsr+2
 10357  0024F4  CFFB F00A          	movff	pclatu,??_highIsr+3
 10358  0024F8  CFE9 F00B          	movff	fsr0l,??_highIsr+4
 10359  0024FC  CFEA F00C          	movff	fsr0h,??_highIsr+5
 10360  002500  CFE1 F00D          	movff	fsr1l,??_highIsr+6
 10361  002504  CFE2 F00E          	movff	fsr1h,??_highIsr+7
 10362  002508  CFD9 F00F          	movff	fsr2l,??_highIsr+8
 10363  00250C  CFDA F010          	movff	fsr2h,??_highIsr+9
 10364  002510  CFF3 F011          	movff	prodl,??_highIsr+10
 10365  002514  CFF4 F012          	movff	prodh,??_highIsr+11
 10366  002518  CFF6 F013          	movff	tblptrl,??_highIsr+12
 10367  00251C  CFF7 F014          	movff	tblptrh,??_highIsr+13
 10368  002520  CFF8 F015          	movff	tblptru,??_highIsr+14
 10369  002524  CFF5 F016          	movff	tablat,??_highIsr+15
 10370  002528  C064  F017         	movff	btemp,??_highIsr+16
 10371  00252C  C065  F018         	movff	btemp+1,??_highIsr+17
 10372  002530  C066  F019         	movff	btemp+2,??_highIsr+18
 10373  002534  C067  F01A         	movff	btemp+3,??_highIsr+19
 10374                           
 10375                           ;pwm_asl.c: 145: if (INTCONbits.INT0IF) {
 10376  002538  A2F2               	btfss	intcon,1,c	;volatile
 10377  00253A  D011               	goto	i2l116
 10378                           
 10379                           ;pwm_asl.c: 146: _delay((unsigned long)((250)*(4000000UL/4000.0)));
 10380  00253C  0E02               	movlw	2
 10381  00253E  6E08               	movwf	(??_highIsr+1)& (0+255),c
 10382  002540  0E45               	movlw	69
 10383  002542  6E07               	movwf	??_highIsr& (0+255),c
 10384  002544  0EAA               	movlw	170
 10385  002546                     i2u568_47:
 10386  002546  2EE8               	decfsz	wreg,f,c
 10387  002548  D7FE               	bra	i2u568_47
 10388  00254A  2E07               	decfsz	??_highIsr& (0+255),f,c
 10389  00254C  D7FC               	bra	i2u568_47
 10390  00254E  2E08               	decfsz	(??_highIsr+1)& (0+255),f,c
 10391  002550  D7FA               	bra	i2u568_47
 10392                           
 10393                           ;pwm_asl.c: 147: if (INTCONbits.INT0IF) {
 10394  002552  A2F2               	btfss	intcon,1,c	;volatile
 10395  002554  D004               	goto	i2l116
 10396                           
 10397                           ;pwm_asl.c: 148: mode = (mode + 1) % 4;
 10398  002556  285E               	incf	_mode,w,c
 10399  002558  0B03               	andlw	3
 10400  00255A  6E5E               	movwf	_mode,c
 10401                           
 10402                           ;pwm_asl.c: 149: INTCONbits.INT0IF = 0;
 10403  00255C  92F2               	bcf	intcon,1,c	;volatile
 10404  00255E                     i2l116:
 10405                           
 10406                           ;pwm_asl.c: 150: }
 10407                           ;pwm_asl.c: 152: }
 10408                           ;pwm_asl.c: 153: if (INTCON3bits.INT2IF) {
 10409  00255E  A2F0               	btfss	intcon3,1,c	;volatile
 10410  002560  D01C               	goto	i2l118
 10411                           
 10412                           ;pwm_asl.c: 154: _delay((unsigned long)((250)*(4000000UL/4000.0)));
 10413  002562  0E02               	movlw	2
 10414  002564  6E08               	movwf	(??_highIsr+1)& (0+255),c
 10415  002566  0E45               	movlw	69
 10416  002568  6E07               	movwf	??_highIsr& (0+255),c
 10417  00256A  0EAA               	movlw	170
 10418  00256C                     i2u569_47:
 10419  00256C  2EE8               	decfsz	wreg,f,c
 10420  00256E  D7FE               	bra	i2u569_47
 10421  002570  2E07               	decfsz	??_highIsr& (0+255),f,c
 10422  002572  D7FC               	bra	i2u569_47
 10423  002574  2E08               	decfsz	(??_highIsr+1)& (0+255),f,c
 10424  002576  D7FA               	bra	i2u569_47
 10425                           
 10426                           ;pwm_asl.c: 155: if (INTCON3bits.INT2IF) {
 10427  002578  A2F0               	btfss	intcon3,1,c	;volatile
 10428  00257A  D00F               	goto	i2l118
 10429                           
 10430                           ;pwm_asl.c: 156: HS = (HS + 1) % (HS_4 + 1);
 10431  00257C  0E01               	movlw	1
 10432  00257E  245F               	addwf	_HS,w,c
 10433  002580  6E01               	movwf	i2___awmod@dividend,c
 10434  002582  6A02               	clrf	i2___awmod@dividend+1,c
 10435  002584  0E00               	movlw	0
 10436  002586  2202               	addwfc	i2___awmod@dividend+1,f,c
 10437  002588  0E00               	movlw	0
 10438  00258A  6E04               	movwf	i2___awmod@divisor+1,c
 10439  00258C  0E05               	movlw	5
 10440  00258E  6E03               	movwf	i2___awmod@divisor,c
 10441  002590  ECD6  F014         	call	i2___awmod	;wreg free
 10442  002594  5001               	movf	?i2___awmod,w,c
 10443  002596  6E5F               	movwf	_HS,c
 10444                           
 10445                           ;pwm_asl.c: 157: INTCON3bits.INT2IF = 0;
 10446  002598  92F0               	bcf	intcon3,1,c	;volatile
 10447  00259A                     i2l118:
 10448                           
 10449                           ;pwm_asl.c: 158: }
 10450                           ;pwm_asl.c: 159: }
 10451                           ;pwm_asl.c: 160: if (PIR2bits.TMR3IF) {
 10452  00259A  B2A1               	btfsc	4001,1,c	;volatile
 10453                           
 10454                           ;pwm_asl.c: 162: PIR2bits.TMR3IF = 0;
 10455  00259C  92A1               	bcf	4001,1,c	;volatile
 10456  00259E  C01A  F067         	movff	??_highIsr+19,btemp+3
 10457  0025A2  C019  F066         	movff	??_highIsr+18,btemp+2
 10458  0025A6  C018  F065         	movff	??_highIsr+17,btemp+1
 10459  0025AA  C017  F064         	movff	??_highIsr+16,btemp
 10460  0025AE  C016  FFF5         	movff	??_highIsr+15,tablat
 10461  0025B2  C015  FFF8         	movff	??_highIsr+14,tblptru
 10462  0025B6  C014  FFF7         	movff	??_highIsr+13,tblptrh
 10463  0025BA  C013  FFF6         	movff	??_highIsr+12,tblptrl
 10464  0025BE  C012  FFF4         	movff	??_highIsr+11,prodh
 10465  0025C2  C011  FFF3         	movff	??_highIsr+10,prodl
 10466  0025C6  C010  FFDA         	movff	??_highIsr+9,fsr2h
 10467  0025CA  C00F  FFD9         	movff	??_highIsr+8,fsr2l
 10468  0025CE  C00E  FFE2         	movff	??_highIsr+7,fsr1h
 10469  0025D2  C00D  FFE1         	movff	??_highIsr+6,fsr1l
 10470  0025D6  C00C  FFEA         	movff	??_highIsr+5,fsr0h
 10471  0025DA  C00B  FFE9         	movff	??_highIsr+4,fsr0l
 10472  0025DE  C00A  FFFB         	movff	??_highIsr+3,pclatu
 10473  0025E2  C009  FFFA         	movff	??_highIsr+2,pclath
 10474  0025E6  9264               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10475  0025E8  0011               	retfie		f
 10476  0025EA                     __end_of_highIsr:
 10477                           	opt stack 0
 10478                           pclatu	equ	0xFFB
 10479                           pclath	equ	0xFFA
 10480                           tblptru	equ	0xFF8
 10481                           tblptrh	equ	0xFF7
 10482                           tblptrl	equ	0xFF6
 10483                           tablat	equ	0xFF5
 10484                           prodh	equ	0xFF4
 10485                           prodl	equ	0xFF3
 10486                           intcon	equ	0xFF2
 10487                           intcon2	equ	0xFF1
 10488                           intcon3	equ	0xFF0
 10489                           postinc0	equ	0xFEE
 10490                           fsr0h	equ	0xFEA
 10491                           fsr0l	equ	0xFE9
 10492                           wreg	equ	0xFE8
 10493                           indf1	equ	0xFE7
 10494                           postdec1	equ	0xFE5
 10495                           fsr1h	equ	0xFE2
 10496                           fsr1l	equ	0xFE1
 10497                           indf2	equ	0xFDF
 10498                           postinc2	equ	0xFDE
 10499                           postdec2	equ	0xFDD
 10500                           fsr2h	equ	0xFDA
 10501                           fsr2l	equ	0xFD9
 10502                           status	equ	0xFD8
 10503                           
 10504 ;; *************** function i2___awmod *****************
 10505 ;; Defined at:
 10506 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 10507 ;; Parameters:    Size  Location     Type
 10508 ;;  dividend        2    0[COMRAM] int 
 10509 ;;  divisor         2    2[COMRAM] int 
 10510 ;; Auto vars:     Size  Location     Type
 10511 ;;  __awmod         1    5[COMRAM] unsigned char 
 10512 ;;  __awmod         1    4[COMRAM] unsigned char 
 10513 ;; Return value:  Size  Location     Type
 10514 ;;                  2    0[COMRAM] int 
 10515 ;; Registers used:
 10516 ;;		wreg, status,2, status,0
 10517 ;; Tracked objects:
 10518 ;;		On entry : 0/0
 10519 ;;		On exit  : 0/0
 10520 ;;		Unchanged: 0/0
 10521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10522 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10523 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10525 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10526 ;;Total ram usage:        6 bytes
 10527 ;; Hardware stack levels used:    1
 10528 ;; This function calls:
 10529 ;;		Nothing
 10530 ;; This function is called by:
 10531 ;;		_highIsr
 10532 ;; This function uses a non-reentrant model
 10533 ;;
 10534                           
 10535                           	psect	text38
 10536  0029AC                     __ptext38:
 10537                           	opt stack 0
 10538  0029AC                     i2___awmod:
 10539                           	opt stack 22
 10540                           
 10541                           ;incstack = 0
 10542  0029AC  0E00               	movlw	0
 10543  0029AE  6E06               	movwf	i2___awmod@sign,c
 10544  0029B0  AE02               	btfss	i2___awmod@dividend+1,7,c
 10545  0029B2  D006               	goto	i2l630
 10546  0029B4  6C01               	negf	i2___awmod@dividend,c
 10547  0029B6  1E02               	comf	i2___awmod@dividend+1,f,c
 10548  0029B8  B0D8               	btfsc	status,0,c
 10549  0029BA  2A02               	incf	i2___awmod@dividend+1,f,c
 10550  0029BC  0E01               	movlw	1
 10551  0029BE  6E06               	movwf	i2___awmod@sign,c
 10552  0029C0                     i2l630:
 10553  0029C0  AE04               	btfss	i2___awmod@divisor+1,7,c
 10554  0029C2  D004               	goto	i2l631
 10555  0029C4  6C03               	negf	i2___awmod@divisor,c
 10556  0029C6  1E04               	comf	i2___awmod@divisor+1,f,c
 10557  0029C8  B0D8               	btfsc	status,0,c
 10558  0029CA  2A04               	incf	i2___awmod@divisor+1,f,c
 10559  0029CC                     i2l631:
 10560  0029CC  5003               	movf	i2___awmod@divisor,w,c
 10561  0029CE  1004               	iorwf	i2___awmod@divisor+1,w,c
 10562  0029D0  B4D8               	btfsc	status,2,c
 10563  0029D2  D018               	goto	i2l638
 10564  0029D4  0E01               	movlw	1
 10565  0029D6  6E05               	movwf	i2___awmod@counter,c
 10566  0029D8  D004               	goto	i2l633
 10567  0029DA  90D8               	bcf	status,0,c
 10568  0029DC  3603               	rlcf	i2___awmod@divisor,f,c
 10569  0029DE  3604               	rlcf	i2___awmod@divisor+1,f,c
 10570  0029E0  2A05               	incf	i2___awmod@counter,f,c
 10571  0029E2                     i2l633:
 10572  0029E2  AE04               	btfss	i2___awmod@divisor+1,7,c
 10573  0029E4  D7FA               	goto	i2l634
 10574  0029E6                     i2u462_40:
 10575  0029E6  5003               	movf	i2___awmod@divisor,w,c
 10576  0029E8  5C01               	subwf	i2___awmod@dividend,w,c
 10577  0029EA  5004               	movf	i2___awmod@divisor+1,w,c
 10578  0029EC  5802               	subwfb	i2___awmod@dividend+1,w,c
 10579  0029EE  A0D8               	btfss	status,0,c
 10580  0029F0  D004               	goto	i2l637
 10581  0029F2  5003               	movf	i2___awmod@divisor,w,c
 10582  0029F4  5E01               	subwf	i2___awmod@dividend,f,c
 10583  0029F6  5004               	movf	i2___awmod@divisor+1,w,c
 10584  0029F8  5A02               	subwfb	i2___awmod@dividend+1,f,c
 10585  0029FA                     i2l637:
 10586  0029FA  90D8               	bcf	status,0,c
 10587  0029FC  3204               	rrcf	i2___awmod@divisor+1,f,c
 10588  0029FE  3203               	rrcf	i2___awmod@divisor,f,c
 10589  002A00  2E05               	decfsz	i2___awmod@counter,f,c
 10590  002A02  D7F1               	goto	i2u462_40
 10591  002A04                     i2l638:
 10592  002A04  5006               	movf	i2___awmod@sign,w,c
 10593  002A06  B4D8               	btfsc	status,2,c
 10594  002A08  D004               	goto	i2l639
 10595  002A0A  6C01               	negf	i2___awmod@dividend,c
 10596  002A0C  1E02               	comf	i2___awmod@dividend+1,f,c
 10597  002A0E  B0D8               	btfsc	status,0,c
 10598  002A10  2A02               	incf	i2___awmod@dividend+1,f,c
 10599  002A12                     i2l639:
 10600  002A12  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 10601  002A16  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 10602  002A1A  0012               	return	
 10603  002A1C                     __end_ofi2___awmod:
 10604                           	opt stack 0
 10605                           pclatu	equ	0xFFB
 10606                           pclath	equ	0xFFA
 10607                           tblptru	equ	0xFF8
 10608                           tblptrh	equ	0xFF7
 10609                           tblptrl	equ	0xFF6
 10610                           tablat	equ	0xFF5
 10611                           prodh	equ	0xFF4
 10612                           prodl	equ	0xFF3
 10613                           intcon	equ	0xFF2
 10614                           intcon2	equ	0xFF1
 10615                           intcon3	equ	0xFF0
 10616                           postinc0	equ	0xFEE
 10617                           fsr0h	equ	0xFEA
 10618                           fsr0l	equ	0xFE9
 10619                           wreg	equ	0xFE8
 10620                           indf1	equ	0xFE7
 10621                           postdec1	equ	0xFE5
 10622                           fsr1h	equ	0xFE2
 10623                           fsr1l	equ	0xFE1
 10624                           indf2	equ	0xFDF
 10625                           postinc2	equ	0xFDE
 10626                           postdec2	equ	0xFDD
 10627                           fsr2h	equ	0xFDA
 10628                           fsr2l	equ	0xFD9
 10629                           status	equ	0xFD8
 10630                           pclatu	equ	0xFFB
 10631                           pclath	equ	0xFFA
 10632                           tblptru	equ	0xFF8
 10633                           tblptrh	equ	0xFF7
 10634                           tblptrl	equ	0xFF6
 10635                           tablat	equ	0xFF5
 10636                           prodh	equ	0xFF4
 10637                           prodl	equ	0xFF3
 10638                           intcon	equ	0xFF2
 10639                           intcon2	equ	0xFF1
 10640                           intcon3	equ	0xFF0
 10641                           postinc0	equ	0xFEE
 10642                           fsr0h	equ	0xFEA
 10643                           fsr0l	equ	0xFE9
 10644                           wreg	equ	0xFE8
 10645                           indf1	equ	0xFE7
 10646                           postdec1	equ	0xFE5
 10647                           fsr1h	equ	0xFE2
 10648                           fsr1l	equ	0xFE1
 10649                           indf2	equ	0xFDF
 10650                           postinc2	equ	0xFDE
 10651                           postdec2	equ	0xFDD
 10652                           fsr2h	equ	0xFDA
 10653                           fsr2l	equ	0xFD9
 10654                           status	equ	0xFD8
 10655                           
 10656                           	psect	rparam
 10657  0000                     pclatu	equ	0xFFB
 10658                           pclath	equ	0xFFA
 10659                           tblptru	equ	0xFF8
 10660                           tblptrh	equ	0xFF7
 10661                           tblptrl	equ	0xFF6
 10662                           tablat	equ	0xFF5
 10663                           prodh	equ	0xFF4
 10664                           prodl	equ	0xFF3
 10665                           intcon	equ	0xFF2
 10666                           intcon2	equ	0xFF1
 10667                           intcon3	equ	0xFF0
 10668                           postinc0	equ	0xFEE
 10669                           fsr0h	equ	0xFEA
 10670                           fsr0l	equ	0xFE9
 10671                           wreg	equ	0xFE8
 10672                           indf1	equ	0xFE7
 10673                           postdec1	equ	0xFE5
 10674                           fsr1h	equ	0xFE2
 10675                           fsr1l	equ	0xFE1
 10676                           indf2	equ	0xFDF
 10677                           postinc2	equ	0xFDE
 10678                           postdec2	equ	0xFDD
 10679                           fsr2h	equ	0xFDA
 10680                           fsr2l	equ	0xFD9
 10681                           status	equ	0xFD8
 10682                           
 10683                           	psect	temp
 10684  000064                     btemp:
 10685                           	opt stack 0
 10686  000064                     	ds	1
 10687  0000                     int$flags	set	btemp
 10688  0000                     wtemp6	set	btemp+1
 10689                           pclatu	equ	0xFFB
 10690                           pclath	equ	0xFFA
 10691                           tblptru	equ	0xFF8
 10692                           tblptrh	equ	0xFF7
 10693                           tblptrl	equ	0xFF6
 10694                           tablat	equ	0xFF5
 10695                           prodh	equ	0xFF4
 10696                           prodl	equ	0xFF3
 10697                           intcon	equ	0xFF2
 10698                           intcon2	equ	0xFF1
 10699                           intcon3	equ	0xFF0
 10700                           postinc0	equ	0xFEE
 10701                           fsr0h	equ	0xFEA
 10702                           fsr0l	equ	0xFE9
 10703                           wreg	equ	0xFE8
 10704                           indf1	equ	0xFE7
 10705                           postdec1	equ	0xFE5
 10706                           fsr1h	equ	0xFE2
 10707                           fsr1l	equ	0xFE1
 10708                           indf2	equ	0xFDF
 10709                           postinc2	equ	0xFDE
 10710                           postdec2	equ	0xFDD
 10711                           fsr2h	equ	0xFDA
 10712                           fsr2l	equ	0xFD9
 10713                           status	equ	0xFD8


Data Sizes:
    Strings     132
    Constant    144
    Data        4
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     87      99
    BANK0           128    102     124
    BANK1           256    130     166
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_10(CODE[4]), STR_9(CODE[12]), STR_8(CODE[7]), STR_7(CODE[12]), 
		 -> STR_5(CODE[11]), STR_4(CODE[19]), STR_3(CODE[21]), STR_2(CODE[21]), 
		 -> STR_1(CODE[21]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 64
		 -> display@LCD(BANK1[64]), display@LCDP(BANK1[64]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 64
		 -> STR_6(CODE[4]), display@LCD(BANK1[64]), display@LCDP(BANK1[64]), 


Critical Paths under _main in COMRAM

    _read_adc_voltage->___fldiv
    ___fldiv->___xxtofl
    _lcd_init->_lcd_send_byte
    _sprintf->_fround
    _sprintf->_scale
    _scale->___flmul
    _fround->___flmul
    ___flmul->___fldiv
    ___awdiv->___awmod
    ___xxtofl->___wmul
    ___llmod->___lldiv
    ___fltol->_scale
    ___fladd->_fround
    ___flneg->___xxtofl
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles

Critical Paths under _highIsr in COMRAM

    _highIsr->i2___awmod

Critical Paths under _main in BANK0

    _operation->___flge
    _display->_sprintf
    _sprintf->___flge
    _scale->___flmul
    _fround->___flmul
    ___fltol->_scale
    ___flsub->___fladd
    ___fladd->_fround
    ___flge->___fladd

Critical Paths under _highIsr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_display

Critical Paths under _highIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _highIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _highIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _highIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _highIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _highIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _highIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _highIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _highIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _highIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _highIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _highIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _highIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _highIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   92637
                                             97 BANK0      5     5      0
                            ___flmul
                           _delay_ms
                            _display
                     _initInterrupts
                    _init_adc_no_lib
                          _init_pwm1
                           _lcd_init
                           _lcd_putc
                          _operation
                   _read_adc_voltage
                         _setupPorts
 ---------------------------------------------------------------------------------
 (1) _setupPorts                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_adc_voltage                                    11     7      4    3695
                                             71 COMRAM    11     7      4
                            ___fldiv
                             ___wmul
                           ___xxtofl
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (1) _operation                                           12    12      0   16370
                                             54 BANK0     12    12      0
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                           _delay_ms
                _read_adc_raw_no_lib
                       _set_pwm1_raw
 ---------------------------------------------------------------------------------
 (2) _set_pwm1_raw                                         4     2      2     576
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _read_adc_raw_no_lib                                  7     5      2      45
                                             26 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    2265
                                             46 COMRAM    25    17      8
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    1920
                                             36 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (1) _init_pwm1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_adc_no_lib                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initInterrupts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _display                                            130   130      0   59664
                                              0 BANK1    130   130      0
                         _lcd_gotoxy
                           _lcd_putc
                           _lcd_puts
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             44    36      8   48591
                                             54 BANK0     43    35      8
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                9     5      4   10686
                                             83 COMRAM     4     0      4
                                             13 BANK0      5     5      0
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             26 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13     9      4   10407
                                             83 COMRAM     4     0      4
                                             13 BANK0      9     9      0
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    6473
                                             71 COMRAM    12     4      8
                                              0 BANK0     13    13      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1764
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1820
                                             32 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         17     9      8     455
                                             26 COMRAM    17     9      8
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          14     6      8     455
                                             26 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     550
                                             32 COMRAM    14    10      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     767
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     767
                                             39 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     618
                                             26 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     761
                                             18 BANK0     10     6      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    3801
                                             42 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fladd                                             20    12      8    3478
                                             22 BANK0     20    12      8
                            ___flneg (ARG)
                           ___xxtofl (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flneg                                              4     0      4     425
                                             46 COMRAM     4     0      4
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    1094
                                             42 BANK0     12     4      8
                            ___fladd (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             2     0      2    4426
                                             40 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (1) _lcd_putc                                             1     1      0    3849
                                             39 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           3     2      1    2067
                                             36 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        2     1      1    1236
                                             34 COMRAM     2     1      1
                       _delay_cycles
                           _delay_ms
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_send_nibble                                      2     2      0      68
                                             32 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (4) _delay_cycles                                         6     6      0      46
                                             26 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             4     2      2     502
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _highIsr                                             20    20      0     348
                                              6 COMRAM    20    20      0
                          i2___awmod
 ---------------------------------------------------------------------------------
 (9) i2___awmod                                            6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___flmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___fldiv (ARG)
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
   _delay_ms
   _display
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_putc
       _delay_ms
       _lcd_gotoxy
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___fladd
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fldiv (ARG)
               ___wmul (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
       ___flge
         ___fladd (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fldiv (ARG)
                 ___wmul (ARG)
                 ___xxtofl (ARG)
                   ___wmul (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
       ___flneg
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___flsub
         ___fladd
           ___flneg (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fldiv (ARG)
                 ___wmul (ARG)
                 ___xxtofl (ARG)
                   ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___fltol
         ___fldiv (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fldiv (ARG)
               ___wmul (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       ___xxtofl
         ___wmul (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
   _initInterrupts
   _init_adc_no_lib
   _init_pwm1
   _lcd_init
     _delay_ms
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _lcd_putc
     _delay_ms
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _operation
     ___fladd
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
     ___fldiv
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___flge
       ___fladd (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fldiv (ARG)
               ___wmul (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___fldiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
     ___flneg
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___fltol
       ___fldiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
     ___xxtofl
       ___wmul (ARG)
     _delay_ms
     _read_adc_raw_no_lib
     _set_pwm1_raw
   _read_adc_voltage
     ___fldiv
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___wmul
     ___xxtofl
       ___wmul (ARG)
     _read_adc_raw_no_lib
   _setupPorts

 _highIsr (ROOT)
   i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     82      A6       7       64.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     66      7C       5       96.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     57      63       1       78.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     185      34        0.0%
DATA                 0      0     185       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jun 23 22:02:15 2024

            ?_read_adc_voltage 0048                   ___fldiv@aexp 0047                   ___fldiv@bexp 0046  
                 ___fldiv@sign 003B             ??_read_adc_voltage 004C                             _AN 00E6  
                           _HC 01A2                             _HS 005F                 ?_lcd_send_byte 0023  
                 ___awdiv@sign 0026                             _ft 0058                             _sp 00F2  
          ___wmul@multiplicand 001D                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                  __CFG_OSC$XT 000000                    __CFG_LVP$ON 000000                    __CFG_WDT$ON 000000  
                          l202 2B7A                            l203 2B3E                            l211 2B10  
                          l123 158A                            l131 139A                            l212 2AE6  
                          l140 1E2C                            l132 14F4                            l124 125C  
                          l205 2B56                            l141 1EBE                            l133 147E  
                          l206 2B62                            l142 1E46                            l150 260C  
                          l207 2B6E                            l143 1E66                            l151 2628  
                          l144 1E86                            l128 1294                            l129 1308  
                          l402 053C                            l139 1EA4                            l172 2DA0  
                          l420 0700                            l412 0696                            l173 2D9A  
                          l181 2C64                            l421 0842                            l413 0602  
                          l237 2D0E                            l166 2DFA                            l342 1DDA  
                          l350 0E24                            l422 0760                            l406 05A8  
                          l167 2DEC                            l415 06B6                            l352 0EDC  
                          l440 09B0                            l432 0918                            l424 0864  
                          l416 06A0                            l408 05D4                            l193 2CCC  
                          l345 0CE6                            l425 084E                            l409 05BE  
                          l361 013A                            l194 2CBA                            l346 0C02  
                          l434 0938                            l418 06DA                            l370 021C  
                          l362 0124                            l186 2A9E                            l195 2CE6  
                          l339 1CFC                            l435 095A                            l427 08A8  
                          l419 06DE                            l363 00EC                            l196 2CBE  
                          l620 27F6                            l428 08C0                            l380 01C6  
                          l356 0020                            l188 2AC6                            l197 2CC2  
                          l621 27EE                            l349 0CBA                            l445 0A80  
                          l437 097C                            l381 01AA                            l373 014C  
                          l357 003C                            l198 2CC6                            l630 2950  
                          l446 09F8                            l438 0984                            l366 01EC  
                          l374 0168                            l631 295C                            l439 09A8  
                          l391 0398                            l383 01DA                            l375 017E  
                          l359 006A                            l704 2786                            l624 2816  
                          l384 086E                            l392 03E2                            l705 277A  
                          l625 2820                            l617 27C8                            l633 2972  
                          l393 04C4                            l385 0230                            l377 0198  
                          l369 0148                            l626 282E                            l618 27D8  
                          l634 296A                            l386 027E                            l378 0188  
                          l707 27A2                            l651 22E0                            l652 2322  
                          l396 045E                            l388 02EA                            l661 23B4  
                          l653 2352                            l637 298A                            l813 2E5E  
                          l389 036A                            l662 23A8                            l638 2994  
                          l655 2390                            l639 29A2                            l840 28DC  
                          l656 2380                            l760 2258                            l673 2D7C  
                          l921 15D8                            l649 22C2                            l753 219E  
                          l666 2402                            l930 1640                            l922 15D4  
                          l850 2A2E                            l667 2436                            l843 291C  
                          l755 21CA                            l668 2474                            l940 171C  
                          l844 292A                            l756 2204                            l669 24B2  
                          l933 16F8                            l853 2A62                            l765 228C  
                          l757 222C                            l934 16D6                            l926 1620  
                          l854 2A70                            l766 2280                            l943 1740  
                          l935 16E4                            l927 161C                            l839 28E8  
                          l759 2268                            l952 1812                            l944 1744  
                          l936 16E8                            l696 26F6                            l961 1852  
                          l929 167C                            l849 2A3A                            l970 18C8  
                          l954 1828                            l698 2762                            l947 17DE  
                          l939 1756                            l699 2752                            l964 1898  
                          l956 1832                            l949 17EE                            l990 1A48  
                          l982 1954                            l983 1950                            l968 18BE  
                          l992 1A6E                            l969 18C6                            l985 199A  
                          l978 1914                            l995 1AA4                            l987 19C2  
                          l979 1910                            l996 1A86                            l988 1A70  
                          l989 1A20                   __CFG_CPB$OFF 000000                            _PR2 000FCB  
                 __CFG_CPD$OFF 000000                            _RPS 005A                            _lcd 000F83  
                 ___awmod@sign 0020                            prod 000FF3      read_adc_voltage@raw_value 0050  
                          wreg 000FE8                   ___flmul@aexp 0081                   ___flmul@bexp 0086  
                 ___flmul@sign 0080                   ___flmul@temp 008B                   ___flmul@prod 0087  
                  main@channel 00E5                    lcd_gotoxy@x 0026                    lcd_gotoxy@y 0025  
                 ___fltol@exp1 009B                    display@LCDP 0100                           l1002 1ADC  
                         l1012 0F3A                           l1004 1B20                           l1013 0F36  
                         l1005 1B44                           l1030 11A0                           l1014 0F4A  
                         l1006 1B6E                           l1023 1168                           l1007 1B7A  
                         l1040 2060                           l1032 11E4                           l1024 114A  
                         l1016 0F7A                           l1008 1B7C                           l1041 2070  
                         l1033 1202                           l1017 0F76                           l1050 2110  
                         l1042 208E                           l1018 0F8A                           l1051 2104  
                         l1035 1226                           l1019 0FA8                           l1044 20A0  
                         l1036 1244                           l1045 2094                           l1055 212E  
                         l1047 20DE                           l1056 2160                           l1048 20C6  
                         l5002 09F8                           l5006 0A7C                           l4330 2A96  
                         l4138 1B6E                           l2832 24EA                           l4344 2ABE  
                         l5084 1E42                           l5174 2620                           l5098 1E80  
                         l4822 0430                           l4814 03E2                           l4750 01AA  
                         l4744 0188                           l4842 0540                           l4862 05BE  
                         l4866 05CE                           l4948 08C4                           l4886 06A0  
                         STR_1 FF7B                           STR_2 FF90                           STR_3 FFA5  
                         STR_4 FFBA                           STR_5 FFE5                           STR_6 FFFB  
                         STR_7 FFCD                           STR_8 FFF0                           STR_9 FFD9  
                         u3110 2976                           u3050 27FA                           u3310 2292  
                         u3231 2182                           u2425 2C34                           u2426 2C36  
                         u2530 16AC                           u3251 21AE                           u2540 16BC  
                         u3500 278C                           _IPR1 000F9F                           u4230 2B08  
                         u2710 1836                           u2550 16BE                           u5030 00C8  
                         _IPR2 000FA2                           _PIE1 000F9D                           u4240 2B32  
                         _PIE2 000FA0                           u3530 28EC                           u2740 184E  
                         u2580 1700                           u3460 2714                           u3380 23BA  
                         u5220 0430                           u4237 2AFE                           u4430 1AD8  
                         u4247 2B28                           u3560 2A3E                           u3640 211A  
                         u5320 06C4                           u3465 270A                           u5330 06D4  
                         u5500 09B8                           u5420 08FC                           u5260 0578  
                         u5180 03A8                           u4460 1B2E                           u2790 18A4  
                         u5510 09D6                           u5190 03F4                           u4470 1B52  
                         u4560 2AB4                           u5530 0A90                           u5290 05E2  
                         u4820 0F96                           u5540 0AAA                           u5620 2664  
                         u4910 11F2                           u4830 110C                           u4920 1210  
                         _PIR1 000F9E                           _PIR2 000FA1                           u4835 1102  
                         u5575 1378                           u4880 119C                           u5667 2C5C  
                         u5677 2DEE               ?_lcd_send_nibble 0001                           _main 25EA  
                         _mode 005E                           _temp 00F6                           fsr0h 000FEA  
                         fsr1h 000FE2                           fsr2h 000FDA                           fsr0l 000FE9  
                         indf1 000FE7                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 0064                           prodh 000FF4  
                         prodl 000FF3                           start 000E                  __CFG_IESO$OFF 000000  
              ___fldiv@new_exp 0040                    main@voltage 00E1                   _sprintf$1941 00C2  
                __CFG_MCLRE$ON 000000                   ___param_bank 000000           __end_of_delay_cycles 2DBC  
                ___fltol@sign1 009A                __end_of___fladd 18E4                          ?_main 0001  
              __end_of___fldiv 1B98                __end_of___awdiv 2838                __end_of___flneg 2D8E  
                        STR_10 FFF7                __end_of___awmod 29AC                __end_of___flmul 125A  
              __end_of___flsub 2C2A                __end_of___fltol 27B4                __end_of___lldiv 293C  
              ___awdiv@divisor 0023                __end_of___llmod 2A82                          _T2CON 000FCA  
                        _T3CON 000FB1                          i2l116 255E                          i2l118 259A  
                        i2l630 29C0                          i2l631 29CC                          i2l633 29E2  
                        i2l634 29DA                          i2l637 29FA                          i2l638 2A04  
                        i2l639 2A12                ___awdiv@counter 0025                          _RCREG 000FAE  
                        _RCSTA 000FAB                          _SPBRG 000FAF        read_adc_voltage@channel 0052  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TRISD 000F95                          _TRISE 000F96                          _TXREG 000FAD  
                        _TXSTA 000FAC                  __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
               __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000  
               __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000                __end_of_highIsr 25EA  
                __CFG_WRTB$OFF 000000                __end_of_display 2022                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000                 __CFG_EBTRB$OFF 000000                __end_of_dpowers FF7B  
                        _scale 0AB8                __end_of_isdigit 2E66                _init_adc_no_lib 2E7E  
                        pclath 000FFA                          tablat 000FF5                          status 000FD8  
      read_adc_voltage@voltage 004C                          wtemp6 0065                __end_of_sprintf 0AB8  
           __size_ofi2___awmod 0070                 __CFG_PBADEN$ON 000000                __initialization 2B90  
                 __end_of_main 26D6                ??_lcd_send_byte 0024                         ??_main 0058  
                __activetblptr 000002           __size_of__tdiv_to_l_ 0132                         _ADCON0 000FC2  
                       _ADCON1 000FC1                         _ADCON2 000FC0               ___llmod@dividend 0028  
                       ?_scale 0054                         _ADRESH 000FC4                         _ADRESL 000FC3  
                       _CCPR2H 000FBC                         _CCPR1L 000FBE                         _CCPR2L 000FBB  
             ___awdiv@dividend 0021                         _INTCON 000FF2                         _SPBRGH 000FB0  
             __end_of___xxtofl 2172               __end_of_delay_ms 2E08                         _Buffer 0182  
               __CFG_XINST$OFF 000000               __end_of__powers_ FF1F               __end_of_lcd_init 2AE4  
                       ___flge 23CC               __end_of_lcd_putc 2B90               __end_of_lcd_puts 2B3A  
                    ??___fladd 009E                         ___wmul 2DBC                      ??___fldiv 0037  
                    ??___awdiv 0025                      ??___flneg 0033                 __CFG_STVREN$ON 000000  
                    ??___awmod 001F                      ??___flmul 0050                      ??___flsub 0058  
                    ??___fltol 0096                      ??___lldiv 0023                      ??___llmod 0030  
                       _fround 1B98                         clear_0 2BB6                         clear_1 2BC2  
                       clear_2 2BCE               ___awdiv@quotient 0027                ___awmod@divisor 001D  
              ___awmod@counter 001F                      ??_highIsr 0007                      ??_display 0058  
      __end_of_init_adc_no_lib 2E8A                   __pdataCOMRAM 0060                      ??_isdigit 001B  
            __end_ofi2___awmod 2A1C                   __mediumconst FEEA                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                 i2___awmod@sign 0006  
                    ??_sprintf 00BE                     ___flge@ff1 00AA                     ___flge@ff2 00AE  
                 ___xxtofl@arg 002B                   ___xxtofl@exp 002A                   ___xxtofl@val 0021  
                   __accesstop 0080        __end_of__initialization 2BD4                     ___flneg@f1 002F  
                ___rparam_used 000001                     ___fltol@f1 0092                 __pcstackCOMRAM 0001  
        __size_of_delay_cycles 002E        __size_of_initInterrupts 0044                  __end_of_scale 0F08  
                   __div_to_l_ 22A4      __size_of_read_adc_voltage 0082              lcd_gotoxy@address 0027  
              __div_to_l_@exp1 0028                __div_to_l_@cntr 0027                        ??_scale 0058  
              __div_to_l_@quot 0023                   sprintf@width 00D8                     __pbssBANK0 00E6  
                   __pbssBANK1 0182    __end_of_read_adc_raw_no_lib 2D32                   _delay_cycles 2D8E  
                __div_to_l_@f1 001B                  __div_to_l_@f2 001F             __size_of_init_pwm1 0018  
               lcd_send_byte@n 0023                        ?___flge 00AA                        ?___wmul 001B  
             lcd_send_nibble@n 0022                        _CCP1CON 000FBD                        _CCP2CON 000FBA  
                      ?_fround 0054             __size_of_operation 034C               ?_init_adc_no_lib 0001  
                      _INTCON2 000FF1                      ?___xxtofl 0021                      ?_delay_ms 001B  
                   _lcd_gotoxy 2CB6                      ?_lcd_init 0001                      ?_lcd_putc 0001  
                    ?_lcd_puts 0029              __end_of__npowers_ FF53                        __Hparam 0000  
                   _scale$1940 008D                        __Lparam 0000       __size_of_lcd_send_nibble 0022  
              __size_of___flge 0122                        ___fladd 15A6                        ___fldiv 18E4  
                      ___awdiv 27B4                        ___flneg 2D60                        ___awmod 293C  
                      ___flmul 0F08                        ___flsub 2BE2                        ___fltol 26D6  
                      ___lldiv 28BA                __size_of___wmul 0026                        ___llmod 2A1C  
                ?_set_pwm1_raw 001B                        __pcinit 2B90                __size_of_fround 0292  
                      __ramtop 1000                        __ptext0 25EA                        __ptext1 2E2A  
                      __ptext2 2838                        __ptext3 125A                        __ptext4 2D32  
                      __ptext5 2CF8                        __ptext6 18E4                        __ptext7 2A82  
                      __ptext8 2E66                        __ptext9 2E7E                        _highIsr 0008  
                      _display 1E2A                    ?__div_to_l_ 001B                        _dpowers FF53  
                    _T2CONbits 000FCA                        _isdigit 2E48                     ??___xxtofl 0025  
                    _T3CONbits 000FB1              __end_of_init_pwm1 2E7E               ___awmod@dividend 001B  
                      _raw_val 00FA                     ??_delay_ms 001D                        _sprintf 0012  
                   ??_lcd_init 0025                 __pintcode_body 24EE                     ??_lcd_putc 0028  
                   ??_lcd_puts 002B           end_of_initialization 2BD4                  __Lmediumconst FEEA  
                      int_func 24EE              __end_of_operation 15A6           lcd_send_byte@cm_data 0024  
              ___lldiv@divisor 001F                ___lldiv@counter 0027                      _RCSTAbits 000FAB  
                      postdec1 000FE5                        postdec2 000FDD                 _initInterrupts 2C72  
                      postinc0 000FEE                        postinc2 000FDE                 ??_set_pwm1_raw 001D  
               __tdiv_to_l_@f1 001B                 __tdiv_to_l_@f2 001F          __end_of_lcd_send_byte 2C72  
                ??__tdiv_to_l_ 0023                      _PORTBbits 000F81                      _PORTCbits 000F82  
                    _PORTEbits 000F84                     _setupPorts 2E2A                    ___fladd@grs 00A9  
                ___xxtofl@sign 0029               _read_adc_voltage 2838                      _TRISCbits 000F94  
                  ?_lcd_gotoxy 0025                    ___fldiv@grs 0042                    ___fldiv@rem 003C  
                    i2___awmod 29AC                _LCD_INIT_STRING 0060                      _RPS_count 005C  
                  ___flmul@grs 0082                    _CCP1CONbits 000FBD                     display@LCD 0140  
                    _TXSTAbits 000FAC            __size_of__div_to_l_ 0128         __end_of_initInterrupts 2CB6  
               __end_of___flge 24EE                 __end_of___wmul 2DE2                    _BAUDCONbits 000FB8  
                __pidataCOMRAM 2E8A                  delay_cycles@n 001E                  delay_cycles@x 001F  
            ??_lcd_send_nibble 0021                 __end_of_fround 1E2A            start_initialization 2B90  
          __end_of__tdiv_to_l_ 22A4                     ?i2___awmod 0001                ___llmod@divisor 002C  
              ___llmod@counter 0030                ?_initInterrupts 0001                       ??___flge 00B2  
          __size_of_lcd_gotoxy 0042                       ??___wmul 001F   read_adc_raw_no_lib@raw_value 001F  
             __CFG_LPT1OSC$OFF 000000                       ??_fround 0058                  sprintf@tmpval 00CE  
                  ?_setupPorts 0001                      ___fladd@a 009A                      ___fladd@b 0096  
                   fround@prec 0095                      ___fldiv@a 0033                      ___fldiv@b 002F  
                    ___flmul@a 004C                      ___flmul@b 0048                    __pbssCOMRAM 0058  
                    ___flsub@a 00AE                      ___flsub@b 00AA                  __pcstackBANK0 0080  
                __pcstackBANK1 0100              __size_of___xxtofl 0150                   _isdigit$1565 001C  
            __size_of_delay_ms 0026           __end_of_set_pwm1_raw 2D60              __size_of_lcd_init 0062  
                  sprintf@flag 00CC              __size_of_lcd_putc 0056              __size_of_lcd_puts 0056  
                  sprintf@fval 00DA                    sprintf@prec 00DE              __CFG_CCP2MX$PORTC 000000  
                    __pintcode 0008   __size_of_read_adc_raw_no_lib 003A                  __pmediumconst FEEA  
                     ?___fladd 0096                       ?___fldiv 002F                       ?___awdiv 0021  
                     ?___flneg 002F                       ?___awmod 001B                       ?___flmul 0048  
                     ?___flsub 00AA                       ?___fltol 0092                       ?___lldiv 001B  
                     ?___llmod 0028                      __npowers_ FF1F                    __tdiv_to_l_ 2172  
                     ?_highIsr 0001                       ?_display 0001                   ??__div_to_l_ 0023  
                     ?_isdigit 0001                    ??i2___awmod 0005                       ?_sprintf 00B6  
                    _init_pwm1 2E66                 __size_of_scale 0450       __size_of_init_adc_no_lib 000C  
               ___wmul@product 001F                      delay_ms@n 001B                      delay_ms@x 001D  
                     _PIE2bits 000FA0            __size_of_setupPorts 001E                       _PIR1bits 000F9E  
           __end_of__div_to_l_ 23CC                       _PIR2bits 000FA1       __end_of_read_adc_voltage 28BA  
                     i2u462_40 29E6                      _operation 125A                       i2u568_47 2546  
                     i2u569_47 256C                       _RCONbits 000FD0               __CFG_WDTPS$32768 000000  
   read_adc_raw_no_lib@channel 0021                     _ADCON0bits 000FC2              ___wmul@multiplier 001B  
                    lcd_init@i 0025                      lcd_putc@c 0028                      lcd_puts@s 0029  
                 ??_lcd_gotoxy 0026                     ?_init_pwm1 0001                    _INTCON2bits 000FF1  
                  _INTCON3bits 000FF0                      copy_data0 2BA4             i2___awmod@dividend 0001  
              _lcd_send_nibble 2E08                       __Hrparam 0000          set_pwm1_raw@raw_value 001B  
                   ?_operation 0001                       __Lrparam 0000             __CFG_BOREN$SBORDIS 000000  
           __end_of_lcd_gotoxy 2CF8               __size_of___fladd 033E               __size_of___fldiv 02B4  
             __size_of___awdiv 0084               __size_of___flneg 002E               __size_of___awmod 0070  
             __size_of___flmul 0352               __size_of___flsub 0048               __size_of___fltol 00DE  
             __size_of___lldiv 0082               __size_of___llmod 0066                    _fround$1938 0091  
                  _fround$1939 008D               __size_of_highIsr 25E2               __size_of_display 01F8  
                   sprintf@len 00CA                     sprintf@exp 00D6                     sprintf@val 00D2  
                     ___xxtofl 2022          __size_of_set_pwm1_raw 002E               __size_of_isdigit 001E  
                     _delay_ms 2DE2                       __ptext10 2C72                       __ptext11 1E2A  
                     __ptext20 22A4                       __ptext12 0012                       __ptext21 2022  
                     __ptext13 0AB8                       __ptext30 2AE4                       __ptext22 2DBC  
                     __ptext14 2E48                       __ptext31 2B3A                       __ptext23 2A1C  
                     __ptext15 1B98                       __ptext32 2CB6                       __ptext24 28BA  
                     __ptext16 0F08                       __ptext33 2C2A                       __ptext25 26D6  
                     __ptext17 293C                       __ptext34 2E08                       __ptext26 2BE2  
                     __ptext18 27B4                       __ptext35 2D8E                       __ptext27 15A6  
                     __ptext19 2172                       __ptext36 2DE2                       __ptext28 2D60  
                     __ptext29 23CC                       __ptext38 29AC                       __powers_ FEEB  
                     _lcd_init 2A82                       _lcd_putc 2B3A                       _lcd_puts 2AE4  
             __size_of_sprintf 0AA6               ??_initInterrupts 001B         __size_of_lcd_send_byte 0048  
                ?_delay_cycles 0001             operation@CoolError 00B8                  __size_of_main 00EC  
            ??_init_adc_no_lib 001B                       int$flags 0064                   _set_pwm1_raw 2D32  
                     display@C 0180                       display@H 0181                   ??_setupPorts 001B  
            i2___awmod@divisor 0003              i2___awmod@counter 0005                     _INTCONbits 000FF2  
       operation@compare_value 00C0                       isdigit@c 001D            _read_adc_raw_no_lib 2CF8  
operation@PWM_percentage_value 00BC                       scale@scl 0091                    ??_init_pwm1 001B  
                     intlevel2 0000                      sprintf@ap 00C8                      sprintf@cp 00C6  
      __end_of_lcd_send_nibble 2E2A               __tdiv_to_l_@exp1 002B               __tdiv_to_l_@cntr 002A  
                    sprintf@sp 00B6                 ??_delay_cycles 001B               __tdiv_to_l_@quot 0026  
             ___lldiv@dividend 001B             __end_of_setupPorts 2E48                    ??_operation 00B6  
         ?_read_adc_raw_no_lib 001B                  _lcd_send_byte 2C2A                   ?__tdiv_to_l_ 001B  
                     sprintf@c 00E0                       sprintf@f 00B8               ___lldiv@quotient 0023  
                ___fladd@signs 00A6                   ___fladd@aexp 00A7                   ___fladd@bexp 00A8  
        ??_read_adc_raw_no_lib 001D  
